
HEXIWEAR_RTOS is a modification of the standard Hexiwear software project - HEXIWEAR_MK64.
This project retains all the FreeRTOS functionalities of the original,
as well as some supplementray code (hardware abstraction, KW40 UART communication, OLED display etc.).

This project will allow users to fully utilize the same FreeRTOS used in HEXIWEAR_MK64
and write their own applications for driving the Hexiwear hardware
as well as any of the numerous click boards via the docking station,
without dealing with the bigger and more complex code structure of HEXIWEAR_MK64
(mainly in the form of its large GUI module, main purpose of which is user friendliness).

All the source code is located in the /code directory.
It contains several folders in which code is logically organized:
	/error			- routines for handling errors in the project
	/HEXIWEAR		- main functionalities of the hexiwear software,
				including initialisation of all the modules which rely on FreeRTOS
	/intern_flash	- internal FLASH functionality
	/intf			- UART communication interface with KW40,
				here used for receving messages of buttons being pressed
	/OLED			- OLED display driver
	/PEx			- driver configuration and hardware initialization code,
				generated by Processor Expert
	/project_settings	- some FreeRTOS and general system configurations
	/protocols		- drivers for SPI and I2C communication protocols
	/SDK			- hardware abstraction code, and FreeRTOS

In addition, /code itself contains files with interrupt handler routines and the main function.

Main points of interest for developing applications would be the FreeRTOS functionalities,
receiving messages from KW40 of buttons being pressed, and the OLED driver.

FreeRTOS can be used in its original form, located in /code/SDK/rtos,
or through the OS abstraction layer, which functionalities are located in /code/SDK/platform/osa.
It may be easier to write code using the abstraction layer functions.

KW40 will send a message when one of the four buttons (up, down, left, right) is tapped.
The message is received by a receiver task and added to the queue of received messages.
This is done in the function PacketHandler in /code/intf/src/host_mcu_interface_rx.c.

The messages, containing information about which button was pressed,
can be received from the same queue (using HostInterface_CmdQueueMsgGet) by another task
which would then take the appropriate action according to the pressed button.

For communication with external boards (most likely click boards)
a driver for an appropriate communication protocol can be used.
These are located in /code/SDK/platform/hal.

A very simple example of a running program is given in the the main source file - /code/main.c.
There a single user task is created, called Task1. It initialises the OLED display
and receives messages about the pressed buttons, with at least half a second between two receives.
It will then display a message on the screen indicating which button was pressed.
The task is created (and set to run) in the main function in the same file.

This example can serve as a code skeleton for writing a bigger application.