
HEXIWEAR_RTOS.elf:     file format elf32-littlearm
HEXIWEAR_RTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000004d9

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00000400 memsz 0x00000400 flags r--
    LOAD off    0x00008400 vaddr 0x00000400 paddr 0x00000400 align 2**15
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00008410 vaddr 0x00000410 paddr 0x00000410 align 2**15
         filesz 0x000087d8 memsz 0x000087d8 flags rwx
    LOAD off    0x00018400 vaddr 0x1fff0400 paddr 0x00008be8 align 2**15
         filesz 0x00000124 memsz 0x00000124 flags rw-
    LOAD off    0x00020000 vaddr 0x1fff0000 paddr 0x00008d0c align 2**15
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00018540 vaddr 0x1fff0540 paddr 0x00008d40 align 2**15
         filesz 0x00000000 memsz 0x00009a18 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**15
         filesz 0x00000000 memsz 0x0002ffff flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   00000400  00000000  00000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config 00000010  00000400  00000400  00008400  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000087c8  00000410  00000410  00008410  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM          00000008  00008bd8  00008bd8  00010bd8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  00008be0  00008be0  00010be0  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  00008be4  00008be4  00010be4  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000124  1fff0400  00008be8  00018400  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .m_interrupts_ram 00000400  1fff0000  00008d0c  00020000  2**0  ALLOC
  8 .bss          00009a18  1fff0540  00008d40  00018540  2**5  ALLOC
  9 .heap         0001ffff  20000000  20000000  00020000  2**0  ALLOC
 10 .stack        00010000  2001ffff  2001ffff  00020000  2**0  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018524  2**0  CONTENTS, READONLY
 12 .debug_info   000409be  00000000  00000000  00018554  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009e39  00000000  00000000  00058f12  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017fe1  00000000  00000000  00062d4b  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a00  00000000  00000000  0007ad30  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000020c0  00000000  00000000  0007c730  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b54  00000000  00000000  0007e7f0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ef8b  00000000  00000000  00093344  2**0  CONTENTS, READONLY, DEBUGGING
 19 .comment      00000070  00000000  00000000  000a22cf  2**0  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000a2340  2**2  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000cc  00000000  00000000  000a6800  2**2  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a68cc  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .interrupts	00000000 .interrupts
00000400 l    d  .flash_config	00000000 .flash_config
00000410 l    d  .text	00000000 .text
00008bd8 l    d  .ARM	00000000 .ARM
00008be0 l    d  .init_array	00000000 .init_array
00008be4 l    d  .fini_array	00000000 .fini_array
1fff0400 l    d  .data	00000000 .data
1fff0000 l    d  .m_interrupts_ram	00000000 .m_interrupts_ram
1fff0540 l    d  .bss	00000000 .bss
20000000 l    d  .heap	00000000 .heap
2001ffff l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ./code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.o
00000000 l    df *ABS*	00000000 crtstuff.c
00008bc0 l     O .text	00000000 __EH_FRAME_BEGIN__
1fff0520 l     O .data	00000000 __JCR_LIST__
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff0540 l       .bss	00000000 completed.7863
00008be4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00000434 l     F .text	00000000 frame_dummy
1fff0544 l       .bss	00000000 object.7868
00008be0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 c:/freescale/kds_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/../../../../arm-none-eabi/lib/armv7e-m/fpu/crt0.o
00000000 l    df *ABS*	00000000 generic_spi_driver.c
1fff055c l     O .bss	00000004 spiNum_ON
00000000 l    df *ABS*	00000000 host_mcu_interface.c
00000000 l    df *ABS*	00000000 host_mcu_interface_events.c
1fff056c l     O .bss	00000008 hostInterface_okConfirmEvent
00000000 l    df *ABS*	00000000 host_mcu_interface_rx.c
000005b4 l     F .text	0000004c HostInterface_RxTask
000006b0 l     F .text	000000a4 HostInterface_RxCallback
1fff0574 l     O .bss	0000001c hostInterface_rxPacket
1fff0590 l     O .bss	00000001 hostInterface_rxState
1fff0598 l     O .bss	00000001 byteCount.11812
1fff059c l     O .bss	00000004 hostInterface_rxQueueHnd
00000000 l    df *ABS*	00000000 host_mcu_interface_tx.c
00000778 l     F .text	00000030 HostInterface_OkTask
1fff0400 l     O .data	0000001c hostInterface_okPacket
00000000 l    df *ABS*	00000000 flash_boot_kinetis.c
000007e0 l     F .text	00000018 ExecuteOnStackStart
00000000 l    df *ABS*	00000000 error.c
00000000 l    df *ABS*	00000000 event_groups.c
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 queue.c
00000a9a l     F .text	00000066 prvCopyDataToQueue
00000b00 l     F .text	00000026 prvCopyDataFromQueue
00000b26 l     F .text	00000064 prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
0000100c l     F .text	00000024 prvResetNextTaskUnblockTime
00001030 l     F .text	00000050 prvAddCurrentTaskToDelayedList
0000155c l     F .text	00000068 prvIdleTask
1fff067c l     O .bss	00000004 xNumOfOverflows
1fff0680 l     O .bss	00000004 pxDelayedTaskList
1fff0684 l     O .bss	00000004 xSchedulerRunning
1fff0688 l     O .bss	00000004 uxTasksDeleted
1fff068c l     O .bss	00000014 xDelayedTaskList1
1fff06a0 l     O .bss	00000014 xDelayedTaskList2
1fff06b4 l     O .bss	00000004 uxPendedTicks
1fff06b8 l     O .bss	00000500 pxReadyTasksLists
1fff0bb8 l     O .bss	00000014 xTasksWaitingTermination
1fff0bd0 l     O .bss	00000014 xPendingReadyList
1fff0be4 l     O .bss	00000004 uxSchedulerSuspended
1fff0be8 l     O .bss	00000004 xTickCount
1fff0bec l     O .bss	00000004 pxOverflowDelayedTaskList
1fff0bf0 l     O .bss	00000004 uxTaskNumber
1fff0bf4 l     O .bss	00000004 uxCurrentNumberOfTasks
1fff041c l     O .data	00000004 xNextTaskUnblockTime
1fff0bf8 l     O .bss	00000014 xSuspendedTaskList
1fff0c0c l     O .bss	00000004 uxTopReadyPriority
1fff0c10 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
000019c0 l     F .text	0000003c prvInsertTimerInActiveList
000019fc l     F .text	00000064 prvCheckForValidListAndQueue
00001b54 l     F .text	0000018c prvTimerTask
00001ae8 l     F .text	0000006c prvSwitchTimerLists
1fff0c14 l     O .bss	00000004 pxCurrentTimerList
1fff0c18 l     O .bss	00000014 xActiveTimerList1
1fff0c2c l     O .bss	00000014 xActiveTimerList2
1fff0c40 l     O .bss	00000004 xTimerQueue
1fff0c44 l     O .bss	00000004 pxOverflowTimerList
1fff0c48 l     O .bss	00000004 xLastTime.4707
00000000 l    df *ABS*	00000000 port.c
00001e40 l       .text	00000000 pxCurrentTCBConst2
00001e90 l       .text	00000000 pxCurrentTCBConst
1fff0420 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 fsl_misc_utilities.c
1fff0c4c l     O .bss	00000004 heap_end.4960
00000000 l    df *ABS*	00000000 fsl_clock_MK64F12.c
00001ed4 l     F .text	00000010 SIM_HAL_EnableClock.constprop.12
00006df0 l     O .text	00000019 __func__.7818
00006e09 l     O .text	00000006 uartGateTable
00006e0f l     O .text	00000005 portGateTable
00006e14 l     O .text	00000003 i2cGateTable
00006e17 l     O .text	0000001a __func__.7753
00006e31 l     O .text	0000001a __func__.7831
0000705a l     O .text	00000019 __func__.7805
00007073 l     O .text	00000019 __func__.7766
0000708c l     O .text	00000003 spiGateTable
0000708f l     O .text	00000002 adcGateTable
00000000 l    df *ABS*	00000000 fsl_os_abstraction_free_rtos.c
00007098 l     O .text	00000010 __func__.6819
000070a8 l     O .text	0000000f __func__.6775
000070b7 l     O .text	0000000d __func__.6781
000070c4 l     O .text	0000000e __func__.6827
000070d2 l     O .text	0000000d __func__.6835
000070df l     O .text	0000000d __func__.6792
0000716f l     O .text	00000010 __func__.6800
0000717f l     O .text	00000010 __func__.6810
0000718f l     O .text	0000000e __func__.6806
00000000 l    df *ABS*	00000000 fsl_uart_hal.c
00000000 l    df *ABS*	00000000 fsl_rtc_hal.c
00000000 l    df *ABS*	00000000 fsl_mcg_hal.c
000026f8 l     F .text	0000000a CLOCK_HAL_GetMcgExternalClkFreq
0000719e l     O .text	00000010 fllFactorTable.6323
00000000 l    df *ABS*	00000000 fsl_lptmr_hal.c
00000000 l    df *ABS*	00000000 fsl_i2c_hal.c
000072f1 l     O .text	00000011 __func__.6260
00000000 l    df *ABS*	00000000 fsl_gpio_hal.c
00007302 l     O .text	00000013 __func__.6102
00007315 l     O .text	00000018 __func__.6108
00000000 l    df *ABS*	00000000 fsl_edma_hal.c
00007399 l     O .text	00000021 __func__.6548
000073ba l     O .text	0000001b __func__.6554
000073d5 l     O .text	00000018 __func__.6620
00007488 l     O .text	0000001e __func__.6628
000074a6 l     O .text	0000001b __func__.6614
000074c1 l     O .text	0000001a __func__.6518
000074db l     O .text	00000017 __func__.6524
000074f2 l     O .text	0000001a __func__.6586
0000750c l     O .text	00000017 __func__.6592
00007523 l     O .text	00000022 __func__.6541
00000000 l    df *ABS*	00000000 fsl_dspi_hal.c
00007548 l     O .text	00000040 s_baudrateScaler
00007588 l     O .text	00000010 s_baudratePrescaler
00000000 l    df *ABS*	00000000 fsl_dmamux_hal.c
00000000 l    df *ABS*	00000000 fsl_adc16_hal.c
00007598 l     O .text	00000014 __func__.6231
00000000 l    df *ABS*	00000000 fsl_uart_driver.c
00003210 l     F .text	0000005c UART_DRV_StartSendData
0000326c l     F .text	00000054 UART_DRV_CompleteSendData
000032c0 l     F .text	0000005c UART_DRV_CompleteReceiveData
00007660 l     O .text	0000001b __func__.8919
0000767b l     O .text	0000001a __func__.8938
00007695 l     O .text	0000000e __func__.8896
00007812 l     O .text	0000001a __func__.9019
0000782c l     O .text	00000012 __func__.8869
0000783e l     O .text	00000017 __func__.9027
00007855 l     O .text	0000001d __func__.9033
00000000 l    df *ABS*	00000000 fsl_rtc_driver.c
00003624 l     F .text	00000048 INT_SYS_EnableIRQ
00007931 l     O .text	00000012 __func__.6402
00000000 l    df *ABS*	00000000 fsl_lptmr_driver.c
000036d8 l     F .text	0000004c INT_SYS_DisableIRQ
00007949 l     O .text	0000000f __func__.7948
00007958 l     O .text	00000015 __func__.8000
1fff0c70 l     O .bss	00000004 lptmr_state_ptrs
00007a39 l     O .text	00000012 __func__.6911
00007a4b l     O .text	00000013 __func__.6915
00000000 l    df *ABS*	00000000 fsl_i2c_master_driver.c
000038b8 l     F .text	0000006c I2C_DRV_CompleteTransfer
00007a70 l     O .text	00000013 __func__.8648
00007a83 l     O .text	0000001a __func__.8660
00007a9d l     O .text	00000012 __func__.8605
00007aaf l     O .text	00000019 __func__.8719
00007b63 l     O .text	00000019 __func__.8739
00000000 l    df *ABS*	00000000 fsl_i2c_shared_function.c
00007bed l     O .text	00000013 __func__.6241
00000000 l    df *ABS*	00000000 fsl_i2c_slave_driver.c
00003b44 l     F .text	0000000c I2C_HAL_SetIntCmd
00007c00 l     O .text	00000018 __func__.8709
00000000 l    df *ABS*	00000000 fsl_gpio_driver.c
00003d40 l     F .text	0000001c PORT_HAL_SetMuxMode.part.0
00007cb9 l     O .text	00000012 __func__.7869
00007ccb l     O .text	00000018 __func__.6207
00007ce3 l     O .text	00000014 __func__.6104
00007dbd l     O .text	00000016 __func__.6202
00000000 l    df *ABS*	00000000 fsl_edma_driver.c
00003f54 l     F .text	00000048 INT_SYS_EnableIRQ
00003f9c l     F .text	0000006c EDMA_DRV_ClaimChannel
00007ee3 l     O .text	00000012 __func__.8971
00000000 l    df *ABS*	00000000 fsl_dspi_edma_master_driver.c
00004188 l     F .text	0000005c DSPI_DRV_EdmaMasterCompleteTransfer
000041e4 l     F .text	0000004c EDMA_HAL_HTCDSetChannelMajorLink
00004404 l     F .text	0000052c DSPI_DRV_EdmaMasterStartTransfer
00007f04 l     O .text	00000020 __func__.9322
00007f24 l     O .text	00000012 __func__.9273
00007f36 l     O .text	00000021 __func__.7337
1fff0c90 l     O .bss	00000004 s_cmdData
1fff0c94 l     O .bss	00000002 s_wordToSend
1fff0c98 l     O .bss	00000004 s_lastCmdData
1fff0c9c l     O .bss	00000001 s_rxBuffIfNull
00000000 l    df *ABS*	00000000 fsl_dspi_edma_shared_function.c
0000802b l     O .text	00000018 __func__.6273
00000000 l    df *ABS*	00000000 fsl_dspi_edma_slave_driver.c
00004a18 l     F .text	00000034 EDMA_HAL_HTCDSetIntCmd
00004a4c l     F .text	000000cc DSPI_DRV_EdmaCompleteTransfer
000080d9 l     O .text	00000017 __func__.6832
00000000 l    df *ABS*	00000000 fsl_adc16_driver.c
00008170 l     O .text	00000018 __func__.7919
00008188 l     O .text	0000000f __func__.7889
00008280 l     O .text	00000012 __func__.7857
00000000 l    df *ABS*	00000000 system_MK64F12.c
00000000 l    df *ABS*	00000000 startup.c
00000000 l    df *ABS*	00000000 Cpu.c
00000000 l    df *ABS*	00000000 DEBUG_UART.c
00000000 l    df *ABS*	00000000 DMA_controller.c
00000000 l    df *ABS*	00000000 KW40_UART.c
00000000 l    df *ABS*	00000000 hardware_init.c
00000000 l    df *ABS*	00000000 pin_mux.c
00000000 l    df *ABS*	00000000 test_uart.c
00000000 l    df *ABS*	00000000 OLED_driver.c
00005340 l     F .text	0000005c SendViaSPI
0000539c l     F .text	00000016 AllocateDynamicArea
000053b2 l     F .text	0000001e DestroyDynamicArea
000056a4 l     F .text	00000072 SetBorders
1fff56ac l     O .bss	00000001 currentChar_height
1fff56ad l     O .bss	00000001 currentChar_width
1fff56ae l     O .bss	00000002 selectedFont_height
1fff56b0 l     O .bss	00000002 selectedFont_color
1fff56b4 l     O .bss	0000006c self
1fff5720 l     O .bss	00004800 screenBuf
1fff9f20 l     O .bss	00000002 selectedFont_firstChar
1fff9f24 l     O .bss	00000004 selectedFont
1fff9f28 l     O .bss	00000010 settings
1fff9f38 l     O .bss	00000002 selectedFont_lastChar
1fff04b0 l     O .data	0000000c oled_text_properties
1fff9f3c l     O .bss	00000008 oled_dynamic_area
1fff9f44 l     O .bss	00000001 isFontInitialized
00000000 l    df *ABS*	00000000 HEXIWEAR_driver.c
00000000 l    df *ABS*	00000000 Events.c
00000000 l    df *ABS*	00000000 PE_low_level_init.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000060b8 l     F .text	0000002c __sfputc_r
00000000 l    df *ABS*	00000000 vfprintf_i.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000693c l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 fsl_clock_manager_common.c
00000000 l    df *ABS*	00000000 fsl_uart_common.c
00000000 l    df *ABS*	00000000 fsl_rtc_common.c
00000000 l    df *ABS*	00000000 fsl_lptmr_common.c
00000000 l    df *ABS*	00000000 fsl_i2c_common.c
00000000 l    df *ABS*	00000000 fsl_gpio_common.c
00000000 l    df *ABS*	00000000 fsl_edma_common.c
00000000 l    df *ABS*	00000000 fsl_dspi_common.c
00000000 l    df *ABS*	00000000 fsl_adc16_common.c
00000000 l    df *ABS*	00000000 BATTERY_ADC.c
00000000 l    df *ABS*	00000000 FLASH_SPI.c
00000000 l    df *ABS*	00000000 FS_I2C.c
00000000 l    df *ABS*	00000000 GPIO.c
00000000 l    df *ABS*	00000000 NFS_I2C.c
00000000 l    df *ABS*	00000000 OLED_SPI.c
00000000 l    df *ABS*	00000000 sensor_timer.c
00000000 l    df *ABS*	00000000 OLED_resources.c
00000000 l    df *ABS*	00000000 impure.c
1fff04bc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 c:/freescale/kds_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/freescale/kds_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 OLED_defs.c
00000000 l    df *ABS*	00000000 crtstuff.c
1fff0520 l     O .data	00000000 __JCR_END__
00000000 l    df *ABS*	00000000 host_mcu_interface_defs.c
00000000 l    df *ABS*	00000000 HEXIWEAR_defs.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff0400 l       .data	00000000 __data_start__
0000ffff l       *ABS*	00000000 STACK_SIZE
00008be8 l       .fini_array	00000000 __etext
20000000 l       .bss	00000000 __m_data_2_RAMStart
00000000 l       *UND*	00000000 vPortEndScheduler
0000910c l       .fini_array	00000000 __m_data_2_ROMStart
1fff0524 l       .data	00000000 __data_end__
20000000 l       .bss	00000000 __m_data_2_RAMEnd
0001ffff l       *ABS*	00000000 HEAP_SIZE
00008be4 l       .init_array	00000000 __init_array_end
1fff0400 l       .m_interrupts_ram	00000000 __m_interrupts_ram_RAMEnd
00008be0 l       .init_array	00000000 __preinit_array_end
1fff0000 l       .m_interrupts_ram	00000000 __m_interrupts_ram_RAMStart
20020001 l       *ABS*	00000000 __StackLimit
00008d0c l       .fini_array	00000000 __m_interrupts_ram_ROMStart
00008be0 l       .init_array	00000000 __init_array_start
00008be0 l       .init_array	00000000 __preinit_array_start
00005030 g     F .text	00000148 init_gpio_pins
000082b4 g     O .text	0000000c FLASH_SPI_BusConfig
000004e8  w    F .text	00000004 CAN0_Rx_Warning_IRQHandler
00002ae8 g     F .text	00000070 EDMA_HAL_HTCDSetNbytes
20000000 g       .heap	00000000 __HeapBase
00006cc8 g     F .text	00000020 _isatty_r
0000312c g     F .text	00000010 ADC16_HAL_Init
00006d50 g     F .text	00000010 _getpid
00006ce8 g     F .text	00000024 _lseek_r
000004e8  w    F .text	00000004 DebugMon_Handler
00007ca0 g     O .text	00000014 g_portBase
00001698 g     F .text	0000006c vTaskPlaceOnUnorderedEventList
00008410 g     O .text	0000000c OLED_SPI_BusConfig
00001d7c g     F .text	00000018 vPortExitCritical
1fff0d14 g     O .bss	00000058 FLASH_SPI_MasterState
000057e0 g     F .text	0000004c OLED_SetFont
00005cf6 g     F .text	00000006 I2C0_IRQHandler
00002c84 g     F .text	0000003c EDMA_HAL_STCDSetAttribute
00006ba0 g     F .text	00000024 _kill_r
000025f2 g     F .text	00000024 UART_HAL_FlushTxFifo
000058f8 g     F .text	00000294 OLED_AddText
00002404 g     F .text	00000014 OSA_TimeDelay
00006c22 g     F .text	00000024 __sseek
000069b0 g     F .text	00000060 __sinit
0000661c g     F .text	000000a8 __swbuf_r
00000862 g     F .text	00000006 HardFault_Handler
00008165 g     O .text	00000002 g_adcIrqId
00000fd0 g     F .text	0000003a vQueueWaitForMessageRestricted
00005218 g     F .text	00000040 init_llwu_pins
1fff0434 g     O .data	00000010 oledSettings
00006984 g     F .text	0000002c __sfmoreglue
0000241c g     F .text	0000000a OSA_Start
00000690 g     F .text	00000020 HostInterface_RxQueueMsgPut
00004230 g     F .text	00000170 DSPI_DRV_EdmaMasterInit
00002390 g     F .text	00000040 OSA_MsgQPut
00001dac g     F .text	0000001e SysTick_Handler
00002fb6 g     F .text	0000000c DSPI_HAL_SetFlushFifoCmd
00003f1c g     F .text	00000038 GPIO_DRV_ClearPinOutput
00002e90 g     F .text	000000dc DSPI_HAL_SetBaudRate
00007cb4 g     O .text	00000005 g_portIrqId
0000057c g     F .text	0000000c HostInterface_EventsInit
1fff0eac g     O .bss	00004800 guiDriver_display
1fff0ca0 g     O .bss	00000030 DEBUG_UART_State
00004f20 g     F .text	00000006 UART3_RX_TX_IRQHandler
00007ddc g     O .text	00000001 g_edmaErrIrqId
00001e44 g     F .text	00000050 PendSV_Handler
00000df0 g     F .text	00000084 xQueueGenericSendFromISR
00000878 g     F .text	00000006 NMI_Handler
000053d0 g     F .text	00000058 OLED_SendCmd
0000834c g     O .text	00000024 TAP_cfg
00008be0 g       .ARM	00000000 __exidx_end
1fff0c84 g     O .bss	0000000c g_dspiStatePtr
1fff0c58 g     O .bss	00000018 g_uartStatePtr
00003b00 g     F .text	00000044 I2C_DRV_IRQHandler
00002734 g     F .text	0000003c CLOCK_HAL_GetFllRefClk
00005338 g     F .text	00000006 UART0_RX_TX_IRQHandler
000082ac g     O .text	00000002 DMA_controller_InitConfig0
00005cfc g     F .text	00000006 I2C1_IRQHandler
00005e80 g     F .text	0000000c __errno
00004f32 g     F .text	00000006 DMA2_IRQHandler
00000754 g     F .text	00000024 HostInterface_CmdQueueMsgGet
000004e8  w    F .text	00000004 ENET_Error_IRQHandler
1fff0bcc g     O .bss	00000004 pxCurrentTCB
000004e8  w    F .text	00000004 CAN0_Tx_Warning_IRQHandler
00003e40 g     F .text	00000070 GPIO_DRV_OutputPinInit
000058a0 g     F .text	00000038 OLED_GetTextWidth
00006ca4 g     F .text	00000024 _fstat_r
000004e8  w    F .text	00000004 PIT0_IRQHandler
1fff9f54 g     O .bss	00000004 errno
000058d8 g     F .text	0000001e OLED_Swap
00002818 g     F .text	0000003c CLOCK_HAL_GetInternalRefClk
000004e8  w    F .text	00000004 CAN0_ORed_Message_buffer_IRQHandler
00007878 g     O .text	00000001 g_rtcIrqId
000004e8  w    F .text	00000004 CMP2_IRQHandler
00005cf4 g     F .text	00000002 LLWU_IRQHandler
1fff042c g     O .data	00000006 g_uartRxTxIrqId
00000898 g     F .text	000000da xEventGroupWaitBits
000024ac g     F .text	00000008 UART_HAL_Getchar
00000588 g     F .text	0000000c HostInterface_EventSendOkPacketSet
00007a5e g     O .text	00000003 g_i2cIrqId
00001de4 g     F .text	00000044 xPortStartScheduler
000004e8  w    F .text	00000004 ENET_Receive_IRQHandler
00005f44 g     F .text	00000012 memcpy
000004e8  w    F .text	00000004 ENET_1588_Timer_IRQHandler
00001648 g     F .text	00000050 vTaskPlaceOnEventList
00001080 g     F .text	0000019c xTaskGenericCreate
00005428 g     F .text	0000027c OLED_Init
00006908 g     F .text	00000032 _cleanup_r
00003484 g     F .text	0000004c UART_DRV_InstallRxCallback
00008370 g     O .text	00000030 RGB_cfg
000004e8  w    F .text	00000004 UART2_RX_TX_IRQHandler
00008be0 g       .init_array	00000000 __DTOR_END__
000009fc g     F .text	0000001a vPortFree
00008400 g     O .text	00000008 KW40_UART_InitConfig0
000025aa g     F .text	00000024 UART_HAL_SetTxFifoCmd
1fff0c50 g     O .bss	00000004 g_xtal0ClkFreq
000004e8  w    F .text	00000004 SWI_IRQHandler
00005d12 g     F .text	00000002 ADC0_IRQHandler
00005f24 g     F .text	00000010 malloc
1fff0540 g       .bss	00000000 __START_BSS
00006b3e g     F .text	00000050 _raise_r
00006d40 g     F .text	00000010 _fstat
1fff0ea8 g     O .bss	00000004 spiAccessMutex
00005e48 g     F .text	00000038 __assert_func
0000085e g     F .text	00000004 UsageFault_Handler
0000829e g     O .text	00000003 BATTERY_ADC_ChnConfig
00000c30 g     F .text	0000001a xQueueGetMutexHolder
0000587c g     F .text	00000024 OLED_SetTextProperties
1fff0e0c g     O .bss	00000004 OLED_SPI_calculatedBaudRate
00000a32 g     F .text	00000018 vListInsertEnd
000004e8  w    F .text	00000004 I2S0_Tx_IRQHandler
00006bc4 g     F .text	00000004 _getpid_r
2001ffff g       .heap	00000000 __HeapLimit
000022a4 g     F .text	00000058 OSA_EventWait
0000317c g     F .text	00000092 ADC16_HAL_ConfigConverter
00002350 g     F .text	0000002c OSA_TaskCreate
1fff0540 g       .bss	00000000 __bss_start__
000004e8  w    F .text	00000004 CMT_IRQHandler
0000087e g     F .text	0000001a xEventGroupCreate
00002030 g     F .text	00000030 CLOCK_SYS_EnableSpiClock
00007648 g     O .text	00000018 g_uartBase
00004f88 g     F .text	00000020 UART4_RX_TX_IRQHandler
00005d02 g     F .text	00000006 SPI1_IRQHandler
00006098 g     F .text	00000020 _sbrk_r
00002616 g     F .text	00000024 UART_HAL_FlushRxFifo
0000086c g     F .text	00000006 DefaultISR
00004f5c g     F .text	00000006 DMA9_IRQHandler
000009da g     F .text	00000004 vEventGroupSetBitsCallback
00006d0c g     F .text	00000024 _read_r
00000a2c g     F .text	00000006 vListInitialiseItem
000039fc g     F .text	00000064 I2C_DRV_MasterSetBaudRate
00004f7a g     F .text	00000006 DMA14_IRQHandler
000007a8 g     F .text	00000038 HostInterface_TxInit
1fff062c g     O .bss	00000050 xQueueRegistry
000028f0 g     F .text	00000078 I2C_HAL_SetBaudRate
00002f6c g     F .text	00000020 DSPI_HAL_SetPcsPolarityMode
00008408 g     O .text	00000008 NFS_I2C_MasterConfig
000004e8  w    F .text	00000004 CMP1_IRQHandler
000004e8  w    F .text	00000004 Reserved71_IRQHandler
00005d2c g     F .text	00000010 PORTD_IRQHandler
00002198 g     F .text	00000030 OSA_MutexCreate
00005d3c g     F .text	00000010 PORTB_IRQHandler
00008bd8 g       .ARM	00000000 __exidx_start
00006d60 g     F .text	00000010 _isatty
000004e8  w    F .text	00000004 UART4_ERR_IRQHandler
00004128 g     F .text	00000034 EDMA_DRV_IRQHandler
00002418 g     F .text	00000004 OSA_Init
00008b28 g     O .text	00000004 _global_impure_ptr
00000972 g     F .text	00000068 xEventGroupSetBits
1fff0560 g     O .bss	00000004 hexiwear_intf_RX_handler
00005ed8 g     F .text	0000004c __libc_init_array
000007f8 g     F .text	00000054 INTFLASH_Init
00000464 g     F .text	00000000 _mainCRTStartup
000083b8 g     O .text	00000048 PWR_cfg
000067a0 g     F .text	0000000e abort
000052c4 g     F .text	00000018 init_tpiu_pins
00005c94 g     F .text	00000038 HEXIWEAR_Init
000004e8  w    F .text	00000004 ADC1_IRQHandler
00001e94 g     F .text	00000040 _sbrk
000009de g     F .text	0000001e pvPortMalloc
00003eb0 g     F .text	00000032 GPIO_DRV_Init
00008bc0 g     F .text	00000000 _init
00000000 g       *ABS*	00000000 __m_data_2_ROMSize
000004e8  w    F .text	00000004 I2C2_IRQHandler
00000a16 g     F .text	00000016 vListInitialise
000004e8  w    F .text	00000004 PIT2_IRQHandler
000004e8  w    F .text	00000004 I2S0_Rx_IRQHandler
000030f0 g     F .text	0000001e DSPI_HAL_GetFormattedCommand
00001fd0 g     F .text	00000030 CLOCK_SYS_EnablePortClock
1fff0df0 g     O .bss	0000001c NFS_I2C_MasterState
00001318 g     F .text	00000018 xTaskGetTickCount
00000c80 g     F .text	00000122 xQueueGenericSend
00005ccc g     F .text	00000024 HEXIWEAR_ResetMCU
00004f44 g     F .text	00000006 DMA5_IRQHandler
00000000  w      *UND*	00000000 __libc_fini_array
00005d0e g     F .text	00000002 RTC_IRQHandler
000004e8  w    F .text	00000004 PDB0_IRQHandler
000004d8  w    F .text	00000010 Reset_Handler
000004e8  w    F .text	00000004 FTM1_IRQHandler
00002090 g     F .text	00000030 CLOCK_SYS_EnableUartClock
00001ee4 g     F .text	00000024 CLOCK_SYS_GetSystemClockFreq
00002854 g     F .text	00000022 CLOCK_HAL_GetOutClk
00007872 g     O .text	00000001 g_rtcSecondsIrqId
000004e8  w    F .text	00000004 UART5_RX_TX_IRQHandler
00002fc2 g     F .text	00000080 DSPI_HAL_SetDataFormat
00002a74 g     F .text	0000002a EDMA_HAL_Init
00002c10 g     F .text	00000074 EDMA_HAL_HTCDSetMajorCount
000025ce g     F .text	00000024 UART_HAL_SetRxFifoCmd
000004e8  w    F .text	00000004 UART3_ERR_IRQHandler
1fff0000 g       .interrupts	00000000 __VECTOR_RAM
00002d54 g     F .text	00000088 EDMA_HAL_PushSTCDToHTCD
00004da0 g     F .text	0000007c init_data_bss
000004e8  w    F .text	00000004 PIT3_IRQHandler
0000173c g     F .text	00000078 xTaskRemoveFromEventList
00000856 g     F .text	00000004 vApplicationMallocFailedHook
00005eb4 g     F .text	00000024 fprintf
00003042 g     F .text	0000007e DSPI_HAL_SetDelay
00007a64 g     O .text	0000000c g_i2cBase
00002f8c g     F .text	0000002a DSPI_HAL_SetFifoCmd
1fff0d80 g     O .bss	00000020 FLASH_SPI_dmaTcd
00002386 g     F .text	0000000a OSA_MsgQCreate
00008421 g     O .text	00000008 sensor_timer_cfg
00002000 g     F .text	00000030 CLOCK_SYS_EnableAdcClock
00005d60 g     F .text	0000009c Task1
00008ba0 g     O .text	00000020 __sf_fake_stderr
000004e8  w    F .text	00000004 SDHC_IRQHandler
00005d10 g     F .text	00000002 RTC_Seconds_IRQHandler
00000000  w      *UND*	00000000 __deregister_frame_info
00000594 g     F .text	00000020 HostInterface_EventSendOkPacketWait
20000000 g       .heap	00000000 end
000004e8  w    F .text	00000004 MCG_IRQHandler
1fff0c54 g     O .bss	00000004 g_xtalRtcClkFreq
000004e8  w    F .text	00000004 FTFE_IRQHandler
0000121c g     F .text	00000088 vTaskDelete
1fff0ea0 g     O .bss	00000008 sensor_timer_State
00003d5c g     F .text	000000e4 GPIO_DRV_InputPinInit
000082c0 g     O .text	00000008 FS_I2C_MasterConfig
00007874 g     O .text	00000004 g_rtcBase
00008be0 g       .init_array	00000000 __CTOR_LIST__
1fff0e80 g     O .bss	00000020 OLED_SPI_dmaTcd
1fff0dc0 g     O .bss	00000030 KW40_UART_State
000060e4 g     F .text	00000024 __sfputs_r
1fff0424 g     O .data	00000004 g_slowInternalRefClkFreq
00002e5c g     F .text	00000034 DSPI_HAL_Init
00006b20 g     F .text	0000001e memchr
000004e8  w    F .text	00000004 UART2_ERR_IRQHandler
00004f68 g     F .text	00000006 DMA11_IRQHandler
00000000  w      *UND*	00000000 _printf_float
00002a38 g     F .text	0000003c EDMA_HAL_HTCDClearReg
000004e8  w    F .text	00000004 UART5_ERR_IRQHandler
00001850 g     F .text	00000064 xTaskCheckForTimeOut
1fff9f58 g       .bss	00000000 __bss_end__
00005f68 g     F .text	00000088 _free_r
00000000  w      *UND*	00000000 __call_exitprocs
1fff05a0 g     O .bss	00000004 test
00002b58 g     F .text	0000003c EDMA_HAL_HTCDSetScatterGatherLink
000004e8  w    F .text	00000004 Read_Collision_IRQHandler
00002d00 g     F .text	00000054 EDMA_HAL_STCDSetMajorCount
00000464 g     F .text	00000000 _start
00002138 g     F .text	00000060 OSA_SemaPost
00001308 g     F .text	00000010 vTaskSuspendAll
00003550 g     F .text	000000d4 UART_DRV_IRQHandler
00002426 g     F .text	0000002a UART_HAL_Init
00006d80 g     F .text	00000010 _lseek
00003ee4 g     F .text	00000038 GPIO_DRV_SetPinOutput
00000a7a g     F .text	00000020 uxListRemove
00004f50 g     F .text	00000006 DMA7_IRQHandler
1fff05a8 g     O .bss	00000080 buffer
0000195c g     F .text	0000004c vTaskPriorityDisinherit
0000310e g     F .text	0000001e DMAMUX_HAL_Init
0000366c g     F .text	0000006c RTC_DRV_Init
000020f0 g     F .text	00000048 OSA_SemaWait
000027da g     F .text	0000003e CLOCK_HAL_GetPll0Clk
00008168 g     O .text	00000008 g_adcBase
1fff0444 g     O .data	0000006c oledModule
00004930 g     F .text	00000090 DSPI_DRV_EdmaMasterTransferBlocking
000018ec g     F .text	00000070 vTaskPriorityInherit
00007dd4 g     O .text	00000004 g_dmamuxBase
000004e8  w    F .text	00000004 ENET_Transmit_IRQHandler
000015c4 g     F .text	00000084 vTaskSwitchContext
000029b8 g     F .text	0000003c GPIO_HAL_SetPinDir
000082c8 g     O .text	00000018 BAT_CHG_cfg
000004e8  w    F .text	00000004 USBDCD_IRQHandler
00007948 g     O .text	00000001 g_lptmrIrqId
00000000  w      *UND*	00000000 software_init_hook
000022fc g     F .text	00000054 OSA_EventSet
00007ef5 g     O .text	00000003 g_dspiIrqId
00008429 g     O .text	0000068f guiFont_Tahoma_8_Regular
00003854 g     F .text	00000064 LPTMR_DRV_IRQHandler
000082e0 g     O .text	00000018 FLASH_cfg
00001704 g     F .text	00000038 vTaskPlaceOnEventListRestricted
00004b18 g     F .text	0000005c DSPI_DRV_EdmaSlaveIRQHandler
00006c84 g     F .text	00000020 _close_r
00001f08 g     F .text	00000024 CLOCK_SYS_GetBusClockFreq
00005b8c g     F .text	00000038 OLED_DrawText
00002b94 g     F .text	0000007c EDMA_HAL_HTCDSetChannelMinorLink
00004b74 g     F .text	00000094 ADC16_DRV_Init
00002670 g     F .text	00000024 RTC_HAL_Enable
00001aa4 g     F .text	00000044 xTimerGenericCommand
00005d4c g     F .text	00000012 PE_low_level_init
000066c4 g     F .text	000000dc __swsetup_r
0000085a g     F .text	00000004 vApplicationStackOverflowHook
000020c0 g     F .text	00000030 OSA_SemaCreate
000026d0 g     F .text	00000028 CLOCK_HAL_TestOscFreq
00006a10 g     F .text	00000074 __sfp
1fff0564 g     O .bss	00000004 hexiwear_intf_OK_handler
000024a6 g     F .text	00000006 UART_HAL_Putchar
0000313c g     F .text	00000040 ADC16_HAL_ConfigChn
1fff0628 g     O .bss	00000004 ExecuteOnStack
00005718 g     F .text	00000090 OLED_SendData
00001ce0 g     F .text	00000024 xTimerPendFunctionCallFromISR
00006bc8 g     F .text	00000022 __sread
000004e8  w    F .text	00000004 USB0_IRQHandler
00000400 g       *ABS*	00000000 __RAM_VECTOR_TABLE_SIZE_BYTES
000028d2 g     F .text	0000001c I2C_HAL_Init
000068b4 g     F .text	00000054 _fflush_r
00003924 g     F .text	000000d8 I2C_DRV_MasterInit
00005d08 g     F .text	00000006 SPI2_IRQHandler
00001fb4 g     F .text	0000001a CLOCK_SYS_GetUartFreq
00008b60 g     O .text	00000020 __sf_fake_stdin
00002876 g     F .text	00000040 LPTMR_HAL_SetTimerWorkingMode
00001d4c g     F .text	0000000c vPortEnableVFP
000004e8  w    F .text	00000004 WDOG_EWM_IRQHandler
000082f8 g     O .text	00000024 KW40_GPIO_cfg
1fff0568 g     O .bss	00000004 hostInterface_cmdQueueHnd
00005f56 g     F .text	00000010 memset
00007dd8 g     O .text	00000004 g_edmaBase
00000868 g     F .text	00000004 MemManage_Handler
00000000 g       .interrupts	00000400 __isr_vector
00005dfc g     F .text	0000004c main
00000400 g       *ABS*	00000000 __m_interrupts_ram_ROMSize
00002492 g     F .text	00000014 UART_HAL_SetParityMode
00000a4a g     F .text	00000030 vListInsert
00001dcc g     F .text	00000012 vPortStartFirstTask
0000237c g     F .text	0000000a OSA_TaskDestroy
00001e28 g     F .text	0000001c SVC_Handler
00006c46 g     F .text	00000008 __sclose
1fff0428 g     O .data	00000004 g_fastInternalRefClkFreq
00001a60 g     F .text	00000044 xTimerCreateTimerTask
1fff0400 g       .data	00000000 __DATA_RAM
00005ff0 g     F .text	000000a8 _malloc_r
00000000  w      *UND*	00000000 hardware_init_hook
00003a60 g     F .text	000000a0 I2C_DRV_MasterIRQHandler
00004f74 g     F .text	00000006 DMA13_IRQHandler
20000000 g       .heap	00000000 __end__
1fff0cd0 g     O .bss	00000044 DMA_controller_State
000018c0 g     F .text	0000000c xTaskGetCurrentTaskHandle
00007ddd g     O .text	00000010 g_edmaIrqId
00001f8c g     F .text	00000028 CLOCK_SYS_GetLptmrFreq
00000bf0 g     F .text	00000040 xQueueGenericCreate
00008be0 g       .init_array	00000000 __CTOR_END__
000057a8 g     F .text	00000038 OLED_FillScreen
00004f38 g     F .text	00000006 DMA3_IRQHandler
00004008 g     F .text	00000084 EDMA_DRV_Init
000023f6 g     F .text	00000004 OSA_MemAlloc
00000c4a g     F .text	00000036 xQueueCreateCountingSemaphore
000004e8  w    F .text	00000004 UART0_LON_IRQHandler
00008be0 g       .init_array	00000000 __DTOR_LIST__
1fff9f58 g       .bss	00000000 __END_BSS
00005844 g     F .text	00000038 OLED_SetDynamicArea
00004c40 g     F .text	00000160 SystemInit
00002968 g     F .text	00000050 I2C_HAL_SendStop
00002270 g     F .text	00000034 OSA_EventCreate
000004e8  w    F .text	00000004 RNG_IRQHandler
00004f26 g     F .text	00000006 DMA0_IRQHandler
00002aa0 g     F .text	00000048 EDMA_HAL_HTCDSetAttribute
00008bcc g     F .text	00000000 _fini
00003b50 g     F .text	000001f0 I2C_DRV_SlaveIRQHandler
000017b4 g     F .text	00000078 xTaskRemoveFromUnorderedEventList
00001440 g     F .text	000000cc xTaskResumeAll
000034d0 g     F .text	00000080 UART_DRV_SendDataBlocking
000012a4 g     F .text	00000064 vTaskStartScheduler
0000408c g     F .text	0000009c EDMA_DRV_RequestChannel
00004f80 g     F .text	00000006 DMA15_IRQHandler
000004e8  w    F .text	00000004 DAC0_IRQHandler
00000000  w      *UND*	00000000 atexit
00006c60 g     F .text	00000024 _write_r
00005258 g     F .text	0000006c init_spi_pins
000052dc g     F .text	0000005c init_uart_pins
20030000 g       *ABS*	00000000 __StackTop
00006310 g     F .text	000000e4 _printf_common
1fff051c g     O .data	00000004 _impure_ptr
000030dc g     F .text	00000014 DSPI_HAL_SetIntMode
00000600 g     F .text	00000090 HostInterface_RxInit
000067ae g     F .text	00000106 __sflush_r
000030ce g     F .text	0000000e DSPI_HAL_SetRxFifoDrainDmaIntMode
00002ddc g     F .text	00000080 EDMA_HAL_STCDSetBasicTransfer
00001d94 g     F .text	00000018 vPortYieldFromISR
00007c8c g     O .text	00000014 g_gpioBase
000071ae g     O .text	000000c8 kI2CDividerTable
000083a0 g     O .text	00000018 VIBRO_cfg
00008d0c g       .fini_array	00000000 __DATA_END
000049d8 g     F .text	00000040 DSPI_DRV_EdmaIRQHandler
1fff0e10 g     O .bss	00000058 OLED_SPI_MasterState
000018b4 g     F .text	0000000c vTaskMissedYield
000004e8  w    F .text	00000004 CAN0_Error_IRQHandler
00001f2c g     F .text	00000040 CLOCK_SYS_GetExternalRefClock32kFreq
000024b4 g     F .text	00000068 UART_HAL_SetIntMode
00004f3e g     F .text	00000006 DMA4_IRQHandler
000029f4 g     F .text	00000030 GPIO_HAL_WritePinOutput
00000e74 g     F .text	00000136 xQueueGenericReceive
00000fac g     F .text	00000024 vQueueAddToRegistry
000027a4 g     F .text	00000036 CLOCK_HAL_GetFllClk
0000831c g     O .text	00000030 OLED_cfg
00001330 g     F .text	00000110 xTaskIncrementTick
000004e8  w    F .text	00000004 PIT1_IRQHandler
1fff05a4 g     O .bss	00000004 foo
00002450 g     F .text	00000042 UART_HAL_SetBaudRate
000004e8  w    F .text	00000004 UART0_ERR_IRQHandler
00004c08 g     F .text	00000038 ADC16_DRV_ConfigConvChn
00002cc0 g     F .text	00000040 EDMA_HAL_STCDSetNbytes
20030000 g       *ABS*	00000000 __stack
000004e8  w    F .text	00000004 DMA_Error_IRQHandler
0000841c g     O .text	00000005 OLED_SPI_MasterConfig
000004e8  w    F .text	00000004 LVD_LVW_IRQHandler
000082a4 g     O .text	00000008 DEBUG_UART_InitConfig0
00000b8a g     F .text	00000066 xQueueGenericReset
00006da0 g     F .text	00000010 _write
00000548 g     F .text	00000034 HostInterface_Init
00007ef8 g     O .text	0000000c g_dspiBase
000082ae g     O .text	00000005 FLASH_SPI_MasterConfig
1fff0c74 g     O .bss	0000000c g_i2cStatePtr
000004e8  w    F .text	00000004 SPI0_IRQHandler
000004e8  w    F .text	00000004 FTM0_IRQHandler
000004e8  w    F .text	00000004 PORTA_IRQHandler
0000582c g     F .text	00000018 OLED_DestroyDynamicArea
000021c8 g     F .text	00000060 OSA_MutexLock
00000000 g       .interrupts	00000000 __VECTOR_TABLE
00002702 g     F .text	00000032 CLOCK_HAL_TestFllExternalRefFreq
00008be8 g       .fini_array	00000000 __DATA_ROM
0000331c g     F .text	00000168 UART_DRV_Init
000004e8  w    F .text	00000004 DAC1_IRQHandler
000004e8  w    F .text	00000004 MCM_IRQHandler
00004fa8 g     F .text	00000088 hardware_init
00006bea g     F .text	00000038 __swrite
000023d0 g     F .text	00000026 OSA_MsgQGet
000023fa g     F .text	0000000a OSA_MemFree
00005e8c g     F .text	00000028 exit
00005eb4 g     F .text	00000024 fiprintf
00004f6e g     F .text	00000006 DMA12_IRQHandler
00006108 g     F .text	00000208 _vfiprintf_r
00004e1c g     F .text	00000104 Components_Init
1fff0594 g     O .bss	00000004 hostInterface_rxQueue
000004e8  w    F .text	00000004 CAN0_Bus_Off_IRQHandler
00006d70 g     F .text	00000010 _kill
0000150c g     F .text	00000050 vTaskDelay
000004e8  w    F .text	00000004 FTM3_IRQHandler
00008b80 g     O .text	00000020 __sf_fake_stdout
00002654 g     F .text	0000001a UART_HAL_SetRxFifoWatermark
000004e8  w    F .text	00000004 PORTE_IRQHandler
000018cc g     F .text	00000020 xTaskGetSchedulerState
0000415c g     F .text	0000002c EDMA_DRV_PushDescriptorToReg
00006d90 g     F .text	00000010 _read
000049c0 g     F .text	00000018 DSPI_DRV_EdmaMasterIRQHandler
00002060 g     F .text	00000030 CLOCK_SYS_EnableI2cClock
1fff0c80 g     O .bss	00000004 g_edma
0000084c g     F .text	0000000a catch
000004e8  w    F .text	00000004 FTM2_IRQHandler
00006db0 g     F .text	00000002 _exit
00005d14 g     F .text	00000006 LPTMR0_IRQHandler
00003724 g     F .text	00000130 LPTMR_DRV_Init
00000872 g     F .text	00000006 BusFault_Handler
00006a84 g     F .text	0000009c __smakebuf_r
00006c4e g     F .text	00000010 strlen
00001d04 g     F .text	0000001e pxPortInitialiseStack
000063f4 g     F .text	00000228 _printf_i
00008292 g     O .text	0000000c BATTERY_ADC_InitConfig
00004f56 g     F .text	00000006 DMA8_IRQHandler
1fff9f4c g     O .bss	00000004 __malloc_sbrk_start
00002a2e g     F .text	0000000a EDMA_HAL_SetDmaRequestCmd
00004f62 g     F .text	00000006 DMA10_IRQHandler
000004e8  w    F .text	00000004 CAN0_Wake_Up_IRQHandler
00002a24 g     F .text	0000000a EDMA_HAL_SetErrorIntCmd
00001f6c g     F .text	00000020 CLOCK_SYS_GetOsc0ExternalRefClockFreq
000004ec g     F .text	0000005c SPI_Init
0000182c g     F .text	00000024 vTaskSetTimeOutState
00002546 g     F .text	00000064 UART_HAL_ClearStatusFlag
00001d5c g     F .text	00000020 vPortEnterCritical
1fff0da4 g     O .bss	0000001c FS_I2C_MasterState
1fff9f50 g     O .bss	00000004 __malloc_free_list
000051d0 g     F .text	00000048 init_jtag_pins
000004e8  w    F .text	00000004 UART1_ERR_IRQHandler
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000263a g     F .text	0000001a UART_HAL_SetTxFifoWatermark
000043a0 g     F .text	00000064 DSPI_DRV_EdmaMasterConfigureBus
00006108 g     F .text	00000208 _vfprintf_r
000004e8  w    F .text	00000004 UART1_RX_TX_IRQHandler
000004e8  w    F .text	00000004 CMP0_IRQHandler
00007944 g     O .text	00000004 g_lptmrBase
1fff0da0 g     O .bss	00000004 FLASH_SPI_calculatedBaudRate
00005178 g     F .text	00000058 init_i2c_pins
00005bc4 g     F .text	000000d0 HEXIWEAR_startup
000030c0 g     F .text	0000000e DSPI_HAL_SetTxFifoFillDmaIntMode
00000000  w      *UND*	00000000 __register_frame_info
00005d1c g     F .text	00000010 PORTC_IRQHandler
00002694 g     F .text	0000003a RTC_HAL_Init
000019a8 g     F .text	00000018 uxTaskResetEventItemValue
00000da2 g     F .text	0000004e xQueueCreateMutex
00004f4a g     F .text	00000006 DMA6_IRQHandler
1fff9f48 g     O .bss	00000004 hexiwear_startup_handler
00002228 g     F .text	00000048 OSA_MutexUnlock
0000251c g     F .text	0000002a UART_HAL_GetStatusFlag
000028b6 g     F .text	0000001c LPTMR_HAL_SetPrescalerMode
00004f2c g     F .text	00000006 DMA1_IRQHandler
00006d30 g     F .text	00000010 _close
00006b90 g     F .text	00000010 raise
00005f34 g     F .text	00000010 free
00007094 g     O .text	00000004 g_oscBase
00001d24 g     F .text	00000028 vPortInitTickTimer
00002770 g     F .text	00000034 CLOCK_HAL_TestFllFreq
00005cf0 g     F .text	00000004 vApplicationIdleHook



Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
$t():
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
$d():
     428:	1fff0540 	.word	0x1fff0540
     42c:	00000000 	.word	0x00000000
     430:	00008bc0 	.word	0x00008bc0

00000434 <frame_dummy>:
$t():
     434:	b508      	push	{r3, lr}
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <frame_dummy+0x1c>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4806      	ldr	r0, [pc, #24]	; (454 <frame_dummy+0x20>)
     43c:	4906      	ldr	r1, [pc, #24]	; (458 <frame_dummy+0x24>)
     43e:	f3af 8000 	nop.w
     442:	4806      	ldr	r0, [pc, #24]	; (45c <frame_dummy+0x28>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b113      	cbz	r3, 44e <frame_dummy+0x1a>
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <frame_dummy+0x2c>)
     44a:	b103      	cbz	r3, 44e <frame_dummy+0x1a>
     44c:	4798      	blx	r3
     44e:	bd08      	pop	{r3, pc}
$d():
     450:	00000000 	.word	0x00000000
     454:	00008bc0 	.word	0x00008bc0
     458:	1fff0544 	.word	0x1fff0544
     45c:	1fff0520 	.word	0x1fff0520
     460:	00000000 	.word	0x00000000

00000464 <_mainCRTStartup>:
$t():
     464:	4b15      	ldr	r3, [pc, #84]	; (4bc <_mainCRTStartup+0x58>)
     466:	2b00      	cmp	r3, #0
     468:	bf08      	it	eq
     46a:	4b13      	ldreq	r3, [pc, #76]	; (4b8 <_mainCRTStartup+0x54>)
     46c:	469d      	mov	sp, r3
     46e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     472:	2100      	movs	r1, #0
     474:	468b      	mov	fp, r1
     476:	460f      	mov	r7, r1
     478:	4813      	ldr	r0, [pc, #76]	; (4c8 <_mainCRTStartup+0x64>)
     47a:	4a14      	ldr	r2, [pc, #80]	; (4cc <_mainCRTStartup+0x68>)
     47c:	1a12      	subs	r2, r2, r0
     47e:	f005 fd6a 	bl	5f56 <memset>
     482:	4b0f      	ldr	r3, [pc, #60]	; (4c0 <_mainCRTStartup+0x5c>)
     484:	2b00      	cmp	r3, #0
     486:	d000      	beq.n	48a <_mainCRTStartup+0x26>
     488:	4798      	blx	r3
     48a:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <_mainCRTStartup+0x60>)
     48c:	2b00      	cmp	r3, #0
     48e:	d000      	beq.n	492 <_mainCRTStartup+0x2e>
     490:	4798      	blx	r3
     492:	2000      	movs	r0, #0
     494:	2100      	movs	r1, #0
     496:	0004      	movs	r4, r0
     498:	000d      	movs	r5, r1
     49a:	480d      	ldr	r0, [pc, #52]	; (4d0 <_mainCRTStartup+0x6c>)
     49c:	2800      	cmp	r0, #0
     49e:	d002      	beq.n	4a6 <_mainCRTStartup+0x42>
     4a0:	480c      	ldr	r0, [pc, #48]	; (4d4 <_mainCRTStartup+0x70>)
     4a2:	f3af 8000 	nop.w
     4a6:	f005 fd17 	bl	5ed8 <__libc_init_array>
     4aa:	0020      	movs	r0, r4
     4ac:	0029      	movs	r1, r5
     4ae:	f005 fca5 	bl	5dfc <main>
     4b2:	f005 fceb 	bl	5e8c <exit>
     4b6:	bf00      	nop
$d():
     4b8:	00080000 	.word	0x00080000
     4bc:	20030000 	.word	0x20030000
	...
     4c8:	1fff0540 	.word	0x1fff0540
     4cc:	1fff9f58 	.word	0x1fff9f58
	...

000004d8 <Reset_Handler>:
Reset_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.S:326
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
     4d8:	b672      	cpsid	i
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.S:328
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
     4da:	f004 fbb1 	bl	4c40 <SystemInit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.S:330
#endif
    bl init_data_bss
     4de:	f004 fc5f 	bl	4da0 <init_data_bss>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.S:331
    cpsie   i               /* Unmask interrupts */
     4e2:	b662      	cpsie	i
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.S:336
#ifndef __START
#define __START _start
#endif
#ifndef __ATOLLIC__
    bl    __START
     4e4:	f7ff ffbe 	bl	464 <_mainCRTStartup>

000004e8 <ADC1_IRQHandler>:
CAN0_Rx_Warning_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/gcc/startup_MK64F12.S:349
    .align	1
    .thumb_func
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:
    b	DefaultISR
     4e8:	f000 b9c0 	b.w	86c <DefaultISR>

000004ec <SPI_Init>:
SPI_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:57
 * @return      status flag
 */
statusSPI_t SPI_Init( genericSpiHandle_t* self )
{
  {
    switch ( self->instance )
     4ec:	6803      	ldr	r3, [r0, #0]
     4ee:	2b01      	cmp	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:55
 * initialize SPI interface and its required structures
 * @param  self SPI handle
 * @return      status flag
 */
statusSPI_t SPI_Init( genericSpiHandle_t* self )
{
     4f0:	b510      	push	{r4, lr}
     4f2:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:57
  {
    switch ( self->instance )
     4f4:	d008      	beq.n	508 <SPI_Init+0x1c>
     4f6:	2b02      	cmp	r3, #2
     4f8:	d116      	bne.n	528 <SPI_Init+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:62
    {
    	case FSL_OLED_SPI:
		{
			// assign the master structure
			self->state = OLED_SPI_MasterState;
     4fa:	3010      	adds	r0, #16
     4fc:	490d      	ldr	r1, [pc, #52]	; (534 <SPI_Init+0x48>)
     4fe:	2258      	movs	r2, #88	; 0x58
     500:	f005 fd20 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:65

			// configure the device info
			self->device.bitsPerSec                 = OLED_SPI_BusConfig.bitsPerSec;
     504:	4b0c      	ldr	r3, [pc, #48]	; (538 <SPI_Init+0x4c>)
     506:	e005      	b.n	514 <SPI_Init+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:76
		}

    	case FSL_FLASH_SPI:
    	{
			// assign the master structure
			self->state = FLASH_SPI_MasterState;
     508:	3010      	adds	r0, #16
     50a:	490c      	ldr	r1, [pc, #48]	; (53c <SPI_Init+0x50>)
     50c:	2258      	movs	r2, #88	; 0x58
     50e:	f005 fd19 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:79

			// configure the device info
			self->device.bitsPerSec                 = FLASH_SPI_BusConfig.bitsPerSec;
     512:	4b0b      	ldr	r3, [pc, #44]	; (540 <SPI_Init+0x54>)
     514:	681a      	ldr	r2, [r3, #0]
     516:	6062      	str	r2, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:80
			self->device.dataBusConfig.bitsPerFrame = FLASH_SPI_BusConfig.dataBusConfig.bitsPerFrame;
     518:	685a      	ldr	r2, [r3, #4]
     51a:	60a2      	str	r2, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:81
			self->device.dataBusConfig.clkPolarity  = FLASH_SPI_BusConfig.dataBusConfig.clkPolarity;
     51c:	7a1a      	ldrb	r2, [r3, #8]
     51e:	7322      	strb	r2, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:82
			self->device.dataBusConfig.clkPhase     = FLASH_SPI_BusConfig.dataBusConfig.clkPhase;
     520:	7a5a      	ldrb	r2, [r3, #9]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:83
			self->device.dataBusConfig.direction    = FLASH_SPI_BusConfig.dataBusConfig.direction;
     522:	7a9b      	ldrb	r3, [r3, #10]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:82

			// configure the device info
			self->device.bitsPerSec                 = FLASH_SPI_BusConfig.bitsPerSec;
			self->device.dataBusConfig.bitsPerFrame = FLASH_SPI_BusConfig.dataBusConfig.bitsPerFrame;
			self->device.dataBusConfig.clkPolarity  = FLASH_SPI_BusConfig.dataBusConfig.clkPolarity;
			self->device.dataBusConfig.clkPhase     = FLASH_SPI_BusConfig.dataBusConfig.clkPhase;
     524:	7362      	strb	r2, [r4, #13]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:83
			self->device.dataBusConfig.direction    = FLASH_SPI_BusConfig.dataBusConfig.direction;
     526:	73a3      	strb	r3, [r4, #14]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:92
    	default: {}
    }

    // DSPI_DRV_MasterConfigureBus(self->instance, &self->device, &calculatedBaudRate);

    spiNum_ON++;
     528:	4b06      	ldr	r3, [pc, #24]	; (544 <SPI_Init+0x58>)
     52a:	681a      	ldr	r2, [r3, #0]
     52c:	3201      	adds	r2, #1
     52e:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/protocols/SPI/src/generic_spi_driver.c:95
    return STATUS_SPI_SUCCESS;
  }
}
     530:	2000      	movs	r0, #0
     532:	bd10      	pop	{r4, pc}
     534:	1fff0e10 	.word	0x1fff0e10
     538:	00008410 	.word	0x00008410
     53c:	1fff0d14 	.word	0x1fff0d14
     540:	000082b4 	.word	0x000082b4
     544:	1fff055c 	.word	0x1fff055c

00000548 <HostInterface_Init>:
NVIC_SetPriority():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1706
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     548:	4b0b      	ldr	r3, [pc, #44]	; (578 <HostInterface_Init+0x30>)
     54a:	2210      	movs	r2, #16
HostInterface_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:60
/**
 * initialize comm module and set necessary objects
 * @return status flag
 */
osa_status_t HostInterface_Init()
{
     54c:	b510      	push	{r4, lr}
NVIC_SetPriority():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1706
     54e:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
HostInterface_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:71

#if defined( HEXIWEAR_DEBUG )
  NVIC_SetPriority( HEXIWEAR_DEBUG_UART_IRQn , HEXIWEAR_DEBUG_UART_IRQ_PRIO );
#endif

  status |= HostInterface_EventsInit();
     552:	f000 f813 	bl	57c <HostInterface_EventsInit>
     556:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:72
  status |= HostInterface_TxInit();
     558:	f000 f926 	bl	7a8 <HostInterface_TxInit>
     55c:	4320      	orrs	r0, r4
     55e:	b2c4      	uxtb	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:73
  status |= HostInterface_RxInit();
     560:	f000 f84e 	bl	600 <HostInterface_RxInit>
     564:	4320      	orrs	r0, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:75

  if ( kStatus_OSA_Success != status )
     566:	f010 0fff 	tst.w	r0, #255	; 0xff
     56a:	d002      	beq.n	572 <HostInterface_Init+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:77
  {
    catch(3);
     56c:	2003      	movs	r0, #3
     56e:	f000 f96d 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface.c:81
  }

  return kStatus_OSA_Success;
}
     572:	2000      	movs	r0, #0
     574:	bd10      	pop	{r4, pc}
     576:	bf00      	nop
     578:	e000e100 	.word	0xe000e100

0000057c <HostInterface_EventsInit>:
HostInterface_EventsInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_events.c:66
 * @return status flag
 */
osa_status_t HostInterface_EventsInit()
{
  osa_status_t
    status = OSA_EventCreate( &hostInterface_okConfirmEvent, kEventAutoClear );
     57c:	4801      	ldr	r0, [pc, #4]	; (584 <HostInterface_EventsInit+0x8>)
     57e:	2100      	movs	r1, #0
     580:	f001 be76 	b.w	2270 <OSA_EventCreate>
     584:	1fff056c 	.word	0x1fff056c

00000588 <HostInterface_EventSendOkPacketSet>:
HostInterface_EventSet():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_events.c:113
 * @return            status flag
 */
static osa_status_t HostInterface_EventSet( event_flags_t flagsToSet )
{
  osa_status_t
    status = OSA_EventSet(&hostInterface_okConfirmEvent, flagsToSet);
     588:	4801      	ldr	r0, [pc, #4]	; (590 <HostInterface_EventSendOkPacketSet+0x8>)
     58a:	2102      	movs	r1, #2
     58c:	f001 beb6 	b.w	22fc <OSA_EventSet>
     590:	1fff056c 	.word	0x1fff056c

00000594 <HostInterface_EventSendOkPacketWait>:
HostInterface_EventSendOkPacketWait():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_events.c:132
/**
 * wait for the event "send OK packet"
 * @return  status flag
 */
osa_status_t HostInterface_EventSendOkPacketWait()
{
     594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
HostInterface_EventWait():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_events.c:87
                                                    uint32_t timeout,
                                              event_flags_t* setFlags
                                            )
{
  osa_status_t
    status = OSA_EventWait( &hostInterface_okConfirmEvent, flagsToWait, false, timeout, setFlags );
     596:	ab03      	add	r3, sp, #12
     598:	9300      	str	r3, [sp, #0]
     59a:	2102      	movs	r1, #2
     59c:	2200      	movs	r2, #0
     59e:	f04f 33ff 	mov.w	r3, #4294967295
     5a2:	4803      	ldr	r0, [pc, #12]	; (5b0 <HostInterface_EventSendOkPacketWait+0x1c>)
     5a4:	f001 fe7e 	bl	22a4 <OSA_EventWait>
HostInterface_EventSendOkPacketWait():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_events.c:141
  return HostInterface_EventWait(
                                  gHostInterface_eventSendOkPacketMask,
                                  OSA_WAIT_FOREVER,
                                  &setFlags
                                );
}
     5a8:	b005      	add	sp, #20
     5aa:	f85d fb04 	ldr.w	pc, [sp], #4
     5ae:	bf00      	nop
     5b0:	1fff056c 	.word	0x1fff056c

000005b4 <HostInterface_RxTask>:
HostInterface_RxTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:322
/**
 * Host MCU Interface RX task charged with handling the received data packet
 * @param  optional parameter
 */
static void HostInterface_RxTask( task_param_t param )
{
     5b4:	b500      	push	{lr}
     5b6:	b089      	sub	sp, #36	; 0x24
HostInterface_RxQueueMsgGet():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:308
 */

static osa_status_t HostInterface_RxQueueMsgGet ( hostInterface_packet_t* pHostInterface_packet )
{
  osa_status_t
    status = OSA_MsgQGet(hostInterface_rxQueueHnd, (hostInterface_packet_t *)pHostInterface_packet, gHostInterface_waitTimeout);
     5b8:	4b0f      	ldr	r3, [pc, #60]	; (5f8 <HostInterface_RxTask+0x44>)
     5ba:	a901      	add	r1, sp, #4
     5bc:	6818      	ldr	r0, [r3, #0]
     5be:	f04f 32ff 	mov.w	r2, #4294967295
     5c2:	f001 ff05 	bl	23d0 <OSA_MsgQGet>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:310

  if ( kStatus_OSA_Error == status )
     5c6:	2801      	cmp	r0, #1
     5c8:	d012      	beq.n	5f0 <HostInterface_RxTask+0x3c>
HostInterface_RxTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:331
  while (1)
  {
    osa_status_t
      status = HostInterface_RxQueueMsgGet( &tmpPkt );

    if ( kStatus_OSA_Success == status )
     5ca:	2800      	cmp	r0, #0
     5cc:	d1f4      	bne.n	5b8 <HostInterface_RxTask+0x4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:336
    {

#ifdef gHostInterface_TxConfirmationEnable
      // acknowledge the packet reception
      if ( 1 == ( tmpPkt.start2 & 0x01 ) )
     5ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
     5d2:	07db      	lsls	r3, r3, #31
     5d4:	d501      	bpl.n	5da <HostInterface_RxTask+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:338
      {
    	  HostInterface_EventSendOkPacketSet();
     5d6:	f7ff ffd7 	bl	588 <HostInterface_EventSendOkPacketSet>
PacketHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:93
 * this function handles the packet arrived via comm interface
 * @param self received packet
 */
static void PacketHandler( hostInterface_packet_t* self )
{
  switch( self->type )
     5da:	f89d 3006 	ldrb.w	r3, [sp, #6]
     5de:	2b03      	cmp	r3, #3
     5e0:	d8ea      	bhi.n	5b8 <HostInterface_RxTask+0x4>
HostInterface_CmdQueueMsgPut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:368
 */

static osa_status_t HostInterface_CmdQueueMsgPut( hostInterface_packet_t* pHostInterface_packet )
{
  osa_status_t
    status = OSA_MsgQPut(hostInterface_cmdQueueHnd, (hostInterface_packet_t *)pHostInterface_packet);
     5e2:	4b06      	ldr	r3, [pc, #24]	; (5fc <HostInterface_RxTask+0x48>)
     5e4:	a901      	add	r1, sp, #4
     5e6:	6818      	ldr	r0, [r3, #0]
     5e8:	f001 fed2 	bl	2390 <OSA_MsgQPut>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:370

  if ( kStatus_OSA_Error == status )
     5ec:	2801      	cmp	r0, #1
     5ee:	d1e3      	bne.n	5b8 <HostInterface_RxTask+0x4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:372
  {
    catch(2);
     5f0:	2002      	movs	r0, #2
     5f2:	f000 f92b 	bl	84c <catch>
     5f6:	e7df      	b.n	5b8 <HostInterface_RxTask+0x4>
     5f8:	1fff059c 	.word	0x1fff059c
     5fc:	1fff0568 	.word	0x1fff0568

00000600 <HostInterface_RxInit>:
HostInterface_RxInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:123
/**
 * initialize RX tasks and queues
 * @return  task initialization status
 */
osa_status_t HostInterface_RxInit()
{
     600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:128
  osa_status_t
    status;

  // install the callback
  UART_DRV_InstallRxCallback( gHostInterface_instance, HostInterface_RxCallback, (uint8_t*)&hostInterface_rxPacket, NULL, true );
     602:	2301      	movs	r3, #1
     604:	9300      	str	r3, [sp, #0]
     606:	491a      	ldr	r1, [pc, #104]	; (670 <HostInterface_RxInit+0x70>)
     608:	4a1a      	ldr	r2, [pc, #104]	; (674 <HostInterface_RxInit+0x74>)
     60a:	2300      	movs	r3, #0
     60c:	2004      	movs	r0, #4
     60e:	f002 ff39 	bl	3484 <UART_DRV_InstallRxCallback>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:131

  // Create Rx Message Queue
  hostInterface_rxQueueHnd = OSA_MsgQCreate (
     612:	4b19      	ldr	r3, [pc, #100]	; (678 <HostInterface_RxInit+0x78>)
     614:	2103      	movs	r1, #3
     616:	6818      	ldr	r0, [r3, #0]
     618:	2207      	movs	r2, #7
     61a:	f001 feb4 	bl	2386 <OSA_MsgQCreate>
     61e:	4b17      	ldr	r3, [pc, #92]	; (67c <HostInterface_RxInit+0x7c>)
     620:	6018      	str	r0, [r3, #0]
     622:	461c      	mov	r4, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:136
                                              hostInterface_rxQueue,
                                              gHostInterface_msgNum,
                                              sizeof(hostInterface_packet_t) / sizeof(uint32_t)
                                            );
  if ( NULL == hostInterface_rxQueueHnd )
     624:	b910      	cbnz	r0, 62c <HostInterface_RxInit+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:138
  {
    catch(3);
     626:	2003      	movs	r0, #3
     628:	f000 f910 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:142
  }

  // Create Command Queue
  hostInterface_cmdQueueHnd = OSA_MsgQCreate (
     62c:	2000      	movs	r0, #0
     62e:	210a      	movs	r1, #10
     630:	2207      	movs	r2, #7
     632:	f001 fea8 	bl	2386 <OSA_MsgQCreate>
     636:	4b12      	ldr	r3, [pc, #72]	; (680 <HostInterface_RxInit+0x80>)
     638:	6018      	str	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:147
		                                       hostInterface_cmdQueue,
                                               10,
                                               sizeof(hostInterface_packet_t) / sizeof(uint32_t)
                                             );
    if ( NULL == hostInterface_rxQueueHnd )
     63a:	6823      	ldr	r3, [r4, #0]
     63c:	b913      	cbnz	r3, 644 <HostInterface_RxInit+0x44>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:149
    {
      catch(3);
     63e:	2003      	movs	r0, #3
     640:	f000 f904 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:157
#if defined( HEXIWEAR_DEBUG )
  vQueueAddToRegistry( hostInterface_rxQueueHnd, (const char*)"RxQueue" );
#endif

  // Create Rx Task
  status = OSA_TaskCreate (
     644:	2304      	movs	r3, #4
     646:	9300      	str	r3, [sp, #0]
     648:	4a0e      	ldr	r2, [pc, #56]	; (684 <HostInterface_RxInit+0x84>)
     64a:	9203      	str	r2, [sp, #12]
     64c:	2300      	movs	r3, #0
     64e:	9301      	str	r3, [sp, #4]
     650:	9302      	str	r3, [sp, #8]
     652:	480d      	ldr	r0, [pc, #52]	; (688 <HostInterface_RxInit+0x88>)
     654:	490d      	ldr	r1, [pc, #52]	; (68c <HostInterface_RxInit+0x8c>)
     656:	f44f 5240 	mov.w	r2, #12288	; 0x3000
     65a:	f001 fe79 	bl	2350 <OSA_TaskCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:168
                            (task_param_t)NULL,
                            false,
                            &hexiwear_intf_RX_handler
                          );

  if  ( kStatus_OSA_Success != status )
     65e:	4604      	mov	r4, r0
     660:	b110      	cbz	r0, 668 <HostInterface_RxInit+0x68>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:170
  {
    catch(3);
     662:	2003      	movs	r0, #3
     664:	f000 f8f2 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:174
  }

  return (osa_status_t)status;
}
     668:	4620      	mov	r0, r4
     66a:	b004      	add	sp, #16
     66c:	bd10      	pop	{r4, pc}
     66e:	bf00      	nop
     670:	000006b1 	.word	0x000006b1
     674:	1fff0574 	.word	0x1fff0574
     678:	1fff0594 	.word	0x1fff0594
     67c:	1fff059c 	.word	0x1fff059c
     680:	1fff0568 	.word	0x1fff0568
     684:	1fff0560 	.word	0x1fff0560
     688:	000005b5 	.word	0x000005b5
     68c:	00006db4 	.word	0x00006db4

00000690 <HostInterface_RxQueueMsgPut>:
HostInterface_RxQueueMsgPut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:287
 */

osa_status_t HostInterface_RxQueueMsgPut( hostInterface_packet_t* pHostInterface_packet )
{
  osa_status_t
    status = OSA_MsgQPut(hostInterface_rxQueueHnd, (hostInterface_packet_t *)pHostInterface_packet);
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <HostInterface_RxQueueMsgPut+0x1c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:285
 * @return kStatus_OSA_Success  Message successfully put into the queue.
 *         kStatus_OSA_Error    Process fail.
 */

osa_status_t HostInterface_RxQueueMsgPut( hostInterface_packet_t* pHostInterface_packet )
{
     692:	b510      	push	{r4, lr}
     694:	4601      	mov	r1, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:287
  osa_status_t
    status = OSA_MsgQPut(hostInterface_rxQueueHnd, (hostInterface_packet_t *)pHostInterface_packet);
     696:	6818      	ldr	r0, [r3, #0]
     698:	f001 fe7a 	bl	2390 <OSA_MsgQPut>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:289

  if ( kStatus_OSA_Error == status )
     69c:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:287
 */

osa_status_t HostInterface_RxQueueMsgPut( hostInterface_packet_t* pHostInterface_packet )
{
  osa_status_t
    status = OSA_MsgQPut(hostInterface_rxQueueHnd, (hostInterface_packet_t *)pHostInterface_packet);
     69e:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:289

  if ( kStatus_OSA_Error == status )
     6a0:	d102      	bne.n	6a8 <HostInterface_RxQueueMsgPut+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:291
  {
    catch(2);
     6a2:	2002      	movs	r0, #2
     6a4:	f000 f8d2 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:294
  }
  return (osa_status_t)status;
}
     6a8:	4620      	mov	r0, r4
     6aa:	bd10      	pop	{r4, pc}
     6ac:	1fff059c 	.word	0x1fff059c

000006b0 <HostInterface_RxCallback>:
HostInterface_RxCallback():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:186
 */
static void HostInterface_RxCallback(
                                        uint32_t instance,
                                           void* uartState
                                    )
{
     6b0:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:193
    byteCount;

  uart_state_t*
    state = (uart_state_t*)uartState;

  switch ( hostInterface_rxState )
     6b2:	4d25      	ldr	r5, [pc, #148]	; (748 <HostInterface_RxCallback+0x98>)
     6b4:	782b      	ldrb	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:186
 */
static void HostInterface_RxCallback(
                                        uint32_t instance,
                                           void* uartState
                                    )
{
     6b6:	460c      	mov	r4, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:193
    byteCount;

  uart_state_t*
    state = (uart_state_t*)uartState;

  switch ( hostInterface_rxState )
     6b8:	2b05      	cmp	r3, #5
     6ba:	d83e      	bhi.n	73a <HostInterface_RxCallback+0x8a>
     6bc:	e8df f003 	tbb	[pc, r3]
     6c0:	093d3d03 	.word	0x093d3d03
     6c4:	3223      	.short	0x3223
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:196
  {
    case hostInterface_rxState_idle:  {
                                        if ( gHostInterface_startByte1 == hostInterface_rxPacket.start1 )
     6c6:	4b21      	ldr	r3, [pc, #132]	; (74c <HostInterface_RxCallback+0x9c>)
     6c8:	781b      	ldrb	r3, [r3, #0]
     6ca:	2b55      	cmp	r3, #85	; 0x55
     6cc:	d13a      	bne.n	744 <HostInterface_RxCallback+0x94>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:198
                                        {
                                            hostInterface_rxState++;
     6ce:	2301      	movs	r3, #1
     6d0:	e034      	b.n	73c <HostInterface_RxCallback+0x8c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:207
                                        break;
                                      }

    case hostInterface_rxState_headerReceived:  {
                                                  if  (
                                                               ( gHostInterface_startByte1 != hostInterface_rxPacket.start1 )
     6d2:	4b1e      	ldr	r3, [pc, #120]	; (74c <HostInterface_RxCallback+0x9c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:206

                                        break;
                                      }

    case hostInterface_rxState_headerReceived:  {
                                                  if  (
     6d4:	781a      	ldrb	r2, [r3, #0]
     6d6:	2a55      	cmp	r2, #85	; 0x55
     6d8:	461a      	mov	r2, r3
     6da:	d107      	bne.n	6ec <HostInterface_RxCallback+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:208
                                                               ( gHostInterface_startByte1 != hostInterface_rxPacket.start1 )
                                                        ||     ( gHostInterface_startByte2 != ( hostInterface_rxPacket.start2 & 0xFE ) )
     6dc:	7859      	ldrb	r1, [r3, #1]
     6de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     6e2:	29aa      	cmp	r1, #170	; 0xaa
     6e4:	d102      	bne.n	6ec <HostInterface_RxCallback+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:209
                                                        || ( hostInterface_rxPacket.length >  gHostInterface_dataSize )
     6e6:	78db      	ldrb	r3, [r3, #3]
     6e8:	2b17      	cmp	r3, #23
     6ea:	d903      	bls.n	6f4 <HostInterface_RxCallback+0x44>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:213
                                                      )
                                                  {
                                                    // return to idle state
                                                    hostInterface_rxState = hostInterface_rxState_idle;
     6ec:	2300      	movs	r3, #0
     6ee:	702b      	strb	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:215
                                                    // reset the RX buffer pointer
                                                    state->rxBuff = (uint8_t*) &hostInterface_rxPacket;
     6f0:	60a2      	str	r2, [r4, #8]
     6f2:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:221
                                                  }

                                                  else
                                                  {
                                                    // advance the buffer pointer
                                                    state->rxBuff++;
     6f4:	68a2      	ldr	r2, [r4, #8]
     6f6:	3201      	adds	r2, #1
     6f8:	60a2      	str	r2, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:223

                                                    if ( 0 == hostInterface_rxPacket.length )
     6fa:	b183      	cbz	r3, 71e <HostInterface_RxCallback+0x6e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:231
                                                      hostInterface_rxState = hostInterface_rxState_trailerWait;
                                                    }

                                                    else
                                                    {
                                                      byteCount = 0;
     6fc:	4b14      	ldr	r3, [pc, #80]	; (750 <HostInterface_RxCallback+0xa0>)
     6fe:	2200      	movs	r2, #0
     700:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:233
                                                      // advance to "data-wait" state
                                                      hostInterface_rxState = hostInterface_rxState_dataWait;
     702:	2304      	movs	r3, #4
     704:	e00c      	b.n	720 <HostInterface_RxCallback+0x70>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:241

                                                  break;
                                                }

      case hostInterface_rxState_dataWait:  {
                                              byteCount++;
     706:	4a12      	ldr	r2, [pc, #72]	; (750 <HostInterface_RxCallback+0xa0>)
     708:	7813      	ldrb	r3, [r2, #0]
     70a:	3301      	adds	r3, #1
     70c:	b2db      	uxtb	r3, r3
     70e:	7013      	strb	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:242
                                              (state->rxBuff)++;
     710:	688a      	ldr	r2, [r1, #8]
     712:	3201      	adds	r2, #1
     714:	608a      	str	r2, [r1, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:245

                                              // if we reached the byte-count
                                              if  ( hostInterface_rxPacket.length == byteCount )
     716:	4a0d      	ldr	r2, [pc, #52]	; (74c <HostInterface_RxCallback+0x9c>)
     718:	78d2      	ldrb	r2, [r2, #3]
     71a:	429a      	cmp	r2, r3
     71c:	d112      	bne.n	744 <HostInterface_RxCallback+0x94>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:248
                                              {
                                                // advance to "wait-trailer-bit" state
                                                hostInterface_rxState = hostInterface_rxState_trailerWait;
     71e:	2305      	movs	r3, #5
     720:	702b      	strb	r3, [r5, #0]
     722:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:255

                                              break;
                                            }

      case hostInterface_rxState_trailerWait: {
                                                if ( gHostInterface_trailerByte == *(state->rxBuff) )
     724:	688b      	ldr	r3, [r1, #8]
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b45      	cmp	r3, #69	; 0x45
     72a:	d102      	bne.n	732 <HostInterface_RxCallback+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:258
                                                {
                                                    // put the packet into the RX queue
                                                    HostInterface_RxQueueMsgPut( (hostInterface_packet_t *)&hostInterface_rxPacket );
     72c:	4807      	ldr	r0, [pc, #28]	; (74c <HostInterface_RxCallback+0x9c>)
     72e:	f7ff ffaf 	bl	690 <HostInterface_RxQueueMsgPut>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:262
                                                }

                                                // go back to the idle state
                                                hostInterface_rxState = hostInterface_rxState_idle;
     732:	2300      	movs	r3, #0
     734:	702b      	strb	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:264
                                                // reset the RX buffer pointer
                                                state->rxBuff = (uint8_t *) &hostInterface_rxPacket;
     736:	4b05      	ldr	r3, [pc, #20]	; (74c <HostInterface_RxCallback+0x9c>)
     738:	e003      	b.n	742 <HostInterface_RxCallback+0x92>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:269
                                                break;
                                              }

      default:  {
                  hostInterface_rxState++;
     73a:	3301      	adds	r3, #1
     73c:	702b      	strb	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:270
                  state->rxBuff++;
     73e:	68a3      	ldr	r3, [r4, #8]
     740:	3301      	adds	r3, #1
     742:	60a3      	str	r3, [r4, #8]
     744:	bd38      	pop	{r3, r4, r5, pc}
     746:	bf00      	nop
     748:	1fff0590 	.word	0x1fff0590
     74c:	1fff0574 	.word	0x1fff0574
     750:	1fff0598 	.word	0x1fff0598

00000754 <HostInterface_CmdQueueMsgGet>:
HostInterface_CmdQueueMsgGet():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:389
 */

osa_status_t HostInterface_CmdQueueMsgGet( hostInterface_packet_t* pHostInterface_packet )
{
  osa_status_t
    status = OSA_MsgQGet(hostInterface_cmdQueueHnd, (hostInterface_packet_t *)pHostInterface_packet, gHostInterface_waitTimeout);
     754:	4b07      	ldr	r3, [pc, #28]	; (774 <HostInterface_CmdQueueMsgGet+0x20>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:387
 * @return kStatus_OSA_Success  Message successfully obtained from the queue.
 *         kStatus_OSA_Error    Process fail.
 */

osa_status_t HostInterface_CmdQueueMsgGet( hostInterface_packet_t* pHostInterface_packet )
{
     756:	b510      	push	{r4, lr}
     758:	4601      	mov	r1, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:389
  osa_status_t
    status = OSA_MsgQGet(hostInterface_cmdQueueHnd, (hostInterface_packet_t *)pHostInterface_packet, gHostInterface_waitTimeout);
     75a:	f04f 32ff 	mov.w	r2, #4294967295
     75e:	6818      	ldr	r0, [r3, #0]
     760:	f001 fe36 	bl	23d0 <OSA_MsgQGet>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:391

  if ( kStatus_OSA_Error == status )
     764:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:389
 */

osa_status_t HostInterface_CmdQueueMsgGet( hostInterface_packet_t* pHostInterface_packet )
{
  osa_status_t
    status = OSA_MsgQGet(hostInterface_cmdQueueHnd, (hostInterface_packet_t *)pHostInterface_packet, gHostInterface_waitTimeout);
     766:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:391

  if ( kStatus_OSA_Error == status )
     768:	d102      	bne.n	770 <HostInterface_CmdQueueMsgGet+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:393
  {
    catch(2);
     76a:	2002      	movs	r0, #2
     76c:	f000 f86e 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_rx.c:396
  }
  return (osa_status_t)status;
}
     770:	4620      	mov	r0, r4
     772:	bd10      	pop	{r4, pc}
     774:	1fff0568 	.word	0x1fff0568

00000778 <HostInterface_OkTask>:
HostInterface_OkTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:105
/**
 * send OK packet
 * @param param optional parameter
 */
static void HostInterface_OkTask(task_param_t param)
{
     778:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:109
  while (1)
  {
    osa_status_t
      status = HostInterface_EventSendOkPacketWait();
     77a:	f7ff ff0b 	bl	594 <HostInterface_EventSendOkPacketWait>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:111

    if ( kStatus_OSA_Success == status )
     77e:	2800      	cmp	r0, #0
     780:	d1fb      	bne.n	77a <HostInterface_OkTask+0x2>
HostInterface_FlushPacket():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:126
 * send data packet
 * @param pHostInterface_packet packet to be sent
 */
static void HostInterface_FlushPacket(hostInterface_packet_t * pHostInterface_packet)
{
	test = !test; //toggle test
     782:	4b07      	ldr	r3, [pc, #28]	; (7a0 <HostInterface_OkTask+0x28>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:129

#if defined( SEND_PACKETS_VIA_UART_INT )
    UART_DRV_SendDataBlocking( gHostInterface_instance, (uint8_t*)pHostInterface_packet, pHostInterface_packet->length + gHostInterface_headerSize + 1, UART_TIMEOUT );
     784:	4907      	ldr	r1, [pc, #28]	; (7a4 <HostInterface_OkTask+0x2c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:126
 * send data packet
 * @param pHostInterface_packet packet to be sent
 */
static void HostInterface_FlushPacket(hostInterface_packet_t * pHostInterface_packet)
{
	test = !test; //toggle test
     786:	681a      	ldr	r2, [r3, #0]
     788:	f1d2 0201 	rsbs	r2, r2, #1
     78c:	bf38      	it	cc
     78e:	2200      	movcc	r2, #0
     790:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:129

#if defined( SEND_PACKETS_VIA_UART_INT )
    UART_DRV_SendDataBlocking( gHostInterface_instance, (uint8_t*)pHostInterface_packet, pHostInterface_packet->length + gHostInterface_headerSize + 1, UART_TIMEOUT );
     792:	78ca      	ldrb	r2, [r1, #3]
     794:	230a      	movs	r3, #10
     796:	3205      	adds	r2, #5
     798:	2004      	movs	r0, #4
     79a:	f002 fe99 	bl	34d0 <UART_DRV_SendDataBlocking>
     79e:	e7ec      	b.n	77a <HostInterface_OkTask+0x2>
     7a0:	1fff05a0 	.word	0x1fff05a0
     7a4:	1fff0400 	.word	0x1fff0400

000007a8 <HostInterface_TxInit>:
HostInterface_TxInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:79
/**
 * create RTOS structures for sending data via communication interface
 * @return status flag
 */
osa_status_t HostInterface_TxInit()
{
     7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:81
  osa_status_t
    status = OSA_TaskCreate (
     7aa:	2302      	movs	r3, #2
     7ac:	9300      	str	r3, [sp, #0]
     7ae:	4a09      	ldr	r2, [pc, #36]	; (7d4 <HostInterface_TxInit+0x2c>)
     7b0:	9203      	str	r2, [sp, #12]
     7b2:	2300      	movs	r3, #0
     7b4:	9301      	str	r3, [sp, #4]
     7b6:	9302      	str	r3, [sp, #8]
     7b8:	4807      	ldr	r0, [pc, #28]	; (7d8 <HostInterface_TxInit+0x30>)
     7ba:	4908      	ldr	r1, [pc, #32]	; (7dc <HostInterface_TxInit+0x34>)
     7bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     7c0:	f001 fdc6 	bl	2350 <OSA_TaskCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:92
                            (task_param_t)NULL,
                            false,
                            &hexiwear_intf_OK_handler
                          );

  if ( kStatus_OSA_Success != status )
     7c4:	4604      	mov	r4, r0
     7c6:	b110      	cbz	r0, 7ce <HostInterface_TxInit+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:94
  {
    catch( CATCH_TASK ) ;
     7c8:	2006      	movs	r0, #6
     7ca:	f000 f83f 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intf/src/host_mcu_interface_tx.c:98
  }

  return (osa_status_t)status;
}
     7ce:	4620      	mov	r0, r4
     7d0:	b004      	add	sp, #16
     7d2:	bd10      	pop	{r4, pc}
     7d4:	1fff0564 	.word	0x1fff0564
     7d8:	00000779 	.word	0x00000779
     7dc:	00006dc9 	.word	0x00006dc9

000007e0 <ExecuteOnStackStart>:
ExecuteOnStackStart():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:514
 * launch a FLASH command
 */
static void ExecuteOnStackStart(void)
{
    //  launch a command
    FLASH_FSTAT |= FLASH_FSTAT_CCIF_MASK;
     7e0:	4b04      	ldr	r3, [pc, #16]	; (7f4 <ExecuteOnStackStart+0x14>)
     7e2:	781a      	ldrb	r2, [r3, #0]
     7e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     7e8:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:517 (discriminator 1)

    //  waiting for the finishing of the command
    while( FLASH_FSTAT_CCIF_MASK != ( FLASH_FSTAT & FLASH_FSTAT_CCIF_MASK ) ) {}
     7ea:	781a      	ldrb	r2, [r3, #0]
     7ec:	0612      	lsls	r2, r2, #24
     7ee:	d5fc      	bpl.n	7ea <ExecuteOnStackStart+0xa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:518
}
     7f0:	4770      	bx	lr
     7f2:	bf00      	nop
     7f4:	40020000 	.word	0x40020000

000007f8 <INTFLASH_Init>:
INTFLASH_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:87
{
  uint16_t
    i,
    size;

  foo = (uint32_t)ExecuteOnStackStart;
     7f8:	4a0f      	ldr	r2, [pc, #60]	; (838 <INTFLASH_Init+0x40>)
     7fa:	4b10      	ldr	r3, [pc, #64]	; (83c <INTFLASH_Init+0x44>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:103
  }

  size = sizeof(buffer) - i;

  //  initialize pointer to ram function
  ExecuteOnStack = ( void(*)(void) ) &( buffer[i+1] );
     7fc:	4910      	ldr	r1, [pc, #64]	; (840 <INTFLASH_Init+0x48>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:82

/**
 * initialize the FLASH module
 */
void INTFLASH_Init()
{
     7fe:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:87
  uint16_t
    i,
    size;

  foo = (uint32_t)ExecuteOnStackStart;
     800:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:90

  //  RAM function should have the same alignment as one from ROM
  if ( 0 != ( ( (uint32_t)ExecuteOnStackStart- 1 ) & 0x03 ) )
     802:	3a01      	subs	r2, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:92
  {
    i = 2;
     804:	f012 0f03 	tst.w	r2, #3
     808:	bf0c      	ite	eq
     80a:	2300      	moveq	r3, #0
     80c:	2302      	movne	r3, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:103
  }

  size = sizeof(buffer) - i;

  //  initialize pointer to ram function
  ExecuteOnStack = ( void(*)(void) ) &( buffer[i+1] );
     80e:	1c5d      	adds	r5, r3, #1
     810:	4c0c      	ldr	r4, [pc, #48]	; (844 <INTFLASH_Init+0x4c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:100
  else
  {
    i = 0;
  }

  size = sizeof(buffer) - i;
     812:	f1c3 0080 	rsb	r0, r3, #128	; 0x80
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:103

  //  initialize pointer to ram function
  ExecuteOnStack = ( void(*)(void) ) &( buffer[i+1] );
     816:	440d      	add	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:100
  else
  {
    i = 0;
  }

  size = sizeof(buffer) - i;
     818:	b280      	uxth	r0, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:103

  //  initialize pointer to ram function
  ExecuteOnStack = ( void(*)(void) ) &( buffer[i+1] );
     81a:	6025      	str	r5, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:109 (discriminator 2)
//  ExecuteOnStack = ( void(*)(void) ) &( buffer[0] );

  //  copy function from ROM to RAM
  for( ; i < size; i++ )
  {
    buffer[i] = ( (uint8_t*)ExecuteOnStackStart )[i-1];
     81c:	5cd4      	ldrb	r4, [r2, r3]
     81e:	54cc      	strb	r4, [r1, r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:107 (discriminator 2)
  //  initialize pointer to ram function
  ExecuteOnStack = ( void(*)(void) ) &( buffer[i+1] );
//  ExecuteOnStack = ( void(*)(void) ) &( buffer[0] );

  //  copy function from ROM to RAM
  for( ; i < size; i++ )
     820:	3301      	adds	r3, #1
     822:	b29b      	uxth	r3, r3
     824:	4283      	cmp	r3, r0
     826:	d3f9      	bcc.n	81c <INTFLASH_Init+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/intern_flash/src/flash_boot_kinetis.c:113
  {
    buffer[i] = ( (uint8_t*)ExecuteOnStackStart )[i-1];
  }

  //  initialize the FLASH clock module
  FLASH_INIT_FLASH_CLOCK;
     828:	4a07      	ldr	r2, [pc, #28]	; (848 <INTFLASH_Init+0x50>)
     82a:	f241 033c 	movw	r3, #4156	; 0x103c
     82e:	58d1      	ldr	r1, [r2, r3]
     830:	f041 0101 	orr.w	r1, r1, #1
     834:	50d1      	str	r1, [r2, r3]
     836:	bd30      	pop	{r4, r5, pc}
     838:	000007e1 	.word	0x000007e1
     83c:	1fff05a4 	.word	0x1fff05a4
     840:	1fff05a8 	.word	0x1fff05a8
     844:	1fff0628 	.word	0x1fff0628
     848:	40047000 	.word	0x40047000

0000084c <catch>:
catch():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:43
#include "error.h"
#include "HEXIWEAR_driver.h"

void catch( uint8_t errorCode )
{
  __asm("nop");
     84c:	bf00      	nop
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:45

  if ( CATCH_MEM_ALLOC == errorCode )
     84e:	2810      	cmp	r0, #16
     850:	d100      	bne.n	854 <catch+0x8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:47
  {
	  __asm("nop");
     852:	bf00      	nop
     854:	4770      	bx	lr

00000856 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:53
  }
}

void vApplicationMallocFailedHook()
{
  __asm("nop");
     856:	bf00      	nop
     858:	4770      	bx	lr

0000085a <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:58
}

void vApplicationStackOverflowHook()
{
  __asm("nop");
     85a:	bf00      	nop
     85c:	4770      	bx	lr

0000085e <UsageFault_Handler>:
UsageFault_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:63
}

void UsageFault_Handler()
{
  __asm("nop");
     85e:	bf00      	nop
     860:	4770      	bx	lr

00000862 <HardFault_Handler>:
HardFault_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:68
}

void HardFault_Handler()
{
  __asm("nop");
     862:	bf00      	nop
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:69
  HEXIWEAR_ResetMCU();
     864:	f005 ba32 	b.w	5ccc <HEXIWEAR_ResetMCU>

00000868 <MemManage_Handler>:
MemManage_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:74
}

void MemManage_Handler()
{
  __asm("nop");
     868:	bf00      	nop
     86a:	4770      	bx	lr

0000086c <DefaultISR>:
DefaultISR():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:79
}

void DefaultISR()
{
  __asm("nop");
     86c:	bf00      	nop
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:80
  HEXIWEAR_ResetMCU();
     86e:	f005 ba2d 	b.w	5ccc <HEXIWEAR_ResetMCU>

00000872 <BusFault_Handler>:
BusFault_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:85
}

void BusFault_Handler()
{
  __asm("nop");
     872:	bf00      	nop
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:86
 HEXIWEAR_ResetMCU();
     874:	f005 ba2a 	b.w	5ccc <HEXIWEAR_ResetMCU>

00000878 <NMI_Handler>:
NMI_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:91
}

void NMI_Handler()
{
  __asm("nop");
     878:	bf00      	nop
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/error/src/error.c:92
  HEXIWEAR_ResetMCU();
     87a:	f005 ba27 	b.w	5ccc <HEXIWEAR_ResetMCU>

0000087e <xEventGroupCreate>:
xEventGroupCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:135
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     87e:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:138
EventGroup_t *pxEventBits;

        pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     880:	2018      	movs	r0, #24
     882:	f000 f8ac 	bl	9de <pvPortMalloc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:139
        if( pxEventBits != NULL )
     886:	4604      	mov	r4, r0
     888:	b120      	cbz	r0, 894 <xEventGroupCreate+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:141
        {
                pxEventBits->uxEventBits = 0;
     88a:	2300      	movs	r3, #0
     88c:	f840 3b04 	str.w	r3, [r0], #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:142
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     890:	f000 f8c1 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:151
        {
                traceEVENT_GROUP_CREATE_FAILED();
        }

        return ( EventGroupHandle_t ) pxEventBits;
}
     894:	4620      	mov	r0, r4
     896:	bd10      	pop	{r4, pc}

00000898 <xEventGroupWaitBits>:
xEventGroupWaitBits():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:268
        return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:276
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

         /** Check the user is not attempting to wait on the bits used by the kernel
        itself, and that at least one bit is being requested. */
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     89c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:268
        return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     8a0:	4607      	mov	r7, r0
     8a2:	460c      	mov	r4, r1
     8a4:	4690      	mov	r8, r2
     8a6:	4699      	mov	r9, r3
     8a8:	9e08      	ldr	r6, [sp, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:276
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

         /** Check the user is not attempting to wait on the bits used by the kernel
        itself, and that at least one bit is being requested. */
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     8aa:	d004      	beq.n	8b6 <xEventGroupWaitBits+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:276 (discriminator 1)
     8ac:	f04f 0010 	mov.w	r0, #16
     8b0:	f380 8811 	msr	BASEPRI, r0
     8b4:	e7fe      	b.n	8b4 <xEventGroupWaitBits+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:277
        configASSERT( uxBitsToWaitFor != 0 );
     8b6:	b921      	cbnz	r1, 8c2 <xEventGroupWaitBits+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:277 (discriminator 1)
     8b8:	f04f 0010 	mov.w	r0, #16
     8bc:	f380 8811 	msr	BASEPRI, r0
     8c0:	e7fe      	b.n	8c0 <xEventGroupWaitBits+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:280
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
                configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     8c2:	f001 f803 	bl	18cc <xTaskGetSchedulerState>
     8c6:	b900      	cbnz	r0, 8ca <xEventGroupWaitBits+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:280 (discriminator 2)
     8c8:	b96e      	cbnz	r6, 8e6 <xEventGroupWaitBits+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:284
        }
        #endif

        vTaskSuspendAll();
     8ca:	f000 fd1d 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:286
        {
                const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     8ce:	683d      	ldr	r5, [r7, #0]
     8d0:	ea04 0305 	and.w	r3, r4, r5
prvTestWaitCondition():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:592

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
     8d4:	f1b9 0f00 	cmp.w	r9, #0
     8d8:	d102      	bne.n	8e0 <xEventGroupWaitBits+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:596
        {
                 /** Task only has to wait for one bit within uxBitsToWaitFor to be
                set.  Is one already set? */
                if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     8da:	2b00      	cmp	r3, #0
     8dc:	d13c      	bne.n	958 <xEventGroupWaitBits+0xc0>
     8de:	e007      	b.n	8f0 <xEventGroupWaitBits+0x58>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:609
        }
        else
        {
                 /** Task has to wait for all the bits in uxBitsToWaitFor to be set.
                Are they set already? */
                if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     8e0:	42a3      	cmp	r3, r4
     8e2:	d105      	bne.n	8f0 <xEventGroupWaitBits+0x58>
     8e4:	e038      	b.n	958 <xEventGroupWaitBits+0xc0>
xEventGroupWaitBits():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:280
        itself, and that at least one bit is being requested. */
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
        configASSERT( uxBitsToWaitFor != 0 );
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
                configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     8e6:	f04f 0010 	mov.w	r0, #16
     8ea:	f380 8811 	msr	BASEPRI, r0
     8ee:	e7fe      	b.n	8ee <xEventGroupWaitBits+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:308
                        else
                        {
                                mtCOVERAGE_TEST_MARKER();
                        }
                }
                else if( xTicksToWait == ( TickType_t ) 0 )
     8f0:	b186      	cbz	r6, 914 <xEventGroupWaitBits+0x7c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:270
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     8f2:	f1b8 0f00 	cmp.w	r8, #0
     8f6:	bf14      	ite	ne
     8f8:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
     8fc:	2100      	moveq	r1, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:329
                        else
                        {
                                mtCOVERAGE_TEST_MARKER();
                        }

                        if( xWaitForAllBits != pdFALSE )
     8fe:	f1b9 0f00 	cmp.w	r9, #0
     902:	d001      	beq.n	908 <xEventGroupWaitBits+0x70>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:331
                        {
                                uxControlBits |= eventWAIT_FOR_ALL_BITS;
     904:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:341
                        }

                         /** Store the bits that the calling task is waiting for in the
                        task's event list item so the kernel knows when a match is
                        found.  Then enter the blocked state. */
                        vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     908:	1d38      	adds	r0, r7, #4
     90a:	4321      	orrs	r1, r4
     90c:	4632      	mov	r2, r6
     90e:	f000 fec3 	bl	1698 <vTaskPlaceOnUnorderedEventList>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:346

                         /** This is obsolete as it will get set after the task unblocks, but
                        some compilers mistakenly generate a warning about the variable
                        being returned without being set if it is not done. */
                        uxReturn = 0;
     912:	2500      	movs	r5, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:351

                        traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
                }
        }
        xAlreadyYielded = xTaskResumeAll();
     914:	f000 fd94 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:353

        if( xTicksToWait != ( TickType_t ) 0 )
     918:	b346      	cbz	r6, 96c <xEventGroupWaitBits+0xd4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:355
        {
                if( xAlreadyYielded == pdFALSE )
     91a:	b908      	cbnz	r0, 920 <xEventGroupWaitBits+0x88>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:357
                {
                        portYIELD_WITHIN_API();
     91c:	f001 fa3a 	bl	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:368

                 /** The task blocked to wait for its required bits to be set - at this
                point either the required bits were set or the block time expired.  If
                the required bits were set they will have been stored in the task's
                event list item, and they should now be retrieved then cleared. */
                uxReturn = uxTaskResetEventItemValue();
     920:	f001 f842 	bl	19a8 <uxTaskResetEventItemValue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:370

                if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     924:	0183      	lsls	r3, r0, #6
     926:	d414      	bmi.n	952 <xEventGroupWaitBits+0xba>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:372
                {
                        taskENTER_CRITICAL();
     928:	f001 fa18 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:375
                        {
                                 /** The task timed out, just return the current event bit value. */
                                uxReturn = pxEventBits->uxEventBits;
     92c:	683d      	ldr	r5, [r7, #0]
     92e:	ea04 0305 	and.w	r3, r4, r5
prvTestWaitCondition():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:592

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

        if( xWaitForAllBits == pdFALSE )
     932:	f1b9 0f00 	cmp.w	r9, #0
     936:	d101      	bne.n	93c <xEventGroupWaitBits+0xa4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:596
        {
                 /** Task only has to wait for one bit within uxBitsToWaitFor to be
                set.  Is one already set? */
                if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     938:	b913      	cbnz	r3, 940 <xEventGroupWaitBits+0xa8>
     93a:	e007      	b.n	94c <xEventGroupWaitBits+0xb4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:609
        }
        else
        {
                 /** Task has to wait for all the bits in uxBitsToWaitFor to be set.
                Are they set already? */
                if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     93c:	42a3      	cmp	r3, r4
     93e:	d105      	bne.n	94c <xEventGroupWaitBits+0xb4>
xEventGroupWaitBits():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:381

                                 /** It is possible that the event bits were updated between this
                                task leaving the Blocked state and running again. */
                                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
                                {
                                        if( xClearOnExit != pdFALSE )
     940:	f1b8 0f00 	cmp.w	r8, #0
     944:	d002      	beq.n	94c <xEventGroupWaitBits+0xb4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:383
                                        {
                                                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     946:	ea25 0404 	bic.w	r4, r5, r4
     94a:	603c      	str	r4, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:395 (discriminator 2)
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }
                        }
                        taskEXIT_CRITICAL();
     94c:	f001 fa16 	bl	1d7c <vPortExitCritical>
     950:	e00c      	b.n	96c <xEventGroupWaitBits+0xd4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:403
                }
                else
                {
                         /** The task unblocked because the bits were set.  Clear the control
                        bits before returning the value. */
                        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     952:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     956:	e009      	b.n	96c <xEventGroupWaitBits+0xd4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:299
                        block. */
                        uxReturn = uxCurrentEventBits;
                        xTicksToWait = ( TickType_t ) 0;

                         /** Clear the wait bits if requested to do so. */
                        if( xClearOnExit != pdFALSE )
     958:	f1b8 0f00 	cmp.w	r8, #0
     95c:	d004      	beq.n	968 <xEventGroupWaitBits+0xd0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:301
                        {
                                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     95e:	ea25 0304 	bic.w	r3, r5, r4
     962:	603b      	str	r3, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:296
                if( xWaitConditionMet != pdFALSE )
                {
                         /** The wait condition has already been met so there is no need to
                        block. */
                        uxReturn = uxCurrentEventBits;
                        xTicksToWait = ( TickType_t ) 0;
     964:	2600      	movs	r6, #0
     966:	e7d5      	b.n	914 <xEventGroupWaitBits+0x7c>
     968:	4646      	mov	r6, r8
     96a:	e7d3      	b.n	914 <xEventGroupWaitBits+0x7c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:408
                        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
                }
        }
        traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
        return uxReturn;
}
     96c:	4628      	mov	r0, r5
     96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000972 <xEventGroupSetBits>:
xEventGroupSetBits():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:465
        return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:475
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

         /** Check the user is not attempting to set the bits used by the kernel
        itself. */
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     974:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:465
        return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     978:	4604      	mov	r4, r0
     97a:	460e      	mov	r6, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:475
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

         /** Check the user is not attempting to set the bits used by the kernel
        itself. */
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     97c:	d004      	beq.n	988 <xEventGroupSetBits+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:475 (discriminator 1)
     97e:	f04f 0010 	mov.w	r0, #16
     982:	f380 8811 	msr	BASEPRI, r0
     986:	e7fe      	b.n	986 <xEventGroupSetBits+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:478

        pxList = &( pxEventBits->xTasksWaitingForBits );
        pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     988:	f100 070c 	add.w	r7, r0, #12
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:479
        vTaskSuspendAll();
     98c:	f000 fcbc 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:486
                traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

                pxListItem = listGET_HEAD_ENTRY( pxList );

                 /** Set the bits. */
                pxEventBits->uxEventBits |= uxBitsToSet;
     990:	6823      	ldr	r3, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:483
        pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
        vTaskSuspendAll();
        {
                traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

                pxListItem = listGET_HEAD_ENTRY( pxList );
     992:	6920      	ldr	r0, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:486

                 /** Set the bits. */
                pxEventBits->uxEventBits |= uxBitsToSet;
     994:	431e      	orrs	r6, r3
     996:	6026      	str	r6, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:489 (discriminator 1)

                 /** See if the new bit value should unblock any tasks. */
                while( pxListItem != pxListEnd )
     998:	42b8      	cmp	r0, r7
     99a:	6821      	ldr	r1, [r4, #0]
     99c:	d016      	beq.n	9cc <xEventGroupSetBits+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:492
                {
                        pxNext = listGET_NEXT( pxListItem );
                        uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     99e:	e890 0044 	ldmia.w	r0, {r2, r6}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:499

                         /** Split the bits waited for from the control bits. */
                        uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                        uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

                        if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     9a2:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:497
                        uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
                        xMatchFound = pdFALSE;

                         /** Split the bits waited for from the control bits. */
                        uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
                        uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     9a6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:499

                        if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     9aa:	d102      	bne.n	9b2 <xEventGroupSetBits+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:502
                        {
                                 /** Just looking for single bit being set. */
                                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     9ac:	420b      	tst	r3, r1
     9ae:	d104      	bne.n	9ba <xEventGroupSetBits+0x48>
     9b0:	e00a      	b.n	9c8 <xEventGroupSetBits+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:511
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }
                        }
                        else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     9b2:	ea03 0e01 	and.w	lr, r3, r1
     9b6:	459e      	cmp	lr, r3
     9b8:	d106      	bne.n	9c8 <xEventGroupSetBits+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:524
                        }

                        if( xMatchFound != pdFALSE )
                        {
                                 /** The bits match.  Should the bits be cleared on exit? */
                                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     9ba:	01d2      	lsls	r2, r2, #7
     9bc:	d500      	bpl.n	9c0 <xEventGroupSetBits+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:526
                                {
                                        uxBitsToClear |= uxBitsWaitedFor;
     9be:	431d      	orrs	r5, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:538
                                 /** Store the actual event flag value in the task's event list
                                item before removing the task from the event list.  The
                                eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                                that is was unblocked due to its required bits matching, rather
                                than because it timed out. */
                                ( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     9c0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
     9c4:	f000 fef6 	bl	17b4 <xTaskRemoveFromUnorderedEventList>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:465 (discriminator 1)
        return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     9c8:	4630      	mov	r0, r6
     9ca:	e7e5      	b.n	998 <xEventGroupSetBits+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:549
                        pxListItem = pxNext;
                }

                 /** Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
                bit was set in the control word. */
                pxEventBits->uxEventBits &= ~uxBitsToClear;
     9cc:	ea21 0105 	bic.w	r1, r1, r5
     9d0:	6021      	str	r1, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:551
        }
        ( void ) xTaskResumeAll();
     9d2:	f000 fd35 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:553

        return pxEventBits->uxEventBits;
     9d6:	6820      	ldr	r0, [r4, #0]
     9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000009da <vEventGroupSetBitsCallback>:
vEventGroupSetBitsCallback():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/event_groups.c:584

 /** For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
        ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     9da:	f7ff bfca 	b.w	972 <xEventGroupSetBits>

000009de <pvPortMalloc>:
pvPortMalloc():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:98
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     9de:	b510      	push	{r4, lr}
     9e0:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:101
void *pvReturn;

        vTaskSuspendAll();
     9e2:	f000 fc91 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:103
        {
                pvReturn = malloc( xWantedSize );
     9e6:	4620      	mov	r0, r4
     9e8:	f005 fa9c 	bl	5f24 <malloc>
     9ec:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:106
                traceMALLOC( pvReturn, xWantedSize );
        }
        (void)xTaskResumeAll();
     9ee:	f000 fd27 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:110

        #if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
                if( pvReturn == NULL )
     9f2:	b90c      	cbnz	r4, 9f8 <pvPortMalloc+0x1a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:113
                {
                        extern void vApplicationMallocFailedHook( void );
                        vApplicationMallocFailedHook();
     9f4:	f7ff ff2f 	bl	856 <vApplicationMallocFailedHook>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:119
                }
        }
        #endif

        return pvReturn;
}
     9f8:	4620      	mov	r0, r4
     9fa:	bd10      	pop	{r4, pc}

000009fc <vPortFree>:
vPortFree():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:123
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     9fc:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:124
        if( pv )
     9fe:	4604      	mov	r4, r0
     a00:	b140      	cbz	r0, a14 <vPortFree+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:126
        {
                vTaskSuspendAll();
     a02:	f000 fc81 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:128
                {
                        free( pv );
     a06:	4620      	mov	r0, r4
     a08:	f005 fa94 	bl	5f34 <free>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:133
                        traceFREE( pv, 0 );
                }
                (void)xTaskResumeAll();
        }
}
     a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/heap_3.c:131
                vTaskSuspendAll();
                {
                        free( pv );
                        traceFREE( pv, 0 );
                }
                (void)xTaskResumeAll();
     a10:	f000 bd16 	b.w	1440 <xTaskResumeAll>
     a14:	bd10      	pop	{r4, pc}

00000a16 <vListInitialise>:
vListInitialise():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:80
void vListInitialise( List_t * const pxList )
{
         /** The list structure contains a list item which is used to mark the
        end of the list.  To initialise the list the list end is inserted
        as the only list entry. */
        pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );                       /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a16:	f100 0308 	add.w	r3, r0, #8
     a1a:	6043      	str	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:84

         /** The list end value is the highest possible value in the list to
        ensure it remains at the end of the list. */
        pxList->xListEnd.xItemValue = portMAX_DELAY;
     a1c:	f04f 32ff 	mov.w	r2, #4294967295
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:88

         /** The list end next and previous pointers point to itself so we know
        when the list is empty. */
        pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );       /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a20:	60c3      	str	r3, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:89
        pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a22:	6103      	str	r3, [r0, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:91

        pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a24:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:84
        as the only list entry. */
        pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );                       /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

         /** The list end value is the highest possible value in the list to
        ensure it remains at the end of the list. */
        pxList->xListEnd.xItemValue = portMAX_DELAY;
     a26:	6082      	str	r2, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:91
         /** The list end next and previous pointers point to itself so we know
        when the list is empty. */
        pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );       /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
        pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

        pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a28:	6003      	str	r3, [r0, #0]
     a2a:	4770      	bx	lr

00000a2c <vListInitialiseItem>:
vListInitialiseItem():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:98
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
         /** Make sure the list item is not recorded as being on a list. */
        pxItem->pvContainer = NULL;
     a2c:	2300      	movs	r3, #0
     a2e:	6103      	str	r3, [r0, #16]
     a30:	4770      	bx	lr

00000a32 <vListInsertEnd>:
vListInsertEnd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:104
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     a32:	6843      	ldr	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:109

         /** Insert a new list item into pxList, but rather than sort the list,
        makes the new list item the last item to be removed by a call to
        listGET_OWNER_OF_NEXT_ENTRY(). */
        pxNewListItem->pxNext = pxIndex;
     a34:	604b      	str	r3, [r1, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:110
        pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a36:	689a      	ldr	r2, [r3, #8]
     a38:	608a      	str	r2, [r1, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:111
        pxIndex->pxPrevious->pxNext = pxNewListItem;
     a3a:	689a      	ldr	r2, [r3, #8]
     a3c:	6051      	str	r1, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:112
        pxIndex->pxPrevious = pxNewListItem;
     a3e:	6099      	str	r1, [r3, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:117

         /** Remember which list the item is in. */
        pxNewListItem->pvContainer = ( void * ) pxList;

        ( pxList->uxNumberOfItems )++;
     a40:	6803      	ldr	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:115
        pxNewListItem->pxPrevious = pxIndex->pxPrevious;
        pxIndex->pxPrevious->pxNext = pxNewListItem;
        pxIndex->pxPrevious = pxNewListItem;

         /** Remember which list the item is in. */
        pxNewListItem->pvContainer = ( void * ) pxList;
     a42:	6108      	str	r0, [r1, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:117

        ( pxList->uxNumberOfItems )++;
     a44:	3301      	adds	r3, #1
     a46:	6003      	str	r3, [r0, #0]
     a48:	4770      	bx	lr

00000a4a <vListInsert>:
vListInsert():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:122
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a4a:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:124
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a4c:	680c      	ldr	r4, [r1, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:135
        are stored in ready lists (all of which have the same xItemValue value)
        get an equal share of the CPU.  However, if the xItemValue is the same as
        the back marker the iteration loop below will not end.  This means we need
        to guard against this by checking the value first and modifying the
        algorithm slightly if necessary. */
        if( xValueOfInsertion == portMAX_DELAY )
     a4e:	1c63      	adds	r3, r4, #1
     a50:	d101      	bne.n	a56 <vListInsert+0xc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:137
        {
                pxIterator = pxList->xListEnd.pxPrevious;
     a52:	6903      	ldr	r3, [r0, #16]
     a54:	e007      	b.n	a66 <vListInsert+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:159
                           before vTaskStartScheduler() has been called?).
                See http://www.freertos.org/FAQHelp.html for more tips, and ensure
                configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
                */

                for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a56:	f100 0308 	add.w	r3, r0, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:159 (discriminator 1)
     a5a:	685a      	ldr	r2, [r3, #4]
     a5c:	6815      	ldr	r5, [r2, #0]
     a5e:	42a5      	cmp	r5, r4
     a60:	d801      	bhi.n	a66 <vListInsert+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:159
     a62:	4613      	mov	r3, r2
     a64:	e7f9      	b.n	a5a <vListInsert+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:166
                         /** There is nothing to do here, we are just iterating to the
                        wanted insertion position. */
                }
        }

        pxNewListItem->pxNext = pxIterator->pxNext;
     a66:	685a      	ldr	r2, [r3, #4]
     a68:	604a      	str	r2, [r1, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:167
        pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a6a:	6091      	str	r1, [r2, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:168
        pxNewListItem->pxPrevious = pxIterator;
     a6c:	608b      	str	r3, [r1, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:169
        pxIterator->pxNext = pxNewListItem;
     a6e:	6059      	str	r1, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:175

         /** Remember which list the item is in.  This allows fast removal of the
        item later. */
        pxNewListItem->pvContainer = ( void * ) pxList;

        ( pxList->uxNumberOfItems )++;
     a70:	6803      	ldr	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:173
        pxNewListItem->pxPrevious = pxIterator;
        pxIterator->pxNext = pxNewListItem;

         /** Remember which list the item is in.  This allows fast removal of the
        item later. */
        pxNewListItem->pvContainer = ( void * ) pxList;
     a72:	6108      	str	r0, [r1, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:175

        ( pxList->uxNumberOfItems )++;
     a74:	3301      	adds	r3, #1
     a76:	6003      	str	r3, [r0, #0]
     a78:	bd30      	pop	{r4, r5, pc}

00000a7a <uxListRemove>:
uxListRemove():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:185
{
 /** The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

        pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a7a:	6841      	ldr	r1, [r0, #4]
     a7c:	6882      	ldr	r2, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:183

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 /** The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     a7e:	6903      	ldr	r3, [r0, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:185

        pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a80:	608a      	str	r2, [r1, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:186
        pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a82:	6882      	ldr	r2, [r0, #8]
     a84:	6051      	str	r1, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:189

         /** Make sure the index is left pointing to a valid item. */
        if( pxList->pxIndex == pxItemToRemove )
     a86:	6859      	ldr	r1, [r3, #4]
     a88:	4281      	cmp	r1, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:191
        {
                pxList->pxIndex = pxItemToRemove->pxPrevious;
     a8a:	bf08      	it	eq
     a8c:	605a      	streq	r2, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:198
        else
        {
                mtCOVERAGE_TEST_MARKER();
        }

        pxItemToRemove->pvContainer = NULL;
     a8e:	2200      	movs	r2, #0
     a90:	6102      	str	r2, [r0, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:199
        ( pxList->uxNumberOfItems )--;
     a92:	6818      	ldr	r0, [r3, #0]
     a94:	3801      	subs	r0, #1
     a96:	6018      	str	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/list.c:202

        return pxList->uxNumberOfItems;
}
     a98:	4770      	bx	lr

00000a9a <prvCopyDataToQueue>:
prvCopyDataToQueue():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1595

#endif  /** configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     a9a:	b538      	push	{r3, r4, r5, lr}
     a9c:	4615      	mov	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1596
        if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     a9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1595

#endif  /** configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     aa0:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1596
        if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     aa2:	b932      	cbnz	r2, ab2 <prvCopyDataToQueue+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1600
        {
                #if ( configUSE_MUTEXES == 1 )
                {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     aa4:	6805      	ldr	r5, [r0, #0]
     aa6:	bb3d      	cbnz	r5, af8 <prvCopyDataToQueue+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1603
                        {
                                 /** The mutex is no longer being held. */
                                vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     aa8:	6840      	ldr	r0, [r0, #4]
     aaa:	f000 ff57 	bl	195c <vTaskPriorityDisinherit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1604
                                pxQueue->pxMutexHolder = NULL;
     aae:	6065      	str	r5, [r4, #4]
     ab0:	e022      	b.n	af8 <prvCopyDataToQueue+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1613
                                mtCOVERAGE_TEST_MARKER();
                        }
                }
                #endif  /** configUSE_MUTEXES */
        }
        else if( xPosition == queueSEND_TO_BACK )
     ab2:	b965      	cbnz	r5, ace <prvCopyDataToQueue+0x34>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1615
        {
                ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     ab4:	6880      	ldr	r0, [r0, #8]
     ab6:	f005 fa45 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1616
                pxQueue->pcWriteTo += pxQueue->uxItemSize;
     aba:	68a2      	ldr	r2, [r4, #8]
     abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
     abe:	4413      	add	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1617
                if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ac0:	6862      	ldr	r2, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1616
                #endif  /** configUSE_MUTEXES */
        }
        else if( xPosition == queueSEND_TO_BACK )
        {
                ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
                pxQueue->pcWriteTo += pxQueue->uxItemSize;
     ac2:	60a3      	str	r3, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1617
                if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ac4:	4293      	cmp	r3, r2
     ac6:	d317      	bcc.n	af8 <prvCopyDataToQueue+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1619
                {
                        pxQueue->pcWriteTo = pxQueue->pcHead;
     ac8:	6823      	ldr	r3, [r4, #0]
     aca:	60a3      	str	r3, [r4, #8]
     acc:	e014      	b.n	af8 <prvCopyDataToQueue+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1628
                        mtCOVERAGE_TEST_MARKER();
                }
        }
        else
        {
                ( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ace:	68c0      	ldr	r0, [r0, #12]
     ad0:	f005 fa38 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1629
                pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
     ad6:	68e2      	ldr	r2, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1630
                if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ad8:	6821      	ldr	r1, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1629
                }
        }
        else
        {
                ( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     ada:	425b      	negs	r3, r3
     adc:	441a      	add	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1630
                if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ade:	428a      	cmp	r2, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1629
                }
        }
        else
        {
                ( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     ae0:	60e2      	str	r2, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1630
                if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ae2:	d202      	bcs.n	aea <prvCopyDataToQueue+0x50>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1632
                {
                        pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     ae4:	6862      	ldr	r2, [r4, #4]
     ae6:	4413      	add	r3, r2
     ae8:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1639
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }

                if( xPosition == queueOVERWRITE )
     aea:	2d02      	cmp	r5, #2
     aec:	d104      	bne.n	af8 <prvCopyDataToQueue+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1641
                {
                        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     af0:	b113      	cbz	r3, af8 <prvCopyDataToQueue+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1647
                        {
                                 /** An item is not being added but overwritten, so subtract
                                one from the recorded number of items in the queue so when
                                one is added again below the number of recorded items remains
                                correct. */
                                --( pxQueue->uxMessagesWaiting );
     af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     af4:	3b01      	subs	r3, #1
     af6:	63a3      	str	r3, [r4, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1660
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }

        ++( pxQueue->uxMessagesWaiting );
     af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     afa:	3301      	adds	r3, #1
     afc:	63a3      	str	r3, [r4, #56]	; 0x38
     afe:	bd38      	pop	{r3, r4, r5, pc}

00000b00 <prvCopyDataFromQueue>:
prvCopyDataFromQueue():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1665
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     b00:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1666
        if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     b02:	6804      	ldr	r4, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1665
        ++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     b04:	4603      	mov	r3, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1666
        if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     b06:	b16c      	cbz	r4, b24 <prvCopyDataFromQueue+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1668
        {
                pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b08:	68c5      	ldr	r5, [r0, #12]
     b0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1669
                if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     b0c:	6846      	ldr	r6, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1668

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
        if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
        {
                pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b0e:	4415      	add	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1669
                if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     b10:	42b5      	cmp	r5, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1668

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
        if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
        {
                pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b12:	60c5      	str	r5, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1671
                if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
                {
                        pxQueue->u.pcReadFrom = pxQueue->pcHead;
     b14:	bf28      	it	cs
     b16:	60c4      	strcs	r4, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1683
        }
        else
        {
                mtCOVERAGE_TEST_MARKER();
        }
}
     b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1677
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
                ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     b1c:	4608      	mov	r0, r1
     b1e:	68d9      	ldr	r1, [r3, #12]
     b20:	f005 ba10 	b.w	5f44 <memcpy>
     b24:	bd70      	pop	{r4, r5, r6, pc}

00000b26 <prvUnlockQueue>:
prvUnlockQueue():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1687
        }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     b26:	b510      	push	{r4, lr}
     b28:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1694

         /** The lock counts contains the number of extra data items placed or
        removed from the queue while the queue was locked.  When a queue is
        locked items can be added or removed, but the event lists cannot be
        updated. */
        taskENTER_CRITICAL();
     b2a:	f001 f917 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1697 (discriminator 1)
        {
                 /** See if data was added to the queue while it was locked. */
                while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     b2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     b30:	2b00      	cmp	r3, #0
     b32:	dd0c      	ble.n	b4e <prvUnlockQueue+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1744
                        }
                        #else  /** configUSE_QUEUE_SETS */
                        {
                                 /** Tasks that are removed from the event list will get added to
                                the pending ready list as the scheduler is still suspended. */
                                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
     b36:	b153      	cbz	r3, b4e <prvUnlockQueue+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1746
                                {
                                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b38:	f104 0024 	add.w	r0, r4, #36	; 0x24
     b3c:	f000 fdfe 	bl	173c <xTaskRemoveFromEventList>
     b40:	b108      	cbz	r0, b46 <prvUnlockQueue+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1750
                                        {
                                                 /** The task waiting has a higher priority so record that a
                                                context switch is required. */
                                                vTaskMissedYield();
     b42:	f000 feb7 	bl	18b4 <vTaskMissedYield>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1764
                                        break;
                                }
                        }
                        #endif  /** configUSE_QUEUE_SETS */

                        --( pxQueue->xTxLock );
     b46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     b48:	3b01      	subs	r3, #1
     b4a:	64a3      	str	r3, [r4, #72]	; 0x48
     b4c:	e7ef      	b.n	b2e <prvUnlockQueue+0x8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1767
                }

                pxQueue->xTxLock = queueUNLOCKED;
     b4e:	f04f 33ff 	mov.w	r3, #4294967295
     b52:	64a3      	str	r3, [r4, #72]	; 0x48
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1769
        }
        taskEXIT_CRITICAL();
     b54:	f001 f912 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1772

         /** Do the same for the Rx lock. */
        taskENTER_CRITICAL();
     b58:	f001 f900 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1774 (discriminator 1)
        {
                while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     b5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b5e:	2b00      	cmp	r3, #0
     b60:	dd0c      	ble.n	b7c <prvUnlockQueue+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1776
                {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     b62:	6923      	ldr	r3, [r4, #16]
     b64:	b153      	cbz	r3, b7c <prvUnlockQueue+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1778
                        {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b66:	f104 0010 	add.w	r0, r4, #16
     b6a:	f000 fde7 	bl	173c <xTaskRemoveFromEventList>
     b6e:	b108      	cbz	r0, b74 <prvUnlockQueue+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1780
                                {
                                        vTaskMissedYield();
     b70:	f000 fea0 	bl	18b4 <vTaskMissedYield>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1787
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }

                                --( pxQueue->xRxLock );
     b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b76:	3b01      	subs	r3, #1
     b78:	6463      	str	r3, [r4, #68]	; 0x44
     b7a:	e7ef      	b.n	b5c <prvUnlockQueue+0x36>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1795
                        {
                                break;
                        }
                }

                pxQueue->xRxLock = queueUNLOCKED;
     b7c:	f04f 33ff 	mov.w	r3, #4294967295
     b80:	6463      	str	r3, [r4, #68]	; 0x44
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1798
        }
        taskEXIT_CRITICAL();
}
     b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1797
                        }
                }

                pxQueue->xRxLock = queueUNLOCKED;
        }
        taskEXIT_CRITICAL();
     b86:	f001 b8f9 	b.w	1d7c <vPortExitCritical>

00000b8a <xQueueGenericReset>:
xQueueGenericReset():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:256
        }                                                                                                               \
        taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     b8a:	b538      	push	{r3, r4, r5, lr}
     b8c:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:259
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

        configASSERT( pxQueue );
     b8e:	4604      	mov	r4, r0
     b90:	b920      	cbnz	r0, b9c <xQueueGenericReset+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:259 (discriminator 1)
     b92:	f04f 0010 	mov.w	r0, #16
     b96:	f380 8811 	msr	BASEPRI, r0
     b9a:	e7fe      	b.n	b9a <xQueueGenericReset+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:261

        taskENTER_CRITICAL();
     b9c:	f001 f8de 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:263
        {
                pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     ba0:	6c22      	ldr	r2, [r4, #64]	; 0x40
     ba2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     ba4:	6823      	ldr	r3, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:265
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                pxQueue->pcWriteTo = pxQueue->pcHead;
     ba6:	60a3      	str	r3, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:263

        configASSERT( pxQueue );

        taskENTER_CRITICAL();
        {
                pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     ba8:	4350      	muls	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:266
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                pxQueue->pcWriteTo = pxQueue->pcHead;
                pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     baa:	1a82      	subs	r2, r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:263

        configASSERT( pxQueue );

        taskENTER_CRITICAL();
        {
                pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     bac:	1819      	adds	r1, r3, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:266
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                pxQueue->pcWriteTo = pxQueue->pcHead;
                pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     bae:	4413      	add	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:263

        configASSERT( pxQueue );

        taskENTER_CRITICAL();
        {
                pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     bb0:	6061      	str	r1, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:266
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                pxQueue->pcWriteTo = pxQueue->pcHead;
                pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     bb2:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:264
        configASSERT( pxQueue );

        taskENTER_CRITICAL();
        {
                pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     bb4:	2100      	movs	r1, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:267
                pxQueue->pcWriteTo = pxQueue->pcHead;
                pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
                pxQueue->xRxLock = queueUNLOCKED;
     bb6:	f04f 33ff 	mov.w	r3, #4294967295
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:264
        configASSERT( pxQueue );

        taskENTER_CRITICAL();
        {
                pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     bba:	63a1      	str	r1, [r4, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:267
                pxQueue->pcWriteTo = pxQueue->pcHead;
                pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
                pxQueue->xRxLock = queueUNLOCKED;
     bbc:	6463      	str	r3, [r4, #68]	; 0x44
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:268
                pxQueue->xTxLock = queueUNLOCKED;
     bbe:	64a3      	str	r3, [r4, #72]	; 0x48
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:270

                if( xNewQueue == pdFALSE )
     bc0:	b955      	cbnz	r5, bd8 <xQueueGenericReset+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:277
                         /** If there are tasks blocked waiting to read from the queue, then
                        the tasks will remain blocked as after this function exits the queue
                        will still be empty.  If there are tasks blocked waiting to write to
                        the queue, then one should be unblocked as after this function exits
                        it will be possible to write to it. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     bc2:	6923      	ldr	r3, [r4, #16]
     bc4:	b183      	cbz	r3, be8 <xQueueGenericReset+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:279
                        {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     bc6:	f104 0010 	add.w	r0, r4, #16
     bca:	f000 fdb7 	bl	173c <xTaskRemoveFromEventList>
     bce:	2801      	cmp	r0, #1
     bd0:	d10a      	bne.n	be8 <xQueueGenericReset+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:281
                                {
                                        queueYIELD_IF_USING_PREEMPTION();
     bd2:	f001 f8df 	bl	1d94 <vPortYieldFromISR>
     bd6:	e007      	b.n	be8 <xQueueGenericReset+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:296
                        }
                }
                else
                {
                         /** Ensure the event queues start in the correct state. */
                        vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     bd8:	f104 0010 	add.w	r0, r4, #16
     bdc:	f7ff ff1b 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:297
                        vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     be0:	f104 0024 	add.w	r0, r4, #36	; 0x24
     be4:	f7ff ff17 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:300
                }
        }
        taskEXIT_CRITICAL();
     be8:	f001 f8c8 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:305

         /** A value is returned for calling semantic consistency with previous
        versions. */
        return pdPASS;
}
     bec:	2001      	movs	r0, #1
     bee:	bd38      	pop	{r3, r4, r5, pc}

00000bf0 <xQueueGenericCreate>:
xQueueGenericCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:309
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
     bf0:	b570      	push	{r4, r5, r6, lr}
     bf2:	460e      	mov	r6, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:319
         /** Remove compiler warnings about unused parameters should
        configUSE_TRACE_FACILITY not be set to 1. */
        ( void ) ucQueueType;

         /** Allocate the new queue structure. */
        if( uxQueueLength > ( UBaseType_t ) 0 )
     bf4:	4605      	mov	r5, r0
     bf6:	b170      	cbz	r0, c16 <xQueueGenericCreate+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:321
        {
                pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     bf8:	204c      	movs	r0, #76	; 0x4c
     bfa:	f7ff fef0 	bl	9de <pvPortMalloc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:322
                if( pxNewQueue != NULL )
     bfe:	4604      	mov	r4, r0
     c00:	b148      	cbz	r0, c16 <xQueueGenericCreate+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:326
                {
                         /** Create the list of pointers to queue items.  The queue is one byte
                        longer than asked for to make wrap checking easier/faster. */
                        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     c02:	fb06 f005 	mul.w	r0, r6, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:328

                        pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
     c06:	3001      	adds	r0, #1
     c08:	f7ff fee9 	bl	9de <pvPortMalloc>
     c0c:	6020      	str	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:329
                        if( pxNewQueue->pcHead != NULL )
     c0e:	b938      	cbnz	r0, c20 <xQueueGenericCreate+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:355
                                xReturn = pxNewQueue;
                        }
                        else
                        {
                                traceQUEUE_CREATE_FAILED( ucQueueType );
                                vPortFree( pxNewQueue );
     c10:	4620      	mov	r0, r4
     c12:	f7ff fef3 	bl	9fc <vPortFree>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:368
        else
        {
                mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
     c16:	f04f 0010 	mov.w	r0, #16
     c1a:	f380 8811 	msr	BASEPRI, r0
     c1e:	e7fe      	b.n	c1e <xQueueGenericCreate+0x2e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:333
                        pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
                        if( pxNewQueue->pcHead != NULL )
                        {
                                 /** Initialise the queue members as described above where the
                                queue type is defined. */
                                pxNewQueue->uxLength = uxQueueLength;
     c20:	63e5      	str	r5, [r4, #60]	; 0x3c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:334
                                pxNewQueue->uxItemSize = uxItemSize;
     c22:	6426      	str	r6, [r4, #64]	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:335
                                ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     c24:	4620      	mov	r0, r4
     c26:	2101      	movs	r1, #1
     c28:	f7ff ffaf 	bl	b8a <xQueueGenericReset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:371
        }

        configASSERT( xReturn );

        return xReturn;
}
     c2c:	4620      	mov	r0, r4
     c2e:	bd70      	pop	{r4, r5, r6, pc}

00000c30 <xQueueGetMutexHolder>:
xQueueGetMutexHolder():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:442
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

        void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
        {
     c30:	b510      	push	{r4, lr}
     c32:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:450
                 /** This function is called by xSemaphoreGetMutexHolder(), and should not
                be called directly.  Note:  This is a good way of determining if the
                calling task is the mutex holder, but not a good way of determining the
                identity of the mutex holder, as the holder may change between the
                following critical section exiting and the function returning. */
                taskENTER_CRITICAL();
     c34:	f001 f892 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:452
                {
                        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
     c38:	6823      	ldr	r3, [r4, #0]
     c3a:	b90b      	cbnz	r3, c40 <xQueueGetMutexHolder+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:454
                        {
                                pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
     c3c:	6864      	ldr	r4, [r4, #4]
     c3e:	e000      	b.n	c42 <xQueueGetMutexHolder+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:458
                        }
                        else
                        {
                                pxReturn = NULL;
     c40:	2400      	movs	r4, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:461
                        }
                }
                taskEXIT_CRITICAL();
     c42:	f001 f89b 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:464

                return pxReturn;
        }
     c46:	4620      	mov	r0, r4
     c48:	bd10      	pop	{r4, pc}

00000c4a <xQueueCreateCountingSemaphore>:
xQueueCreateCountingSemaphore():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:567
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

        QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
        {
     c4a:	b510      	push	{r4, lr}
     c4c:	460c      	mov	r4, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:570
        QueueHandle_t xHandle;

                configASSERT( uxMaxCount != 0 );
     c4e:	b920      	cbnz	r0, c5a <xQueueCreateCountingSemaphore+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:570 (discriminator 1)
     c50:	f04f 0010 	mov.w	r0, #16
     c54:	f380 8811 	msr	BASEPRI, r0
     c58:	e7fe      	b.n	c58 <xQueueCreateCountingSemaphore+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:571
                configASSERT( uxInitialCount <= uxMaxCount );
     c5a:	4281      	cmp	r1, r0
     c5c:	d904      	bls.n	c68 <xQueueCreateCountingSemaphore+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:571 (discriminator 1)
     c5e:	f04f 0010 	mov.w	r0, #16
     c62:	f380 8811 	msr	BASEPRI, r0
     c66:	e7fe      	b.n	c66 <xQueueCreateCountingSemaphore+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:573

                xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     c68:	2100      	movs	r1, #0
     c6a:	2202      	movs	r2, #2
     c6c:	f7ff ffc0 	bl	bf0 <xQueueGenericCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:575

                if( xHandle != NULL )
     c70:	b108      	cbz	r0, c76 <xQueueCreateCountingSemaphore+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:577
                {
                        ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
     c72:	6384      	str	r4, [r0, #56]	; 0x38
     c74:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:586
                else
                {
                        traceCREATE_COUNTING_SEMAPHORE_FAILED();
                }

                configASSERT( xHandle );
     c76:	f04f 0010 	mov.w	r0, #16
     c7a:	f380 8811 	msr	BASEPRI, r0
     c7e:	e7fe      	b.n	c7e <xQueueCreateCountingSemaphore+0x34>

00000c80 <xQueueGenericSend>:
xQueueGenericSend():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:594

#endif  /** configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     c84:	460e      	mov	r6, r1
     c86:	9201      	str	r2, [sp, #4]
     c88:	461d      	mov	r5, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:599
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

        configASSERT( pxQueue );
     c8a:	4604      	mov	r4, r0
     c8c:	b920      	cbnz	r0, c98 <xQueueGenericSend+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:599 (discriminator 1)
     c8e:	f04f 0010 	mov.w	r0, #16
     c92:	f380 8811 	msr	BASEPRI, r0
     c96:	e7fe      	b.n	c96 <xQueueGenericSend+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:600
        configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     c98:	b931      	cbnz	r1, ca8 <xQueueGenericSend+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:600 (discriminator 2)
     c9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
     c9c:	b123      	cbz	r3, ca8 <xQueueGenericSend+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:600
     c9e:	f04f 0010 	mov.w	r0, #16
     ca2:	f380 8811 	msr	BASEPRI, r0
     ca6:	e7fe      	b.n	ca6 <xQueueGenericSend+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:601
        configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     ca8:	2d02      	cmp	r5, #2
     caa:	d107      	bne.n	cbc <xQueueGenericSend+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:601 (discriminator 2)
     cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     cae:	2b01      	cmp	r3, #1
     cb0:	d004      	beq.n	cbc <xQueueGenericSend+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:601
     cb2:	f04f 0010 	mov.w	r0, #16
     cb6:	f380 8811 	msr	BASEPRI, r0
     cba:	e7fe      	b.n	cba <xQueueGenericSend+0x3a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:604
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
                configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     cbc:	f000 fe06 	bl	18cc <xTaskGetSchedulerState>
     cc0:	b910      	cbnz	r0, cc8 <xQueueGenericSend+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:604 (discriminator 2)
     cc2:	9b01      	ldr	r3, [sp, #4]
     cc4:	2b00      	cmp	r3, #0
     cc6:	d164      	bne.n	d92 <xQueueGenericSend+0x112>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:594

#endif  /** configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     cc8:	2700      	movs	r7, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:614
         /** This function relaxes the coding standard somewhat to allow return
        statements within the function itself.  This is done in the interest
        of execution time efficiency. */
        for( ;; )
        {
                taskENTER_CRITICAL();
     cca:	f001 f847 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:620
                {
                         /** Is there room on the queue now?  The running task must be
                        the highest priority task wanting to access the queue.  If
                        the head item in the queue is to be overwritten then it does
                        not matter if the queue is full. */
                        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     cce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     cd2:	429a      	cmp	r2, r3
     cd4:	d301      	bcc.n	cda <xQueueGenericSend+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:620 (discriminator 1)
     cd6:	2d02      	cmp	r5, #2
     cd8:	d112      	bne.n	d00 <xQueueGenericSend+0x80>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:623
                        {
                                traceQUEUE_SEND( pxQueue );
                                prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     cda:	4620      	mov	r0, r4
     cdc:	4631      	mov	r1, r6
     cde:	462a      	mov	r2, r5
     ce0:	f7ff fedb 	bl	a9a <prvCopyDataToQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:670
                                }
                                #else  /** configUSE_QUEUE_SETS */
                                {
                                         /** If there was a task waiting for data to arrive on the
                                        queue then unblock it now. */
                                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ce6:	b13b      	cbz	r3, cf8 <xQueueGenericSend+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:672
                                        {
                                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     ce8:	f104 0024 	add.w	r0, r4, #36	; 0x24
     cec:	f000 fd26 	bl	173c <xTaskRemoveFromEventList>
     cf0:	2801      	cmp	r0, #1
     cf2:	d101      	bne.n	cf8 <xQueueGenericSend+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:678
                                                {
                                                         /** The unblocked task has a priority higher than
                                                        our own so yield immediately.  Yes it is ok to do
                                                        this from within the critical section - the kernel
                                                        takes care of that. */
                                                        queueYIELD_IF_USING_PREEMPTION();
     cf4:	f001 f84e 	bl	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:692
                                                mtCOVERAGE_TEST_MARKER();
                                        }
                                }
                                #endif  /** configUSE_QUEUE_SETS */

                                taskEXIT_CRITICAL();
     cf8:	f001 f840 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:696

                                 /** Return to the original privilege level before exiting the
                                function. */
                                return pdPASS;
     cfc:	2001      	movs	r0, #1
     cfe:	e04d      	b.n	d9c <xQueueGenericSend+0x11c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:700
                        }
                        else
                        {
                                if( xTicksToWait == ( TickType_t ) 0 )
     d00:	f8dd 8004 	ldr.w	r8, [sp, #4]
     d04:	f1b8 0f00 	cmp.w	r8, #0
     d08:	d102      	bne.n	d10 <xQueueGenericSend+0x90>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:704
                                {
                                         /** The queue was full and no block time is specified (or
                                        the block time has expired) so leave now. */
                                        taskEXIT_CRITICAL();
     d0a:	f001 f837 	bl	1d7c <vPortExitCritical>
     d0e:	e03e      	b.n	d8e <xQueueGenericSend+0x10e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:711
                                         /** Return to the original privilege level before exiting
                                        the function. */
                                        traceQUEUE_SEND_FAILED( pxQueue );
                                        return errQUEUE_FULL;
                                }
                                else if( xEntryTimeSet == pdFALSE )
     d10:	b917      	cbnz	r7, d18 <xQueueGenericSend+0x98>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:715
                                {
                                         /** The queue was full and a block time was specified so
                                        configure the timeout structure. */
                                        vTaskSetTimeOutState( &xTimeOut );
     d12:	a802      	add	r0, sp, #8
     d14:	f000 fd8a 	bl	182c <vTaskSetTimeOutState>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:725
                                         /** Entry time was already set. */
                                        mtCOVERAGE_TEST_MARKER();
                                }
                        }
                }
                taskEXIT_CRITICAL();
     d18:	f001 f830 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:730

                 /** Interrupts and other tasks can send to and receive from the queue
                now the critical section has been exited. */

                vTaskSuspendAll();
     d1c:	f000 faf4 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:731
                prvLockQueue( pxQueue );
     d20:	f001 f81c 	bl	1d5c <vPortEnterCritical>
     d24:	6c63      	ldr	r3, [r4, #68]	; 0x44
     d26:	3301      	adds	r3, #1
     d28:	bf04      	itt	eq
     d2a:	2300      	moveq	r3, #0
     d2c:	6463      	streq	r3, [r4, #68]	; 0x44
     d2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     d30:	3301      	adds	r3, #1
     d32:	bf04      	itt	eq
     d34:	2300      	moveq	r3, #0
     d36:	64a3      	streq	r3, [r4, #72]	; 0x48
     d38:	f001 f820 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:734

                 /** Update the timeout state to see if it has expired yet. */
                if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     d3c:	a802      	add	r0, sp, #8
     d3e:	a901      	add	r1, sp, #4
     d40:	f000 fd86 	bl	1850 <xTaskCheckForTimeOut>
     d44:	b9f0      	cbnz	r0, d84 <xQueueGenericSend+0x104>
prvIsQueueFull():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1844

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

        taskENTER_CRITICAL();
     d46:	f001 f809 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1846
        {
                if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     d4a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
     d4e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1855
                else
                {
                        xReturn = pdFALSE;
                }
        }
        taskEXIT_CRITICAL();
     d50:	f001 f814 	bl	1d7c <vPortExitCritical>
xQueueGenericSend():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:736
                prvLockQueue( pxQueue );

                 /** Update the timeout state to see if it has expired yet. */
                if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
                {
                        if( prvIsQueueFull( pxQueue ) != pdFALSE )
     d54:	45b8      	cmp	r8, r7
     d56:	d10f      	bne.n	d78 <xQueueGenericSend+0xf8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:739
                        {
                                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     d58:	f104 0010 	add.w	r0, r4, #16
     d5c:	9901      	ldr	r1, [sp, #4]
     d5e:	f000 fc73 	bl	1648 <vTaskPlaceOnEventList>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:746
                                 /** Unlocking the queue means queue events can effect the
                                event list.  It is possible     that interrupts occurring now
                                remove this task from the event list again - but as the
                                scheduler is suspended the task will go onto the pending
                                ready last instead of the actual ready list. */
                                prvUnlockQueue( pxQueue );
     d62:	4620      	mov	r0, r4
     d64:	f7ff fedf 	bl	b26 <prvUnlockQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:753
                                 /** Resuming the scheduler will move tasks from the pending
                                ready list into the ready list - so it is feasible that this
                                task is already in a ready list before it yields - in which
                                case the yield will not cause a context switch unless there
                                is also a higher priority task in the pending ready list. */
                                if( xTaskResumeAll() == pdFALSE )
     d68:	f000 fb6a 	bl	1440 <xTaskResumeAll>
     d6c:	b108      	cbz	r0, d72 <xQueueGenericSend+0xf2>
     d6e:	2701      	movs	r7, #1
     d70:	e7ab      	b.n	cca <xQueueGenericSend+0x4a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:755
                                {
                                        portYIELD_WITHIN_API();
     d72:	f001 f80f 	bl	1d94 <vPortYieldFromISR>
     d76:	e7fa      	b.n	d6e <xQueueGenericSend+0xee>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:761
                                }
                        }
                        else
                        {
                                 /** Try again. */
                                prvUnlockQueue( pxQueue );
     d78:	4620      	mov	r0, r4
     d7a:	f7ff fed4 	bl	b26 <prvUnlockQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:762
                                ( void ) xTaskResumeAll();
     d7e:	f000 fb5f 	bl	1440 <xTaskResumeAll>
     d82:	e7f4      	b.n	d6e <xQueueGenericSend+0xee>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:768
                        }
                }
                else
                {
                         /** The timeout has expired. */
                        prvUnlockQueue( pxQueue );
     d84:	4620      	mov	r0, r4
     d86:	f7ff fece 	bl	b26 <prvUnlockQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:769
                        ( void ) xTaskResumeAll();
     d8a:	f000 fb59 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:774

                         /** Return to the original privilege level before exiting the
                        function. */
                        traceQUEUE_SEND_FAILED( pxQueue );
                        return errQUEUE_FULL;
     d8e:	2000      	movs	r0, #0
     d90:	e004      	b.n	d9c <xQueueGenericSend+0x11c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:604
        configASSERT( pxQueue );
        configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
        configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
                configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     d92:	f04f 0010 	mov.w	r0, #16
     d96:	f380 8811 	msr	BASEPRI, r0
     d9a:	e7fe      	b.n	d9a <xQueueGenericSend+0x11a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:777
                        function. */
                        traceQUEUE_SEND_FAILED( pxQueue );
                        return errQUEUE_FULL;
                }
        }
}
     d9c:	b004      	add	sp, #16
     d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000da2 <xQueueCreateMutex>:
xQueueCreateMutex():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:377
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

        QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
        {
     da2:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:385
                 /** Prevent compiler warnings about unused parameters if
                configUSE_TRACE_FACILITY does not equal 1. */
                ( void ) ucQueueType;

                 /** Allocate the new queue structure. */
                pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     da4:	204c      	movs	r0, #76	; 0x4c
     da6:	f7ff fe1a 	bl	9de <pvPortMalloc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:386
                if( pxNewQueue != NULL )
     daa:	4604      	mov	r4, r0
     dac:	b920      	cbnz	r0, db8 <xQueueCreateMutex+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:432
                else
                {
                        traceCREATE_MUTEX_FAILED();
                }

                configASSERT( pxNewQueue );
     dae:	f04f 0010 	mov.w	r0, #16
     db2:	f380 8811 	msr	BASEPRI, r0
     db6:	e7fe      	b.n	db6 <xQueueCreateMutex+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:401

                         /** Each mutex has a length of 1 (like a binary semaphore) and
                        an item size of 0 as nothing is actually copied into or out
                        of the mutex. */
                        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                        pxNewQueue->uxLength = ( UBaseType_t ) 1U;
     db8:	2301      	movs	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:389
                 /** Allocate the new queue structure. */
                pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
                if( pxNewQueue != NULL )
                {
                         /** Information required for priority inheritance. */
                        pxNewQueue->pxMutexHolder = NULL;
     dba:	2500      	movs	r5, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:401

                         /** Each mutex has a length of 1 (like a binary semaphore) and
                        an item size of 0 as nothing is actually copied into or out
                        of the mutex. */
                        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                        pxNewQueue->uxLength = ( UBaseType_t ) 1U;
     dbc:	63c3      	str	r3, [r0, #60]	; 0x3c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:403
                        pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
                        pxNewQueue->xRxLock = queueUNLOCKED;
     dbe:	f04f 33ff 	mov.w	r3, #4294967295
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:400
                        pxNewQueue->u.pcReadFrom = NULL;

                         /** Each mutex has a length of 1 (like a binary semaphore) and
                        an item size of 0 as nothing is actually copied into or out
                        of the mutex. */
                        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     dc2:	6385      	str	r5, [r0, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:389
                 /** Allocate the new queue structure. */
                pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
                if( pxNewQueue != NULL )
                {
                         /** Information required for priority inheritance. */
                        pxNewQueue->pxMutexHolder = NULL;
     dc4:	6045      	str	r5, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:403
                        an item size of 0 as nothing is actually copied into or out
                        of the mutex. */
                        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                        pxNewQueue->uxLength = ( UBaseType_t ) 1U;
                        pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
                        pxNewQueue->xRxLock = queueUNLOCKED;
     dc6:	6443      	str	r3, [r0, #68]	; 0x44
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:390
                pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
                if( pxNewQueue != NULL )
                {
                         /** Information required for priority inheritance. */
                        pxNewQueue->pxMutexHolder = NULL;
                        pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     dc8:	6005      	str	r5, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:404
                        of the mutex. */
                        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                        pxNewQueue->uxLength = ( UBaseType_t ) 1U;
                        pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
                        pxNewQueue->xRxLock = queueUNLOCKED;
                        pxNewQueue->xTxLock = queueUNLOCKED;
     dca:	6483      	str	r3, [r0, #72]	; 0x48
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:394
                        pxNewQueue->pxMutexHolder = NULL;
                        pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

                         /** Queues used as a mutex no data is actually copied into or out
                        of the queue. */
                        pxNewQueue->pcWriteTo = NULL;
     dcc:	6085      	str	r5, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:395
                        pxNewQueue->u.pcReadFrom = NULL;
     dce:	60c5      	str	r5, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:402
                         /** Each mutex has a length of 1 (like a binary semaphore) and
                        an item size of 0 as nothing is actually copied into or out
                        of the mutex. */
                        pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
                        pxNewQueue->uxLength = ( UBaseType_t ) 1U;
                        pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
     dd0:	6405      	str	r5, [r0, #64]	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:419
                                pxNewQueue->pxQueueSetContainer = NULL;
                        }
                        #endif

                         /** Ensure the event queues start with the correct state. */
                        vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     dd2:	3010      	adds	r0, #16
     dd4:	f7ff fe1f 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:420
                        vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     dd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
     ddc:	f7ff fe1b 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:425

                        traceCREATE_MUTEX( pxNewQueue );

                         /** Start with the semaphore in the expected state. */
                        ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     de0:	4620      	mov	r0, r4
     de2:	4629      	mov	r1, r5
     de4:	462a      	mov	r2, r5
     de6:	462b      	mov	r3, r5
     de8:	f7ff ff4a 	bl	c80 <xQueueGenericSend>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:434
                        traceCREATE_MUTEX_FAILED();
                }

                configASSERT( pxNewQueue );
                return pxNewQueue;
        }
     dec:	4620      	mov	r0, r4
     dee:	bd38      	pop	{r3, r4, r5, pc}

00000df0 <xQueueGenericSendFromISR>:
xQueueGenericSendFromISR():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1026

#endif  /** configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     df0:	b538      	push	{r3, r4, r5, lr}
     df2:	4615      	mov	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1031
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

        configASSERT( pxQueue );
     df4:	4604      	mov	r4, r0
     df6:	b920      	cbnz	r0, e02 <xQueueGenericSendFromISR+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1031 (discriminator 1)
     df8:	f04f 0010 	mov.w	r0, #16
     dfc:	f380 8811 	msr	BASEPRI, r0
     e00:	e7fe      	b.n	e00 <xQueueGenericSendFromISR+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1032
        configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     e02:	b931      	cbnz	r1, e12 <xQueueGenericSendFromISR+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1032 (discriminator 2)
     e04:	6c02      	ldr	r2, [r0, #64]	; 0x40
     e06:	b122      	cbz	r2, e12 <xQueueGenericSendFromISR+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1032
     e08:	f04f 0010 	mov.w	r0, #16
     e0c:	f380 8811 	msr	BASEPRI, r0
     e10:	e7fe      	b.n	e10 <xQueueGenericSendFromISR+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1033
        configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     e12:	2b02      	cmp	r3, #2
     e14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     e16:	d106      	bne.n	e26 <xQueueGenericSendFromISR+0x36>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1033 (discriminator 2)
     e18:	2a01      	cmp	r2, #1
     e1a:	d004      	beq.n	e26 <xQueueGenericSendFromISR+0x36>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1033
     e1c:	f04f 0010 	mov.w	r0, #16
     e20:	f380 8811 	msr	BASEPRI, r0
     e24:	e7fe      	b.n	e24 <xQueueGenericSendFromISR+0x34>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1056
         /** Similar to xQueueGenericSend, except without blocking if there is no room
        in the queue.  Also don't directly wake a task that was blocked on a queue
        read, instead return a flag to say whether a context switch is required or
        not (i.e. has a task with a higher priority than us been woken by this
        post). */
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     e26:	f04f 0010 	mov.w	r0, #16
     e2a:	f380 8811 	msr	BASEPRI, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1058
        {
                if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     e2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     e30:	4290      	cmp	r0, r2
     e32:	d301      	bcc.n	e38 <xQueueGenericSendFromISR+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1058 (discriminator 1)
     e34:	2b02      	cmp	r3, #2
     e36:	d116      	bne.n	e66 <xQueueGenericSendFromISR+0x76>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1062
                {
                        traceQUEUE_SEND_FROM_ISR( pxQueue );

                        prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     e38:	461a      	mov	r2, r3
     e3a:	4620      	mov	r0, r4
     e3c:	f7ff fe2d 	bl	a9a <prvCopyDataToQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1066

                         /** The event list is not altered if the queue is locked.  This will
                        be done when the queue is unlocked later. */
                        if( pxQueue->xTxLock == queueUNLOCKED )
     e40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e42:	3301      	adds	r3, #1
     e44:	d10a      	bne.n	e5c <xQueueGenericSendFromISR+0x6c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1121
                                                }
                                        }
                                }
                                #else  /** configUSE_QUEUE_SETS */
                                {
                                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e48:	b15b      	cbz	r3, e62 <xQueueGenericSendFromISR+0x72>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1123
                                        {
                                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
     e4e:	f000 fc75 	bl	173c <xTaskRemoveFromEventList>
     e52:	b130      	cbz	r0, e62 <xQueueGenericSendFromISR+0x72>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1127
                                                {
                                                         /** The task waiting has a higher priority so record that a
                                                        context switch is required. */
                                                        if( pxHigherPriorityTaskWoken != NULL )
     e54:	b12d      	cbz	r5, e62 <xQueueGenericSendFromISR+0x72>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1129
                                                        {
                                                                *pxHigherPriorityTaskWoken = pdTRUE;
     e56:	2301      	movs	r3, #1
     e58:	602b      	str	r3, [r5, #0]
     e5a:	e005      	b.n	e68 <xQueueGenericSendFromISR+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1152
                        }
                        else
                        {
                                 /** Increment the lock count so the task that unlocks the queue
                                knows that data was posted while it was locked. */
                                ++( pxQueue->xTxLock );
     e5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e5e:	3301      	adds	r3, #1
     e60:	64a3      	str	r3, [r4, #72]	; 0x48
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1155
                        }

                        xReturn = pdPASS;
     e62:	2301      	movs	r3, #1
     e64:	e000      	b.n	e68 <xQueueGenericSendFromISR+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1160
                }
                else
                {
                        traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
                        xReturn = errQUEUE_FULL;
     e66:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1163
                }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     e68:	f04f 0000 	mov.w	r0, #0
     e6c:	f380 8811 	msr	BASEPRI, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1166

        return xReturn;
}
     e70:	4618      	mov	r0, r3
     e72:	bd38      	pop	{r3, r4, r5, pc}

00000e74 <xQueueGenericReceive>:
xQueueGenericReceive():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1170
/*-----------------------------------------------------------*/
#define GREEN_LED_TOGGLE() GPIO_DRV_TogglePinOutput( GREEN_LED );
BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     e74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     e78:	460d      	mov	r5, r1
     e7a:	9201      	str	r2, [sp, #4]
     e7c:	4698      	mov	r8, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1176
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

        configASSERT( pxQueue );
     e7e:	4604      	mov	r4, r0
     e80:	b920      	cbnz	r0, e8c <xQueueGenericReceive+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1176 (discriminator 1)
     e82:	f04f 0010 	mov.w	r0, #16
     e86:	f380 8811 	msr	BASEPRI, r0
     e8a:	e7fe      	b.n	e8a <xQueueGenericReceive+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1177
        configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     e8c:	b931      	cbnz	r1, e9c <xQueueGenericReceive+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1177 (discriminator 2)
     e8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
     e90:	b123      	cbz	r3, e9c <xQueueGenericReceive+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1177
     e92:	f04f 0010 	mov.w	r0, #16
     e96:	f380 8811 	msr	BASEPRI, r0
     e9a:	e7fe      	b.n	e9a <xQueueGenericReceive+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1180
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
                configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     e9c:	f000 fd16 	bl	18cc <xTaskGetSchedulerState>
     ea0:	b910      	cbnz	r0, ea8 <xQueueGenericReceive+0x34>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1180 (discriminator 2)
     ea2:	9b01      	ldr	r3, [sp, #4]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d178      	bne.n	f9a <xQueueGenericReceive+0x126>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1170
        return xReturn;
}
/*-----------------------------------------------------------*/
#define GREEN_LED_TOGGLE() GPIO_DRV_TogglePinOutput( GREEN_LED );
BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     ea8:	2600      	movs	r6, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1190
        statements within the function itself.  This is done in the interest
        of execution time efficiency. */

        for( ;; )
        {
                taskENTER_CRITICAL();
     eaa:	f000 ff57 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1194
                {
                         /** Is there data in the queue now?  To be running we must be
                        the highest priority task wanting to access the queue. */
                        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     eb0:	b33b      	cbz	r3, f02 <xQueueGenericReceive+0x8e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1200
                        {
                                 /** Remember the read position in case the queue is only being
                                peeked. */
                                pcOriginalReadPosition = pxQueue->u.pcReadFrom;

                                prvCopyDataFromQueue( pxQueue, pvBuffer );
     eb2:	4620      	mov	r0, r4
     eb4:	4629      	mov	r1, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1198
                        the highest priority task wanting to access the queue. */
                        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
                        {
                                 /** Remember the read position in case the queue is only being
                                peeked. */
                                pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     eb6:	68e6      	ldr	r6, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1200

                                prvCopyDataFromQueue( pxQueue, pvBuffer );
     eb8:	f7ff fe22 	bl	b00 <prvCopyDataFromQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1202

                                if( xJustPeeking == pdFALSE )
     ebc:	f1b8 0f00 	cmp.w	r8, #0
     ec0:	d112      	bne.n	ee8 <xQueueGenericReceive+0x74>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1207
                                {
                                        traceQUEUE_RECEIVE( pxQueue );

                                         /** Actually removing data, not just peeking. */
                                        --( pxQueue->uxMessagesWaiting );
     ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     ec4:	3b01      	subs	r3, #1
     ec6:	63a3      	str	r3, [r4, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1211

                                        #if ( configUSE_MUTEXES == 1 )
                                        {
                                                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ec8:	6823      	ldr	r3, [r4, #0]
     eca:	b913      	cbnz	r3, ed2 <xQueueGenericReceive+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1215
                                                {
                                                         /** Record the information required to implement
                                                        priority inheritance should it become necessary. */
                                                        pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     ecc:	f000 fcf8 	bl	18c0 <xTaskGetCurrentTaskHandle>
     ed0:	6060      	str	r0, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1224
                                                        mtCOVERAGE_TEST_MARKER();
                                                }
                                        }
                                        #endif

                                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ed2:	6923      	ldr	r3, [r4, #16]
     ed4:	b18b      	cbz	r3, efa <xQueueGenericReceive+0x86>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1226
                                        {
                                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     ed6:	f104 0010 	add.w	r0, r4, #16
     eda:	f000 fc2f 	bl	173c <xTaskRemoveFromEventList>
     ede:	2801      	cmp	r0, #1
     ee0:	d10b      	bne.n	efa <xQueueGenericReceive+0x86>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1228
                                                {
                                                        queueYIELD_IF_USING_PREEMPTION();
     ee2:	f000 ff57 	bl	1d94 <vPortYieldFromISR>
     ee6:	e008      	b.n	efa <xQueueGenericReceive+0x86>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1250
                                        pointer. */
                                        pxQueue->u.pcReadFrom = pcOriginalReadPosition;

                                         /** The data is being left in the queue, so see if there are
                                        any other tasks waiting for the data. */
                                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1246
                                {
                                        traceQUEUE_PEEK( pxQueue );

                                         /** The data is not being removed, so reset the read
                                        pointer. */
                                        pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     eea:	60e6      	str	r6, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1250

                                         /** The data is being left in the queue, so see if there are
                                        any other tasks waiting for the data. */
                                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     eec:	b12b      	cbz	r3, efa <xQueueGenericReceive+0x86>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1254
                                        {
                                                 /** Tasks that are removed from the event list will get added to
                                                the pending ready list as the scheduler is still suspended. */
                                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     eee:	f104 0024 	add.w	r0, r4, #36	; 0x24
     ef2:	f000 fc23 	bl	173c <xTaskRemoveFromEventList>
     ef6:	2800      	cmp	r0, #0
     ef8:	d1f3      	bne.n	ee2 <xQueueGenericReceive+0x6e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1270
                                        {
                                                mtCOVERAGE_TEST_MARKER();
                                        }
                                }

                                taskEXIT_CRITICAL();
     efa:	f000 ff3f 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1271
                                return pdPASS;
     efe:	2001      	movs	r0, #1
     f00:	e050      	b.n	fa4 <xQueueGenericReceive+0x130>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1275
                        }
                        else
                        {
                                if( xTicksToWait == ( TickType_t ) 0 )
     f02:	9f01      	ldr	r7, [sp, #4]
     f04:	b917      	cbnz	r7, f0c <xQueueGenericReceive+0x98>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1279
                                {
                                         /** The queue was empty and no block time is specified (or
                                        the block time has expired) so leave now. */
                                        taskEXIT_CRITICAL();
     f06:	f000 ff39 	bl	1d7c <vPortExitCritical>
     f0a:	e044      	b.n	f96 <xQueueGenericReceive+0x122>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1283
                                        traceQUEUE_RECEIVE_FAILED( pxQueue );
                                        return errQUEUE_EMPTY;
                                }
                                else if( xEntryTimeSet == pdFALSE )
     f0c:	b916      	cbnz	r6, f14 <xQueueGenericReceive+0xa0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1287
                                {
                                         /** The queue was empty and a block time was specified so
                                        configure the timeout structure. */
                                        vTaskSetTimeOutState( &xTimeOut );
     f0e:	a802      	add	r0, sp, #8
     f10:	f000 fc8c 	bl	182c <vTaskSetTimeOutState>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1297
                                         /** Entry time was already set. */
                                        mtCOVERAGE_TEST_MARKER();
                                }
                        }
                }
                taskEXIT_CRITICAL();
     f14:	f000 ff32 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1302

                 /** Interrupts and other tasks can send to and receive from the queue
                now the critical section has been exited. */

                vTaskSuspendAll();
     f18:	f000 f9f6 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1303
                prvLockQueue( pxQueue );
     f1c:	f000 ff1e 	bl	1d5c <vPortEnterCritical>
     f20:	6c63      	ldr	r3, [r4, #68]	; 0x44
     f22:	3301      	adds	r3, #1
     f24:	bf04      	itt	eq
     f26:	2300      	moveq	r3, #0
     f28:	6463      	streq	r3, [r4, #68]	; 0x44
     f2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     f2c:	3301      	adds	r3, #1
     f2e:	bf04      	itt	eq
     f30:	2300      	moveq	r3, #0
     f32:	64a3      	streq	r3, [r4, #72]	; 0x48
     f34:	f000 ff22 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1306

                 /** Update the timeout state to see if it has expired yet. */
                if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f38:	a802      	add	r0, sp, #8
     f3a:	a901      	add	r1, sp, #4
     f3c:	f000 fc88 	bl	1850 <xTaskCheckForTimeOut>
     f40:	bb20      	cbnz	r0, f8c <xQueueGenericReceive+0x118>
prvIsQueueEmpty():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1805

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

        taskENTER_CRITICAL();
     f42:	f000 ff0b 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1807
        {
                if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     f46:	6ba6      	ldr	r6, [r4, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1816
                else
                {
                        xReturn = pdFALSE;
                }
        }
        taskEXIT_CRITICAL();
     f48:	f000 ff18 	bl	1d7c <vPortExitCritical>
xQueueGenericReceive():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1308
                prvLockQueue( pxQueue );

                 /** Update the timeout state to see if it has expired yet. */
                if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
                {
                        if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f4c:	b9c6      	cbnz	r6, f80 <xQueueGenericReceive+0x10c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1314
                        {
                                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                                #if ( configUSE_MUTEXES == 1 )
                                {
                                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     f4e:	6823      	ldr	r3, [r4, #0]
     f50:	b933      	cbnz	r3, f60 <xQueueGenericReceive+0xec>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1316
                                        {
                                                taskENTER_CRITICAL();
     f52:	f000 ff03 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1318
                                                {
                                                        vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     f56:	6860      	ldr	r0, [r4, #4]
     f58:	f000 fcc8 	bl	18ec <vTaskPriorityInherit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1320
                                                }
                                                taskEXIT_CRITICAL();
     f5c:	f000 ff0e 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1329
                                                mtCOVERAGE_TEST_MARKER();
                                        }
                                }
                                #endif

                                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
     f64:	9901      	ldr	r1, [sp, #4]
     f66:	f000 fb6f 	bl	1648 <vTaskPlaceOnEventList>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1330
                                prvUnlockQueue( pxQueue );
     f6a:	4620      	mov	r0, r4
     f6c:	f7ff fddb 	bl	b26 <prvUnlockQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1331
                                if( xTaskResumeAll() == pdFALSE )
     f70:	f000 fa66 	bl	1440 <xTaskResumeAll>
     f74:	b108      	cbz	r0, f7a <xQueueGenericReceive+0x106>
     f76:	2601      	movs	r6, #1
     f78:	e797      	b.n	eaa <xQueueGenericReceive+0x36>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1333
                                {
                                        portYIELD_WITHIN_API();
     f7a:	f000 ff0b 	bl	1d94 <vPortYieldFromISR>
     f7e:	e7fa      	b.n	f76 <xQueueGenericReceive+0x102>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1343
                                }
                        }
                        else
                        {
                                 /** Try again. */
                                prvUnlockQueue( pxQueue );
     f80:	4620      	mov	r0, r4
     f82:	f7ff fdd0 	bl	b26 <prvUnlockQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1344
                                ( void ) xTaskResumeAll();
     f86:	f000 fa5b 	bl	1440 <xTaskResumeAll>
     f8a:	e7f4      	b.n	f76 <xQueueGenericReceive+0x102>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1349
                        }
                }
                else
                {
                        prvUnlockQueue( pxQueue );
     f8c:	4620      	mov	r0, r4
     f8e:	f7ff fdca 	bl	b26 <prvUnlockQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1350
                        ( void ) xTaskResumeAll();
     f92:	f000 fa55 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1352
                        traceQUEUE_RECEIVE_FAILED( pxQueue );
                        return errQUEUE_EMPTY;
     f96:	2000      	movs	r0, #0
     f98:	e004      	b.n	fa4 <xQueueGenericReceive+0x130>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1180

        configASSERT( pxQueue );
        configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
                configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     f9a:	f04f 0010 	mov.w	r0, #16
     f9e:	f380 8811 	msr	BASEPRI, r0
     fa2:	e7fe      	b.n	fa2 <xQueueGenericReceive+0x12e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:1355
                        ( void ) xTaskResumeAll();
                        traceQUEUE_RECEIVE_FAILED( pxQueue );
                        return errQUEUE_EMPTY;
                }
        }
}
     fa4:	b004      	add	sp, #16
     fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00000fac <vQueueAddToRegistry>:
vQueueAddToRegistry():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2157
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

        void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
        {
     fac:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2162
        UBaseType_t ux;

                 /** See if there is an empty space in the registry.  A NULL name denotes
                a free slot. */
                for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     fae:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2164
                {
                        if( xQueueRegistry[ ux ].pcQueueName == NULL )
     fb0:	4a06      	ldr	r2, [pc, #24]	; (fcc <vQueueAddToRegistry+0x20>)
     fb2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
     fb6:	00dd      	lsls	r5, r3, #3
     fb8:	b924      	cbnz	r4, fc4 <vQueueAddToRegistry+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2167
                        {
                                 /** Store the information on this queue. */
                                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
     fba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2168
                                xQueueRegistry[ ux ].xHandle = xQueue;
     fbe:	442a      	add	r2, r5
     fc0:	6050      	str	r0, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2171

                                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                                break;
     fc2:	bd30      	pop	{r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2162
        {
        UBaseType_t ux;

                 /** See if there is an empty space in the registry.  A NULL name denotes
                a free slot. */
                for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     fc4:	3301      	adds	r3, #1
     fc6:	2b0a      	cmp	r3, #10
     fc8:	d1f2      	bne.n	fb0 <vQueueAddToRegistry+0x4>
     fca:	bd30      	pop	{r4, r5, pc}
     fcc:	1fff062c 	.word	0x1fff062c

00000fd0 <vQueueWaitForMessageRestricted>:
vQueueWaitForMessageRestricted():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2213
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

        void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
        {
     fd0:	b538      	push	{r3, r4, r5, lr}
     fd2:	4604      	mov	r4, r0
     fd4:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2230
                will not actually cause the task to block, just place it on a blocked
                list.  It will not block until the scheduler is unlocked - at which
                time a yield will be performed.  If an item is added to the queue while
                the queue is locked, and the calling task blocks on the queue, then the
                calling task will be immediately unblocked when the queue is unlocked. */
                prvLockQueue( pxQueue );
     fd6:	f000 fec1 	bl	1d5c <vPortEnterCritical>
     fda:	6c63      	ldr	r3, [r4, #68]	; 0x44
     fdc:	3301      	adds	r3, #1
     fde:	bf04      	itt	eq
     fe0:	2300      	moveq	r3, #0
     fe2:	6463      	streq	r3, [r4, #68]	; 0x44
     fe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     fe6:	3301      	adds	r3, #1
     fe8:	bf04      	itt	eq
     fea:	2300      	moveq	r3, #0
     fec:	64a3      	streq	r3, [r4, #72]	; 0x48
     fee:	f000 fec5 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2231
                if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     ff4:	b923      	cbnz	r3, 1000 <vQueueWaitForMessageRestricted+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2234
                {
                         /** There is nothing in the queue, block for the specified period. */
                        vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     ff6:	f104 0024 	add.w	r0, r4, #36	; 0x24
     ffa:	4629      	mov	r1, r5
     ffc:	f000 fb82 	bl	1704 <vTaskPlaceOnEventListRestricted>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2240
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
                prvUnlockQueue( pxQueue );
    1000:	4620      	mov	r0, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2241
        }
    1002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/queue.c:2240
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
                prvUnlockQueue( pxQueue );
    1006:	f7ff bd8e 	b.w	b26 <prvUnlockQueue>
	...

0000100c <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3106

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

        if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    100c:	4a06      	ldr	r2, [pc, #24]	; (1028 <prvResetNextTaskUnblockTime+0x1c>)
    100e:	6813      	ldr	r3, [r2, #0]
    1010:	6819      	ldr	r1, [r3, #0]
    1012:	4b06      	ldr	r3, [pc, #24]	; (102c <prvResetNextTaskUnblockTime+0x20>)
    1014:	b911      	cbnz	r1, 101c <prvResetNextTaskUnblockTime+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3113
                 /** The new current delayed list is empty.  Set
                xNextTaskUnblockTime to the maximum possible value so it is
                extremely unlikely that the
                if( xTickCount >= xNextTaskUnblockTime ) test will pass until
                there is an item in the delayed list. */
                xNextTaskUnblockTime = portMAX_DELAY;
    1016:	f04f 32ff 	mov.w	r2, #4294967295
    101a:	e003      	b.n	1024 <prvResetNextTaskUnblockTime+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3121
        {
                 /** The new current delayed list is not empty, get the value of
                the item at the head of the delayed list.  This is the time at
                which the task at the head of the delayed list should be removed
                from the Blocked state. */
                ( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    101c:	6812      	ldr	r2, [r2, #0]
    101e:	68d2      	ldr	r2, [r2, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3122
                xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    1020:	68d2      	ldr	r2, [r2, #12]
    1022:	6852      	ldr	r2, [r2, #4]
    1024:	601a      	str	r2, [r3, #0]
    1026:	4770      	bx	lr
    1028:	1fff0680 	.word	0x1fff0680
    102c:	1fff041c 	.word	0x1fff041c

00001030 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2887
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
         /** The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1030:	4b0e      	ldr	r3, [pc, #56]	; (106c <prvAddCurrentTaskToDelayedList+0x3c>)
    1032:	681a      	ldr	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2885
        #endif  /** vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    1034:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2887
         /** The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1036:	6050      	str	r0, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2889

        if( xTimeToWake < xTickCount )
    1038:	4a0d      	ldr	r2, [pc, #52]	; (1070 <prvAddCurrentTaskToDelayedList+0x40>)
    103a:	6812      	ldr	r2, [r2, #0]
    103c:	4290      	cmp	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2885
        #endif  /** vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    103e:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2889
         /** The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

        if( xTimeToWake < xTickCount )
    1040:	d207      	bcs.n	1052 <prvAddCurrentTaskToDelayedList+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2892
        {
                 /** Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1042:	4a0c      	ldr	r2, [pc, #48]	; (1074 <prvAddCurrentTaskToDelayedList+0x44>)
    1044:	6810      	ldr	r0, [r2, #0]
    1046:	6819      	ldr	r1, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2911
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
}
    1048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2892
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

        if( xTimeToWake < xTickCount )
        {
                 /** Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    104c:	3104      	adds	r1, #4
    104e:	f7ff bcfc 	b.w	a4a <vListInsert>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2897
        }
        else
        {
                 /** The wake time has not overflowed, so the current block list is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1052:	4a09      	ldr	r2, [pc, #36]	; (1078 <prvAddCurrentTaskToDelayedList+0x48>)
    1054:	6810      	ldr	r0, [r2, #0]
    1056:	6819      	ldr	r1, [r3, #0]
    1058:	3104      	adds	r1, #4
    105a:	f7ff fcf6 	bl	a4a <vListInsert>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2902

                 /** If the task entering the blocked state was placed at the head of the
                list of blocked tasks then xNextTaskUnblockTime needs to be updated
                too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    105e:	4b07      	ldr	r3, [pc, #28]	; (107c <prvAddCurrentTaskToDelayedList+0x4c>)
    1060:	681a      	ldr	r2, [r3, #0]
    1062:	4294      	cmp	r4, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2904
                {
                        xNextTaskUnblockTime = xTimeToWake;
    1064:	bf38      	it	cc
    1066:	601c      	strcc	r4, [r3, #0]
    1068:	bd10      	pop	{r4, pc}
    106a:	bf00      	nop
    106c:	1fff0bcc 	.word	0x1fff0bcc
    1070:	1fff0be8 	.word	0x1fff0be8
    1074:	1fff0bec 	.word	0x1fff0bec
    1078:	1fff0680 	.word	0x1fff0680
    107c:	1fff041c 	.word	0x1fff041c

00001080 <xTaskGenericCreate>:
xTaskGenericCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:524
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1084:	ad0a      	add	r5, sp, #40	; 0x28
    1086:	4688      	mov	r8, r1
    1088:	4616      	mov	r6, r2
    108a:	469a      	mov	sl, r3
    108c:	e895 08a0 	ldmia.w	r5, {r5, r7, fp}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:528
BaseType_t xReturn;
TCB_t * pxNewTCB;

        configASSERT( pxTaskCode );
    1090:	4681      	mov	r9, r0
    1092:	b920      	cbnz	r0, 109e <xTaskGenericCreate+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:528 (discriminator 1)
    1094:	f04f 0010 	mov.w	r0, #16
    1098:	f380 8811 	msr	BASEPRI, r0
    109c:	e7fe      	b.n	109c <xTaskGenericCreate+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:529
        configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    109e:	2d3f      	cmp	r5, #63	; 0x3f
    10a0:	d904      	bls.n	10ac <xTaskGenericCreate+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:529 (discriminator 1)
    10a2:	f04f 0010 	mov.w	r0, #16
    10a6:	f380 8811 	msr	BASEPRI, r0
    10aa:	e7fe      	b.n	10aa <xTaskGenericCreate+0x2a>
prvAllocateTCBAndStack():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2920
{
TCB_t *pxNewTCB;

         /** Allocate space for the TCB.  Where the memory comes from depends on
        the implementation of the port malloc function. */
        pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    10ac:	2074      	movs	r0, #116	; 0x74
    10ae:	f7ff fc96 	bl	9de <pvPortMalloc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2922

        if( pxNewTCB != NULL )
    10b2:	4604      	mov	r4, r0
    10b4:	2800      	cmp	r0, #0
    10b6:	f000 8093 	beq.w	11e0 <xTaskGenericCreate+0x160>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2927
        {
                 /** Allocate space for the stack used by the task being created.
                The base of the stack memory stored in the TCB so the task can
                be deleted later if required. */
                pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    10ba:	4658      	mov	r0, fp
    10bc:	f1bb 0f00 	cmp.w	fp, #0
    10c0:	d102      	bne.n	10c8 <xTaskGenericCreate+0x48>
    10c2:	00b0      	lsls	r0, r6, #2
    10c4:	f7ff fc8b 	bl	9de <pvPortMalloc>
    10c8:	6320      	str	r0, [r4, #48]	; 0x30
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2929

                if( pxNewTCB->pxStack == NULL )
    10ca:	b918      	cbnz	r0, 10d4 <xTaskGenericCreate+0x54>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2932
                {
                         /** Could not allocate the stack.  Delete the allocated TCB. */
                        vPortFree( pxNewTCB );
    10cc:	4620      	mov	r0, r4
    10ce:	f7ff fc95 	bl	9fc <vPortFree>
    10d2:	e085      	b.n	11e0 <xTaskGenericCreate+0x160>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2941
                {
                         /** Avoid dependency on memset() if it is not required. */
                        #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
                        {
                                 /** Just to help debugging. */
                                ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    10d4:	00b6      	lsls	r6, r6, #2
    10d6:	4632      	mov	r2, r6
    10d8:	21a5      	movs	r1, #165	; 0xa5
    10da:	f004 ff3c 	bl	5f56 <memset>
xTaskGenericCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:559
                stack grows from high memory to low (as per the 80x86) or vice versa.
                portSTACK_GROWTH is used to make the result positive or negative as
                required by the port. */
                #if( portSTACK_GROWTH < 0 )
                {
                        pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    10de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    10e0:	3e04      	subs	r6, #4
    10e2:	4433      	add	r3, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:560
                        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    10e4:	f023 0b07 	bic.w	fp, r3, #7
prvInitialiseTCBVariables():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2708
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

         /** Store the task name in the TCB. */
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    10e8:	2600      	movs	r6, #0
    10ea:	19a3      	adds	r3, r4, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2710
        {
                pxTCB->pcTaskName[ x ] = pcName[ x ];
    10ec:	f818 2006 	ldrb.w	r2, [r8, r6]
    10f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2715

                 /** Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
                configMAX_TASK_NAME_LEN characters just in case the memory after the
                string is not accessible (extremely unlikely). */
                if( pcName[ x ] == 0x00 )
    10f4:	f918 3006 	ldrsb.w	r3, [r8, r6]
    10f8:	b113      	cbz	r3, 1100 <xTaskGenericCreate+0x80>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2708
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

         /** Store the task name in the TCB. */
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    10fa:	3601      	adds	r6, #1
    10fc:	2e3c      	cmp	r6, #60	; 0x3c
    10fe:	d1f4      	bne.n	10ea <xTaskGenericCreate+0x6a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2727
                }
        }

         /** Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1100:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2747
        {
                pxTCB->uxBasePriority = uxPriority;
        }
        #endif  /** configUSE_MUTEXES */

        vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1102:	f104 0804 	add.w	r8, r4, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2727
                }
        }

         /** Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1106:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2747
        {
                pxTCB->uxBasePriority = uxPriority;
        }
        #endif  /** configUSE_MUTEXES */

        vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    110a:	4640      	mov	r0, r8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2740
        else
        {
                mtCOVERAGE_TEST_MARKER();
        }

        pxTCB->uxPriority = uxPriority;
    110c:	62e5      	str	r5, [r4, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2743
        #if ( configUSE_MUTEXES == 1 )
        {
                pxTCB->uxBasePriority = uxPriority;
    110e:	6725      	str	r5, [r4, #112]	; 0x70
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2747
        }
        #endif  /** configUSE_MUTEXES */

        vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1110:	f7ff fc8c 	bl	a2c <vListInitialiseItem>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2748
        vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1114:	f104 0018 	add.w	r0, r4, #24
    1118:	f7ff fc88 	bl	a2c <vListInitialiseItem>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2755
         /** Set the pxTCB as a link back from the ListItem_t.  This is so we can get
        back to the containing TCB from a generic item in a list. */
        listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

         /** Event lists are always in priority order. */
        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    111c:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2752
        vListInitialiseItem( &( pxTCB->xGenericListItem ) );
        vListInitialiseItem( &( pxTCB->xEventListItem ) );

         /** Set the pxTCB as a link back from the ListItem_t.  This is so we can get
        back to the containing TCB from a generic item in a list. */
        listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1120:	6124      	str	r4, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2755

         /** Event lists are always in priority order. */
        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1122:	61a3      	str	r3, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2756
        listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1124:	6264      	str	r4, [r4, #36]	; 0x24
xTaskGenericCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:592
                {
                        pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
                }
                #else  /** portUSING_MPU_WRAPPERS */
                {
                        pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1126:	4658      	mov	r0, fp
    1128:	4649      	mov	r1, r9
    112a:	4652      	mov	r2, sl
    112c:	f000 fdea 	bl	1d04 <pxPortInitialiseStack>
    1130:	6020      	str	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:596
                }
                #endif  /** portUSING_MPU_WRAPPERS */

                if( ( void * ) pxCreatedTask != NULL )
    1132:	b107      	cbz	r7, 1136 <xTaskGenericCreate+0xb6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:601
                {
                         /** Pass the TCB out - in an anonymous way.  The calling function/
                        task can use this as a handle to delete the task later if
                        required.*/
                        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1134:	603c      	str	r4, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:610
                        mtCOVERAGE_TEST_MARKER();
                }

                 /** Ensure interrupts don't access the task lists while they are being
                updated. */
                taskENTER_CRITICAL();
    1136:	f000 fe11 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:612
                {
                        uxCurrentNumberOfTasks++;
    113a:	4b2b      	ldr	r3, [pc, #172]	; (11e8 <xTaskGenericCreate+0x168>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:613
                        if( pxCurrentTCB == NULL )
    113c:	4e2b      	ldr	r6, [pc, #172]	; (11ec <xTaskGenericCreate+0x16c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:612

                 /** Ensure interrupts don't access the task lists while they are being
                updated. */
                taskENTER_CRITICAL();
                {
                        uxCurrentNumberOfTasks++;
    113e:	681a      	ldr	r2, [r3, #0]
    1140:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1214 <xTaskGenericCreate+0x194>
    1144:	3201      	adds	r2, #1
    1146:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:613
                        if( pxCurrentTCB == NULL )
    1148:	6837      	ldr	r7, [r6, #0]
    114a:	bb1f      	cbnz	r7, 1194 <xTaskGenericCreate+0x114>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:617
                        {
                                 /** There are no other tasks, or all the other tasks are in
                                the suspended state - make this the current task. */
                                pxCurrentTCB =  pxNewTCB;
    114c:	6034      	str	r4, [r6, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:619

                                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	2b01      	cmp	r3, #1
    1152:	d127      	bne.n	11a4 <xTaskGenericCreate+0x124>
prvInitialiseTaskLists():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2817
{
UBaseType_t uxPriority;

        for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
        {
                vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1154:	eb09 0007 	add.w	r0, r9, r7
    1158:	3714      	adds	r7, #20
    115a:	f7ff fc5c 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2815

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

        for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    115e:	f5b7 6fa0 	cmp.w	r7, #1280	; 0x500
    1162:	d1f7      	bne.n	1154 <xTaskGenericCreate+0xd4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2820
        {
                vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
        }

        vListInitialise( &xDelayedTaskList1 );
    1164:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1218 <xTaskGenericCreate+0x198>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2821
        vListInitialise( &xDelayedTaskList2 );
    1168:	4f21      	ldr	r7, [pc, #132]	; (11f0 <xTaskGenericCreate+0x170>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2820
        for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
        {
                vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
        }

        vListInitialise( &xDelayedTaskList1 );
    116a:	4650      	mov	r0, sl
    116c:	f7ff fc53 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2821
        vListInitialise( &xDelayedTaskList2 );
    1170:	4638      	mov	r0, r7
    1172:	f7ff fc50 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2822
        vListInitialise( &xPendingReadyList );
    1176:	481f      	ldr	r0, [pc, #124]	; (11f4 <xTaskGenericCreate+0x174>)
    1178:	f7ff fc4d 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2826

        #if ( INCLUDE_vTaskDelete == 1 )
        {
                vListInitialise( &xTasksWaitingTermination );
    117c:	481e      	ldr	r0, [pc, #120]	; (11f8 <xTaskGenericCreate+0x178>)
    117e:	f7ff fc4a 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2832
        }
        #endif  /** INCLUDE_vTaskDelete */

        #if ( INCLUDE_vTaskSuspend == 1 )
        {
                vListInitialise( &xSuspendedTaskList );
    1182:	481e      	ldr	r0, [pc, #120]	; (11fc <xTaskGenericCreate+0x17c>)
    1184:	f7ff fc47 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2838
        }
        #endif  /** INCLUDE_vTaskSuspend */

         /** Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
        using list2. */
        pxDelayedTaskList = &xDelayedTaskList1;
    1188:	4b1d      	ldr	r3, [pc, #116]	; (1200 <xTaskGenericCreate+0x180>)
    118a:	f8c3 a000 	str.w	sl, [r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2839
        pxOverflowDelayedTaskList = &xDelayedTaskList2;
    118e:	4b1d      	ldr	r3, [pc, #116]	; (1204 <xTaskGenericCreate+0x184>)
    1190:	601f      	str	r7, [r3, #0]
    1192:	e007      	b.n	11a4 <xTaskGenericCreate+0x124>
xTaskGenericCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:636
                        else
                        {
                                 /** If the scheduler is not already running, make this task the
                                current task if it is the highest priority task to be created
                                so far. */
                                if( xSchedulerRunning == pdFALSE )
    1194:	4b1c      	ldr	r3, [pc, #112]	; (1208 <xTaskGenericCreate+0x188>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	b923      	cbnz	r3, 11a4 <xTaskGenericCreate+0x124>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:638
                                {
                                        if( pxCurrentTCB->uxPriority <= uxPriority )
    119a:	6833      	ldr	r3, [r6, #0]
    119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    119e:	42ab      	cmp	r3, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:640
                                        {
                                                pxCurrentTCB = pxNewTCB;
    11a0:	bf98      	it	ls
    11a2:	6034      	strls	r4, [r6, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:653
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }
                        }

                        uxTaskNumber++;
    11a4:	4b19      	ldr	r3, [pc, #100]	; (120c <xTaskGenericCreate+0x18c>)
    11a6:	681a      	ldr	r2, [r3, #0]
    11a8:	3201      	adds	r2, #1
    11aa:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:663
                                pxNewTCB->uxTCBNumber = uxTaskNumber;
                        }
                        #endif  /** configUSE_TRACE_FACILITY */
                        traceTASK_CREATE( pxNewTCB );

                        prvAddTaskToReadyList( pxNewTCB );
    11ac:	4a18      	ldr	r2, [pc, #96]	; (1210 <xTaskGenericCreate+0x190>)
    11ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11b0:	6811      	ldr	r1, [r2, #0]
    11b2:	2014      	movs	r0, #20
    11b4:	428b      	cmp	r3, r1
    11b6:	fb00 9003 	mla	r0, r0, r3, r9
    11ba:	4641      	mov	r1, r8
    11bc:	bf88      	it	hi
    11be:	6013      	strhi	r3, [r2, #0]
    11c0:	f7ff fc37 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:668

                        xReturn = pdPASS;
                        portSETUP_TCB( pxNewTCB );
                }
                taskEXIT_CRITICAL();
    11c4:	f000 fdda 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:678
                traceTASK_CREATE_FAILED();
        }

        if( xReturn == pdPASS )
        {
                if( xSchedulerRunning != pdFALSE )
    11c8:	4b0f      	ldr	r3, [pc, #60]	; (1208 <xTaskGenericCreate+0x188>)
    11ca:	681b      	ldr	r3, [r3, #0]
    11cc:	b12b      	cbz	r3, 11da <xTaskGenericCreate+0x15a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:682
                {
                         /** If the created task is of a higher priority than the current task
                        then it should run now. */
                        if( pxCurrentTCB->uxPriority < uxPriority )
    11ce:	6833      	ldr	r3, [r6, #0]
    11d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11d2:	42ab      	cmp	r3, r5
    11d4:	d201      	bcs.n	11da <xTaskGenericCreate+0x15a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:684
                        {
                                taskYIELD_IF_USING_PREEMPTION();
    11d6:	f000 fddd 	bl	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:665
                        #endif  /** configUSE_TRACE_FACILITY */
                        traceTASK_CREATE( pxNewTCB );

                        prvAddTaskToReadyList( pxNewTCB );

                        xReturn = pdPASS;
    11da:	2001      	movs	r0, #1
    11dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:672
                }
                taskEXIT_CRITICAL();
        }
        else
        {
                xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    11e0:	f04f 30ff 	mov.w	r0, #4294967295
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:698
                        mtCOVERAGE_TEST_MARKER();
                }
        }

        return xReturn;
}
    11e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11e8:	1fff0bf4 	.word	0x1fff0bf4
    11ec:	1fff0bcc 	.word	0x1fff0bcc
    11f0:	1fff06a0 	.word	0x1fff06a0
    11f4:	1fff0bd0 	.word	0x1fff0bd0
    11f8:	1fff0bb8 	.word	0x1fff0bb8
    11fc:	1fff0bf8 	.word	0x1fff0bf8
    1200:	1fff0680 	.word	0x1fff0680
    1204:	1fff0bec 	.word	0x1fff0bec
    1208:	1fff0684 	.word	0x1fff0684
    120c:	1fff0bf0 	.word	0x1fff0bf0
    1210:	1fff0c0c 	.word	0x1fff0c0c
    1214:	1fff06b8 	.word	0x1fff06b8
    1218:	1fff068c 	.word	0x1fff068c

0000121c <vTaskDelete>:
vTaskDelete():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:704
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

        void vTaskDelete( TaskHandle_t xTaskToDelete )
        {
    121c:	b538      	push	{r3, r4, r5, lr}
    121e:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:707
        TCB_t *pxTCB;

                taskENTER_CRITICAL();
    1220:	f000 fd9c 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:711
                {
                         /** If null is passed in here then it is the calling task that is
                        being deleted. */
                        pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1224:	b90c      	cbnz	r4, 122a <vTaskDelete+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:711 (discriminator 1)
    1226:	4b19      	ldr	r3, [pc, #100]	; (128c <vTaskDelete+0x70>)
    1228:	681c      	ldr	r4, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:717 (discriminator 3)

                         /** Remove task from the ready list and place in the     termination list.
                        This will stop the task from be scheduled.  The idle task will check
                        the termination list and free up any memory allocated by the
                        scheduler for the TCB and stack. */
                        if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    122a:	1d25      	adds	r5, r4, #4
    122c:	4628      	mov	r0, r5
    122e:	f7ff fc24 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:727 (discriminator 3)
                        {
                                mtCOVERAGE_TEST_MARKER();
                        }

                         /** Is the task waiting on an event also? */
                        if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1234:	b11b      	cbz	r3, 123e <vTaskDelete+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:729
                        {
                                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1236:	f104 0018 	add.w	r0, r4, #24
    123a:	f7ff fc1e 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:736
                        else
                        {
                                mtCOVERAGE_TEST_MARKER();
                        }

                        vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    123e:	4814      	ldr	r0, [pc, #80]	; (1290 <vTaskDelete+0x74>)
    1240:	4629      	mov	r1, r5
    1242:	f7ff fbf6 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:741

                         /** Increment the ucTasksDeleted variable so the idle task knows
                        there is a task that has been deleted and that it should therefore
                        check the xTasksWaitingTermination list. */
                        ++uxTasksDeleted;
    1246:	4b13      	ldr	r3, [pc, #76]	; (1294 <vTaskDelete+0x78>)
    1248:	681a      	ldr	r2, [r3, #0]
    124a:	3201      	adds	r2, #1
    124c:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:745

                         /** Increment the uxTaskNumberVariable also so kernel aware debuggers
                        can detect that the task lists need re-generating. */
                        uxTaskNumber++;
    124e:	4b12      	ldr	r3, [pc, #72]	; (1298 <vTaskDelete+0x7c>)
    1250:	681a      	ldr	r2, [r3, #0]
    1252:	3201      	adds	r2, #1
    1254:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:749

                        traceTASK_DELETE( pxTCB );
                }
                taskEXIT_CRITICAL();
    1256:	f000 fd91 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:753

                 /** Force a reschedule if it is the currently running task that has just
                been deleted. */
                if( xSchedulerRunning != pdFALSE )
    125a:	4b10      	ldr	r3, [pc, #64]	; (129c <vTaskDelete+0x80>)
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	b19b      	cbz	r3, 1288 <vTaskDelete+0x6c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:755
                {
                        if( pxTCB == pxCurrentTCB )
    1260:	4b0a      	ldr	r3, [pc, #40]	; (128c <vTaskDelete+0x70>)
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	429c      	cmp	r4, r3
    1266:	d10b      	bne.n	1280 <vTaskDelete+0x64>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:757
                        {
                                configASSERT( uxSchedulerSuspended == 0 );
    1268:	4b0d      	ldr	r3, [pc, #52]	; (12a0 <vTaskDelete+0x84>)
    126a:	681b      	ldr	r3, [r3, #0]
    126c:	b123      	cbz	r3, 1278 <vTaskDelete+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:757 (discriminator 1)
    126e:	f04f 0010 	mov.w	r0, #16
    1272:	f380 8811 	msr	BASEPRI, r0
    1276:	e7fe      	b.n	1276 <vTaskDelete+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:774
                                 /** Reset the next expected unblock time in case it referred to
                                the task that has just been deleted. */
                                prvResetNextTaskUnblockTime();
                        }
                }
        }
    1278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:765
                                in which Windows specific clean up operations are performed,
                                after which it is not possible to yield away from this task -
                                hence xYieldPending is used to latch that a context switch is
                                required. */
                                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
                                portYIELD_WITHIN_API();
    127c:	f000 bd8a 	b.w	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:774
                                 /** Reset the next expected unblock time in case it referred to
                                the task that has just been deleted. */
                                prvResetNextTaskUnblockTime();
                        }
                }
        }
    1280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:771
                        }
                        else
                        {
                                 /** Reset the next expected unblock time in case it referred to
                                the task that has just been deleted. */
                                prvResetNextTaskUnblockTime();
    1284:	f7ff bec2 	b.w	100c <prvResetNextTaskUnblockTime>
    1288:	bd38      	pop	{r3, r4, r5, pc}
    128a:	bf00      	nop
    128c:	1fff0bcc 	.word	0x1fff0bcc
    1290:	1fff0bb8 	.word	0x1fff0bb8
    1294:	1fff0688 	.word	0x1fff0688
    1298:	1fff0bf0 	.word	0x1fff0bf0
    129c:	1fff0684 	.word	0x1fff0684
    12a0:	1fff0be4 	.word	0x1fff0be4

000012a4 <vTaskStartScheduler>:
vTaskStartScheduler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1455

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    12a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1468
                xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
        }
        #else
        {
                 /** Create the idle task without storing its handle. */
                xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    12a6:	2400      	movs	r4, #0
    12a8:	4623      	mov	r3, r4
    12aa:	9400      	str	r4, [sp, #0]
    12ac:	9401      	str	r4, [sp, #4]
    12ae:	9402      	str	r4, [sp, #8]
    12b0:	9403      	str	r4, [sp, #12]
    12b2:	4811      	ldr	r0, [pc, #68]	; (12f8 <vTaskStartScheduler+0x54>)
    12b4:	4911      	ldr	r1, [pc, #68]	; (12fc <vTaskStartScheduler+0x58>)
    12b6:	22c8      	movs	r2, #200	; 0xc8
    12b8:	f7ff fee2 	bl	1080 <xTaskGenericCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1474
        }
        #endif  /** INCLUDE_xTaskGetIdleTaskHandle */

        #if ( configUSE_TIMERS == 1 )
        {
                if( xReturn == pdPASS )
    12bc:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1468
                xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
        }
        #else
        {
                 /** Create the idle task without storing its handle. */
                xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    12be:	4603      	mov	r3, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1474
        }
        #endif  /** INCLUDE_xTaskGetIdleTaskHandle */

        #if ( configUSE_TIMERS == 1 )
        {
                if( xReturn == pdPASS )
    12c0:	d111      	bne.n	12e6 <vTaskStartScheduler+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1476
                {
                        xReturn = xTimerCreateTimerTask();
    12c2:	f000 fbcd 	bl	1a60 <xTimerCreateTimerTask>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1485
                        mtCOVERAGE_TEST_MARKER();
                }
        }
        #endif  /** configUSE_TIMERS */

        if( xReturn == pdPASS )
    12c6:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1476

        #if ( configUSE_TIMERS == 1 )
        {
                if( xReturn == pdPASS )
                {
                        xReturn = xTimerCreateTimerTask();
    12c8:	4603      	mov	r3, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1485
                        mtCOVERAGE_TEST_MARKER();
                }
        }
        #endif  /** configUSE_TIMERS */

        if( xReturn == pdPASS )
    12ca:	d10c      	bne.n	12e6 <vTaskStartScheduler+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1492
                 /** Interrupts are turned off here, to ensure a tick does not occur
                before or during the call to xPortStartScheduler().  The stacks of
                the created tasks contain a status word with interrupts switched on
                so interrupts will automatically get re-enabled when the first task
                starts to run. */
                portDISABLE_INTERRUPTS();
    12cc:	f04f 0010 	mov.w	r0, #16
    12d0:	f380 8811 	msr	BASEPRI, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1502
                        structure specific to the task that will run first. */
                        _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
                }
                #endif  /** configUSE_NEWLIB_REENTRANT */

                xSchedulerRunning = pdTRUE;
    12d4:	4a0a      	ldr	r2, [pc, #40]	; (1300 <vTaskStartScheduler+0x5c>)
    12d6:	6013      	str	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1503
                xTickCount = ( TickType_t ) 0U;
    12d8:	4b0a      	ldr	r3, [pc, #40]	; (1304 <vTaskStartScheduler+0x60>)
    12da:	601c      	str	r4, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1529
                 /** This line will only be reached if the kernel could not be started,
                because there was not enough FreeRTOS heap to create the idle task
                or the timer task. */
                configASSERT( xReturn );
        }
}
    12dc:	b004      	add	sp, #16
    12de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1512
                the run time counter time base. */
                portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

                 /** Setting up the timer tick is hardware specific and thus in the
                portable interface. */
                if( xPortStartScheduler() != pdFALSE )
    12e2:	f000 bd7f 	b.w	1de4 <xPortStartScheduler>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1527
        else
        {
                 /** This line will only be reached if the kernel could not be started,
                because there was not enough FreeRTOS heap to create the idle task
                or the timer task. */
                configASSERT( xReturn );
    12e6:	b923      	cbnz	r3, 12f2 <vTaskStartScheduler+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1527 (discriminator 1)
    12e8:	f04f 0010 	mov.w	r0, #16
    12ec:	f380 8811 	msr	BASEPRI, r0
    12f0:	e7fe      	b.n	12f0 <vTaskStartScheduler+0x4c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1529
        }
}
    12f2:	b004      	add	sp, #16
    12f4:	bd10      	pop	{r4, pc}
    12f6:	bf00      	nop
    12f8:	0000155d 	.word	0x0000155d
    12fc:	00006dde 	.word	0x00006dde
    1300:	1fff0684 	.word	0x1fff0684
    1304:	1fff0be8 	.word	0x1fff0be8

00001308 <vTaskSuspendAll>:
vTaskSuspendAll():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1549
{
         /** A critical section is not required as the variable is of type
        BaseType_t.  Please read Richard Barry's reply in the following link to a
        post in the FreeRTOS support forum before reporting this as a bug! -
        http://goo.gl/wu4acr */
        ++uxSchedulerSuspended;
    1308:	4b02      	ldr	r3, [pc, #8]	; (1314 <vTaskSuspendAll+0xc>)
    130a:	681a      	ldr	r2, [r3, #0]
    130c:	3201      	adds	r2, #1
    130e:	601a      	str	r2, [r3, #0]
    1310:	4770      	bx	lr
    1312:	bf00      	nop
    1314:	1fff0be4 	.word	0x1fff0be4

00001318 <xTaskGetTickCount>:
xTaskGetTickCount():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1675
        return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1318:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1679
TickType_t xTicks;

         /** Critical section required if running on a 16 bit processor. */
        taskENTER_CRITICAL();
    131a:	f000 fd1f 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1681
        {
                xTicks = xTickCount;
    131e:	4b03      	ldr	r3, [pc, #12]	; (132c <xTaskGetTickCount+0x14>)
    1320:	681c      	ldr	r4, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1683
        }
        taskEXIT_CRITICAL();
    1322:	f000 fd2b 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1686

        return xTicks;
}
    1326:	4620      	mov	r0, r4
    1328:	bd10      	pop	{r4, pc}
    132a:	bf00      	nop
    132c:	1fff0be8 	.word	0x1fff0be8

00001330 <xTaskIncrementTick>:
xTaskIncrementTick():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1859

         /** Called by the portable layer each time a tick interrupt occurs.
        Increments the tick then checks to see if the new tick value will cause any
        tasks to be unblocked. */
        traceTASK_INCREMENT_TICK( xTickCount );
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1330:	4b38      	ldr	r3, [pc, #224]	; (1414 <xTaskIncrementTick+0xe4>)
    1332:	681b      	ldr	r3, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1850

#endif  /** configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1859

         /** Called by the portable layer each time a tick interrupt occurs.
        Increments the tick then checks to see if the new tick value will cause any
        tasks to be unblocked. */
        traceTASK_INCREMENT_TICK( xTickCount );
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1338:	2b00      	cmp	r3, #0
    133a:	d13a      	bne.n	13b2 <xTaskIncrementTick+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1863
        {
                 /** Increment the RTOS tick, switching the delayed and overflowed
                delayed lists if it wraps to 0. */
                ++xTickCount;
    133c:	4b36      	ldr	r3, [pc, #216]	; (1418 <xTaskIncrementTick+0xe8>)
    133e:	681a      	ldr	r2, [r3, #0]
    1340:	3201      	adds	r2, #1
    1342:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1868

                {
                         /** Minor optimisation.  The tick count cannot change in this
                        block. */
                        const TickType_t xConstTickCount = xTickCount;
    1344:	681e      	ldr	r6, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1870

                        if( xConstTickCount == ( TickType_t ) 0U )
    1346:	b99e      	cbnz	r6, 1370 <xTaskIncrementTick+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1872
                        {
                                taskSWITCH_DELAYED_LISTS();
    1348:	4b34      	ldr	r3, [pc, #208]	; (141c <xTaskIncrementTick+0xec>)
    134a:	681a      	ldr	r2, [r3, #0]
    134c:	6812      	ldr	r2, [r2, #0]
    134e:	b122      	cbz	r2, 135a <xTaskIncrementTick+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1872 (discriminator 1)
    1350:	f04f 0010 	mov.w	r0, #16
    1354:	f380 8811 	msr	BASEPRI, r0
    1358:	e7fe      	b.n	1358 <xTaskIncrementTick+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1872 (discriminator 2)
    135a:	4a31      	ldr	r2, [pc, #196]	; (1420 <xTaskIncrementTick+0xf0>)
    135c:	6819      	ldr	r1, [r3, #0]
    135e:	6810      	ldr	r0, [r2, #0]
    1360:	6018      	str	r0, [r3, #0]
    1362:	4b30      	ldr	r3, [pc, #192]	; (1424 <xTaskIncrementTick+0xf4>)
    1364:	6011      	str	r1, [r2, #0]
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	3201      	adds	r2, #1
    136a:	601a      	str	r2, [r3, #0]
    136c:	f7ff fe4e 	bl	100c <prvResetNextTaskUnblockTime>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1883

                         /** See if this tick has made a timeout expire.  Tasks are stored in
                        the     queue in the order of their wake time - meaning once one task
                        has been found whose block time has not expired there is no need to
                        look any further        down the list. */
                        if( xConstTickCount >= xNextTaskUnblockTime )
    1370:	4f2d      	ldr	r7, [pc, #180]	; (1428 <xTaskIncrementTick+0xf8>)
    1372:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1438 <xTaskIncrementTick+0x108>
    1376:	683b      	ldr	r3, [r7, #0]
    1378:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 143c <xTaskIncrementTick+0x10c>
    137c:	429e      	cmp	r6, r3
    137e:	f04f 0400 	mov.w	r4, #0
    1382:	d30b      	bcc.n	139c <xTaskIncrementTick+0x6c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1887
                        {
                                for( ;; )
                                {
                                        if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1384:	4b25      	ldr	r3, [pc, #148]	; (141c <xTaskIncrementTick+0xec>)
    1386:	681a      	ldr	r2, [r3, #0]
    1388:	6812      	ldr	r2, [r2, #0]
    138a:	2a00      	cmp	r2, #0
    138c:	d036      	beq.n	13fc <xTaskIncrementTick+0xcc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1903
                                        {
                                                 /** The delayed list is not empty, get the value of the
                                                item at the head of the delayed list.  This is the time
                                                at which the task at the head of the delayed list must
                                                be removed from the Blocked state. */
                                                pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	68db      	ldr	r3, [r3, #12]
    1392:	68dd      	ldr	r5, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1904
                                                xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1394:	686b      	ldr	r3, [r5, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1906

                                                if( xConstTickCount < xItemValue )
    1396:	429e      	cmp	r6, r3
    1398:	d211      	bcs.n	13be <xTaskIncrementTick+0x8e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1894
                                                 /** The delayed list is empty.  Set xNextTaskUnblockTime
                                                to the maximum possible value so it is extremely
                                                unlikely that the
                                                if( xTickCount >= xNextTaskUnblockTime ) test will pass
                                                next time through. */
                                                xNextTaskUnblockTime = portMAX_DELAY;
    139a:	603b      	str	r3, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1967
                 /** Tasks of equal priority to the currently running task will share
                processing time (time slice) if preemption is on, and the application
                writer has not explicitly turned time slicing off. */
                #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
                {
                        if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    139c:	f8d9 3000 	ldr.w	r3, [r9]
    13a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13a2:	2214      	movs	r2, #20
    13a4:	4353      	muls	r3, r2
    13a6:	f858 3003 	ldr.w	r3, [r8, r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1969
                        {
                                xSwitchRequired = pdTRUE;
    13aa:	2b02      	cmp	r3, #2
    13ac:	bf28      	it	cs
    13ae:	2401      	movcs	r4, #1
    13b0:	e027      	b.n	1402 <xTaskIncrementTick+0xd2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1995
                }
                #endif  /** configUSE_TICK_HOOK */
        }
        else
        {
                ++uxPendedTicks;
    13b2:	4b1e      	ldr	r3, [pc, #120]	; (142c <xTaskIncrementTick+0xfc>)
    13b4:	681a      	ldr	r2, [r3, #0]
    13b6:	3201      	adds	r2, #1
    13b8:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1853

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    13ba:	2400      	movs	r4, #0
    13bc:	e021      	b.n	1402 <xTaskIncrementTick+0xd2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1922
                                                {
                                                        mtCOVERAGE_TEST_MARKER();
                                                }

                                                 /** It is time to remove the item from the Blocked state. */
                                                ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    13be:	f105 0a04 	add.w	sl, r5, #4
    13c2:	4650      	mov	r0, sl
    13c4:	f7ff fb59 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1926

                                                 /** Is the task waiting on an event also?  If so remove
                                                it from the event list. */
                                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    13c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    13ca:	b11b      	cbz	r3, 13d4 <xTaskIncrementTick+0xa4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1928
                                                {
                                                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    13cc:	f105 0018 	add.w	r0, r5, #24
    13d0:	f7ff fb53 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1937
                                                        mtCOVERAGE_TEST_MARKER();
                                                }

                                                 /** Place the unblocked task into the appropriate ready
                                                list. */
                                                prvAddTaskToReadyList( pxTCB );
    13d4:	4a16      	ldr	r2, [pc, #88]	; (1430 <xTaskIncrementTick+0x100>)
    13d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    13d8:	6811      	ldr	r1, [r2, #0]
    13da:	2014      	movs	r0, #20
    13dc:	428b      	cmp	r3, r1
    13de:	fb00 8003 	mla	r0, r0, r3, r8
    13e2:	4651      	mov	r1, sl
    13e4:	bf88      	it	hi
    13e6:	6013      	strhi	r3, [r2, #0]
    13e8:	f7ff fb23 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1947
                                                {
                                                         /** Preemption is on, but a context switch should
                                                        only be performed if the unblocked task has a
                                                        priority that is equal to or higher than the
                                                        currently executing task. */
                                                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    13ec:	f8d9 3000 	ldr.w	r3, [r9]
    13f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    13f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1949
                                                        {
                                                                xSwitchRequired = pdTRUE;
    13f4:	429a      	cmp	r2, r3
    13f6:	bf28      	it	cs
    13f8:	2401      	movcs	r4, #1
    13fa:	e7c3      	b.n	1384 <xTaskIncrementTick+0x54>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1894
                                                 /** The delayed list is empty.  Set xNextTaskUnblockTime
                                                to the maximum possible value so it is extremely
                                                unlikely that the
                                                if( xTickCount >= xNextTaskUnblockTime ) test will pass
                                                next time through. */
                                                xNextTaskUnblockTime = portMAX_DELAY;
    13fc:	f04f 33ff 	mov.w	r3, #4294967295
    1400:	e7cb      	b.n	139a <xTaskIncrementTick+0x6a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2009
                #endif
        }

        #if ( configUSE_PREEMPTION == 1 )
        {
                if( xYieldPending != pdFALSE )
    1402:	4b0c      	ldr	r3, [pc, #48]	; (1434 <xTaskIncrementTick+0x104>)
    1404:	681b      	ldr	r3, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2011
                {
                        xSwitchRequired = pdTRUE;
    1406:	2b00      	cmp	r3, #0
    1408:	bf18      	it	ne
    140a:	2401      	movne	r4, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2021
                }
        }
        #endif  /** configUSE_PREEMPTION */

        return xSwitchRequired;
}
    140c:	4620      	mov	r0, r4
    140e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1412:	bf00      	nop
    1414:	1fff0be4 	.word	0x1fff0be4
    1418:	1fff0be8 	.word	0x1fff0be8
    141c:	1fff0680 	.word	0x1fff0680
    1420:	1fff0bec 	.word	0x1fff0bec
    1424:	1fff067c 	.word	0x1fff067c
    1428:	1fff041c 	.word	0x1fff041c
    142c:	1fff06b4 	.word	0x1fff06b4
    1430:	1fff0c0c 	.word	0x1fff0c0c
    1434:	1fff0c10 	.word	0x1fff0c10
    1438:	1fff06b8 	.word	0x1fff06b8
    143c:	1fff0bcc 	.word	0x1fff0bcc

00001440 <xTaskResumeAll>:
xTaskResumeAll():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1582

#endif  /** configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1440:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1588
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

         /** If uxSchedulerSuspended is zero then this function does not match a
        previous call to vTaskSuspendAll(). */
        configASSERT( uxSchedulerSuspended );
    1442:	4c2a      	ldr	r4, [pc, #168]	; (14ec <xTaskResumeAll+0xac>)
    1444:	6823      	ldr	r3, [r4, #0]
    1446:	b923      	cbnz	r3, 1452 <xTaskResumeAll+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1588 (discriminator 1)
    1448:	f04f 0010 	mov.w	r0, #16
    144c:	f380 8811 	msr	BASEPRI, r0
    1450:	e7fe      	b.n	1450 <xTaskResumeAll+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1595
         /** It is possible that an ISR caused a task to be removed from an event
        list while the scheduler was suspended.  If this was the case then the
        removed task will have been added to the xPendingReadyList.  Once the
        scheduler has been resumed it is safe to move all the pending ready
        tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
    1452:	f000 fc83 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1597
        {
                --uxSchedulerSuspended;
    1456:	6823      	ldr	r3, [r4, #0]
    1458:	3b01      	subs	r3, #1
    145a:	6023      	str	r3, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1599

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    145c:	6823      	ldr	r3, [r4, #0]
    145e:	b10b      	cbz	r3, 1464 <xTaskResumeAll+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1584
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    1460:	2400      	movs	r4, #0
    1462:	e03e      	b.n	14e2 <xTaskResumeAll+0xa2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1601
        {
                --uxSchedulerSuspended;

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                {
                        if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1464:	4b22      	ldr	r3, [pc, #136]	; (14f0 <xTaskResumeAll+0xb0>)
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	2b00      	cmp	r3, #0
    146a:	d0f9      	beq.n	1460 <xTaskResumeAll+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1605 (discriminator 1)
                        {
                                 /** Move any readied tasks from the pending list into the
                                appropriate ready list. */
                                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    146c:	4b21      	ldr	r3, [pc, #132]	; (14f4 <xTaskResumeAll+0xb4>)
    146e:	681a      	ldr	r2, [r3, #0]
    1470:	b302      	cbz	r2, 14b4 <xTaskResumeAll+0x74>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1607
                                {
                                        pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1472:	68db      	ldr	r3, [r3, #12]
    1474:	68dc      	ldr	r4, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1609
                                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
                                        ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1476:	1d25      	adds	r5, r4, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1608
                                 /** Move any readied tasks from the pending list into the
                                appropriate ready list. */
                                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                                {
                                        pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1478:	f104 0018 	add.w	r0, r4, #24
    147c:	f7ff fafd 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1609
                                        ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1480:	4628      	mov	r0, r5
    1482:	f7ff fafa 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1610
                                        prvAddTaskToReadyList( pxTCB );
    1486:	4a1c      	ldr	r2, [pc, #112]	; (14f8 <xTaskResumeAll+0xb8>)
    1488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    148a:	6811      	ldr	r1, [r2, #0]
    148c:	428b      	cmp	r3, r1
    148e:	bf88      	it	hi
    1490:	6013      	strhi	r3, [r2, #0]
    1492:	4a1a      	ldr	r2, [pc, #104]	; (14fc <xTaskResumeAll+0xbc>)
    1494:	2014      	movs	r0, #20
    1496:	fb00 2003 	mla	r0, r0, r3, r2
    149a:	4629      	mov	r1, r5
    149c:	f7ff fac9 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1614

                                         /** If we have moved a task that has a priority higher than
                                        the current task then we should yield. */
                                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    14a0:	4b17      	ldr	r3, [pc, #92]	; (1500 <xTaskResumeAll+0xc0>)
    14a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14a8:	429a      	cmp	r2, r3
    14aa:	d3df      	bcc.n	146c <xTaskResumeAll+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1616
                                        {
                                                xYieldPending = pdTRUE;
    14ac:	4b15      	ldr	r3, [pc, #84]	; (1504 <xTaskResumeAll+0xc4>)
    14ae:	2201      	movs	r2, #1
    14b0:	601a      	str	r2, [r3, #0]
    14b2:	e7db      	b.n	146c <xTaskResumeAll+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1628

                                 /** If any ticks occurred while the scheduler was suspended then
                                they should be processed now.  This ensures the tick count does
                                not     slip, and that any delayed tasks are resumed at the correct
                                time. */
                                if( uxPendedTicks > ( UBaseType_t ) 0U )
    14b4:	4c14      	ldr	r4, [pc, #80]	; (1508 <xTaskResumeAll+0xc8>)
    14b6:	6823      	ldr	r3, [r4, #0]
    14b8:	b97b      	cbnz	r3, 14da <xTaskResumeAll+0x9a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1648
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }

                                if( xYieldPending == pdTRUE )
    14ba:	4b12      	ldr	r3, [pc, #72]	; (1504 <xTaskResumeAll+0xc4>)
    14bc:	681c      	ldr	r4, [r3, #0]
    14be:	2c01      	cmp	r4, #1
    14c0:	d1ce      	bne.n	1460 <xTaskResumeAll+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1655
                                        #if( configUSE_PREEMPTION != 0 )
                                        {
                                                xAlreadyYielded = pdTRUE;
                                        }
                                        #endif
                                        taskYIELD_IF_USING_PREEMPTION();
    14c2:	f000 fc67 	bl	1d94 <vPortYieldFromISR>
    14c6:	e00c      	b.n	14e2 <xTaskResumeAll+0xa2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1632
                                time. */
                                if( uxPendedTicks > ( UBaseType_t ) 0U )
                                {
                                        while( uxPendedTicks > ( UBaseType_t ) 0U )
                                        {
                                                if( xTaskIncrementTick() != pdFALSE )
    14c8:	f7ff ff32 	bl	1330 <xTaskIncrementTick>
    14cc:	b110      	cbz	r0, 14d4 <xTaskResumeAll+0x94>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1634
                                                {
                                                        xYieldPending = pdTRUE;
    14ce:	4b0d      	ldr	r3, [pc, #52]	; (1504 <xTaskResumeAll+0xc4>)
    14d0:	2201      	movs	r2, #1
    14d2:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1640
                                                }
                                                else
                                                {
                                                        mtCOVERAGE_TEST_MARKER();
                                                }
                                                --uxPendedTicks;
    14d4:	6823      	ldr	r3, [r4, #0]
    14d6:	3b01      	subs	r3, #1
    14d8:	6023      	str	r3, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1630 (discriminator 1)
                                they should be processed now.  This ensures the tick count does
                                not     slip, and that any delayed tasks are resumed at the correct
                                time. */
                                if( uxPendedTicks > ( UBaseType_t ) 0U )
                                {
                                        while( uxPendedTicks > ( UBaseType_t ) 0U )
    14da:	6823      	ldr	r3, [r4, #0]
    14dc:	2b00      	cmp	r3, #0
    14de:	d1f3      	bne.n	14c8 <xTaskResumeAll+0x88>
    14e0:	e7eb      	b.n	14ba <xTaskResumeAll+0x7a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1668
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
        taskEXIT_CRITICAL();
    14e2:	f000 fc4b 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:1671

        return xAlreadyYielded;
}
    14e6:	4620      	mov	r0, r4
    14e8:	bd38      	pop	{r3, r4, r5, pc}
    14ea:	bf00      	nop
    14ec:	1fff0be4 	.word	0x1fff0be4
    14f0:	1fff0bf4 	.word	0x1fff0bf4
    14f4:	1fff0bd0 	.word	0x1fff0bd0
    14f8:	1fff0c0c 	.word	0x1fff0c0c
    14fc:	1fff06b8 	.word	0x1fff06b8
    1500:	1fff0bcc 	.word	0x1fff0bcc
    1504:	1fff0c10 	.word	0x1fff0c10
    1508:	1fff06b4 	.word	0x1fff06b4

0000150c <vTaskDelay>:
vTaskDelay():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:878
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

        void vTaskDelay( const TickType_t xTicksToDelay )
        {
    150c:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:884
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded = pdFALSE;


                 /** A delay time of zero just forces a reschedule. */
                if( xTicksToDelay > ( TickType_t ) 0U )
    150e:	4604      	mov	r4, r0
    1510:	b918      	cbnz	r0, 151a <vTaskDelay+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:936
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
    1512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:930

                 /** Force a reschedule if xTaskResumeAll has not already done so, we may
                have put ourselves to sleep. */
                if( xAlreadyYielded == pdFALSE )
                {
                        portYIELD_WITHIN_API();
    1516:	f000 bc3d 	b.w	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:886


                 /** A delay time of zero just forces a reschedule. */
                if( xTicksToDelay > ( TickType_t ) 0U )
                {
                        configASSERT( uxSchedulerSuspended == 0 );
    151a:	4b0d      	ldr	r3, [pc, #52]	; (1550 <vTaskDelay+0x44>)
    151c:	681b      	ldr	r3, [r3, #0]
    151e:	b123      	cbz	r3, 152a <vTaskDelay+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:886 (discriminator 1)
    1520:	f04f 0010 	mov.w	r0, #16
    1524:	f380 8811 	msr	BASEPRI, r0
    1528:	e7fe      	b.n	1528 <vTaskDelay+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:887
                        vTaskSuspendAll();
    152a:	f7ff feed 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:901
                                This task cannot be in an event list as it is the currently
                                executing task. */

                                 /** Calculate the time to wake - this may overflow but this is
                                not a problem. */
                                xTimeToWake = xTickCount + xTicksToDelay;
    152e:	4b09      	ldr	r3, [pc, #36]	; (1554 <vTaskDelay+0x48>)
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	441c      	add	r4, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:906

                                 /** We must remove ourselves from the ready list before adding
                                ourselves to the blocked list as the same list item is used for
                                both lists. */
                                if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1534:	4b08      	ldr	r3, [pc, #32]	; (1558 <vTaskDelay+0x4c>)
    1536:	6818      	ldr	r0, [r3, #0]
    1538:	3004      	adds	r0, #4
    153a:	f7ff fa9e 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:917
                                }
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }
                                prvAddCurrentTaskToDelayedList( xTimeToWake );
    153e:	4620      	mov	r0, r4
    1540:	f7ff fd76 	bl	1030 <prvAddCurrentTaskToDelayedList>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:919
                        }
                        xAlreadyYielded = xTaskResumeAll();
    1544:	f7ff ff7c 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:928
                        mtCOVERAGE_TEST_MARKER();
                }

                 /** Force a reschedule if xTaskResumeAll has not already done so, we may
                have put ourselves to sleep. */
                if( xAlreadyYielded == pdFALSE )
    1548:	2800      	cmp	r0, #0
    154a:	d0e2      	beq.n	1512 <vTaskDelay+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:936
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
    154c:	bd10      	pop	{r4, pc}
    154e:	bf00      	nop
    1550:	1fff0be4 	.word	0x1fff0be4
    1554:	1fff0be8 	.word	0x1fff0be8
    1558:	1fff0bcc 	.word	0x1fff0bcc

0000155c <prvIdleTask>:
prvIdleTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2554
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    155c:	b508      	push	{r3, lr}
prvCheckTasksWaitingTermination():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2851
        {
                BaseType_t xListIsEmpty;

                 /** ucTasksDeleted is used to prevent vTaskSuspendAll() being called
                too often in the idle task. */
                while( uxTasksDeleted > ( UBaseType_t ) 0U )
    155e:	4d15      	ldr	r5, [pc, #84]	; (15b4 <prvIdleTask+0x58>)
    1560:	682b      	ldr	r3, [r5, #0]
    1562:	b1f3      	cbz	r3, 15a2 <prvIdleTask+0x46>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2855
                {
                        vTaskSuspendAll();
                        {
                                xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1564:	4c14      	ldr	r4, [pc, #80]	; (15b8 <prvIdleTask+0x5c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2853

                 /** ucTasksDeleted is used to prevent vTaskSuspendAll() being called
                too often in the idle task. */
                while( uxTasksDeleted > ( UBaseType_t ) 0U )
                {
                        vTaskSuspendAll();
    1566:	f7ff fecf 	bl	1308 <vTaskSuspendAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2855
                        {
                                xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    156a:	6826      	ldr	r6, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2857
                        }
                        ( void ) xTaskResumeAll();
    156c:	f7ff ff68 	bl	1440 <xTaskResumeAll>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2859

                        if( xListIsEmpty == pdFALSE )
    1570:	2e00      	cmp	r6, #0
    1572:	d0f4      	beq.n	155e <prvIdleTask+0x2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2863
                        {
                                TCB_t *pxTCB;

                                taskENTER_CRITICAL();
    1574:	f000 fbf2 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2865
                                {
                                        pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1578:	68e3      	ldr	r3, [r4, #12]
    157a:	68dc      	ldr	r4, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2866
                                        ( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    157c:	1d20      	adds	r0, r4, #4
    157e:	f7ff fa7c 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2867
                                        --uxCurrentNumberOfTasks;
    1582:	4b0e      	ldr	r3, [pc, #56]	; (15bc <prvIdleTask+0x60>)
    1584:	681a      	ldr	r2, [r3, #0]
    1586:	3a01      	subs	r2, #1
    1588:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2868
                                        --uxTasksDeleted;
    158a:	682b      	ldr	r3, [r5, #0]
    158c:	3b01      	subs	r3, #1
    158e:	602b      	str	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2870
                                }
                                taskEXIT_CRITICAL();
    1590:	f000 fbf4 	bl	1d7c <vPortExitCritical>
prvDeleteTCB():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3095
                want to allocate and clean RAM statically. */
                portCLEAN_UP_TCB( pxTCB );

                 /** Free up the memory allocated by the scheduler for the task.  It is up to
                the task to free any memory allocated at the application level. */
                vPortFreeAligned( pxTCB->pxStack );
    1594:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1596:	f7ff fa31 	bl	9fc <vPortFree>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3096
                vPortFree( pxTCB );
    159a:	4620      	mov	r0, r4
    159c:	f7ff fa2e 	bl	9fc <vPortFree>
    15a0:	e7dd      	b.n	155e <prvIdleTask+0x2>
prvIdleTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2584

                        A critical region is not required here as we are just reading from
                        the list, and an occasional incorrect value will not matter.  If
                        the ready list at the idle priority contains more than one task
                        then a task other than the idle task is ready to execute. */
                        if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <prvIdleTask+0x64>)
    15a4:	681b      	ldr	r3, [r3, #0]
    15a6:	2b01      	cmp	r3, #1
    15a8:	d901      	bls.n	15ae <prvIdleTask+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2586
                        {
                                taskYIELD();
    15aa:	f000 fbf3 	bl	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2604
                         /** Call the user defined function from within the idle task.  This
                        allows the application designer to add background functionality
                        without the overhead of a separate task.
                        NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                        CALL A FUNCTION THAT MIGHT BLOCK. */
                  vApplicationIdleHook();
    15ae:	f004 fb9f 	bl	5cf0 <vApplicationIdleHook>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2655
                        {
                                mtCOVERAGE_TEST_MARKER();
                        }
                }
                #endif  /** configUSE_TICKLESS_IDLE */
        }
    15b2:	e7d4      	b.n	155e <prvIdleTask+0x2>
    15b4:	1fff0688 	.word	0x1fff0688
    15b8:	1fff0bb8 	.word	0x1fff0bb8
    15bc:	1fff0bf4 	.word	0x1fff0bf4
    15c0:	1fff06b8 	.word	0x1fff06b8

000015c4 <vTaskSwitchContext>:
vTaskSwitchContext():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2116
#endif  /** configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
        if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    15c4:	4b1b      	ldr	r3, [pc, #108]	; (1634 <vTaskSwitchContext+0x70>)
    15c6:	681a      	ldr	r2, [r3, #0]
    15c8:	4b1b      	ldr	r3, [pc, #108]	; (1638 <vTaskSwitchContext+0x74>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2115

#endif  /** configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    15ca:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2116
        if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    15cc:	b112      	cbz	r2, 15d4 <vTaskSwitchContext+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2120
        {
                 /** The scheduler is currently suspended - do not allow a context
                switch. */
                xYieldPending = pdTRUE;
    15ce:	2201      	movs	r2, #1
    15d0:	601a      	str	r2, [r3, #0]
    15d2:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2154
                                }
                                ulTaskSwitchedInTime = ulTotalRunTime;
                }
                #endif  /** configGENERATE_RUN_TIME_STATS */

                taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    15d4:	4c19      	ldr	r4, [pc, #100]	; (163c <vTaskSwitchContext+0x78>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2124
                switch. */
                xYieldPending = pdTRUE;
        }
        else
        {
                xYieldPending = pdFALSE;
    15d6:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2154
                                }
                                ulTaskSwitchedInTime = ulTotalRunTime;
                }
                #endif  /** configGENERATE_RUN_TIME_STATS */

                taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    15d8:	6822      	ldr	r2, [r4, #0]
    15da:	6823      	ldr	r3, [r4, #0]
    15dc:	6812      	ldr	r2, [r2, #0]
    15de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    15e0:	429a      	cmp	r2, r3
    15e2:	d808      	bhi.n	15f6 <vTaskSwitchContext+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2154 (discriminator 1)
    15e4:	6820      	ldr	r0, [r4, #0]
    15e6:	6821      	ldr	r1, [r4, #0]
    15e8:	3134      	adds	r1, #52	; 0x34
    15ea:	f7ff f936 	bl	85a <vApplicationStackOverflowHook>
    15ee:	e002      	b.n	15f6 <vTaskSwitchContext+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2157 (discriminator 2)
                taskSECOND_CHECK_FOR_STACK_OVERFLOW();

                taskSELECT_HIGHEST_PRIORITY_TASK();
    15f0:	6813      	ldr	r3, [r2, #0]
    15f2:	3b01      	subs	r3, #1
    15f4:	6013      	str	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2157 (discriminator 1)
    15f6:	4a12      	ldr	r2, [pc, #72]	; (1640 <vTaskSwitchContext+0x7c>)
    15f8:	4912      	ldr	r1, [pc, #72]	; (1644 <vTaskSwitchContext+0x80>)
    15fa:	6810      	ldr	r0, [r2, #0]
    15fc:	2314      	movs	r3, #20
    15fe:	4358      	muls	r0, r3
    1600:	5808      	ldr	r0, [r1, r0]
    1602:	b938      	cbnz	r0, 1614 <vTaskSwitchContext+0x50>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2157 (discriminator 2)
    1604:	6813      	ldr	r3, [r2, #0]
    1606:	2b00      	cmp	r3, #0
    1608:	d1f2      	bne.n	15f0 <vTaskSwitchContext+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2157 (discriminator 1)
    160a:	f04f 0010 	mov.w	r0, #16
    160e:	f380 8811 	msr	BASEPRI, r0
    1612:	e7fe      	b.n	1612 <vTaskSwitchContext+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2157 (discriminator 3)
    1614:	6812      	ldr	r2, [r2, #0]
    1616:	fb03 1302 	mla	r3, r3, r2, r1
    161a:	f103 0108 	add.w	r1, r3, #8
    161e:	685a      	ldr	r2, [r3, #4]
    1620:	6852      	ldr	r2, [r2, #4]
    1622:	605a      	str	r2, [r3, #4]
    1624:	428a      	cmp	r2, r1
    1626:	bf04      	itt	eq
    1628:	6852      	ldreq	r2, [r2, #4]
    162a:	605a      	streq	r2, [r3, #4]
    162c:	685b      	ldr	r3, [r3, #4]
    162e:	68db      	ldr	r3, [r3, #12]
    1630:	6023      	str	r3, [r4, #0]
    1632:	bd10      	pop	{r4, pc}
    1634:	1fff0be4 	.word	0x1fff0be4
    1638:	1fff0c10 	.word	0x1fff0c10
    163c:	1fff0bcc 	.word	0x1fff0bcc
    1640:	1fff0c0c 	.word	0x1fff0c0c
    1644:	1fff06b8 	.word	0x1fff06b8

00001648 <vTaskPlaceOnEventList>:
vTaskPlaceOnEventList():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2173
        }
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1648:	b538      	push	{r3, r4, r5, lr}
    164a:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2176
TickType_t xTimeToWake;

        configASSERT( pxEventList );
    164c:	b920      	cbnz	r0, 1658 <vTaskPlaceOnEventList+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2176 (discriminator 1)
    164e:	f04f 0010 	mov.w	r0, #16
    1652:	f380 8811 	msr	BASEPRI, r0
    1656:	e7fe      	b.n	1656 <vTaskPlaceOnEventList+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2185

         /** Place the event list item of the TCB in the appropriate event list.
        This is placed in the list in priority order so the highest priority task
        is the first to be woken by the event.  The queue that contains the event
        list is locked, preventing simultaneous access from interrupts. */
        vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1658:	4c0c      	ldr	r4, [pc, #48]	; (168c <vTaskPlaceOnEventList+0x44>)
    165a:	6821      	ldr	r1, [r4, #0]
    165c:	3118      	adds	r1, #24
    165e:	f7ff f9f4 	bl	a4a <vListInsert>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2190

         /** The task must be removed from from the ready list before it is added to
        the blocked list as the same list item is used for both lists.  Exclusive
        access to the ready lists guaranteed because the scheduler is locked. */
        if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1662:	6820      	ldr	r0, [r4, #0]
    1664:	3004      	adds	r0, #4
    1666:	f7ff fa08 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2203
                mtCOVERAGE_TEST_MARKER();
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
        {
                if( xTicksToWait == portMAX_DELAY )
    166a:	1c6b      	adds	r3, r5, #1
    166c:	d106      	bne.n	167c <vTaskPlaceOnEventList+0x34>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2208
                {
                         /** Add the task to the suspended task list instead of a delayed task
                        list to ensure the task is not woken by a timing event.  It will
                        block indefinitely. */
                        vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    166e:	6821      	ldr	r1, [r4, #0]
    1670:	4807      	ldr	r0, [pc, #28]	; (1690 <vTaskPlaceOnEventList+0x48>)
    1672:	3104      	adds	r1, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2228
                        will handle it. */
                        xTimeToWake = xTickCount + xTicksToWait;
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
        }
        #endif  /** INCLUDE_vTaskSuspend */
}
    1674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2208
                if( xTicksToWait == portMAX_DELAY )
                {
                         /** Add the task to the suspended task list instead of a delayed task
                        list to ensure the task is not woken by a timing event.  It will
                        block indefinitely. */
                        vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1678:	f7ff b9db 	b.w	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2215
                else
                {
                         /** Calculate the time at which the task should be woken if the event
                        does not occur.  This may overflow but this doesn't matter, the
                        scheduler will handle it. */
                        xTimeToWake = xTickCount + xTicksToWait;
    167c:	4b05      	ldr	r3, [pc, #20]	; (1694 <vTaskPlaceOnEventList+0x4c>)
    167e:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2216
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
    1680:	4428      	add	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2228
                        will handle it. */
                        xTimeToWake = xTickCount + xTicksToWait;
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
        }
        #endif  /** INCLUDE_vTaskSuspend */
}
    1682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2216
                {
                         /** Calculate the time at which the task should be woken if the event
                        does not occur.  This may overflow but this doesn't matter, the
                        scheduler will handle it. */
                        xTimeToWake = xTickCount + xTicksToWait;
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
    1686:	f7ff bcd3 	b.w	1030 <prvAddCurrentTaskToDelayedList>
    168a:	bf00      	nop
    168c:	1fff0bcc 	.word	0x1fff0bcc
    1690:	1fff0bf8 	.word	0x1fff0bf8
    1694:	1fff0be8 	.word	0x1fff0be8

00001698 <vTaskPlaceOnUnorderedEventList>:
vTaskPlaceOnUnorderedEventList():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2232
        #endif  /** INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1698:	b538      	push	{r3, r4, r5, lr}
    169a:	4615      	mov	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2235
TickType_t xTimeToWake;

        configASSERT( pxEventList );
    169c:	b920      	cbnz	r0, 16a8 <vTaskPlaceOnUnorderedEventList+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2235 (discriminator 1)
    169e:	f04f 0010 	mov.w	r0, #16
    16a2:	f380 8811 	msr	BASEPRI, r0
    16a6:	e7fe      	b.n	16a6 <vTaskPlaceOnUnorderedEventList+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2239

         /** THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
        the event groups implementation. */
        configASSERT( uxSchedulerSuspended != 0 );
    16a8:	4b12      	ldr	r3, [pc, #72]	; (16f4 <vTaskPlaceOnUnorderedEventList+0x5c>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	b923      	cbnz	r3, 16b8 <vTaskPlaceOnUnorderedEventList+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2239 (discriminator 1)
    16ae:	f04f 0010 	mov.w	r0, #16
    16b2:	f380 8811 	msr	BASEPRI, r0
    16b6:	e7fe      	b.n	16b6 <vTaskPlaceOnUnorderedEventList+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2244

         /** Store the item value in the event list item.  It is safe to access the
        event list item here as interrupts won't access the event list item of a
        task that is not in the Blocked state. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    16b8:	4c0f      	ldr	r4, [pc, #60]	; (16f8 <vTaskPlaceOnUnorderedEventList+0x60>)
    16ba:	6823      	ldr	r3, [r4, #0]
    16bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    16c0:	6199      	str	r1, [r3, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2251
         /** Place the event list item of the TCB at the end of the appropriate event
        list.  It is safe to access the event list here because it is part of an
        event group implementation - and interrupts don't access event groups
        directly (instead they access them indirectly by pending function calls to
        the task level). */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    16c2:	6821      	ldr	r1, [r4, #0]
    16c4:	3118      	adds	r1, #24
    16c6:	f7ff f9b4 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2256

         /** The task must be removed from the ready list before it is added to the
        blocked list.  Exclusive access can be assured to the ready list as the
        scheduler is locked. */
        if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    16ca:	6820      	ldr	r0, [r4, #0]
    16cc:	3004      	adds	r0, #4
    16ce:	f7ff f9d4 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2269
                mtCOVERAGE_TEST_MARKER();
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
        {
                if( xTicksToWait == portMAX_DELAY )
    16d2:	1c6b      	adds	r3, r5, #1
    16d4:	d106      	bne.n	16e4 <vTaskPlaceOnUnorderedEventList+0x4c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2274
                {
                         /** Add the task to the suspended task list instead of a delayed task
                        list to ensure it is not woken by a timing event.  It will block
                        indefinitely. */
                        vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    16d6:	6821      	ldr	r1, [r4, #0]
    16d8:	4808      	ldr	r0, [pc, #32]	; (16fc <vTaskPlaceOnUnorderedEventList+0x64>)
    16da:	3104      	adds	r1, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2294
                        will manage it correctly. */
                        xTimeToWake = xTickCount + xTicksToWait;
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
        }
        #endif  /** INCLUDE_vTaskSuspend */
}
    16dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2274
                if( xTicksToWait == portMAX_DELAY )
                {
                         /** Add the task to the suspended task list instead of a delayed task
                        list to ensure it is not woken by a timing event.  It will block
                        indefinitely. */
                        vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    16e0:	f7ff b9a7 	b.w	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2281
                else
                {
                         /** Calculate the time at which the task should be woken if the event
                        does not occur.  This may overflow but this doesn't matter, the
                        kernel will manage it correctly. */
                        xTimeToWake = xTickCount + xTicksToWait;
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <vTaskPlaceOnUnorderedEventList+0x68>)
    16e6:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2282
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
    16e8:	4428      	add	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2294
                        will manage it correctly. */
                        xTimeToWake = xTickCount + xTicksToWait;
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
        }
        #endif  /** INCLUDE_vTaskSuspend */
}
    16ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2282
                {
                         /** Calculate the time at which the task should be woken if the event
                        does not occur.  This may overflow but this doesn't matter, the
                        kernel will manage it correctly. */
                        xTimeToWake = xTickCount + xTicksToWait;
                        prvAddCurrentTaskToDelayedList( xTimeToWake );
    16ee:	f7ff bc9f 	b.w	1030 <prvAddCurrentTaskToDelayedList>
    16f2:	bf00      	nop
    16f4:	1fff0be4 	.word	0x1fff0be4
    16f8:	1fff0bcc 	.word	0x1fff0bcc
    16fc:	1fff0bf8 	.word	0x1fff0bf8
    1700:	1fff0be8 	.word	0x1fff0be8

00001704 <vTaskPlaceOnEventListRestricted>:
vTaskPlaceOnEventListRestricted():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2300
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

        void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
        {
    1704:	b538      	push	{r3, r4, r5, lr}
    1706:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2303
        TickType_t xTimeToWake;

                configASSERT( pxEventList );
    1708:	b920      	cbnz	r0, 1714 <vTaskPlaceOnEventListRestricted+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2303 (discriminator 1)
    170a:	f04f 0010 	mov.w	r0, #16
    170e:	f380 8811 	msr	BASEPRI, r0
    1712:	e7fe      	b.n	1712 <vTaskPlaceOnEventListRestricted+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2315

                 /** Place the event list item of the TCB in the appropriate event list.
                In this case it is assume that this is the only task that is going to
                be waiting on this event list, so the faster vListInsertEnd() function
                can be used in place of vListInsert. */
                vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1714:	4c07      	ldr	r4, [pc, #28]	; (1734 <vTaskPlaceOnEventListRestricted+0x30>)
    1716:	6821      	ldr	r1, [r4, #0]
    1718:	3118      	adds	r1, #24
    171a:	f7ff f98a 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2320

                 /** We must remove this task from the ready list before adding it to the
                blocked list as the same list item is used for both lists.  This
                function is called form a critical section. */
                if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    171e:	6820      	ldr	r0, [r4, #0]
    1720:	3004      	adds	r0, #4
    1722:	f7ff f9aa 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2333
                        mtCOVERAGE_TEST_MARKER();
                }

                 /** Calculate the time at which the task should be woken if the event does
                not occur.  This may overflow but this doesn't matter. */
                xTimeToWake = xTickCount + xTicksToWait;
    1726:	4b04      	ldr	r3, [pc, #16]	; (1738 <vTaskPlaceOnEventListRestricted+0x34>)
    1728:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2336

                traceTASK_DELAY_UNTIL();
                prvAddCurrentTaskToDelayedList( xTimeToWake );
    172a:	4428      	add	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2337
        }
    172c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2336
                 /** Calculate the time at which the task should be woken if the event does
                not occur.  This may overflow but this doesn't matter. */
                xTimeToWake = xTickCount + xTicksToWait;

                traceTASK_DELAY_UNTIL();
                prvAddCurrentTaskToDelayedList( xTimeToWake );
    1730:	f7ff bc7e 	b.w	1030 <prvAddCurrentTaskToDelayedList>
    1734:	1fff0bcc 	.word	0x1fff0bcc
    1738:	1fff0be8 	.word	0x1fff0be8

0000173c <xTaskRemoveFromEventList>:
xTaskRemoveFromEventList():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2343

#endif  /** configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    173c:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2360
        get called - the lock count on the queue will get modified instead.  This
        means exclusive access to the event list is guaranteed here.

        This function assumes that a check has already been made to ensure that
        pxEventList is not empty. */
        pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    173e:	68c3      	ldr	r3, [r0, #12]
    1740:	68dc      	ldr	r4, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2361
        configASSERT( pxUnblockedTCB );
    1742:	b924      	cbnz	r4, 174e <xTaskRemoveFromEventList+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2361 (discriminator 1)
    1744:	f04f 0010 	mov.w	r0, #16
    1748:	f380 8811 	msr	BASEPRI, r0
    174c:	e7fe      	b.n	174c <xTaskRemoveFromEventList+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2362
        ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    174e:	f104 0518 	add.w	r5, r4, #24
    1752:	4628      	mov	r0, r5
    1754:	f7ff f991 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2364

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1758:	4b10      	ldr	r3, [pc, #64]	; (179c <xTaskRemoveFromEventList+0x60>)
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	b973      	cbnz	r3, 177c <xTaskRemoveFromEventList+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2366
        {
                ( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    175e:	1d25      	adds	r5, r4, #4
    1760:	4628      	mov	r0, r5
    1762:	f7ff f98a 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2367
                prvAddTaskToReadyList( pxUnblockedTCB );
    1766:	4a0e      	ldr	r2, [pc, #56]	; (17a0 <xTaskRemoveFromEventList+0x64>)
    1768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    176a:	6811      	ldr	r1, [r2, #0]
    176c:	428b      	cmp	r3, r1
    176e:	bf88      	it	hi
    1770:	6013      	strhi	r3, [r2, #0]
    1772:	4a0c      	ldr	r2, [pc, #48]	; (17a4 <xTaskRemoveFromEventList+0x68>)
    1774:	2014      	movs	r0, #20
    1776:	fb00 2003 	mla	r0, r0, r3, r2
    177a:	e000      	b.n	177e <xTaskRemoveFromEventList+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2373
        }
        else
        {
                 /** The delayed and ready lists cannot be accessed, so hold this task
                pending until the scheduler is resumed. */
                vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    177c:	480a      	ldr	r0, [pc, #40]	; (17a8 <xTaskRemoveFromEventList+0x6c>)
    177e:	4629      	mov	r1, r5
    1780:	f7ff f957 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2376
        }

        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1784:	4b09      	ldr	r3, [pc, #36]	; (17ac <xTaskRemoveFromEventList+0x70>)
    1786:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    178c:	429a      	cmp	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2385
                it should force a context switch now. */
                xReturn = pdTRUE;

                 /** Mark that a yield is pending in case the user is not using the
                "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
                xYieldPending = pdTRUE;
    178e:	bf83      	ittte	hi
    1790:	4b07      	ldrhi	r3, [pc, #28]	; (17b0 <xTaskRemoveFromEventList+0x74>)
    1792:	2001      	movhi	r0, #1
    1794:	6018      	strhi	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2389
        }
        else
        {
                xReturn = pdFALSE;
    1796:	2000      	movls	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2393
        }

        return xReturn;
}
    1798:	bd38      	pop	{r3, r4, r5, pc}
    179a:	bf00      	nop
    179c:	1fff0be4 	.word	0x1fff0be4
    17a0:	1fff0c0c 	.word	0x1fff0c0c
    17a4:	1fff06b8 	.word	0x1fff06b8
    17a8:	1fff0bd0 	.word	0x1fff0bd0
    17ac:	1fff0bcc 	.word	0x1fff0bcc
    17b0:	1fff0c10 	.word	0x1fff0c10

000017b4 <xTaskRemoveFromUnorderedEventList>:
xTaskRemoveFromUnorderedEventList():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2403
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

         /** THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
        the event flags implementation. */
        configASSERT( uxSchedulerSuspended != pdFALSE );
    17b4:	4a18      	ldr	r2, [pc, #96]	; (1818 <xTaskRemoveFromUnorderedEventList+0x64>)
    17b6:	6812      	ldr	r2, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2397
        return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    17b8:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2403
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

         /** THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
        the event flags implementation. */
        configASSERT( uxSchedulerSuspended != pdFALSE );
    17ba:	b922      	cbnz	r2, 17c6 <xTaskRemoveFromUnorderedEventList+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2403 (discriminator 1)
    17bc:	f04f 0010 	mov.w	r0, #16
    17c0:	f380 8811 	msr	BASEPRI, r0
    17c4:	e7fe      	b.n	17c4 <xTaskRemoveFromUnorderedEventList+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2410
         /** Store the new item value in the event list. */
        listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

         /** Remove the event list form the event flag.  Interrupts do not access
        event flags. */
        pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    17c6:	68c4      	ldr	r4, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2406
         /** THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
        the event flags implementation. */
        configASSERT( uxSchedulerSuspended != pdFALSE );

         /** Store the new item value in the event list. */
        listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    17c8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    17cc:	6001      	str	r1, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2411

         /** Remove the event list form the event flag.  Interrupts do not access
        event flags. */
        pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
        configASSERT( pxUnblockedTCB );
    17ce:	b924      	cbnz	r4, 17da <xTaskRemoveFromUnorderedEventList+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2411 (discriminator 1)
    17d0:	f04f 0010 	mov.w	r0, #16
    17d4:	f380 8811 	msr	BASEPRI, r0
    17d8:	e7fe      	b.n	17d8 <xTaskRemoveFromUnorderedEventList+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2417
        ( void ) uxListRemove( pxEventListItem );

         /** Remove the task from the delayed list and add it to the ready list.  The
        scheduler is suspended so interrupts will not be accessing the ready
        lists. */
        ( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    17da:	1d25      	adds	r5, r4, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2412

         /** Remove the event list form the event flag.  Interrupts do not access
        event flags. */
        pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
        configASSERT( pxUnblockedTCB );
        ( void ) uxListRemove( pxEventListItem );
    17dc:	f7ff f94d 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2417

         /** Remove the task from the delayed list and add it to the ready list.  The
        scheduler is suspended so interrupts will not be accessing the ready
        lists. */
        ( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff f94a 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2418
        prvAddTaskToReadyList( pxUnblockedTCB );
    17e6:	4a0d      	ldr	r2, [pc, #52]	; (181c <xTaskRemoveFromUnorderedEventList+0x68>)
    17e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17ea:	6811      	ldr	r1, [r2, #0]
    17ec:	428b      	cmp	r3, r1
    17ee:	bf88      	it	hi
    17f0:	6013      	strhi	r3, [r2, #0]
    17f2:	4a0b      	ldr	r2, [pc, #44]	; (1820 <xTaskRemoveFromUnorderedEventList+0x6c>)
    17f4:	2014      	movs	r0, #20
    17f6:	fb00 2003 	mla	r0, r0, r3, r2
    17fa:	4629      	mov	r1, r5
    17fc:	f7ff f919 	bl	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2420

        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1800:	4b08      	ldr	r3, [pc, #32]	; (1824 <xTaskRemoveFromUnorderedEventList+0x70>)
    1802:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1808:	429a      	cmp	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2430
                switch now. */
                xReturn = pdTRUE;

                 /** Mark that a yield is pending in case the user is not using the
                "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
                xYieldPending = pdTRUE;
    180a:	bf83      	ittte	hi
    180c:	4b06      	ldrhi	r3, [pc, #24]	; (1828 <xTaskRemoveFromUnorderedEventList+0x74>)
    180e:	2001      	movhi	r0, #1
    1810:	6018      	strhi	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2434
        }
        else
        {
                xReturn = pdFALSE;
    1812:	2000      	movls	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2438
        }

        return xReturn;
}
    1814:	bd38      	pop	{r3, r4, r5, pc}
    1816:	bf00      	nop
    1818:	1fff0be4 	.word	0x1fff0be4
    181c:	1fff0c0c 	.word	0x1fff0c0c
    1820:	1fff06b8 	.word	0x1fff06b8
    1824:	1fff0bcc 	.word	0x1fff0bcc
    1828:	1fff0c10 	.word	0x1fff0c10

0000182c <vTaskSetTimeOutState>:
vTaskSetTimeOutState():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2443
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
        configASSERT( pxTimeOut );
    182c:	b920      	cbnz	r0, 1838 <vTaskSetTimeOutState+0xc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2443 (discriminator 1)
    182e:	f04f 0010 	mov.w	r0, #16
    1832:	f380 8811 	msr	BASEPRI, r0
    1836:	e7fe      	b.n	1836 <vTaskSetTimeOutState+0xa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2444
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    1838:	4b03      	ldr	r3, [pc, #12]	; (1848 <vTaskSetTimeOutState+0x1c>)
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	6003      	str	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2445
        pxTimeOut->xTimeOnEntering = xTickCount;
    183e:	4b03      	ldr	r3, [pc, #12]	; (184c <vTaskSetTimeOutState+0x20>)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	6043      	str	r3, [r0, #4]
    1844:	4770      	bx	lr
    1846:	bf00      	nop
    1848:	1fff067c 	.word	0x1fff067c
    184c:	1fff0be8 	.word	0x1fff0be8

00001850 <xTaskCheckForTimeOut>:
xTaskCheckForTimeOut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2450
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1850:	b538      	push	{r3, r4, r5, lr}
    1852:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2453
BaseType_t xReturn;

        configASSERT( pxTimeOut );
    1854:	4604      	mov	r4, r0
    1856:	b920      	cbnz	r0, 1862 <xTaskCheckForTimeOut+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2453 (discriminator 1)
    1858:	f04f 0010 	mov.w	r0, #16
    185c:	f380 8811 	msr	BASEPRI, r0
    1860:	e7fe      	b.n	1860 <xTaskCheckForTimeOut+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2454
        configASSERT( pxTicksToWait );
    1862:	b921      	cbnz	r1, 186e <xTaskCheckForTimeOut+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2454 (discriminator 1)
    1864:	f04f 0010 	mov.w	r0, #16
    1868:	f380 8811 	msr	BASEPRI, r0
    186c:	e7fe      	b.n	186c <xTaskCheckForTimeOut+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2456

        taskENTER_CRITICAL();
    186e:	f000 fa75 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2459
        {
                 /** Minor optimisation.  The tick count cannot change in this block. */
                const TickType_t xConstTickCount = xTickCount;
    1872:	4b0e      	ldr	r3, [pc, #56]	; (18ac <xTaskCheckForTimeOut+0x5c>)
    1874:	681a      	ldr	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2465

                #if ( INCLUDE_vTaskSuspend == 1 )
                         /** If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
                        the maximum block time then the task should block indefinitely, and
                        therefore never time out. */
                        if( *pxTicksToWait == portMAX_DELAY )
    1876:	682b      	ldr	r3, [r5, #0]
    1878:	1c59      	adds	r1, r3, #1
    187a:	d010      	beq.n	189e <xTaskCheckForTimeOut+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2472
                                xReturn = pdFALSE;
                        }
                        else  /** We are not blocking indefinitely, perform the checks below. */
                #endif

                if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    187c:	490c      	ldr	r1, [pc, #48]	; (18b0 <xTaskCheckForTimeOut+0x60>)
    187e:	6808      	ldr	r0, [r1, #0]
    1880:	6821      	ldr	r1, [r4, #0]
    1882:	4288      	cmp	r0, r1
    1884:	6861      	ldr	r1, [r4, #4]
    1886:	d001      	beq.n	188c <xTaskCheckForTimeOut+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2472 (discriminator 1)
    1888:	428a      	cmp	r2, r1
    188a:	d20a      	bcs.n	18a2 <xTaskCheckForTimeOut+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2480
                        was called, but has also overflowed since vTaskSetTimeOut() was called.
                        It must have wrapped all the way around and gone past us again. This
                        passed since vTaskSetTimeout() was called. */
                        xReturn = pdTRUE;
                }
                else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    188c:	1a50      	subs	r0, r2, r1
    188e:	4298      	cmp	r0, r3
    1890:	d207      	bcs.n	18a2 <xTaskCheckForTimeOut+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2483
                {
                         /** Not a genuine timeout. Adjust parameters for time remaining. */
                        *pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1892:	1a8a      	subs	r2, r1, r2
    1894:	4413      	add	r3, r2
    1896:	602b      	str	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2484
                        vTaskSetTimeOutState( pxTimeOut );
    1898:	4620      	mov	r0, r4
    189a:	f7ff ffc7 	bl	182c <vTaskSetTimeOutState>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2467
                         /** If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
                        the maximum block time then the task should block indefinitely, and
                        therefore never time out. */
                        if( *pxTicksToWait == portMAX_DELAY )
                        {
                                xReturn = pdFALSE;
    189e:	2400      	movs	r4, #0
    18a0:	e000      	b.n	18a4 <xTaskCheckForTimeOut+0x54>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2478
                {
                         /** The tick count is greater than the time at which vTaskSetTimeout()
                        was called, but has also overflowed since vTaskSetTimeOut() was called.
                        It must have wrapped all the way around and gone past us again. This
                        passed since vTaskSetTimeout() was called. */
                        xReturn = pdTRUE;
    18a2:	2401      	movs	r4, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2492
                else
                {
                        xReturn = pdTRUE;
                }
        }
        taskEXIT_CRITICAL();
    18a4:	f000 fa6a 	bl	1d7c <vPortExitCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2495

        return xReturn;
}
    18a8:	4620      	mov	r0, r4
    18aa:	bd38      	pop	{r3, r4, r5, pc}
    18ac:	1fff0be8 	.word	0x1fff0be8
    18b0:	1fff067c 	.word	0x1fff067c

000018b4 <vTaskMissedYield>:
vTaskMissedYield():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:2500
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
        xYieldPending = pdTRUE;
    18b4:	4b01      	ldr	r3, [pc, #4]	; (18bc <vTaskMissedYield+0x8>)
    18b6:	2201      	movs	r2, #1
    18b8:	601a      	str	r2, [r3, #0]
    18ba:	4770      	bx	lr
    18bc:	1fff0c10 	.word	0x1fff0c10

000018c0 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3136
        TaskHandle_t xReturn;

                 /** A critical section is not required as this is not called from
                an interrupt and the current TCB will always be the same for any
                individual execution thread. */
                xReturn = pxCurrentTCB;
    18c0:	4b01      	ldr	r3, [pc, #4]	; (18c8 <xTaskGetCurrentTaskHandle+0x8>)
    18c2:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3139

                return xReturn;
        }
    18c4:	4770      	bx	lr
    18c6:	bf00      	nop
    18c8:	1fff0bcc 	.word	0x1fff0bcc

000018cc <xTaskGetSchedulerState>:
xTaskGetSchedulerState():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3150

        BaseType_t xTaskGetSchedulerState( void )
        {
        BaseType_t xReturn;

                if( xSchedulerRunning == pdFALSE )
    18cc:	4b05      	ldr	r3, [pc, #20]	; (18e4 <xTaskGetSchedulerState+0x18>)
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	b133      	cbz	r3, 18e0 <xTaskGetSchedulerState+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3156
                {
                        xReturn = taskSCHEDULER_NOT_STARTED;
                }
                else
                {
                        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <xTaskGetSchedulerState+0x1c>)
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	2b00      	cmp	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3158
                        {
                                xReturn = taskSCHEDULER_RUNNING;
    18d8:	bf14      	ite	ne
    18da:	2000      	movne	r0, #0
    18dc:	2002      	moveq	r0, #2
    18de:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3152
        {
        BaseType_t xReturn;

                if( xSchedulerRunning == pdFALSE )
                {
                        xReturn = taskSCHEDULER_NOT_STARTED;
    18e0:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3167
                                xReturn = taskSCHEDULER_SUSPENDED;
                        }
                }

                return xReturn;
        }
    18e2:	4770      	bx	lr
    18e4:	1fff0684 	.word	0x1fff0684
    18e8:	1fff0be4 	.word	0x1fff0be4

000018ec <vTaskPriorityInherit>:
vTaskPriorityInherit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3175
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

        void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
        {
    18ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3180
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

                 /** If the mutex was given back by an interrupt while the queue was
                locked then the mutex holder might now be NULL. */
                if( pxMutexHolder != NULL )
    18ee:	4604      	mov	r4, r0
    18f0:	2800      	cmp	r0, #0
    18f2:	d02c      	beq.n	194e <vTaskPriorityInherit+0x62>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3182
                {
                        if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    18f4:	4d16      	ldr	r5, [pc, #88]	; (1950 <vTaskPriorityInherit+0x64>)
    18f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    18f8:	682a      	ldr	r2, [r5, #0]
    18fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    18fc:	4293      	cmp	r3, r2
    18fe:	d226      	bcs.n	194e <vTaskPriorityInherit+0x62>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3187
                        {
                                 /** Adjust the mutex holder state to account for its new
                                priority.  Only reset the event list item value if the value is
                                not     being used for anything else. */
                                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1900:	6982      	ldr	r2, [r0, #24]
    1902:	2a00      	cmp	r2, #0
    1904:	db04      	blt.n	1910 <vTaskPriorityInherit+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3189
                                {
                                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1906:	682a      	ldr	r2, [r5, #0]
    1908:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    190a:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    190e:	6182      	str	r2, [r0, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3198
                                        mtCOVERAGE_TEST_MARKER();
                                }

                                 /** If the task being modified is in the ready state it will need to
                                be moved into a new list. */
                                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1910:	4810      	ldr	r0, [pc, #64]	; (1954 <vTaskPriorityInherit+0x68>)
    1912:	2214      	movs	r2, #20
    1914:	fb02 0303 	mla	r3, r2, r3, r0
    1918:	6962      	ldr	r2, [r4, #20]
    191a:	429a      	cmp	r2, r3
    191c:	4607      	mov	r7, r0
    191e:	d113      	bne.n	1948 <vTaskPriorityInherit+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3200
                                {
                                        if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1920:	1d26      	adds	r6, r4, #4
    1922:	4630      	mov	r0, r6
    1924:	f7ff f8a9 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3210
                                        {
                                                mtCOVERAGE_TEST_MARKER();
                                        }

                                         /** Inherit the priority before being moved into the new list. */
                                        pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1928:	682b      	ldr	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3211
                                        prvAddTaskToReadyList( pxTCB );
    192a:	4a0b      	ldr	r2, [pc, #44]	; (1958 <vTaskPriorityInherit+0x6c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3210
                                        {
                                                mtCOVERAGE_TEST_MARKER();
                                        }

                                         /** Inherit the priority before being moved into the new list. */
                                        pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3211
                                        prvAddTaskToReadyList( pxTCB );
    192e:	6811      	ldr	r1, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3210
                                        {
                                                mtCOVERAGE_TEST_MARKER();
                                        }

                                         /** Inherit the priority before being moved into the new list. */
                                        pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1930:	62e3      	str	r3, [r4, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3211
                                        prvAddTaskToReadyList( pxTCB );
    1932:	428b      	cmp	r3, r1
    1934:	d900      	bls.n	1938 <vTaskPriorityInherit+0x4c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3211 (discriminator 1)
    1936:	6013      	str	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3211 (discriminator 2)
    1938:	2014      	movs	r0, #20
    193a:	fb00 7003 	mla	r0, r0, r3, r7
    193e:	4631      	mov	r1, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3230 (discriminator 2)
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
    1940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3211 (discriminator 2)
                                                mtCOVERAGE_TEST_MARKER();
                                        }

                                         /** Inherit the priority before being moved into the new list. */
                                        pxTCB->uxPriority = pxCurrentTCB->uxPriority;
                                        prvAddTaskToReadyList( pxTCB );
    1944:	f7ff b875 	b.w	a32 <vListInsertEnd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3216
                                }
                                else
                                {
                                         /** Just inherit the priority. */
                                        pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1948:	682b      	ldr	r3, [r5, #0]
    194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    194c:	62e3      	str	r3, [r4, #44]	; 0x2c
    194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1950:	1fff0bcc 	.word	0x1fff0bcc
    1954:	1fff06b8 	.word	0x1fff06b8
    1958:	1fff0c0c 	.word	0x1fff0c0c

0000195c <vTaskPriorityDisinherit>:
vTaskPriorityDisinherit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3238
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

        void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
        {
    195c:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3241
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

                if( pxMutexHolder != NULL )
    195e:	4604      	mov	r4, r0
    1960:	b1e8      	cbz	r0, 199e <vTaskPriorityDisinherit+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3243
                {
                        if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1962:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1964:	6f03      	ldr	r3, [r0, #112]	; 0x70
    1966:	429a      	cmp	r2, r3
    1968:	d019      	beq.n	199e <vTaskPriorityDisinherit+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3247
                        {
                                 /** We must be the running task to be able to give the mutex back.
                                Remove ourselves from the ready list we currently appear in. */
                                if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    196a:	1d05      	adds	r5, r0, #4
    196c:	4628      	mov	r0, r5
    196e:	f7ff f884 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3263
                                traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                                pxTCB->uxPriority = pxTCB->uxBasePriority;

                                 /** Only reset the event list item value if the value is not
                                being used for anything else. */
                                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1972:	69a2      	ldr	r2, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3259
                                }

                                 /** Disinherit the priority before adding the task into the new
                                ready list. */
                                traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                                pxTCB->uxPriority = pxTCB->uxBasePriority;
    1974:	6f23      	ldr	r3, [r4, #112]	; 0x70
    1976:	62e3      	str	r3, [r4, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3263

                                 /** Only reset the event list item value if the value is not
                                being used for anything else. */
                                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1978:	2a00      	cmp	r2, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3265
                                {
                                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    197a:	bfa4      	itt	ge
    197c:	f1c3 0240 	rsbge	r2, r3, #64	; 0x40
    1980:	61a2      	strge	r2, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3271
                                }
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }
                                prvAddTaskToReadyList( pxTCB );
    1982:	4a07      	ldr	r2, [pc, #28]	; (19a0 <vTaskPriorityDisinherit+0x44>)
    1984:	6811      	ldr	r1, [r2, #0]
    1986:	428b      	cmp	r3, r1
    1988:	bf88      	it	hi
    198a:	6013      	strhi	r3, [r2, #0]
    198c:	4a05      	ldr	r2, [pc, #20]	; (19a4 <vTaskPriorityDisinherit+0x48>)
    198e:	2014      	movs	r0, #20
    1990:	fb00 2003 	mla	r0, r0, r3, r2
    1994:	4629      	mov	r1, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3282
                }
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
    1996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3271
                                }
                                else
                                {
                                        mtCOVERAGE_TEST_MARKER();
                                }
                                prvAddTaskToReadyList( pxTCB );
    199a:	f7ff b84a 	b.w	a32 <vListInsertEnd>
    199e:	bd38      	pop	{r3, r4, r5, pc}
    19a0:	1fff0c0c 	.word	0x1fff0c0c
    19a4:	1fff06b8 	.word	0x1fff06b8

000019a8 <uxTaskResetEventItemValue>:
uxTaskResetEventItemValue():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3576

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

        uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    19a8:	4b04      	ldr	r3, [pc, #16]	; (19bc <uxTaskResetEventItemValue+0x14>)
    19aa:	681a      	ldr	r2, [r3, #0]
    19ac:	6990      	ldr	r0, [r2, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3580

         /** Reset the event list item to its normal value - so it can be used with
        queues and semaphores. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    19ae:	681a      	ldr	r2, [r3, #0]
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    19b8:	6193      	str	r3, [r2, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/tasks.c:3583

        return uxReturn;
}
    19ba:	4770      	bx	lr
    19bc:	1fff0bcc 	.word	0x1fff0bcc

000019c0 <prvInsertTimerInActiveList>:
prvInsertTimerInActiveList():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:533
        return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    19c0:	b510      	push	{r4, lr}
    19c2:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:539
BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
    19c4:	4291      	cmp	r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:536

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    19c6:	6041      	str	r1, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:537
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    19c8:	6120      	str	r0, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:539

        if( xNextExpiryTime <= xTimeNow )
    19ca:	d805      	bhi.n	19d8 <prvInsertTimerInActiveList+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:543
        {
                 /** Has the expiry time elapsed between the command to start/reset a
                timer was issued, and the time the command was processed? */
                if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    19cc:	6981      	ldr	r1, [r0, #24]
    19ce:	1ad2      	subs	r2, r2, r3
    19d0:	428a      	cmp	r2, r1
    19d2:	d20c      	bcs.n	19ee <prvInsertTimerInActiveList+0x2e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:551
                        processed actually exceeds the timers period.  */
                        xProcessTimerNow = pdTRUE;
                }
                else
                {
                        vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    19d4:	4b07      	ldr	r3, [pc, #28]	; (19f4 <prvInsertTimerInActiveList+0x34>)
    19d6:	e004      	b.n	19e2 <prvInsertTimerInActiveList+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:556
                }
        }
        else
        {
                if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    19d8:	429a      	cmp	r2, r3
    19da:	d201      	bcs.n	19e0 <prvInsertTimerInActiveList+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:556 (discriminator 1)
    19dc:	4299      	cmp	r1, r3
    19de:	d206      	bcs.n	19ee <prvInsertTimerInActiveList+0x2e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:565
                        its expiry time and should be processed immediately. */
                        xProcessTimerNow = pdTRUE;
                }
                else
                {
                        vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    19e0:	4b05      	ldr	r3, [pc, #20]	; (19f8 <prvInsertTimerInActiveList+0x38>)
    19e2:	6818      	ldr	r0, [r3, #0]
    19e4:	1d21      	adds	r1, r4, #4
    19e6:	f7ff f830 	bl	a4a <vListInsert>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:534
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    19ea:	2000      	movs	r0, #0
    19ec:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:547
                timer was issued, and the time the command was processed? */
                if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
                {
                         /** The time between a command being issued and the command being
                        processed actually exceeds the timers period.  */
                        xProcessTimerNow = pdTRUE;
    19ee:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:570
                        vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
                }
        }

        return xProcessTimerNow;
}
    19f0:	bd10      	pop	{r4, pc}
    19f2:	bf00      	nop
    19f4:	1fff0c44 	.word	0x1fff0c44
    19f8:	1fff0c14 	.word	0x1fff0c14

000019fc <prvCheckForValidListAndQueue>:
prvCheckForValidListAndQueue():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:759
        pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    19fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:765
         /** Check that the list from which active timers are referenced, and the
        queue used to communicate with the timer service, have been
        initialised. */
        taskENTER_CRITICAL();
        {
                if( xTimerQueue == NULL )
    19fe:	4c12      	ldr	r4, [pc, #72]	; (1a48 <prvCheckForValidListAndQueue+0x4c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:763
static void prvCheckForValidListAndQueue( void )
{
         /** Check that the list from which active timers are referenced, and the
        queue used to communicate with the timer service, have been
        initialised. */
        taskENTER_CRITICAL();
    1a00:	f000 f9ac 	bl	1d5c <vPortEnterCritical>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:765
        {
                if( xTimerQueue == NULL )
    1a04:	6825      	ldr	r5, [r4, #0]
    1a06:	b9d5      	cbnz	r5, 1a3e <prvCheckForValidListAndQueue+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:767
                {
                        vListInitialise( &xActiveTimerList1 );
    1a08:	4f10      	ldr	r7, [pc, #64]	; (1a4c <prvCheckForValidListAndQueue+0x50>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:768
                        vListInitialise( &xActiveTimerList2 );
    1a0a:	4e11      	ldr	r6, [pc, #68]	; (1a50 <prvCheckForValidListAndQueue+0x54>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:767
        initialised. */
        taskENTER_CRITICAL();
        {
                if( xTimerQueue == NULL )
                {
                        vListInitialise( &xActiveTimerList1 );
    1a0c:	4638      	mov	r0, r7
    1a0e:	f7ff f802 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:768
                        vListInitialise( &xActiveTimerList2 );
    1a12:	4630      	mov	r0, r6
    1a14:	f7fe ffff 	bl	a16 <vListInitialise>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:769
                        pxCurrentTimerList = &xActiveTimerList1;
    1a18:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <prvCheckForValidListAndQueue+0x58>)
    1a1a:	601f      	str	r7, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:770
                        pxOverflowTimerList = &xActiveTimerList2;
    1a1c:	4b0e      	ldr	r3, [pc, #56]	; (1a58 <prvCheckForValidListAndQueue+0x5c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:771
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1a1e:	200a      	movs	r0, #10
    1a20:	2110      	movs	r1, #16
    1a22:	462a      	mov	r2, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:770
                if( xTimerQueue == NULL )
                {
                        vListInitialise( &xActiveTimerList1 );
                        vListInitialise( &xActiveTimerList2 );
                        pxCurrentTimerList = &xActiveTimerList1;
                        pxOverflowTimerList = &xActiveTimerList2;
    1a24:	601e      	str	r6, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:771
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1a26:	f7ff f8e3 	bl	bf0 <xQueueGenericCreate>
    1a2a:	6020      	str	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:772
                        configASSERT( xTimerQueue );
    1a2c:	b920      	cbnz	r0, 1a38 <prvCheckForValidListAndQueue+0x3c>
    1a2e:	f04f 0010 	mov.w	r0, #16
    1a32:	f380 8811 	msr	BASEPRI, r0
    1a36:	e7fe      	b.n	1a36 <prvCheckForValidListAndQueue+0x3a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:778

                        #if ( configQUEUE_REGISTRY_SIZE > 0 )
                        {
                                if( xTimerQueue != NULL )
                                {
                                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    1a38:	4908      	ldr	r1, [pc, #32]	; (1a5c <prvCheckForValidListAndQueue+0x60>)
    1a3a:	f7ff fab7 	bl	fac <vQueueAddToRegistry>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:793
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
        taskEXIT_CRITICAL();
}
    1a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:792
                else
                {
                        mtCOVERAGE_TEST_MARKER();
                }
        }
        taskEXIT_CRITICAL();
    1a42:	f000 b99b 	b.w	1d7c <vPortExitCritical>
    1a46:	bf00      	nop
    1a48:	1fff0c40 	.word	0x1fff0c40
    1a4c:	1fff0c18 	.word	0x1fff0c18
    1a50:	1fff0c2c 	.word	0x1fff0c2c
    1a54:	1fff0c14 	.word	0x1fff0c14
    1a58:	1fff0c44 	.word	0x1fff0c44
    1a5c:	00006de3 	.word	0x00006de3

00001a60 <xTimerCreateTimerTask>:
xTimerCreateTimerTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:237
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    1a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:244

         /** This function is called when the scheduler is started if
        configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
        timer service task has been created/initialised.  If timers have already
        been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1a62:	f7ff ffcb 	bl	19fc <prvCheckForValidListAndQueue>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:246

        if( xTimerQueue != NULL )
    1a66:	4b0c      	ldr	r3, [pc, #48]	; (1a98 <xTimerCreateTimerTask+0x38>)
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	b163      	cbz	r3, 1a86 <xTimerCreateTimerTask+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:257
                        xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
                }
                #else
                {
                         /** Create the timer task without storing its handle. */
                        xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    1a6c:	233f      	movs	r3, #63	; 0x3f
    1a6e:	9300      	str	r3, [sp, #0]
    1a70:	2300      	movs	r3, #0
    1a72:	9301      	str	r3, [sp, #4]
    1a74:	9302      	str	r3, [sp, #8]
    1a76:	9303      	str	r3, [sp, #12]
    1a78:	4808      	ldr	r0, [pc, #32]	; (1a9c <xTimerCreateTimerTask+0x3c>)
    1a7a:	4909      	ldr	r1, [pc, #36]	; (1aa0 <xTimerCreateTimerTask+0x40>)
    1a7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    1a80:	f7ff fafe 	bl	1080 <xTaskGenericCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:266
        else
        {
                mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
    1a84:	b920      	cbnz	r0, 1a90 <xTimerCreateTimerTask+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:266 (discriminator 1)
    1a86:	f04f 0010 	mov.w	r0, #16
    1a8a:	f380 8811 	msr	BASEPRI, r0
    1a8e:	e7fe      	b.n	1a8e <xTimerCreateTimerTask+0x2e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:268
        return xReturn;
}
    1a90:	b005      	add	sp, #20
    1a92:	f85d fb04 	ldr.w	pc, [sp], #4
    1a96:	bf00      	nop
    1a98:	1fff0c40 	.word	0x1fff0c40
    1a9c:	00001b55 	.word	0x00001b55
    1aa0:	00006de8 	.word	0x00006de8

00001aa4 <xTimerGenericCommand>:
xTimerGenericCommand():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:313
        return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1aa4:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:319
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

         /** Send a message to the timer service task to perform a particular action
        on a particular timer definition. */
        if( xTimerQueue != NULL )
    1aa6:	4c0f      	ldr	r4, [pc, #60]	; (1ae4 <xTimerGenericCommand+0x40>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:313
        return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1aa8:	4605      	mov	r5, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:319
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

         /** Send a message to the timer service task to perform a particular action
        on a particular timer definition. */
        if( xTimerQueue != NULL )
    1aaa:	6820      	ldr	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:313
        return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1aac:	b085      	sub	sp, #20
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:319
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

         /** Send a message to the timer service task to perform a particular action
        on a particular timer definition. */
        if( xTimerQueue != NULL )
    1aae:	b1b8      	cbz	r0, 1ae0 <xTimerGenericCommand+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:326
                 /** Send a command to the timer service task to start the xTimer timer. */
                xMessage.xMessageID = xCommandID;
                xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
                xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

                if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1ab0:	2905      	cmp	r1, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:324
        if( xTimerQueue != NULL )
        {
                 /** Send a command to the timer service task to start the xTimer timer. */
                xMessage.xMessageID = xCommandID;
                xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
                xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1ab2:	e88d 0026 	stmia.w	sp, {r1, r2, r5}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:326

                if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1ab6:	dc0e      	bgt.n	1ad6 <xTimerGenericCommand+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:328
                {
                        if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1ab8:	f7ff ff08 	bl	18cc <xTaskGetSchedulerState>
    1abc:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:334
                        {
                                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                        }
                        else
                        {
                                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1abe:	bf18      	it	ne
    1ac0:	2200      	movne	r2, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:330

                if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
                {
                        if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
                        {
                                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1ac2:	6820      	ldr	r0, [r4, #0]
    1ac4:	bf08      	it	eq
    1ac6:	9a08      	ldreq	r2, [sp, #32]
    1ac8:	4669      	mov	r1, sp
    1aca:	bf0c      	ite	eq
    1acc:	2300      	moveq	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:334
                        }
                        else
                        {
                                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1ace:	4613      	movne	r3, r2
    1ad0:	f7ff f8d6 	bl	c80 <xQueueGenericSend>
    1ad4:	e004      	b.n	1ae0 <xTimerGenericCommand+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:339
                        }
                }
                else
                {
                        xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1ad6:	461a      	mov	r2, r3
    1ad8:	4669      	mov	r1, sp
    1ada:	2300      	movs	r3, #0
    1adc:	f7ff f988 	bl	df0 <xQueueGenericSendFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:350
        {
                mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
}
    1ae0:	b005      	add	sp, #20
    1ae2:	bd30      	pop	{r4, r5, pc}
    1ae4:	1fff0c40 	.word	0x1fff0c40

00001ae8 <prvSwitchTimerLists>:
prvSwitchTimerLists():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:700
        }
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    1ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:710 (discriminator 1)

         /** The tick count has overflowed.  The timer lists must be switched.
        If there are any timers still referenced from the current timer list
        then they must have expired and should be processed before the lists
        are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1aea:	4e18      	ldr	r6, [pc, #96]	; (1b4c <prvSwitchTimerLists+0x64>)
    1aec:	6833      	ldr	r3, [r6, #0]
    1aee:	681a      	ldr	r2, [r3, #0]
    1af0:	b32a      	cbz	r2, 1b3e <prvSwitchTimerLists+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:712
        {
                xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1af2:	68db      	ldr	r3, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:715

                 /** Remove the timer from the list. */
                pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1af4:	68dc      	ldr	r4, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:712
        If there are any timers still referenced from the current timer list
        then they must have expired and should be processed before the lists
        are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
                xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1af6:	681d      	ldr	r5, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:716

                 /** Remove the timer from the list. */
                pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1af8:	1d27      	adds	r7, r4, #4
    1afa:	4638      	mov	r0, r7
    1afc:	f7fe ffbd 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:722
                traceTIMER_EXPIRED( pxTimer );

                 /** Execute its callback, then send a command to restart the timer if
                it is an auto-reload timer.  It cannot be restarted here as the lists
                have not yet been switched. */
                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b02:	4620      	mov	r0, r4
    1b04:	4798      	blx	r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:724

                if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1b06:	69e3      	ldr	r3, [r4, #28]
    1b08:	2b01      	cmp	r3, #1
    1b0a:	d1ee      	bne.n	1aea <prvSwitchTimerLists+0x2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:732
                        the timer going into the same timer list then it has already expired
                        and the timer should be re-inserted into the current list so it is
                        processed again within this loop.  Otherwise a command should be sent
                        to restart the timer to ensure it is only inserted into a list after
                        the lists have been swapped. */
                        xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1b0c:	69a3      	ldr	r3, [r4, #24]
    1b0e:	442b      	add	r3, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:733
                        if( xReloadTime > xNextExpireTime )
    1b10:	42ab      	cmp	r3, r5
    1b12:	d906      	bls.n	1b22 <prvSwitchTimerLists+0x3a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:735
                        {
                                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1b14:	6063      	str	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:736
                                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1b16:	6124      	str	r4, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:737
                                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1b18:	6830      	ldr	r0, [r6, #0]
    1b1a:	4639      	mov	r1, r7
    1b1c:	f7fe ff95 	bl	a4a <vListInsert>
    1b20:	e7e3      	b.n	1aea <prvSwitchTimerLists+0x2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:741
                        }
                        else
                        {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1b22:	2100      	movs	r1, #0
    1b24:	9100      	str	r1, [sp, #0]
    1b26:	4620      	mov	r0, r4
    1b28:	462a      	mov	r2, r5
    1b2a:	460b      	mov	r3, r1
    1b2c:	f7ff ffba 	bl	1aa4 <xTimerGenericCommand>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:742
                                configASSERT( xResult );
    1b30:	2800      	cmp	r0, #0
    1b32:	d1da      	bne.n	1aea <prvSwitchTimerLists+0x2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:742 (discriminator 1)
    1b34:	f04f 0010 	mov.w	r0, #16
    1b38:	f380 8811 	msr	BASEPRI, r0
    1b3c:	e7fe      	b.n	1b3c <prvSwitchTimerLists+0x54>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:753
                        mtCOVERAGE_TEST_MARKER();
                }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1b3e:	4a04      	ldr	r2, [pc, #16]	; (1b50 <prvSwitchTimerLists+0x68>)
    1b40:	6811      	ldr	r1, [r2, #0]
    1b42:	6031      	str	r1, [r6, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:754
        pxOverflowTimerList = pxTemp;
    1b44:	6013      	str	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:755
}
    1b46:	b003      	add	sp, #12
    1b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b4a:	bf00      	nop
    1b4c:	1fff0c14 	.word	0x1fff0c14
    1b50:	1fff0c44 	.word	0x1fff0c44

00001b54 <prvTimerTask>:
prvTimerTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:407
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    1b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b58:	b087      	sub	sp, #28
prvGetNextExpireTime():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:494 (discriminator 1)
        the timer with the nearest expiry time will expire.  If there are no
        active timers then just set the next expire time to 0.  That will cause
        this task to unblock when the tick count overflows, at which point the
        timer lists will be switched and the next expiry time can be
        re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1b5a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1cdc <prvTimerTask+0x188>
    1b5e:	f8d9 3000 	ldr.w	r3, [r9]
    1b62:	681f      	ldr	r7, [r3, #0]
    1b64:	f1d7 0701 	rsbs	r7, r7, #1
    1b68:	bf38      	it	cc
    1b6a:	2700      	movcc	r7, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:495 (discriminator 1)
        if( *pxListWasEmpty == pdFALSE )
    1b6c:	b917      	cbnz	r7, 1b74 <prvTimerTask+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:497
        {
                xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1b6e:	68db      	ldr	r3, [r3, #12]
    1b70:	681d      	ldr	r5, [r3, #0]
    1b72:	e000      	b.n	1b76 <prvTimerTask+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:502
        }
        else
        {
                 /** Ensure the task unblocks when the tick count rolls over. */
                xNextExpireTime = ( TickType_t ) 0U;
    1b74:	2500      	movs	r5, #0
prvSampleTimeNow():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:516
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
    1b76:	4c57      	ldr	r4, [pc, #348]	; (1cd4 <prvTimerTask+0x180>)
prvProcessTimerOrBlockTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:435
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1b78:	f7ff fbc6 	bl	1308 <vTaskSuspendAll>
prvSampleTimeNow():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:514
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1b7c:	f7ff fbcc 	bl	1318 <xTaskGetTickCount>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:516

        if( xTimeNow < xLastTime )
    1b80:	6823      	ldr	r3, [r4, #0]
    1b82:	4298      	cmp	r0, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:514
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1b84:	4606      	mov	r6, r0
    1b86:	46a0      	mov	r8, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:516

        if( xTimeNow < xLastTime )
    1b88:	d203      	bcs.n	1b92 <prvTimerTask+0x3e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:518
        {
                prvSwitchTimerLists();
    1b8a:	f7ff ffad 	bl	1ae8 <prvSwitchTimerLists>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:519
                *pxTimerListsWereSwitched = pdTRUE;
    1b8e:	2301      	movs	r3, #1
    1b90:	e000      	b.n	1b94 <prvTimerTask+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:523
        }
        else
        {
                *pxTimerListsWereSwitched = pdFALSE;
    1b92:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:526
        }

        xLastTime = xTimeNow;
    1b94:	6026      	str	r6, [r4, #0]
prvProcessTimerOrBlockTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:443
                has expired or not.  If obtaining the time causes the lists to switch
                then don't process this timer as any timers that remained in the list
                when the lists were switched will have been processed within the
                prvSampleTimeNow() function. */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
                if( xTimerListsWereSwitched == pdFALSE )
    1b96:	2b00      	cmp	r3, #0
    1b98:	d133      	bne.n	1c02 <prvTimerTask+0xae>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:446
                {
                         /** The tick count has not overflowed, has the timer expired? */
                        if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1b9a:	bb3f      	cbnz	r7, 1bec <prvTimerTask+0x98>
    1b9c:	42b5      	cmp	r5, r6
    1b9e:	d825      	bhi.n	1bec <prvTimerTask+0x98>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:448
                        {
                                ( void ) xTaskResumeAll();
    1ba0:	f7ff fc4e 	bl	1440 <xTaskResumeAll>
prvProcessExpiredTimer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:369
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1ba4:	f8d9 3000 	ldr.w	r3, [r9]
    1ba8:	68db      	ldr	r3, [r3, #12]
    1baa:	68dc      	ldr	r4, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:373

         /** Remove the timer from the list of active timers.  A check has already
        been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1bac:	1d20      	adds	r0, r4, #4
    1bae:	f7fe ff64 	bl	a7a <uxListRemove>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:378
        traceTIMER_EXPIRED( pxTimer );

         /** If the timer is an auto reload timer then calculate the next
        expiry time and re-insert the timer in the list of active timers. */
        if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1bb2:	69e3      	ldr	r3, [r4, #28]
    1bb4:	2b01      	cmp	r3, #1
    1bb6:	d115      	bne.n	1be4 <prvTimerTask+0x90>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:383
        {
                 /** The timer is inserted into a list using a time relative to anything
                other than the current time.  It will therefore be inserted into the
                correct list relative to the time this task thinks it is now. */
                if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1bb8:	69a1      	ldr	r1, [r4, #24]
    1bba:	4620      	mov	r0, r4
    1bbc:	4429      	add	r1, r5
    1bbe:	4632      	mov	r2, r6
    1bc0:	462b      	mov	r3, r5
    1bc2:	f7ff fefd 	bl	19c0 <prvInsertTimerInActiveList>
    1bc6:	2801      	cmp	r0, #1
    1bc8:	d10c      	bne.n	1be4 <prvTimerTask+0x90>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:387
                {
                         /** The timer expired before it was added to the active timer
                        list.  Reload it now.  */
                        xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1bca:	9700      	str	r7, [sp, #0]
    1bcc:	4620      	mov	r0, r4
    1bce:	4639      	mov	r1, r7
    1bd0:	462a      	mov	r2, r5
    1bd2:	463b      	mov	r3, r7
    1bd4:	f7ff ff66 	bl	1aa4 <xTimerGenericCommand>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:388
                        configASSERT( xResult );
    1bd8:	b920      	cbnz	r0, 1be4 <prvTimerTask+0x90>
    1bda:	f04f 0010 	mov.w	r0, #16
    1bde:	f380 8811 	msr	BASEPRI, r0
    1be2:	e7fe      	b.n	1be2 <prvTimerTask+0x8e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:402
        {
                mtCOVERAGE_TEST_MARKER();
        }

         /** Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1be6:	4620      	mov	r0, r4
    1be8:	4798      	blx	r3
    1bea:	e017      	b.n	1c1c <prvTimerTask+0xc8>
prvProcessTimerOrBlockTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:459
                                time has not been reached yet.  This task should therefore
                                block to wait for the next expire time or a command to be
                                received - whichever comes first.  The following line cannot
                                be reached unless xNextExpireTime > xTimeNow, except in the
                                case when the current timer list is empty. */
                                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1bec:	4b3a      	ldr	r3, [pc, #232]	; (1cd8 <prvTimerTask+0x184>)
    1bee:	1ba9      	subs	r1, r5, r6
    1bf0:	6818      	ldr	r0, [r3, #0]
    1bf2:	f7ff f9ed 	bl	fd0 <vQueueWaitForMessageRestricted>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:461

                                if( xTaskResumeAll() == pdFALSE )
    1bf6:	f7ff fc23 	bl	1440 <xTaskResumeAll>
    1bfa:	b978      	cbnz	r0, 1c1c <prvTimerTask+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:467
                                {
                                         /** Yield to wait for either a command to arrive, or the block time
                                        to expire.  If a command arrived between the critical section being
                                        exited and this yield then the yield will not cause the task
                                        to block. */
                                        portYIELD_WITHIN_API();
    1bfc:	f000 f8ca 	bl	1d94 <vPortYieldFromISR>
    1c00:	e00c      	b.n	1c1c <prvTimerTask+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:477
                                }
                        }
                }
                else
                {
                        ( void ) xTaskResumeAll();
    1c02:	f7ff fc1d 	bl	1440 <xTaskResumeAll>
    1c06:	e009      	b.n	1c1c <prvTimerTask+0xc8>
prvProcessReceivedCommands():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:586
        {
                #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                         /** Negative commands are pended function calls rather than timer
                        commands. */
                        if( xMessage.xMessageID < 0 )
    1c08:	9b02      	ldr	r3, [sp, #8]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	da03      	bge.n	1c16 <prvTimerTask+0xc2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:595
                                 /** The timer uses the xCallbackParameters member to request a
                                callback be executed.  Check the callback is not NULL. */
                                configASSERT( pxCallback );

                                 /** Call the function. */
                                pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    1c0e:	9804      	ldr	r0, [sp, #16]
    1c10:	9905      	ldr	r1, [sp, #20]
    1c12:	9b03      	ldr	r3, [sp, #12]
    1c14:	4798      	blx	r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:606
                }
                #endif  /** INCLUDE_xTimerPendFunctionCall */

                 /** Commands that are positive are timer commands rather than pended
                function calls. */
                if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1c16:	9b02      	ldr	r3, [sp, #8]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	da09      	bge.n	1c30 <prvTimerTask+0xdc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:580
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1c1c:	4b2e      	ldr	r3, [pc, #184]	; (1cd8 <prvTimerTask+0x184>)
    1c1e:	2200      	movs	r2, #0
    1c20:	6818      	ldr	r0, [r3, #0]
    1c22:	a902      	add	r1, sp, #8
    1c24:	4613      	mov	r3, r2
    1c26:	f7ff f925 	bl	e74 <xQueueGenericReceive>
    1c2a:	2800      	cmp	r0, #0
    1c2c:	d1ec      	bne.n	1c08 <prvTimerTask+0xb4>
    1c2e:	e794      	b.n	1b5a <prvTimerTask+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:610
                function calls. */
                if( xMessage.xMessageID >= ( BaseType_t ) 0 )
                {
                         /** The messages uses the xTimerParameters member to work on a
                        software timer. */
                        pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1c30:	9c04      	ldr	r4, [sp, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:612

                        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    1c32:	6963      	ldr	r3, [r4, #20]
    1c34:	b113      	cbz	r3, 1c3c <prvTimerTask+0xe8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:615
                        {
                                 /** The timer is in a list, remove it. */
                                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1c36:	1d20      	adds	r0, r4, #4
    1c38:	f7fe ff1f 	bl	a7a <uxListRemove>
prvSampleTimeNow():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:514
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1c3c:	f7ff fb6c 	bl	1318 <xTaskGetTickCount>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:516

        if( xTimeNow < xLastTime )
    1c40:	f8d8 3000 	ldr.w	r3, [r8]
    1c44:	4298      	cmp	r0, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:514
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1c46:	4605      	mov	r5, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:516

        if( xTimeNow < xLastTime )
    1c48:	d201      	bcs.n	1c4e <prvTimerTask+0xfa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:518
        {
                prvSwitchTimerLists();
    1c4a:	f7ff ff4d 	bl	1ae8 <prvSwitchTimerLists>
    1c4e:	9b02      	ldr	r3, [sp, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:526
        else
        {
                *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
    1c50:	f8c8 5000 	str.w	r5, [r8]
    1c54:	2b09      	cmp	r3, #9
    1c56:	d8e1      	bhi.n	1c1c <prvTimerTask+0xc8>
    1c58:	2201      	movs	r2, #1
    1c5a:	fa02 f303 	lsl.w	r3, r2, r3
    1c5e:	f413 7604 	ands.w	r6, r3, #528	; 0x210
    1c62:	d127      	bne.n	1cb4 <prvTimerTask+0x160>
    1c64:	f013 0fc7 	tst.w	r3, #199	; 0xc7
    1c68:	d105      	bne.n	1c76 <prvTimerTask+0x122>
    1c6a:	069b      	lsls	r3, r3, #26
    1c6c:	d5d6      	bpl.n	1c1c <prvTimerTask+0xc8>
prvProcessReceivedCommands():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:687
                                        break;

                                case tmrCOMMAND_DELETE :
                                         /** The timer has already been removed from the active list,
                                        just free up the memory. */
                                        vPortFree( pxTimer );
    1c6e:	4620      	mov	r0, r4
    1c70:	f7fe fec4 	bl	9fc <vPortFree>
    1c74:	e7d2      	b.n	1c1c <prvTimerTask+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:640
                            case tmrCOMMAND_START_FROM_ISR :
                            case tmrCOMMAND_RESET :
                            case tmrCOMMAND_RESET_FROM_ISR :
                                case tmrCOMMAND_START_DONT_TRACE :
                                         /** Start or restart a timer. */
                                        if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    1c76:	9b03      	ldr	r3, [sp, #12]
    1c78:	69a1      	ldr	r1, [r4, #24]
    1c7a:	4620      	mov	r0, r4
    1c7c:	4419      	add	r1, r3
    1c7e:	462a      	mov	r2, r5
    1c80:	f7ff fe9e 	bl	19c0 <prvInsertTimerInActiveList>
    1c84:	2801      	cmp	r0, #1
    1c86:	d1c9      	bne.n	1c1c <prvTimerTask+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:644
                                        {
                                                 /** The timer expired before it was added to the active
                                                timer list.  Process it now. */
                                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c8a:	4620      	mov	r0, r4
    1c8c:	4798      	blx	r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:647
                                                traceTIMER_EXPIRED( pxTimer );

                                                if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1c8e:	69e3      	ldr	r3, [r4, #28]
    1c90:	2b01      	cmp	r3, #1
    1c92:	d1c3      	bne.n	1c1c <prvTimerTask+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:649
                                                {
                                                        xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    1c94:	69a2      	ldr	r2, [r4, #24]
    1c96:	9b03      	ldr	r3, [sp, #12]
    1c98:	9600      	str	r6, [sp, #0]
    1c9a:	441a      	add	r2, r3
    1c9c:	4620      	mov	r0, r4
    1c9e:	4631      	mov	r1, r6
    1ca0:	4633      	mov	r3, r6
    1ca2:	f7ff feff 	bl	1aa4 <xTimerGenericCommand>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:650
                                                        configASSERT( xResult );
    1ca6:	2800      	cmp	r0, #0
    1ca8:	d1b8      	bne.n	1c1c <prvTimerTask+0xc8>
    1caa:	f04f 0010 	mov.w	r0, #16
    1cae:	f380 8811 	msr	BASEPRI, r0
    1cb2:	e7fe      	b.n	1cb2 <prvTimerTask+0x15e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:672
                                        There is nothing to do here. */
                                        break;

                                case tmrCOMMAND_CHANGE_PERIOD :
                                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1cb4:	9903      	ldr	r1, [sp, #12]
    1cb6:	61a1      	str	r1, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:673
                                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    1cb8:	b921      	cbnz	r1, 1cc4 <prvTimerTask+0x170>
    1cba:	f04f 0010 	mov.w	r0, #16
    1cbe:	f380 8811 	msr	BASEPRI, r0
    1cc2:	e7fe      	b.n	1cc2 <prvTimerTask+0x16e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:681
                                        longer or shorter than the old one.  The command time is
                                        therefore set to the current time, and as the period cannot be
                                        zero the next expiry time can only be in the future, meaning
                                        (unlike for the xTimerStart() case above) there is no fail case
                                        that needs to be handled here. */
                                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1cc4:	4620      	mov	r0, r4
    1cc6:	4429      	add	r1, r5
    1cc8:	462a      	mov	r2, r5
    1cca:	462b      	mov	r3, r5
    1ccc:	f7ff fe78 	bl	19c0 <prvInsertTimerInActiveList>
    1cd0:	e7a4      	b.n	1c1c <prvTimerTask+0xc8>
    1cd2:	bf00      	nop
    1cd4:	1fff0c48 	.word	0x1fff0c48
    1cd8:	1fff0c40 	.word	0x1fff0c40
    1cdc:	1fff0c14 	.word	0x1fff0c14

00001ce0 <xTimerPendFunctionCallFromISR>:
xTimerPendFunctionCallFromISR():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:826
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
        {
    1ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:835
                 /** Complete the message with the function parameters and post it to the
                daemon task. */
                xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
                xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
                xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
                xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    1ce2:	9203      	str	r2, [sp, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:837

                xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1ce4:	4a06      	ldr	r2, [pc, #24]	; (1d00 <xTimerPendFunctionCallFromISR+0x20>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:833
        BaseType_t xReturn;

                 /** Complete the message with the function parameters and post it to the
                daemon task. */
                xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
                xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    1ce6:	9001      	str	r0, [sp, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:834
                xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    1ce8:	9102      	str	r1, [sp, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:832
        DaemonTaskMessage_t xMessage;
        BaseType_t xReturn;

                 /** Complete the message with the function parameters and post it to the
                daemon task. */
                xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    1cea:	f06f 0401 	mvn.w	r4, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:837
                xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
                xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
                xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

                xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1cee:	6810      	ldr	r0, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:832
        DaemonTaskMessage_t xMessage;
        BaseType_t xReturn;

                 /** Complete the message with the function parameters and post it to the
                daemon task. */
                xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    1cf0:	9400      	str	r4, [sp, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:837
                xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
                xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
                xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

                xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1cf2:	461a      	mov	r2, r3
    1cf4:	4669      	mov	r1, sp
    1cf6:	2300      	movs	r3, #0
    1cf8:	f7ff f87a 	bl	df0 <xQueueGenericSendFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/src/timers.c:842

                tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

                return xReturn;
        }
    1cfc:	b004      	add	sp, #16
    1cfe:	bd10      	pop	{r4, pc}
    1d00:	1fff0c40 	.word	0x1fff0c40

00001d04 <pxPortInitialiseStack>:
pxPortInitialiseStack():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:273
  pxTopOfStack -= 1;  /** Offset added to account for the way the MCU uses the stack on entry/exit of interrupts,
                        and to ensure alignment. */
#else
  pxTopOfStack--;
#endif
  *pxTopOfStack = portINITIAL_XPSR;    /** xPSR */
    1d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:275
  pxTopOfStack--;
  *pxTopOfStack = (portSTACK_TYPE)pxCode;   /** PC */
    1d08:	e900 000a 	stmdb	r0, {r1, r3}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:277
  pxTopOfStack--;
  *pxTopOfStack = 0;   /** LR */
    1d0c:	2300      	movs	r3, #0
    1d0e:	f840 3c0c 	str.w	r3, [r0, #-12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:287

#if configCPU_FAMILY==configCPU_FAMILY_ARM_M4F  /** floating point unit */
   /** A save method is being used that requires each task to maintain its
     own exec return value. */
  pxTopOfStack--;
  *pxTopOfStack = portINITIAL_EXEC_RETURN;
    1d12:	f06f 0302 	mvn.w	r3, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:281
  pxTopOfStack--;
  *pxTopOfStack = 0;   /** LR */

   /** Save code space by skipping register initialization. */
  pxTopOfStack -= 5;   /** R12, R3, R2 and R1. */
  *pxTopOfStack = (portSTACK_TYPE)pvParameters;  /** R0 */
    1d16:	f840 2c20 	str.w	r2, [r0, #-32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:287

#if configCPU_FAMILY==configCPU_FAMILY_ARM_M4F  /** floating point unit */
   /** A save method is being used that requires each task to maintain its
     own exec return value. */
  pxTopOfStack--;
  *pxTopOfStack = portINITIAL_EXEC_RETURN;
    1d1a:	f840 3c24 	str.w	r3, [r0, #-36]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:291
#endif
  pxTopOfStack -= 8;   /** R11, R10, R9, R8, R7, R6, R5 and R4. */
  return pxTopOfStack;
}
    1d1e:	3844      	subs	r0, #68	; 0x44
    1d20:	4770      	bx	lr
	...

00001d24 <vPortInitTickTimer>:
vPortInitTickTimer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:492
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);     /* 0xE000E100 <= 0x10000000 */

   /** LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK);  /** Set up control register */
#else  /** use normal SysTick Counter */
  *(portNVIC_SYSPRI3) |= portNVIC_SYSTICK_PRI;  /** set priority of SysTick interrupt */
    1d24:	4b07      	ldr	r3, [pc, #28]	; (1d44 <vPortInitTickTimer+0x20>)
    1d26:	681a      	ldr	r2, [r3, #0]
    1d28:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
    1d2c:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:495
#endif
   /** Configure timer to interrupt at the requested rate. */
  SET_TICK_DURATION(TIMER_COUNTS_FOR_ONE_TICK-1UL);
    1d2e:	f6a3 530c 	subw	r3, r3, #3340	; 0xd0c
    1d32:	4a05      	ldr	r2, [pc, #20]	; (1d48 <vPortInitTickTimer+0x24>)
    1d34:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:496
  RESET_TICK_COUNTER_VAL();
    1d36:	2200      	movs	r2, #0
    1d38:	605a      	str	r2, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:497
  ENABLE_TICK_COUNTER();
    1d3a:	2207      	movs	r2, #7
    1d3c:	f843 2c04 	str.w	r2, [r3, #-4]
    1d40:	4770      	bx	lr
    1d42:	bf00      	nop
    1d44:	e000ed20 	.word	0xe000ed20
    1d48:	000927bf 	.word	0x000927bf

00001d4c <vPortEnableVFP>:
vPortEnableVFP():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:512
/*-----------------------------------------------------------*/
#if (configCPU_FAMILY==configCPU_FAMILY_ARM_M4F) && ( USE_FPU)  /** floating point unit */
#if (configCOMPILER==configCOMPILER_ARM_GCC)
void vPortEnableVFP(void) {
   /** The FPU enable bits are in the CPACR. */
  __asm volatile (
    1d4c:	f8df 0008 	ldr.w	r0, [pc, #8]	; 1d58 <vPortEnableVFP+0xc>
    1d50:	6801      	ldr	r1, [r0, #0]
    1d52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1d56:	4770      	bx	lr
$d():
    1d58:	e000ed88 	.word	0xe000ed88

00001d5c <vPortEnterCritical>:
vPortEnterCritical():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:566
 * Disable interrupts before incrementing the count of critical section nesting.
 * The nesting count is maintained so we know when interrupts should be
 * re-enabled.  Once interrupts are disabled the nesting count can be accessed
 * directly.  Each task maintains its own nesting count.
 */
  portDISABLE_INTERRUPTS();
    1d5c:	f04f 0010 	mov.w	r0, #16
    1d60:	f380 8811 	msr	BASEPRI, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:568
  portPOST_ENABLE_DISABLE_INTERRUPTS();
  uxCriticalNesting++;
    1d64:	4b04      	ldr	r3, [pc, #16]	; (1d78 <vPortEnterCritical+0x1c>)
    1d66:	681a      	ldr	r2, [r3, #0]
    1d68:	3201      	adds	r2, #1
    1d6a:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:569
  __asm volatile("dsb");
    1d6c:	f3bf 8f4f 	dsb	sy
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:570
  __asm volatile("isb");
    1d70:	f3bf 8f6f 	isb	sy
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop
    1d78:	1fff0420 	.word	0x1fff0420

00001d7c <vPortExitCritical>:
vPortExitCritical():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:578
void vPortExitCritical(void) {
  /** Interrupts are disabled so we can access the nesting count directly.  If the
  * nesting is found to be 0 (no nesting) then we are leaving the critical
  * section and interrupts can be re-enabled.
  */
  uxCriticalNesting--;
    1d7c:	4a04      	ldr	r2, [pc, #16]	; (1d90 <vPortExitCritical+0x14>)
    1d7e:	6813      	ldr	r3, [r2, #0]
    1d80:	3b01      	subs	r3, #1
    1d82:	6013      	str	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:579
  if (uxCriticalNesting == 0)  {
    1d84:	b91b      	cbnz	r3, 1d8e <vPortExitCritical+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:580
    portENABLE_INTERRUPTS();
    1d86:	f04f 0000 	mov.w	r0, #0
    1d8a:	f380 8811 	msr	BASEPRI, r0
    1d8e:	4770      	bx	lr
    1d90:	1fff0420 	.word	0x1fff0420

00001d94 <vPortYieldFromISR>:
vPortYieldFromISR():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:587
  }
}
/*-----------------------------------------------------------*/
void vPortYieldFromISR(void) {
   /** Set a PendSV to request a context switch. */
  *(portNVIC_INT_CTRL) = portNVIC_PENDSVSET_BIT;
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <vPortYieldFromISR+0x14>)
    1d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1d9a:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:590
   /** Barriers are normally not required but do ensure the code is completely
  within the specified behavior for the architecture. */
  __asm volatile("dsb");
    1d9c:	f3bf 8f4f 	dsb	sy
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:591
  __asm volatile("isb");
    1da0:	f3bf 8f6f 	isb	sy
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	e000ed04 	.word	0xe000ed04

00001dac <SysTick_Handler>:
SysTick_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:630
}
#endif
/*-----------------------------------------------------------*/
#if (configCOMPILER==configCOMPILER_ARM_GCC)
#if configPEX_KINETIS_SDK  /** the SDK expects different interrupt handler names */
void SysTick_Handler(void) {
    1dac:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:638
#endif
  ACKNOWLEDGE_TICK_ISR();
#if configUSE_TICKLESS_IDLE == 1
  TICK_INTERRUPT_FLAG_SET();
#endif
  portSET_INTERRUPT_MASK();    /** disable interrupts */
    1dae:	f04f 0010 	mov.w	r0, #16
    1db2:	f380 8811 	msr	BASEPRI, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:639
  if (xTaskIncrementTick()!=pdFALSE) {  /** increment tick count */
    1db6:	f7ff fabb 	bl	1330 <xTaskIncrementTick>
    1dba:	b108      	cbz	r0, 1dc0 <SysTick_Handler+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:640
    taskYIELD();
    1dbc:	f7ff ffea 	bl	1d94 <vPortYieldFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:642
  }
  portCLEAR_INTERRUPT_MASK();  /** enable interrupts again */
    1dc0:	f04f 0000 	mov.w	r0, #0
    1dc4:	f380 8811 	msr	BASEPRI, r0
    1dc8:	bd08      	pop	{r3, pc}
	...

00001dcc <vPortStartFirstTask>:
vPortStartFirstTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:675
}
#endif
/*-----------------------------------------------------------*/
#if (configCOMPILER==configCOMPILER_ARM_GCC)
void vPortStartFirstTask(void) {
  __asm volatile (
    1dcc:	4804      	ldr	r0, [pc, #16]	; (1de0 <vPortStartFirstTask+0x14>)
    1dce:	6800      	ldr	r0, [r0, #0]
    1dd0:	6800      	ldr	r0, [r0, #0]
    1dd2:	f380 8808 	msr	MSP, r0
    1dd6:	b662      	cpsie	i
    1dd8:	df00      	svc	0
    1dda:	bf00      	nop
    1ddc:	4770      	bx	lr
$d():
    1dde:	0000      	.short	0x0000
    1de0:	e000ed08 	.word	0xe000ed08

00001de4 <xPortStartScheduler>:
xPortStartScheduler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:546
#if 0  /** do NOT set the SVCall priority */
   /** why: execution of an SVC instruction at a priority equal or higher than SVCall can cause a hard fault (at least on Cortex-M4),
  see https://community.nxp.com/thread/302511 */
  *(portNVIC_SYSPRI2) |= portNVIC_SVCALL_PRI;  /** set priority of SVCall interrupt */
#endif
  *(portNVIC_SYSPRI3) |= portNVIC_PENDSV_PRI;  /** set priority of PendSV interrupt */
    1de4:	4b0c      	ldr	r3, [pc, #48]	; (1e18 <xPortStartScheduler+0x34>)
    1de6:	681a      	ldr	r2, [r3, #0]
    1de8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:539
	nop
}
#endif  /** GNU or Keil */
#endif  /** configCPU_FAMILY_ARM_M4F */
/*-----------------------------------------------------------*/
BaseType_t xPortStartScheduler(void) {
    1dec:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:546
#if 0  /** do NOT set the SVCall priority */
   /** why: execution of an SVC instruction at a priority equal or higher than SVCall can cause a hard fault (at least on Cortex-M4),
  see https://community.nxp.com/thread/302511 */
  *(portNVIC_SYSPRI2) |= portNVIC_SVCALL_PRI;  /** set priority of SVCall interrupt */
#endif
  *(portNVIC_SYSPRI3) |= portNVIC_PENDSV_PRI;  /** set priority of PendSV interrupt */
    1dee:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:547
  uxCriticalNesting = 0;  /** Initialize the critical nesting count ready for the first task. */
    1df0:	4b0a      	ldr	r3, [pc, #40]	; (1e1c <xPortStartScheduler+0x38>)
    1df2:	2400      	movs	r4, #0
    1df4:	601c      	str	r4, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:548
  vPortInitTickTimer();  /** initialize tick timer */
    1df6:	f7ff ff95 	bl	1d24 <vPortInitTickTimer>
vPortStartTickTimer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:501
  RESET_TICK_COUNTER_VAL();
  ENABLE_TICK_COUNTER();
}
/*-----------------------------------------------------------*/
void vPortStartTickTimer(void) {
  ENABLE_TICK_COUNTER();
    1dfa:	4b09      	ldr	r3, [pc, #36]	; (1e20 <xPortStartScheduler+0x3c>)
    1dfc:	2207      	movs	r2, #7
    1dfe:	601a      	str	r2, [r3, #0]
xPortStartScheduler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:551
  *(portNVIC_SYSPRI3) |= portNVIC_PENDSV_PRI;  /** set priority of PendSV interrupt */
  uxCriticalNesting = 0;  /** Initialize the critical nesting count ready for the first task. */
  vPortInitTickTimer();  /** initialize tick timer */
  vPortStartTickTimer();  /** start tick timer */
#if configCPU_FAMILY==configCPU_FAMILY_ARM_M4F && USE_FPU  /** floating point unit */
  vPortEnableVFP();  /** Ensure the VFP is enabled - it should be anyway */
    1e00:	f7ff ffa4 	bl	1d4c <vPortEnableVFP>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:552
  *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;  /** Lazy register save always */
    1e04:	4b07      	ldr	r3, [pc, #28]	; (1e24 <xPortStartScheduler+0x40>)
    1e06:	681a      	ldr	r2, [r3, #0]
    1e08:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    1e0c:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:554
#endif
  vPortStartFirstTask();  /** Start the first task. */
    1e0e:	f7ff ffdd 	bl	1dcc <vPortStartFirstTask>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:557
   /** Should not get here, unless you call vTaskEndScheduler()! */
  return pdFALSE;
}
    1e12:	4620      	mov	r0, r4
    1e14:	bd10      	pop	{r4, pc}
    1e16:	bf00      	nop
    1e18:	e000ed20 	.word	0xe000ed20
    1e1c:	1fff0420 	.word	0x1fff0420
    1e20:	e000e010 	.word	0xe000e010
    1e24:	e000ef34 	.word	0xe000ef34

00001e28 <SVC_Handler>:
SVC_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:756
__attribute__ ((naked)) void SVC_Handler(void) {
#else
__attribute__ ((naked)) void vPortSVCHandler(void) {
#endif
#if configCPU_FAMILY_IS_ARM_M4(configCPU_FAMILY)  /** Cortex M4 */
__asm volatile (
    1e28:	4b05      	ldr	r3, [pc, #20]	; (1e40 <pxCurrentTCBConst2>)
    1e2a:	6819      	ldr	r1, [r3, #0]
    1e2c:	6808      	ldr	r0, [r1, #0]
    1e2e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e32:	f380 8809 	msr	PSP, r0
    1e36:	f04f 0000 	mov.w	r0, #0
    1e3a:	f380 8811 	msr	BASEPRI, r0
    1e3e:	4770      	bx	lr

00001e40 <pxCurrentTCBConst2>:
    1e40:	1fff0bcc 	.word	0x1fff0bcc

00001e44 <PendSV_Handler>:
PendSV_Handler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/rtos/FreeRTOS/port/gcc/port.c:911
__attribute__ ((naked)) void PendSV_Handler(void) {
#else
__attribute__ ((naked)) void vPortPendSVHandler(void) {
#endif
#if configCPU_FAMILY_IS_ARM_M4(configCPU_FAMILY)  /** Cortex M4 */
  __asm volatile (
    1e44:	f3ef 8009 	mrs	r0, PSP
    1e48:	4b11      	ldr	r3, [pc, #68]	; (1e90 <pxCurrentTCBConst>)
    1e4a:	681a      	ldr	r2, [r3, #0]
    1e4c:	f01e 0f10 	tst.w	lr, #16
    1e50:	bf08      	it	eq
    1e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    1e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e5a:	6010      	str	r0, [r2, #0]
    1e5c:	e92d 4008 	stmdb	sp!, {r3, lr}
    1e60:	f04f 0010 	mov.w	r0, #16
    1e64:	f380 8811 	msr	BASEPRI, r0
    1e68:	f7ff fbac 	bl	15c4 <vTaskSwitchContext>
    1e6c:	f04f 0000 	mov.w	r0, #0
    1e70:	f380 8811 	msr	BASEPRI, r0
    1e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1e78:	6819      	ldr	r1, [r3, #0]
    1e7a:	6808      	ldr	r0, [r1, #0]
    1e7c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e80:	f01e 0f10 	tst.w	lr, #16
    1e84:	bf08      	it	eq
    1e86:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    1e8a:	f380 8809 	msr	PSP, r0
    1e8e:	4770      	bx	lr

00001e90 <pxCurrentTCBConst>:
    1e90:	1fff0bcc 	.word	0x1fff0bcc

00001e94 <_sbrk>:
_sbrk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:59
#endif

#if defined(__GNUC__)
caddr_t
_sbrk (int incr)
{
    1e94:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:65
  extern char   end asm ("end");
  extern char   heap_limit asm ("__HeapLimit");
  static char * heap_end;
  char *        prev_heap_end;

  if (heap_end == NULL)
    1e96:	4b0c      	ldr	r3, [pc, #48]	; (1ec8 <_sbrk+0x34>)
    1e98:	681a      	ldr	r2, [r3, #0]
    1e9a:	b90a      	cbnz	r2, 1ea0 <_sbrk+0xc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:66
    heap_end = & end;
    1e9c:	4a0b      	ldr	r2, [pc, #44]	; (1ecc <_sbrk+0x38>)
    1e9e:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:70

  prev_heap_end = heap_end;

  if ( incr > 0x4000 )
    1ea0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:68
  char *        prev_heap_end;

  if (heap_end == NULL)
    heap_end = & end;

  prev_heap_end = heap_end;
    1ea4:	681a      	ldr	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:70

  if ( incr > 0x4000 )
    1ea6:	dd00      	ble.n	1eaa <_sbrk+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:72
  {
    __asm("nop");
    1ea8:	bf00      	nop
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:75
  }

  if (heap_end + incr > &heap_limit)
    1eaa:	4909      	ldr	r1, [pc, #36]	; (1ed0 <_sbrk+0x3c>)
    1eac:	4410      	add	r0, r2
    1eae:	4288      	cmp	r0, r1
    1eb0:	d906      	bls.n	1ec0 <_sbrk+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:80
    {
#ifdef NIO_ENOMEM   //TODO: Update NIO error code for MQX
        errno = NIO_ENOMEM;
#else
        errno = ENOMEM;
    1eb2:	f003 ffe5 	bl	5e80 <__errno>
    1eb6:	230c      	movs	r3, #12
    1eb8:	6003      	str	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:82
#endif
      return (caddr_t) -1;
    1eba:	f04f 30ff 	mov.w	r0, #4294967295
    1ebe:	bd08      	pop	{r3, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:85
    }

  heap_end += incr;
    1ec0:	6018      	str	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:87

  return (caddr_t) prev_heap_end;
    1ec2:	4610      	mov	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/utilities/src/fsl_misc_utilities.c:88
}
    1ec4:	bd08      	pop	{r3, pc}
    1ec6:	bf00      	nop
    1ec8:	1fff0c4c 	.word	0x1fff0c4c
    1ecc:	20000000 	.word	0x20000000
    1ed0:	2001ffff 	.word	0x2001ffff

00001ed4 <SIM_HAL_EnableClock.constprop.12>:
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
 * @param base Base address for current SIM instance.
 * @param name Name of the module to enable.
 */
static inline void SIM_HAL_EnableClock(SIM_Type * base, sim_clock_gate_name_t name)
{
    SIM_BWR_SCGC_BIT(base, name, 1U);
    1ed4:	4b02      	ldr	r3, [pc, #8]	; (1ee0 <SIM_HAL_EnableClock.constprop.12+0xc>)
    1ed6:	4403      	add	r3, r0
    1ed8:	009b      	lsls	r3, r3, #2
    1eda:	2201      	movs	r2, #1
    1edc:	601a      	str	r2, [r3, #0]
    1ede:	4770      	bx	lr
    1ee0:	10a40140 	.word	0x10a40140

00001ee4 <CLOCK_SYS_GetSystemClockFreq>:
CLOCK_SYS_GetSystemClockFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:217
 * Description   : Gets the systen clock frequency.
 * This function gets the systen clock frequency.
 *
 *END*/
uint32_t CLOCK_SYS_GetSystemClockFreq(void)
{
    1ee4:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:218
    return CLOCK_HAL_GetOutClk(MCG) / (CLOCK_HAL_GetOutDiv1(SIM) + 1);
    1ee6:	4806      	ldr	r0, [pc, #24]	; (1f00 <CLOCK_SYS_GetSystemClockFreq+0x1c>)
    1ee8:	f000 fcb4 	bl	2854 <CLOCK_HAL_GetOutClk>
CLOCK_HAL_GetOutDiv1():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:821
 * @param base Base address for current SIM instance.
 * @return Current divide value.
 */
static inline uint8_t CLOCK_HAL_GetOutDiv1(SIM_Type * base)
{
    return SIM_BRD_CLKDIV1_OUTDIV1(base);
    1eec:	4a05      	ldr	r2, [pc, #20]	; (1f04 <CLOCK_SYS_GetSystemClockFreq+0x20>)
    1eee:	f241 0344 	movw	r3, #4164	; 0x1044
    1ef2:	58d3      	ldr	r3, [r2, r3]
    1ef4:	0f1b      	lsrs	r3, r3, #28
CLOCK_SYS_GetSystemClockFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:218
    1ef6:	3301      	adds	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:219
}
    1ef8:	fbb0 f0f3 	udiv	r0, r0, r3
    1efc:	bd08      	pop	{r3, pc}
    1efe:	bf00      	nop
    1f00:	40064000 	.word	0x40064000
    1f04:	40047000 	.word	0x40047000

00001f08 <CLOCK_SYS_GetBusClockFreq>:
CLOCK_SYS_GetBusClockFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:229
 * Description   : Gets the bus clock frequency.
 * This function gets the bus clock frequency.
 *
 *END*/
uint32_t CLOCK_SYS_GetBusClockFreq(void)
{
    1f08:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:230
    return CLOCK_HAL_GetOutClk(MCG) / (CLOCK_HAL_GetOutDiv2(SIM) + 1);
    1f0a:	4806      	ldr	r0, [pc, #24]	; (1f24 <CLOCK_SYS_GetBusClockFreq+0x1c>)
    1f0c:	f000 fca2 	bl	2854 <CLOCK_HAL_GetOutClk>
CLOCK_HAL_GetOutDiv2():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:847
 * @param base Base address for current SIM instance.
 * @return Current divide value.
 */
static inline uint8_t CLOCK_HAL_GetOutDiv2(SIM_Type * base)
{
    return SIM_BRD_CLKDIV1_OUTDIV2(base);
    1f10:	4a05      	ldr	r2, [pc, #20]	; (1f28 <CLOCK_SYS_GetBusClockFreq+0x20>)
    1f12:	f241 0344 	movw	r3, #4164	; 0x1044
    1f16:	58d3      	ldr	r3, [r2, r3]
    1f18:	f3c3 6303 	ubfx	r3, r3, #24, #4
CLOCK_SYS_GetBusClockFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:230
    1f1c:	3301      	adds	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:231
}
    1f1e:	fbb0 f0f3 	udiv	r0, r0, r3
    1f22:	bd08      	pop	{r3, pc}
    1f24:	40064000 	.word	0x40064000
    1f28:	40047000 	.word	0x40047000

00001f2c <CLOCK_SYS_GetExternalRefClock32kFreq>:
CLOCK_HAL_GetExternalRefClock32kSrc():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:713
 * @param base Base address for current SIM instance.
 * @return Current selection.
 */
static inline clock_er32k_src_t CLOCK_HAL_GetExternalRefClock32kSrc(SIM_Type * base)
{
    return (clock_er32k_src_t)SIM_BRD_SOPT1_OSC32KSEL(base);
    1f2c:	4b0c      	ldr	r3, [pc, #48]	; (1f60 <CLOCK_SYS_GetExternalRefClock32kFreq+0x34>)
    1f2e:	681b      	ldr	r3, [r3, #0]
CLOCK_SYS_GetExternalRefClock32kFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:322
    clock_er32k_src_t src;
    uint32_t freq;

    src = CLOCK_HAL_GetExternalRefClock32kSrc(SIM);

    switch (src)
    1f30:	f3c3 4381 	ubfx	r3, r3, #18, #2
    1f34:	2b02      	cmp	r3, #2
    1f36:	d00e      	beq.n	1f56 <CLOCK_SYS_GetExternalRefClock32kFreq+0x2a>
    1f38:	2b03      	cmp	r3, #3
    1f3a:	d009      	beq.n	1f50 <CLOCK_SYS_GetExternalRefClock32kFreq+0x24>
    1f3c:	b973      	cbnz	r3, 1f5c <CLOCK_SYS_GetExternalRefClock32kFreq+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:325
    {
        case kClockEr32kSrcOsc0:       /** OSC 32k clock  */
            freq = (32768U == g_xtal0ClkFreq) ? 32768U : 0U;
    1f3e:	4b09      	ldr	r3, [pc, #36]	; (1f64 <CLOCK_SYS_GetExternalRefClock32kFreq+0x38>)
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    1f46:	bf14      	ite	ne
    1f48:	2000      	movne	r0, #0
    1f4a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    1f4e:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:331
            break;
        case kClockEr32kSrcRtc:       /** RTC 32k clock  */
            freq = g_xtalRtcClkFreq;
            break;
        case kClockEr32kSrcLpo:          /** LPO clock      */
            freq = CLOCK_SYS_GetLpoClockFreq();
    1f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1f54:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:328
    {
        case kClockEr32kSrcOsc0:       /** OSC 32k clock  */
            freq = (32768U == g_xtal0ClkFreq) ? 32768U : 0U;
            break;
        case kClockEr32kSrcRtc:       /** RTC 32k clock  */
            freq = g_xtalRtcClkFreq;
    1f56:	4b04      	ldr	r3, [pc, #16]	; (1f68 <CLOCK_SYS_GetExternalRefClock32kFreq+0x3c>)
    1f58:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:329
            break;
    1f5a:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:334
        case kClockEr32kSrcLpo:          /** LPO clock      */
            freq = CLOCK_SYS_GetLpoClockFreq();
            break;
        default:
            freq = 0U;
    1f5c:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:339
            break;
    }

    return freq;
}
    1f5e:	4770      	bx	lr
    1f60:	40047000 	.word	0x40047000
    1f64:	1fff0c50 	.word	0x1fff0c50
    1f68:	1fff0c54 	.word	0x1fff0c54

00001f6c <CLOCK_SYS_GetOsc0ExternalRefClockFreq>:
CLOCK_SYS_GetOsc0ExternalRefClockFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:350
 * This function gets the OSC0 external reference frequency.
 *
 *END*/
uint32_t CLOCK_SYS_GetOsc0ExternalRefClockFreq(void)
{
    if (OSC_HAL_GetExternalRefClkCmd(g_oscBase[0]))
    1f6c:	4b05      	ldr	r3, [pc, #20]	; (1f84 <CLOCK_SYS_GetOsc0ExternalRefClockFreq+0x18>)
OSC_HAL_GetExternalRefClkCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_osc_hal.h:96
 * @param base Oscillator register base address
 * @return Clock enable/disable setting
 */
static inline bool OSC_HAL_GetExternalRefClkCmd(OSC_Type * base)
{
    return (bool)OSC_BRD_CR_ERCLKEN(base);
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    1f74:	015b      	lsls	r3, r3, #5
    1f76:	7f1b      	ldrb	r3, [r3, #28]
CLOCK_SYS_GetOsc0ExternalRefClockFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:350
    1f78:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1f7c:	b10b      	cbz	r3, 1f82 <CLOCK_SYS_GetOsc0ExternalRefClockFreq+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:352
    {
        return g_xtal0ClkFreq;
    1f7e:	4b02      	ldr	r3, [pc, #8]	; (1f88 <CLOCK_SYS_GetOsc0ExternalRefClockFreq+0x1c>)
    1f80:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:358
    }
    else
    {
        return 0U;
    }
}
    1f82:	4770      	bx	lr
    1f84:	00007094 	.word	0x00007094
    1f88:	1fff0c50 	.word	0x1fff0c50

00001f8c <CLOCK_SYS_GetLptmrFreq>:
CLOCK_SYS_GetLptmrFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:430
 *END*/
uint32_t CLOCK_SYS_GetLptmrFreq(uint32_t instance, clock_lptmr_src_t lptmrSrc)
{
    uint32_t freq;

    switch (lptmrSrc)
    1f8c:	2903      	cmp	r1, #3
    1f8e:	d80d      	bhi.n	1fac <CLOCK_SYS_GetLptmrFreq+0x20>
    1f90:	e8df f001 	tbb	[pc, r1]
    1f94:	0a080205 	.word	0x0a080205
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:436
    {
        case kClockLptmrSrcMcgIrClk:         /** MCG out clock  */
            freq = CLOCK_HAL_GetInternalRefClk(MCG);
            break;
        case kClockLptmrSrcLpoClk:              /** LPO clock     */
            freq = CLOCK_SYS_GetLpoClockFreq();
    1f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1f9c:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:433
    uint32_t freq;

    switch (lptmrSrc)
    {
        case kClockLptmrSrcMcgIrClk:         /** MCG out clock  */
            freq = CLOCK_HAL_GetInternalRefClk(MCG);
    1f9e:	4804      	ldr	r0, [pc, #16]	; (1fb0 <CLOCK_SYS_GetLptmrFreq+0x24>)
    1fa0:	f000 bc3a 	b.w	2818 <CLOCK_HAL_GetInternalRefClk>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:439
            break;
        case kClockLptmrSrcLpoClk:              /** LPO clock     */
            freq = CLOCK_SYS_GetLpoClockFreq();
            break;
        case kClockLptmrSrcEr32kClk:         /** ERCLK32K clock */
            freq = CLOCK_SYS_GetExternalRefClock32kFreq();
    1fa4:	f7ff bfc2 	b.w	1f2c <CLOCK_SYS_GetExternalRefClock32kFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:442
            break;
        case kClockLptmrSrcOsc0erClk:         /** OSCERCLK clock */
            freq = CLOCK_SYS_GetOsc0ExternalRefClockFreq();
    1fa8:	f7ff bfe0 	b.w	1f6c <CLOCK_SYS_GetOsc0ExternalRefClockFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:445
            break;
        default:
            freq = 0U;
    1fac:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:450
            break;
    }

    return freq;
}
    1fae:	4770      	bx	lr
    1fb0:	40064000 	.word	0x40064000

00001fb4 <CLOCK_SYS_GetUartFreq>:
CLOCK_SYS_GetUartFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:565
 *END*/
uint32_t CLOCK_SYS_GetUartFreq(uint32_t instance)
{
    uint32_t freq;

    switch (instance)
    1fb4:	2805      	cmp	r0, #5
    1fb6:	d808      	bhi.n	1fca <CLOCK_SYS_GetUartFreq+0x16>
    1fb8:	e8df f000 	tbb	[pc, r0]
    1fbc:	05050303 	.word	0x05050303
    1fc0:	0505      	.short	0x0505
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:569
    {
        case 0:
        case 1:
            freq = CLOCK_SYS_GetSystemClockFreq();
    1fc2:	f7ff bf8f 	b.w	1ee4 <CLOCK_SYS_GetSystemClockFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:575
            break;
        case 2:
        case 3:
        case 4:
        case 5:
            freq = CLOCK_SYS_GetBusClockFreq();
    1fc6:	f7ff bf9f 	b.w	1f08 <CLOCK_SYS_GetBusClockFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:583
            freq = 0U;
            break;
    }

    return freq;
}
    1fca:	2000      	movs	r0, #0
    1fcc:	4770      	bx	lr
	...

00001fd0 <CLOCK_SYS_EnablePortClock>:
CLOCK_SYS_EnablePortClock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:689
 * This function enables the clock for PORT moudle
 *
 *END*/
void CLOCK_SYS_EnablePortClock(uint32_t instance)
{
    assert(instance < sizeof(portGateTable)/sizeof(portGateTable[0]));
    1fd0:	2804      	cmp	r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:688
 * Description   : Enable the clock for PORT module
 * This function enables the clock for PORT moudle
 *
 *END*/
void CLOCK_SYS_EnablePortClock(uint32_t instance)
{
    1fd2:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:689
    assert(instance < sizeof(portGateTable)/sizeof(portGateTable[0]));
    1fd4:	d906      	bls.n	1fe4 <CLOCK_SYS_EnablePortClock+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:689 (discriminator 1)
    1fd6:	4806      	ldr	r0, [pc, #24]	; (1ff0 <CLOCK_SYS_EnablePortClock+0x20>)
    1fd8:	4a06      	ldr	r2, [pc, #24]	; (1ff4 <CLOCK_SYS_EnablePortClock+0x24>)
    1fda:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <CLOCK_SYS_EnablePortClock+0x28>)
    1fdc:	f240 21b1 	movw	r1, #689	; 0x2b1
    1fe0:	f003 ff32 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:691

    SIM_HAL_EnableClock(SIM, portGateTable[instance]);
    1fe4:	4b05      	ldr	r3, [pc, #20]	; (1ffc <CLOCK_SYS_EnablePortClock+0x2c>)
    1fe6:	5c18      	ldrb	r0, [r3, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:692
}
    1fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:691
 *END*/
void CLOCK_SYS_EnablePortClock(uint32_t instance)
{
    assert(instance < sizeof(portGateTable)/sizeof(portGateTable[0]));

    SIM_HAL_EnableClock(SIM, portGateTable[instance]);
    1fec:	f7ff bf72 	b.w	1ed4 <SIM_HAL_EnableClock.constprop.12>
    1ff0:	00006e4b 	.word	0x00006e4b
    1ff4:	00006e17 	.word	0x00006e17
    1ff8:	00006ece 	.word	0x00006ece
    1ffc:	00006e0f 	.word	0x00006e0f

00002000 <CLOCK_SYS_EnableAdcClock>:
CLOCK_SYS_EnableAdcClock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:738
 * This function enables the clock for ADC moudle
 *
 *END*/
void CLOCK_SYS_EnableAdcClock(uint32_t instance)
{
    assert(instance < sizeof(adcGateTable)/sizeof(adcGateTable[0]));
    2000:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:737
 * Description   : Enable the clock for ADC module
 * This function enables the clock for ADC moudle
 *
 *END*/
void CLOCK_SYS_EnableAdcClock(uint32_t instance)
{
    2002:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:738
    assert(instance < sizeof(adcGateTable)/sizeof(adcGateTable[0]));
    2004:	d906      	bls.n	2014 <CLOCK_SYS_EnableAdcClock+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:738 (discriminator 1)
    2006:	4806      	ldr	r0, [pc, #24]	; (2020 <CLOCK_SYS_EnableAdcClock+0x20>)
    2008:	4a06      	ldr	r2, [pc, #24]	; (2024 <CLOCK_SYS_EnableAdcClock+0x24>)
    200a:	4b07      	ldr	r3, [pc, #28]	; (2028 <CLOCK_SYS_EnableAdcClock+0x28>)
    200c:	f240 21e2 	movw	r1, #738	; 0x2e2
    2010:	f003 ff1a 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:740

    SIM_HAL_EnableClock(SIM, adcGateTable[instance]);
    2014:	4b05      	ldr	r3, [pc, #20]	; (202c <CLOCK_SYS_EnableAdcClock+0x2c>)
    2016:	5c18      	ldrb	r0, [r3, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:741
}
    2018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:740
 *END*/
void CLOCK_SYS_EnableAdcClock(uint32_t instance)
{
    assert(instance < sizeof(adcGateTable)/sizeof(adcGateTable[0]));

    SIM_HAL_EnableClock(SIM, adcGateTable[instance]);
    201c:	f7ff bf5a 	b.w	1ed4 <SIM_HAL_EnableClock.constprop.12>
    2020:	00006e4b 	.word	0x00006e4b
    2024:	00007073 	.word	0x00007073
    2028:	00006f08 	.word	0x00006f08
    202c:	0000708f 	.word	0x0000708f

00002030 <CLOCK_SYS_EnableSpiClock>:
CLOCK_SYS_EnableSpiClock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:888
 * This function enables the clock for SPI moudle
 *
 *END*/
void CLOCK_SYS_EnableSpiClock(uint32_t instance)
{
    assert(instance < sizeof(spiGateTable)/sizeof(spiGateTable[0]));
    2030:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:887
 * Description   : Enable the clock for SPI module
 * This function enables the clock for SPI moudle
 *
 *END*/
void CLOCK_SYS_EnableSpiClock(uint32_t instance)
{
    2032:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:888
    assert(instance < sizeof(spiGateTable)/sizeof(spiGateTable[0]));
    2034:	d906      	bls.n	2044 <CLOCK_SYS_EnableSpiClock+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:888 (discriminator 1)
    2036:	4806      	ldr	r0, [pc, #24]	; (2050 <CLOCK_SYS_EnableSpiClock+0x20>)
    2038:	4a06      	ldr	r2, [pc, #24]	; (2054 <CLOCK_SYS_EnableSpiClock+0x24>)
    203a:	4b07      	ldr	r3, [pc, #28]	; (2058 <CLOCK_SYS_EnableSpiClock+0x28>)
    203c:	f44f 715e 	mov.w	r1, #888	; 0x378
    2040:	f003 ff02 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:890

    SIM_HAL_EnableClock(SIM, spiGateTable[instance]);
    2044:	4b05      	ldr	r3, [pc, #20]	; (205c <CLOCK_SYS_EnableSpiClock+0x2c>)
    2046:	5c18      	ldrb	r0, [r3, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:891
}
    2048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:890
 *END*/
void CLOCK_SYS_EnableSpiClock(uint32_t instance)
{
    assert(instance < sizeof(spiGateTable)/sizeof(spiGateTable[0]));

    SIM_HAL_EnableClock(SIM, spiGateTable[instance]);
    204c:	f7ff bf42 	b.w	1ed4 <SIM_HAL_EnableClock.constprop.12>
    2050:	00006e4b 	.word	0x00006e4b
    2054:	0000705a 	.word	0x0000705a
    2058:	00006fb0 	.word	0x00006fb0
    205c:	0000708c 	.word	0x0000708c

00002060 <CLOCK_SYS_EnableI2cClock>:
CLOCK_SYS_EnableI2cClock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:938
 * This function enables the clock for I2C moudle
 *
 *END*/
void CLOCK_SYS_EnableI2cClock(uint32_t instance)
{
    assert(instance < sizeof(i2cGateTable)/sizeof(i2cGateTable[0]));
    2060:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:937
 * Description   : Enable the clock for I2C module
 * This function enables the clock for I2C moudle
 *
 *END*/
void CLOCK_SYS_EnableI2cClock(uint32_t instance)
{
    2062:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:938
    assert(instance < sizeof(i2cGateTable)/sizeof(i2cGateTable[0]));
    2064:	d906      	bls.n	2074 <CLOCK_SYS_EnableI2cClock+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:938 (discriminator 1)
    2066:	4806      	ldr	r0, [pc, #24]	; (2080 <CLOCK_SYS_EnableI2cClock+0x20>)
    2068:	4a06      	ldr	r2, [pc, #24]	; (2084 <CLOCK_SYS_EnableI2cClock+0x24>)
    206a:	4b07      	ldr	r3, [pc, #28]	; (2088 <CLOCK_SYS_EnableI2cClock+0x28>)
    206c:	f240 31aa 	movw	r1, #938	; 0x3aa
    2070:	f003 feea 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:940

    SIM_HAL_EnableClock(SIM, i2cGateTable[instance]);
    2074:	4b05      	ldr	r3, [pc, #20]	; (208c <CLOCK_SYS_EnableI2cClock+0x2c>)
    2076:	5c18      	ldrb	r0, [r3, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:941
}
    2078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:940
 *END*/
void CLOCK_SYS_EnableI2cClock(uint32_t instance)
{
    assert(instance < sizeof(i2cGateTable)/sizeof(i2cGateTable[0]));

    SIM_HAL_EnableClock(SIM, i2cGateTable[instance]);
    207c:	f7ff bf2a 	b.w	1ed4 <SIM_HAL_EnableClock.constprop.12>
    2080:	00006e4b 	.word	0x00006e4b
    2084:	00006df0 	.word	0x00006df0
    2088:	00006fe8 	.word	0x00006fe8
    208c:	00006e14 	.word	0x00006e14

00002090 <CLOCK_SYS_EnableUartClock>:
CLOCK_SYS_EnableUartClock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:991
 * This function enables the clock for UART moudle
 *
 *END*/
void CLOCK_SYS_EnableUartClock(uint32_t instance)
{
    assert(instance < sizeof(uartGateTable)/sizeof(uartGateTable[0]));
    2090:	2805      	cmp	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:990
 * Description   : Enable the clock for UART module
 * This function enables the clock for UART moudle
 *
 *END*/
void CLOCK_SYS_EnableUartClock(uint32_t instance)
{
    2092:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:991
    assert(instance < sizeof(uartGateTable)/sizeof(uartGateTable[0]));
    2094:	d906      	bls.n	20a4 <CLOCK_SYS_EnableUartClock+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:991 (discriminator 1)
    2096:	4806      	ldr	r0, [pc, #24]	; (20b0 <CLOCK_SYS_EnableUartClock+0x20>)
    2098:	4a06      	ldr	r2, [pc, #24]	; (20b4 <CLOCK_SYS_EnableUartClock+0x24>)
    209a:	4b07      	ldr	r3, [pc, #28]	; (20b8 <CLOCK_SYS_EnableUartClock+0x28>)
    209c:	f240 31df 	movw	r1, #991	; 0x3df
    20a0:	f003 fed2 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:993

    SIM_HAL_EnableClock(SIM, uartGateTable[instance]);
    20a4:	4b05      	ldr	r3, [pc, #20]	; (20bc <CLOCK_SYS_EnableUartClock+0x2c>)
    20a6:	5c18      	ldrb	r0, [r3, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:994
}
    20a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/system/src/clock/MK64F12/fsl_clock_MK64F12.c:993
 *END*/
void CLOCK_SYS_EnableUartClock(uint32_t instance)
{
    assert(instance < sizeof(uartGateTable)/sizeof(uartGateTable[0]));

    SIM_HAL_EnableClock(SIM, uartGateTable[instance]);
    20ac:	f7ff bf12 	b.w	1ed4 <SIM_HAL_EnableClock.constprop.12>
    20b0:	00006e4b 	.word	0x00006e4b
    20b4:	00006e31 	.word	0x00006e31
    20b8:	00007020 	.word	0x00007020
    20bc:	00006e09 	.word	0x00006e09

000020c0 <OSA_SemaCreate>:
OSA_SemaCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:50
 * Description   : This function is used to create a semaphore. Return
 * kStatus_OSA_Success if create successfully, otherwise return kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_SemaCreate(semaphore_t *pSem, uint8_t initValue)
{
    20c0:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:51
    assert(pSem);
    20c2:	4604      	mov	r4, r0
    20c4:	b928      	cbnz	r0, 20d2 <OSA_SemaCreate+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:51 (discriminator 1)
    20c6:	4807      	ldr	r0, [pc, #28]	; (20e4 <OSA_SemaCreate+0x24>)
    20c8:	4a07      	ldr	r2, [pc, #28]	; (20e8 <OSA_SemaCreate+0x28>)
    20ca:	4b08      	ldr	r3, [pc, #32]	; (20ec <OSA_SemaCreate+0x2c>)
    20cc:	2133      	movs	r1, #51	; 0x33
    20ce:	f003 febb 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:53

    *pSem = xSemaphoreCreateCounting(0xFF, initValue);
    20d2:	20ff      	movs	r0, #255	; 0xff
    20d4:	f7fe fdb9 	bl	c4a <xQueueCreateCountingSemaphore>
    20d8:	6020      	str	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:59
    if (*pSem==NULL)
    {
        return kStatus_OSA_Error;  /** creating semaphore failed */
    }
    return kStatus_OSA_Success;
}
    20da:	f1d0 0001 	rsbs	r0, r0, #1
    20de:	bf38      	it	cc
    20e0:	2000      	movcc	r0, #0
    20e2:	bd10      	pop	{r4, pc}
    20e4:	000070ec 	.word	0x000070ec
    20e8:	000070a8 	.word	0x000070a8
    20ec:	0000715b 	.word	0x0000715b

000020f0 <OSA_SemaWait>:
OSA_SemaWait():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:75
 * kStatus_OSA_Timeout if the semaphore is not received within the specified
 * 'timeout', returns kStatus_OSA_Error if any errors occur during waiting.
 *
 *END*/
osa_status_t OSA_SemaWait(semaphore_t *pSem, uint32_t timeout)
{
    20f0:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:77
    uint32_t timeoutTicks;
    assert(pSem);
    20f2:	b928      	cbnz	r0, 2100 <OSA_SemaWait+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:77 (discriminator 1)
    20f4:	480d      	ldr	r0, [pc, #52]	; (212c <OSA_SemaWait+0x3c>)
    20f6:	4a0e      	ldr	r2, [pc, #56]	; (2130 <OSA_SemaWait+0x40>)
    20f8:	4b0e      	ldr	r3, [pc, #56]	; (2134 <OSA_SemaWait+0x44>)
    20fa:	214d      	movs	r1, #77	; 0x4d
    20fc:	f003 fea4 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:80

     /** Convert timeout from millisecond to tick. */
    if (timeout == OSA_WAIT_FOREVER)
    2100:	1c4b      	adds	r3, r1, #1
    2102:	d008      	beq.n	2116 <OSA_SemaWait+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:86
    {
        timeoutTicks = portMAX_DELAY;
    }
    else
    {
        timeoutTicks = MSEC_TO_TICK(timeout);
    2104:	22c8      	movs	r2, #200	; 0xc8
    2106:	434a      	muls	r2, r1
    2108:	f502 72c8 	add.w	r2, r2, #400	; 0x190
    210c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2110:	fbb2 f2f3 	udiv	r2, r2, r3
    2114:	e000      	b.n	2118 <OSA_SemaWait+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:82
    assert(pSem);

     /** Convert timeout from millisecond to tick. */
    if (timeout == OSA_WAIT_FOREVER)
    {
        timeoutTicks = portMAX_DELAY;
    2116:	460a      	mov	r2, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:89
    else
    {
        timeoutTicks = MSEC_TO_TICK(timeout);
    }

    if (xSemaphoreTake(*pSem, timeoutTicks)==pdFALSE)
    2118:	2100      	movs	r1, #0
    211a:	460b      	mov	r3, r1
    211c:	6800      	ldr	r0, [r0, #0]
    211e:	f7fe fea9 	bl	e74 <xQueueGenericReceive>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:91
    {
        return kStatus_OSA_Timeout;  /** timeout */
    2122:	2800      	cmp	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:97
    }
    else
    {
        return kStatus_OSA_Success;  /** semaphore taken */
    }
}
    2124:	bf0c      	ite	eq
    2126:	2002      	moveq	r0, #2
    2128:	2000      	movne	r0, #0
    212a:	bd08      	pop	{r3, pc}
    212c:	000070ec 	.word	0x000070ec
    2130:	000070b7 	.word	0x000070b7
    2134:	0000715b 	.word	0x0000715b

00002138 <OSA_SemaPost>:
OSA_SemaPost():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:139
 * kStatus_OSA_Success if the semaphre is post successfully, otherwise returns
 * kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_SemaPost(semaphore_t *pSem)
{
    2138:	b513      	push	{r0, r1, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:140
    assert(pSem);
    213a:	b928      	cbnz	r0, 2148 <OSA_SemaPost+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:140 (discriminator 1)
    213c:	4813      	ldr	r0, [pc, #76]	; (218c <OSA_SemaPost+0x54>)
    213e:	4a14      	ldr	r2, [pc, #80]	; (2190 <OSA_SemaPost+0x58>)
    2140:	4b14      	ldr	r3, [pc, #80]	; (2194 <OSA_SemaPost+0x5c>)
    2142:	218c      	movs	r1, #140	; 0x8c
    2144:	f003 fe80 	bl	5e48 <__assert_func>
__get_IPSR():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/cmsis_gcc.h:109
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2148:	f3ef 8105 	mrs	r1, IPSR
OSA_SemaPost():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:138
 * semaphore. If no task is waiting, increase the semaphore. The function returns
 * kStatus_OSA_Success if the semaphre is post successfully, otherwise returns
 * kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_SemaPost(semaphore_t *pSem)
    214c:	6800      	ldr	r0, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:142
{
    assert(pSem);

    if (__get_IPSR())
    214e:	b199      	cbz	r1, 2178 <OSA_SemaPost+0x40>
OSA_SemaphorePostFromISR():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:113
    }
}

static osa_status_t OSA_SemaphorePostFromISR(semaphore_t *pSem)
{
    portBASE_TYPE taskToWake = pdFALSE;
    2150:	aa02      	add	r2, sp, #8
    2152:	2400      	movs	r4, #0
    2154:	f842 4d04 	str.w	r4, [r2, #-4]!
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:115

    if (pdTRUE==xSemaphoreGiveFromISR(*pSem, &taskToWake))
    2158:	4621      	mov	r1, r4
    215a:	4623      	mov	r3, r4
    215c:	f7fe fe48 	bl	df0 <xQueueGenericSendFromISR>
    2160:	2801      	cmp	r0, #1
    2162:	d105      	bne.n	2170 <OSA_SemaPost+0x38>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:117
    {
        if (pdTRUE == taskToWake)
    2164:	9b01      	ldr	r3, [sp, #4]
    2166:	2b01      	cmp	r3, #1
    2168:	d104      	bne.n	2174 <OSA_SemaPost+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:119
        {
            vPortYieldFromISR();
    216a:	f7ff fe13 	bl	1d94 <vPortYieldFromISR>
    216e:	e001      	b.n	2174 <OSA_SemaPost+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:125
        }
        return kStatus_OSA_Success;
    }
    else
    {
        return kStatus_OSA_Error;
    2170:	2001      	movs	r0, #1
    2172:	e009      	b.n	2188 <OSA_SemaPost+0x50>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:121
    {
        if (pdTRUE == taskToWake)
        {
            vPortYieldFromISR();
        }
        return kStatus_OSA_Success;
    2174:	4620      	mov	r0, r4
OSA_SemaPost():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:144
{
    assert(pSem);

    if (__get_IPSR())
    {
        return OSA_SemaphorePostFromISR(pSem);
    2176:	e007      	b.n	2188 <OSA_SemaPost+0x50>
OSA_SemaphorePostFromTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:101
    }
}

static osa_status_t OSA_SemaphorePostFromTask(semaphore_t *pSem)
{
    if (pdTRUE == xSemaphoreGive(*pSem))
    2178:	460a      	mov	r2, r1
    217a:	460b      	mov	r3, r1
    217c:	f7fe fd80 	bl	c80 <xQueueGenericSend>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:103
    {
        return kStatus_OSA_Success;  /** sync object given */
    2180:	f110 30ff 	adds.w	r0, r0, #4294967295
    2184:	bf18      	it	ne
    2186:	2001      	movne	r0, #1
OSA_SemaPost():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:150
    }
    else
    {
        return OSA_SemaphorePostFromTask(pSem);
    }
}
    2188:	b002      	add	sp, #8
    218a:	bd10      	pop	{r4, pc}
    218c:	000070ec 	.word	0x000070ec
    2190:	000070df 	.word	0x000070df
    2194:	0000715b 	.word	0x0000715b

00002198 <OSA_MutexCreate>:
OSA_MutexCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:178
 * Return kStatus_OSA_Success if create successfully, otherwise return
 * kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_MutexCreate(mutex_t *pMutex)
{
    2198:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:179
    assert(pMutex);
    219a:	4604      	mov	r4, r0
    219c:	b928      	cbnz	r0, 21aa <OSA_MutexCreate+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:179 (discriminator 1)
    219e:	4807      	ldr	r0, [pc, #28]	; (21bc <OSA_MutexCreate+0x24>)
    21a0:	4a07      	ldr	r2, [pc, #28]	; (21c0 <OSA_MutexCreate+0x28>)
    21a2:	4b08      	ldr	r3, [pc, #32]	; (21c4 <OSA_MutexCreate+0x2c>)
    21a4:	21b3      	movs	r1, #179	; 0xb3
    21a6:	f003 fe4f 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:180
    *pMutex = xSemaphoreCreateMutex();
    21aa:	2001      	movs	r0, #1
    21ac:	f7fe fdf9 	bl	da2 <xQueueCreateMutex>
    21b0:	6020      	str	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:189
    }
    else
    {
        return kStatus_OSA_Success;
    }
}
    21b2:	f1d0 0001 	rsbs	r0, r0, #1
    21b6:	bf38      	it	cc
    21b8:	2000      	movcc	r0, #0
    21ba:	bd10      	pop	{r4, pc}
    21bc:	000070ec 	.word	0x000070ec
    21c0:	0000716f 	.word	0x0000716f
    21c4:	00007161 	.word	0x00007161

000021c8 <OSA_MutexLock>:
OSA_MutexLock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:205
 * kStatus_OSA_Timeout if the mutex is not obtained within the specified
 * 'timeout', returns kStatus_OSA_Error if any errors occur during waiting.
 *
 *END*/
osa_status_t OSA_MutexLock(mutex_t *pMutex, uint32_t timeout)
{
    21c8:	b570      	push	{r4, r5, r6, lr}
    21ca:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:208
    uint32_t timeoutTicks;

    assert(pMutex);
    21cc:	4604      	mov	r4, r0
    21ce:	b928      	cbnz	r0, 21dc <OSA_MutexLock+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:208 (discriminator 1)
    21d0:	4812      	ldr	r0, [pc, #72]	; (221c <OSA_MutexLock+0x54>)
    21d2:	4a13      	ldr	r2, [pc, #76]	; (2220 <OSA_MutexLock+0x58>)
    21d4:	4b13      	ldr	r3, [pc, #76]	; (2224 <OSA_MutexLock+0x5c>)
    21d6:	21d0      	movs	r1, #208	; 0xd0
    21d8:	f003 fe36 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:211

     /** If pMutex has been locked by current task, return error. */
    if (xSemaphoreGetMutexHolder(*pMutex) == xTaskGetCurrentTaskHandle())
    21dc:	6800      	ldr	r0, [r0, #0]
    21de:	f7fe fd27 	bl	c30 <xQueueGetMutexHolder>
    21e2:	4606      	mov	r6, r0
    21e4:	f7ff fb6c 	bl	18c0 <xTaskGetCurrentTaskHandle>
    21e8:	4286      	cmp	r6, r0
    21ea:	d015      	beq.n	2218 <OSA_MutexLock+0x50>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:217
    {
        return kStatus_OSA_Error;
    }

     /** Convert timeout from millisecond to tick. */
    if (timeout == OSA_WAIT_FOREVER)
    21ec:	1c6b      	adds	r3, r5, #1
    21ee:	d008      	beq.n	2202 <OSA_MutexLock+0x3a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:223
    {
        timeoutTicks = portMAX_DELAY;
    }
    else
    {
        timeoutTicks = MSEC_TO_TICK(timeout);
    21f0:	22c8      	movs	r2, #200	; 0xc8
    21f2:	436a      	muls	r2, r5
    21f4:	f502 72c8 	add.w	r2, r2, #400	; 0x190
    21f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    21fc:	fbb2 f2f3 	udiv	r2, r2, r3
    2200:	e000      	b.n	2204 <OSA_MutexLock+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:219
    }

     /** Convert timeout from millisecond to tick. */
    if (timeout == OSA_WAIT_FOREVER)
    {
        timeoutTicks = portMAX_DELAY;
    2202:	462a      	mov	r2, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:226
    else
    {
        timeoutTicks = MSEC_TO_TICK(timeout);
    }

    if (xSemaphoreTake(*pMutex, timeoutTicks)==pdFALSE)
    2204:	2100      	movs	r1, #0
    2206:	6820      	ldr	r0, [r4, #0]
    2208:	460b      	mov	r3, r1
    220a:	f7fe fe33 	bl	e74 <xQueueGenericReceive>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:228
    {
        return kStatus_OSA_Timeout;  /** timeout */
    220e:	2800      	cmp	r0, #0
    2210:	bf14      	ite	ne
    2212:	2000      	movne	r0, #0
    2214:	2002      	moveq	r0, #2
    2216:	bd70      	pop	{r4, r5, r6, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:213
    assert(pMutex);

     /** If pMutex has been locked by current task, return error. */
    if (xSemaphoreGetMutexHolder(*pMutex) == xTaskGetCurrentTaskHandle())
    {
        return kStatus_OSA_Error;
    2218:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:234
    }
    else
    {
        return kStatus_OSA_Success;  /** semaphore taken */
    }
}
    221a:	bd70      	pop	{r4, r5, r6, pc}
    221c:	000070ec 	.word	0x000070ec
    2220:	0000718f 	.word	0x0000718f
    2224:	00007161 	.word	0x00007161

00002228 <OSA_MutexUnlock>:
OSA_MutexUnlock():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:243
 * Function Name : OSA_MutexUnlock
 * Description   : This function is used to unlock a mutex.
 *
 *END*/
osa_status_t OSA_MutexUnlock(mutex_t *pMutex)
{
    2228:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:244
    assert(pMutex);
    222a:	4604      	mov	r4, r0
    222c:	b928      	cbnz	r0, 223a <OSA_MutexUnlock+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:244 (discriminator 1)
    222e:	480d      	ldr	r0, [pc, #52]	; (2264 <OSA_MutexUnlock+0x3c>)
    2230:	4a0d      	ldr	r2, [pc, #52]	; (2268 <OSA_MutexUnlock+0x40>)
    2232:	4b0e      	ldr	r3, [pc, #56]	; (226c <OSA_MutexUnlock+0x44>)
    2234:	21f4      	movs	r1, #244	; 0xf4
    2236:	f003 fe07 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:247

     /** If pMutex is not locked by current task, return error. */
    if (xSemaphoreGetMutexHolder(*pMutex) != xTaskGetCurrentTaskHandle())
    223a:	6800      	ldr	r0, [r0, #0]
    223c:	f7fe fcf8 	bl	c30 <xQueueGetMutexHolder>
    2240:	4605      	mov	r5, r0
    2242:	f7ff fb3d 	bl	18c0 <xTaskGetCurrentTaskHandle>
    2246:	4285      	cmp	r5, r0
    2248:	d10a      	bne.n	2260 <OSA_MutexUnlock+0x38>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:252
    {
        return kStatus_OSA_Error;
    }

    if (xSemaphoreGive(*pMutex)==pdPASS)
    224a:	2100      	movs	r1, #0
    224c:	6820      	ldr	r0, [r4, #0]
    224e:	460a      	mov	r2, r1
    2250:	460b      	mov	r3, r1
    2252:	f7fe fd15 	bl	c80 <xQueueGenericSend>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:249
    assert(pMutex);

     /** If pMutex is not locked by current task, return error. */
    if (xSemaphoreGetMutexHolder(*pMutex) != xTaskGetCurrentTaskHandle())
    {
        return kStatus_OSA_Error;
    2256:	f110 30ff 	adds.w	r0, r0, #4294967295
    225a:	bf18      	it	ne
    225c:	2001      	movne	r0, #1
    225e:	bd38      	pop	{r3, r4, r5, pc}
    2260:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:260
    }
    else
    {
        return kStatus_OSA_Error;
    }
}
    2262:	bd38      	pop	{r3, r4, r5, pc}
    2264:	000070ec 	.word	0x000070ec
    2268:	0000717f 	.word	0x0000717f
    226c:	00007161 	.word	0x00007161

00002270 <OSA_EventCreate>:
OSA_EventCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:287
 * Description   : This function is used to create a event object. Return
 * kStatus_OSA_Success if create successfully, otherwise return kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_EventCreate(event_t *pEvent, osa_event_clear_mode_t clearMode)
{
    2270:	b538      	push	{r3, r4, r5, lr}
    2272:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:288
    assert(pEvent);
    2274:	4604      	mov	r4, r0
    2276:	b930      	cbnz	r0, 2286 <OSA_EventCreate+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:288 (discriminator 1)
    2278:	4807      	ldr	r0, [pc, #28]	; (2298 <OSA_EventCreate+0x28>)
    227a:	4a08      	ldr	r2, [pc, #32]	; (229c <OSA_EventCreate+0x2c>)
    227c:	4b08      	ldr	r3, [pc, #32]	; (22a0 <OSA_EventCreate+0x30>)
    227e:	f44f 7190 	mov.w	r1, #288	; 0x120
    2282:	f003 fde1 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:290

    pEvent->eventHandler = xEventGroupCreate();
    2286:	f7fe fafa 	bl	87e <xEventGroupCreate>
    228a:	6020      	str	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:292

    if (pEvent->eventHandler)
    228c:	b110      	cbz	r0, 2294 <OSA_EventCreate+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:294
    {
        pEvent->clearMode = clearMode;
    228e:	7125      	strb	r5, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:295
        return kStatus_OSA_Success;
    2290:	2000      	movs	r0, #0
    2292:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:299
    }
    else
    {
        return kStatus_OSA_Error;
    2294:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:301
    }
}
    2296:	bd38      	pop	{r3, r4, r5, pc}
    2298:	000070ec 	.word	0x000070ec
    229c:	00007098 	.word	0x00007098
    22a0:	00007168 	.word	0x00007168

000022a4 <OSA_EventWait>:
OSA_EventWait():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:323
osa_status_t OSA_EventWait(event_t       *pEvent,
                        event_flags_t  flagsToWait,
                        bool           waitAll,
                        uint32_t       timeout,
                        event_flags_t *setFlags)
{
    22a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    22a6:	460c      	mov	r4, r1
    22a8:	4615      	mov	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:324
    assert(pEvent);
    22aa:	b930      	cbnz	r0, 22ba <OSA_EventWait+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:324 (discriminator 1)
    22ac:	4810      	ldr	r0, [pc, #64]	; (22f0 <OSA_EventWait+0x4c>)
    22ae:	4a11      	ldr	r2, [pc, #68]	; (22f4 <OSA_EventWait+0x50>)
    22b0:	4b11      	ldr	r3, [pc, #68]	; (22f8 <OSA_EventWait+0x54>)
    22b2:	f44f 71a2 	mov.w	r1, #324	; 0x144
    22b6:	f003 fdc7 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:330
    BaseType_t clearMode;
    uint32_t timeoutTicks;
    event_flags_t flagsSave;

     /** Convert timeout from millisecond to tick. */
    if (timeout == OSA_WAIT_FOREVER)
    22ba:	1c5a      	adds	r2, r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:336
    {
        timeoutTicks = portMAX_DELAY;
    }
    else
    {
        timeoutTicks = timeout/portTICK_PERIOD_MS;
    22bc:	bf18      	it	ne
    22be:	2105      	movne	r1, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:339
    }

    clearMode = (kEventAutoClear == pEvent->clearMode) ? pdTRUE: pdFALSE;
    22c0:	7902      	ldrb	r2, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:336
    {
        timeoutTicks = portMAX_DELAY;
    }
    else
    {
        timeoutTicks = timeout/portTICK_PERIOD_MS;
    22c2:	bf14      	ite	ne
    22c4:	fbb3 f1f1 	udivne	r1, r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:332
    event_flags_t flagsSave;

     /** Convert timeout from millisecond to tick. */
    if (timeout == OSA_WAIT_FOREVER)
    {
        timeoutTicks = portMAX_DELAY;
    22c8:	4619      	moveq	r1, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:341
        timeoutTicks = timeout/portTICK_PERIOD_MS;
    }

    clearMode = (kEventAutoClear == pEvent->clearMode) ? pdTRUE: pdFALSE;

    flagsSave = xEventGroupWaitBits(pEvent->eventHandler,
    22ca:	9100      	str	r1, [sp, #0]
    22cc:	f1d2 0201 	rsbs	r2, r2, #1
    22d0:	bf38      	it	cc
    22d2:	2200      	movcc	r2, #0
    22d4:	462b      	mov	r3, r5
    22d6:	4621      	mov	r1, r4
    22d8:	6800      	ldr	r0, [r0, #0]
    22da:	f7fe fadd 	bl	898 <xEventGroupWaitBits>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:347
                                    flagsToWait,
                                    clearMode,
                                    (BaseType_t)waitAll,
                                    timeoutTicks);

    *setFlags = flagsSave & flagsToWait;
    22de:	9b06      	ldr	r3, [sp, #24]
    22e0:	4020      	ands	r0, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:349

    if (*setFlags)
    22e2:	2800      	cmp	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:347
                                    flagsToWait,
                                    clearMode,
                                    (BaseType_t)waitAll,
                                    timeoutTicks);

    *setFlags = flagsSave & flagsToWait;
    22e4:	6018      	str	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:357
    }
    else
    {
        return kStatus_OSA_Timeout;
    }
}
    22e6:	bf0c      	ite	eq
    22e8:	2002      	moveq	r0, #2
    22ea:	2000      	movne	r0, #0
    22ec:	b003      	add	sp, #12
    22ee:	bd30      	pop	{r4, r5, pc}
    22f0:	000070ec 	.word	0x000070ec
    22f4:	000070c4 	.word	0x000070c4
    22f8:	00007168 	.word	0x00007168

000022fc <OSA_EventSet>:
OSA_EventSet():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:367
 * Description   : Set one or more event flags of an event object.
 * Return kStatus_OSA_Success if set successfully, kStatus_OSA_Error if failed.
 *
 *END*/
osa_status_t OSA_EventSet(event_t *pEvent, event_flags_t flagsToSet)
{
    22fc:	b507      	push	{r0, r1, r2, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:368
    assert(pEvent);
    22fe:	4603      	mov	r3, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:367
 * Description   : Set one or more event flags of an event object.
 * Return kStatus_OSA_Success if set successfully, kStatus_OSA_Error if failed.
 *
 *END*/
osa_status_t OSA_EventSet(event_t *pEvent, event_flags_t flagsToSet)
{
    2300:	460a      	mov	r2, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:368
    assert(pEvent);
    2302:	b930      	cbnz	r0, 2312 <OSA_EventSet+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:368 (discriminator 1)
    2304:	480e      	ldr	r0, [pc, #56]	; (2340 <OSA_EventSet+0x44>)
    2306:	4a0f      	ldr	r2, [pc, #60]	; (2344 <OSA_EventSet+0x48>)
    2308:	4b0f      	ldr	r3, [pc, #60]	; (2348 <OSA_EventSet+0x4c>)
    230a:	f44f 71b8 	mov.w	r1, #368	; 0x170
    230e:	f003 fd9b 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:369
    portBASE_TYPE taskToWake = pdFALSE;
    2312:	2000      	movs	r0, #0
    2314:	9001      	str	r0, [sp, #4]
__get_IPSR():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/cmsis_gcc.h:109
    2316:	f3ef 8005 	mrs	r0, IPSR
OSA_EventSet():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:371

    if (__get_IPSR())
    231a:	b150      	cbz	r0, 2332 <OSA_EventSet+0x36>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:373
    {
        xEventGroupSetBitsFromISR(pEvent->eventHandler, flagsToSet, &taskToWake);
    231c:	6819      	ldr	r1, [r3, #0]
    231e:	480b      	ldr	r0, [pc, #44]	; (234c <OSA_EventSet+0x50>)
    2320:	ab01      	add	r3, sp, #4
    2322:	f7ff fcdd 	bl	1ce0 <xTimerPendFunctionCallFromISR>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:374
        if (pdTRUE == taskToWake)
    2326:	9b01      	ldr	r3, [sp, #4]
    2328:	2b01      	cmp	r3, #1
    232a:	d105      	bne.n	2338 <OSA_EventSet+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:376
        {
            vPortYieldFromISR();
    232c:	f7ff fd32 	bl	1d94 <vPortYieldFromISR>
    2330:	e002      	b.n	2338 <OSA_EventSet+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:381
        }
    }
    else
    {
        xEventGroupSetBits(pEvent->eventHandler, flagsToSet);
    2332:	6818      	ldr	r0, [r3, #0]
    2334:	f7fe fb1d 	bl	972 <xEventGroupSetBits>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:384
    }
    return kStatus_OSA_Success;
}
    2338:	2000      	movs	r0, #0
    233a:	b003      	add	sp, #12
    233c:	f85d fb04 	ldr.w	pc, [sp], #4
    2340:	000070ec 	.word	0x000070ec
    2344:	000070d2 	.word	0x000070d2
    2348:	00007168 	.word	0x00007168
    234c:	000009db 	.word	0x000009db

00002350 <OSA_TaskCreate>:
OSA_TaskCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:461
                         task_stack_t   *stackMem,
                         uint16_t        priority,
                         task_param_t    param,
                         bool            usesFloat,
                         task_handler_t *handler)
{
    2350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:462
    if (xTaskCreate(
    2352:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2356:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
    235a:	9300      	str	r3, [sp, #0]
    235c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    235e:	9301      	str	r3, [sp, #4]
    2360:	2300      	movs	r3, #0
    2362:	9302      	str	r3, [sp, #8]
    2364:	9303      	str	r3, [sp, #12]
    2366:	0892      	lsrs	r2, r2, #2
    2368:	9b07      	ldr	r3, [sp, #28]
    236a:	f7fe fe89 	bl	1080 <xTaskGenericCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:474
        ) != pdPASS)
    {
        return kStatus_OSA_Error;  /** error! probably out of memory */
    }
    return kStatus_OSA_Success;
}
    236e:	f110 30ff 	adds.w	r0, r0, #4294967295
    2372:	bf18      	it	ne
    2374:	2001      	movne	r0, #1
    2376:	b005      	add	sp, #20
    2378:	f85d fb04 	ldr.w	pc, [sp], #4

0000237c <OSA_TaskDestroy>:
OSA_TaskDestroy():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:484
 * Description   : This function destroy a task. Return kStatus_OSA_Success if
 * the task is destroied, otherwise return kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_TaskDestroy(task_handler_t handler)
{
    237c:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:486
#if INCLUDE_vTaskDelete  /** vTaskDelete() enabled */
      vTaskDelete(handler);
    237e:	f7fe ff4d 	bl	121c <vTaskDelete>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:491
      return kStatus_OSA_Success;
#else
      return kStatus_OSA_Error;  /** vTaskDelete() not available */
#endif
}
    2382:	2000      	movs	r0, #0
    2384:	bd08      	pop	{r3, pc}

00002386 <OSA_MsgQCreate>:
OSA_MsgQCreate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:552
 *END*/
msg_queue_handler_t OSA_MsgQCreate(msg_queue_t *queue,
                                        uint16_t  message_number,
                                        uint16_t  message_size)
{
    return xQueueCreate(message_number, message_size*sizeof(uint32_t));
    2386:	4608      	mov	r0, r1
    2388:	0091      	lsls	r1, r2, #2
    238a:	2200      	movs	r2, #0
    238c:	f7fe bc30 	b.w	bf0 <xQueueGenericCreate>

00002390 <OSA_MsgQPut>:
OSA_MsgQPut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:594
 * Return kStatus_OSA_Success if the message is put successfully, otherwise
 * return kStatus_OSA_Error.
 *
 *END*/
osa_status_t OSA_MsgQPut(msg_queue_handler_t handler, void* pMessage)
{
    2390:	b513      	push	{r0, r1, r4, lr}
__get_IPSR():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/cmsis_gcc.h:109
    2392:	f3ef 8205 	mrs	r2, IPSR
OSA_MsgQPut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:595
    if (__get_IPSR())
    2396:	b192      	cbz	r2, 23be <OSA_MsgQPut+0x2e>
OSA_MessageQueuePutFromISR():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:569
    }
}

static osa_status_t OSA_MessageQueuePutFromISR(msg_queue_handler_t handler, void* pMessage)
{
    portBASE_TYPE taskToWake = pdFALSE;
    2398:	aa02      	add	r2, sp, #8
    239a:	2400      	movs	r4, #0
    239c:	f842 4d04 	str.w	r4, [r2, #-4]!
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:571

    if (pdTRUE == xQueueSendToBackFromISR(handler, pMessage, &taskToWake))
    23a0:	4623      	mov	r3, r4
    23a2:	f7fe fd25 	bl	df0 <xQueueGenericSendFromISR>
    23a6:	2801      	cmp	r0, #1
    23a8:	d105      	bne.n	23b6 <OSA_MsgQPut+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:573
    {
        if (pdTRUE == taskToWake)
    23aa:	9b01      	ldr	r3, [sp, #4]
    23ac:	2b01      	cmp	r3, #1
    23ae:	d104      	bne.n	23ba <OSA_MsgQPut+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:575
        {
            vPortYieldFromISR();
    23b0:	f7ff fcf0 	bl	1d94 <vPortYieldFromISR>
    23b4:	e001      	b.n	23ba <OSA_MsgQPut+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:581
        }
        return kStatus_OSA_Success;
    }
    else
    {
        return kStatus_OSA_Error;
    23b6:	2001      	movs	r0, #1
    23b8:	e008      	b.n	23cc <OSA_MsgQPut+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:577
    {
        if (pdTRUE == taskToWake)
        {
            vPortYieldFromISR();
        }
        return kStatus_OSA_Success;
    23ba:	4620      	mov	r0, r4
OSA_MsgQPut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:597
 *END*/
osa_status_t OSA_MsgQPut(msg_queue_handler_t handler, void* pMessage)
{
    if (__get_IPSR())
    {
        return OSA_MessageQueuePutFromISR(handler, pMessage);
    23bc:	e006      	b.n	23cc <OSA_MsgQPut+0x3c>
OSA_MessageQueuePutFromTask():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:557
    return xQueueCreate(message_number, message_size*sizeof(uint32_t));
}

static osa_status_t OSA_MessageQueuePutFromTask(msg_queue_handler_t handler, void* pMessage)
{
    if (xQueueSendToBack(handler, pMessage, 0)!=pdPASS)
    23be:	4613      	mov	r3, r2
    23c0:	f7fe fc5e 	bl	c80 <xQueueGenericSend>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:559
    {
      return kStatus_OSA_Error;  /** not able to send it to the queue? */
    23c4:	f110 30ff 	adds.w	r0, r0, #4294967295
    23c8:	bf18      	it	ne
    23ca:	2001      	movne	r0, #1
OSA_MsgQPut():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:603
    }
    else
    {
        return OSA_MessageQueuePutFromTask(handler, pMessage);
    }
}
    23cc:	b002      	add	sp, #8
    23ce:	bd10      	pop	{r4, pc}

000023d0 <OSA_MsgQGet>:
OSA_MsgQGet():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:621
 *
 *END*/
osa_status_t OSA_MsgQGet(msg_queue_handler_t handler,
                           void               *pMessage,
                           uint32_t            timeout)
{
    23d0:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:624
    uint32_t timeoutTicks;

    if (timeout == OSA_WAIT_FOREVER)
    23d2:	1c53      	adds	r3, r2, #1
    23d4:	d007      	beq.n	23e6 <OSA_MsgQGet+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:630
    {
        timeoutTicks = portMAX_DELAY;
    }
    else
    {
        timeoutTicks = MSEC_TO_TICK(timeout);
    23d6:	23c8      	movs	r3, #200	; 0xc8
    23d8:	435a      	muls	r2, r3
    23da:	f502 72c8 	add.w	r2, r2, #400	; 0x190
    23de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    23e2:	fbb2 f2f3 	udiv	r2, r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:632
    }
    if (xQueueReceive(handler, pMessage, timeoutTicks)!=pdPASS)
    23e6:	2300      	movs	r3, #0
    23e8:	f7fe fd44 	bl	e74 <xQueueGenericReceive>
    23ec:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:640
    }
    else
    {
        return kStatus_OSA_Success;
    }
}
    23ee:	bf14      	ite	ne
    23f0:	2002      	movne	r0, #2
    23f2:	2000      	moveq	r0, #0
    23f4:	bd08      	pop	{r3, pc}

000023f6 <OSA_MemAlloc>:
OSA_MemAlloc():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:665
 * Return the pointer to the memory if success, otherwise return NULL;
 *
 *END*/
void *OSA_MemAlloc(size_t size)
{
    return pvPortMalloc(size);
    23f6:	f7fe baf2 	b.w	9de <pvPortMalloc>

000023fa <OSA_MemFree>:
OSA_MemFree():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:694
 * Function Name : OSA_MemFree
 * Description   : This function is used to free the memory previously allocated.
 *
 *END*/
osa_status_t OSA_MemFree(void *ptr)
{
    23fa:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:695
    vPortFree(ptr);
    23fc:	f7fe fafe 	bl	9fc <vPortFree>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:697
    return kStatus_OSA_Success;
}
    2400:	2000      	movs	r0, #0
    2402:	bd08      	pop	{r3, pc}

00002404 <OSA_TimeDelay>:
OSA_TimeDelay():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:707
 * Description   : This function is used to delay for a number of milliseconds.
 *
 *END*/
void OSA_TimeDelay(uint32_t delay)
{
    vTaskDelay(MSEC_TO_TICK(delay));
    2404:	23c8      	movs	r3, #200	; 0xc8
    2406:	4358      	muls	r0, r3
    2408:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    240c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2410:	fbb0 f0f2 	udiv	r0, r0, r2
    2414:	f7ff b87a 	b.w	150c <vTaskDelay>

00002418 <OSA_Init>:
OSA_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:797
 *
 *END*/
osa_status_t OSA_Init(void)
{
    return kStatus_OSA_Success;
}
    2418:	2000      	movs	r0, #0
    241a:	4770      	bx	lr

0000241c <OSA_Start>:
OSA_Start():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:806
 * Function Name : OSA_Start
 * Description   : This function is used to start RTOS scheduler.
 *
 *END*/
osa_status_t OSA_Start(void)
{
    241c:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:807
    vTaskStartScheduler();
    241e:	f7fe ff41 	bl	12a4 <vTaskStartScheduler>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/osa/src/fsl_os_abstraction_free_rtos.c:809
    return kStatus_OSA_Success;
}
    2422:	2000      	movs	r0, #0
    2424:	bd08      	pop	{r3, pc}

00002426 <UART_HAL_Init>:
UART_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:49
 * Description   : This function initializes the module to a known state.
 *
 *END*/
void UART_HAL_Init(UART_Type * base)
{
    UART_WR_BDH(base, 0U);
    2426:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:50
    UART_WR_BDL(base, 4U);
    2428:	2204      	movs	r2, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:49
 * Description   : This function initializes the module to a known state.
 *
 *END*/
void UART_HAL_Init(UART_Type * base)
{
    UART_WR_BDH(base, 0U);
    242a:	7003      	strb	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:50
    UART_WR_BDL(base, 4U);
    242c:	7042      	strb	r2, [r0, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:72
    UART_WR_IR(base, 0U);
#endif
#if FSL_FEATURE_UART_HAS_FIFO
    UART_WR_PFIFO(base, 0U);
    UART_WR_CFIFO(base, 0U);
    UART_WR_SFIFO(base, 0xC0U);
    242e:	22c0      	movs	r2, #192	; 0xc0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:51
 *END*/
void UART_HAL_Init(UART_Type * base)
{
    UART_WR_BDH(base, 0U);
    UART_WR_BDL(base, 4U);
    UART_WR_C1(base, 0U);
    2430:	7083      	strb	r3, [r0, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:52
    UART_WR_C2(base, 0U);
    2432:	70c3      	strb	r3, [r0, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:53
    UART_WR_S2(base, 0U);
    2434:	7143      	strb	r3, [r0, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:54
    UART_WR_C3(base, 0U);
    2436:	7183      	strb	r3, [r0, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:56
#if FSL_FEATURE_UART_HAS_ADDRESS_MATCHING
    UART_WR_MA1(base, 0U);
    2438:	7203      	strb	r3, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:57
    UART_WR_MA2(base, 0U);
    243a:	7243      	strb	r3, [r0, #9]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:59
#endif
    UART_WR_C4(base, 0U);
    243c:	7283      	strb	r3, [r0, #10]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:64
#if FSL_FEATURE_UART_HAS_DMA_ENABLE
    UART_WR_C5(base, 0U);
#endif
#if FSL_FEATURE_UART_HAS_MODEM_SUPPORT
    UART_WR_MODEM(base, 0U);
    243e:	7343      	strb	r3, [r0, #13]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:67
#endif
#if FSL_FEATURE_UART_HAS_IR_SUPPORT
    UART_WR_IR(base, 0U);
    2440:	7383      	strb	r3, [r0, #14]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:70
#endif
#if FSL_FEATURE_UART_HAS_FIFO
    UART_WR_PFIFO(base, 0U);
    2442:	7403      	strb	r3, [r0, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:71
    UART_WR_CFIFO(base, 0U);
    2444:	7443      	strb	r3, [r0, #17]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:72
    UART_WR_SFIFO(base, 0xC0U);
    2446:	7482      	strb	r2, [r0, #18]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:73
    UART_WR_TWFIFO(base, 0U);
    2448:	74c3      	strb	r3, [r0, #19]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:74
    UART_WR_RWFIFO(base, 1U);
    244a:	2301      	movs	r3, #1
    244c:	7543      	strb	r3, [r0, #21]
    244e:	4770      	bx	lr

00002450 <UART_HAL_SetBaudRate>:
UART_HAL_SetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:94
{
     /** BaudRate = (SourceClkInHz)/[16 * (SBR +  BRFA)] */
    uint16_t sbr;

     /** calculate the baud rate modulo divisor, sbr*/
    sbr = sourceClockInHz / (baudRate * 16);
    2450:	0112      	lsls	r2, r2, #4
    2452:	fbb1 f3f2 	udiv	r3, r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:89
 * function can calculate the baud rate divisors to their appropriate values.
 *
 *END*/
uart_status_t UART_HAL_SetBaudRate(UART_Type * base, uint32_t sourceClockInHz,
                                   uint32_t baudRate)
{
    2456:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:94
     /** BaudRate = (SourceClkInHz)/[16 * (SBR +  BRFA)] */
    uint16_t sbr;

     /** calculate the baud rate modulo divisor, sbr*/
    sbr = sourceClockInHz / (baudRate * 16);
    2458:	b29c      	uxth	r4, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:97

     /** check to see if sbr is out of range of register bits */
    if ( (sbr > 0x1FFF) || (sbr < 1) )
    245a:	1e66      	subs	r6, r4, #1
    245c:	b2b6      	uxth	r6, r6
    245e:	f641 75fe 	movw	r5, #8190	; 0x1ffe
    2462:	42ae      	cmp	r6, r5
    2464:	d813      	bhi.n	248e <UART_HAL_SetBaudRate+0x3e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:104
         /** unsupported baud rate for given source clock input*/
        return kStatus_UART_BaudRateCalculationError;
    }

     /** write the sbr value to the BDH and BDL registers*/
    UART_BWR_BDH_SBR(base, (uint8_t)(sbr >> 8));
    2466:	7805      	ldrb	r5, [r0, #0]
    2468:	f005 05e0 	and.w	r5, r5, #224	; 0xe0
    246c:	ea45 2414 	orr.w	r4, r5, r4, lsr #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:105
    UART_WR_BDL(base, (uint8_t)sbr);
    2470:	b2db      	uxtb	r3, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:104
         /** unsupported baud rate for given source clock input*/
        return kStatus_UART_BaudRateCalculationError;
    }

     /** write the sbr value to the BDH and BDL registers*/
    UART_BWR_BDH_SBR(base, (uint8_t)(sbr >> 8));
    2472:	7004      	strb	r4, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:105
    UART_WR_BDL(base, (uint8_t)sbr);
    2474:	7043      	strb	r3, [r0, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:114
     * desired baud, each value of brfa is in 1/32 increments,
     * hence the multiply-by-32. */
    uint16_t brfa = (32*sourceClockInHz/(baudRate*16)) - 32*sbr;

     /** write the brfa value to the register*/
    UART_BWR_C4_BRFA(base, brfa);
    2476:	7a83      	ldrb	r3, [r0, #10]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:111

#if FSL_FEATURE_UART_HAS_BAUD_RATE_FINE_ADJUST_SUPPORT
     /** determine if a fractional divider is needed to fine tune closer to the
     * desired baud, each value of brfa is in 1/32 increments,
     * hence the multiply-by-32. */
    uint16_t brfa = (32*sourceClockInHz/(baudRate*16)) - 32*sbr;
    2478:	0149      	lsls	r1, r1, #5
    247a:	fbb1 f2f2 	udiv	r2, r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:114

     /** write the brfa value to the register*/
    UART_BWR_C4_BRFA(base, brfa);
    247e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    2482:	f002 021f 	and.w	r2, r2, #31
    2486:	431a      	orrs	r2, r3
    2488:	7282      	strb	r2, [r0, #10]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:117
#endif

    return kStatus_UART_Success;
    248a:	2000      	movs	r0, #0
    248c:	bd70      	pop	{r4, r5, r6, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:100

     /** check to see if sbr is out of range of register bits */
    if ( (sbr > 0x1FFF) || (sbr < 1) )
    {
         /** unsupported baud rate for given source clock input*/
        return kStatus_UART_BaudRateCalculationError;
    248e:	2002      	movs	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:118
     /** write the brfa value to the register*/
    UART_BWR_C4_BRFA(base, brfa);
#endif

    return kStatus_UART_Success;
}
    2490:	bd70      	pop	{r4, r5, r6, pc}

00002492 <UART_HAL_SetParityMode>:
UART_HAL_SetParityMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:150
 * controller to disable it or enable it for even parity or for odd parity.
 *
 *END*/
void UART_HAL_SetParityMode(UART_Type * base, uart_parity_mode_t parityMode)
{
    UART_BWR_C1_PE(base, parityMode >> 1U);
    2492:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    2496:	3002      	adds	r0, #2
    2498:	0140      	lsls	r0, r0, #5
    249a:	084b      	lsrs	r3, r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:151
    UART_BWR_C1_PT(base, parityMode & 1U);
    249c:	f001 0101 	and.w	r1, r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:150
 * controller to disable it or enable it for even parity or for odd parity.
 *
 *END*/
void UART_HAL_SetParityMode(UART_Type * base, uart_parity_mode_t parityMode)
{
    UART_BWR_C1_PE(base, parityMode >> 1U);
    24a0:	7103      	strb	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:151
    UART_BWR_C1_PT(base, parityMode & 1U);
    24a2:	7001      	strb	r1, [r0, #0]
    24a4:	4770      	bx	lr

000024a6 <UART_HAL_Putchar>:
UART_HAL_Putchar():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:171
     /** In addition to sending a char, this function also clears the transmit
     * status flags for this uart base, there is a two step process to clear
     * the transmit status flags:
     * 1. Read the status register with the status bit set
     * 2. write to the data register */
    uint8_t dummy = UART_RD_S1(base);
    24a6:	7903      	ldrb	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:173
    dummy++;  /** For unused variable warning */
    UART_WR_D(base, data);
    24a8:	71c1      	strb	r1, [r0, #7]
    24aa:	4770      	bx	lr

000024ac <UART_HAL_Getchar>:
UART_HAL_Getchar():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:217
     * cleared in separate functions)
     * for this uart base, there is a two step process to clear the receive
     * status flag:
     * 1. Read the status register with the status bit set
     * 2. read from the data register */
    uint8_t dummy = UART_RD_S1(base);
    24ac:	7903      	ldrb	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:219
    dummy++;  /** For unused variable warning */
    *readData = UART_RD_D(base);
    24ae:	79c3      	ldrb	r3, [r0, #7]
    24b0:	700b      	strb	r3, [r1, #0]
    24b2:	4770      	bx	lr

000024b4 <UART_HAL_SetIntMode>:
UART_HAL_SetIntMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:314
 *
 *END*/
void UART_HAL_SetIntMode(UART_Type * base, uart_interrupt_t interrupt, bool enable)
{
    uint8_t reg = (uint32_t)interrupt >> UART_SHIFT;
    uint32_t temp = 1U << (uint8_t)interrupt;
    24b4:	b2cb      	uxtb	r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:312
 * Description   : Configure the UART module interrupts to enable/disable various
 * interrupt sources.
 *
 *END*/
void UART_HAL_SetIntMode(UART_Type * base, uart_interrupt_t interrupt, bool enable)
{
    24b6:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:316
    uint8_t reg = (uint32_t)interrupt >> UART_SHIFT;
    uint32_t temp = 1U << (uint8_t)interrupt;

    switch ( reg )
    24b8:	0a09      	lsrs	r1, r1, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:314
 *
 *END*/
void UART_HAL_SetIntMode(UART_Type * base, uart_interrupt_t interrupt, bool enable)
{
    uint8_t reg = (uint32_t)interrupt >> UART_SHIFT;
    uint32_t temp = 1U << (uint8_t)interrupt;
    24ba:	2401      	movs	r4, #1
    24bc:	fa04 f303 	lsl.w	r3, r4, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:316

    switch ( reg )
    24c0:	2903      	cmp	r1, #3
    24c2:	d82a      	bhi.n	251a <UART_HAL_SetIntMode+0x66>
    24c4:	e8df f001 	tbb	[pc, r1]
    24c8:	20160c02 	.word	0x20160c02
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:319
    {
        case 0 :
            enable ? UART_SET_BDH(base, temp) : UART_CLR_BDH(base, temp);
    24cc:	b11a      	cbz	r2, 24d6 <UART_HAL_SetIntMode+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:319 (discriminator 1)
    24ce:	7802      	ldrb	r2, [r0, #0]
    24d0:	4313      	orrs	r3, r2
    24d2:	b2db      	uxtb	r3, r3
    24d4:	e002      	b.n	24dc <UART_HAL_SetIntMode+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:319 (discriminator 2)
    24d6:	7802      	ldrb	r2, [r0, #0]
    24d8:	ea22 0303 	bic.w	r3, r2, r3
    24dc:	7003      	strb	r3, [r0, #0]
    24de:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:322
            break;
        case 1 :
            enable ? UART_SET_C2(base, temp) : UART_CLR_C2(base, temp);
    24e0:	b11a      	cbz	r2, 24ea <UART_HAL_SetIntMode+0x36>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:322 (discriminator 1)
    24e2:	78c2      	ldrb	r2, [r0, #3]
    24e4:	4313      	orrs	r3, r2
    24e6:	b2db      	uxtb	r3, r3
    24e8:	e002      	b.n	24f0 <UART_HAL_SetIntMode+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:322 (discriminator 2)
    24ea:	78c2      	ldrb	r2, [r0, #3]
    24ec:	ea22 0303 	bic.w	r3, r2, r3
    24f0:	70c3      	strb	r3, [r0, #3]
    24f2:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:325
            break;
        case 2 :
            enable ? UART_SET_C3(base, temp) : UART_CLR_C3(base, temp);
    24f4:	b11a      	cbz	r2, 24fe <UART_HAL_SetIntMode+0x4a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:325 (discriminator 1)
    24f6:	7982      	ldrb	r2, [r0, #6]
    24f8:	4313      	orrs	r3, r2
    24fa:	b2db      	uxtb	r3, r3
    24fc:	e002      	b.n	2504 <UART_HAL_SetIntMode+0x50>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:325 (discriminator 2)
    24fe:	7982      	ldrb	r2, [r0, #6]
    2500:	ea22 0303 	bic.w	r3, r2, r3
    2504:	7183      	strb	r3, [r0, #6]
    2506:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:329
            break;
#if FSL_FEATURE_UART_HAS_FIFO
        case 3 :
            enable ? UART_SET_CFIFO(base, temp) : UART_CLR_CFIFO(base, temp);
    2508:	b11a      	cbz	r2, 2512 <UART_HAL_SetIntMode+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:329 (discriminator 1)
    250a:	7c42      	ldrb	r2, [r0, #17]
    250c:	4313      	orrs	r3, r2
    250e:	b2db      	uxtb	r3, r3
    2510:	e002      	b.n	2518 <UART_HAL_SetIntMode+0x64>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:329 (discriminator 2)
    2512:	7c42      	ldrb	r2, [r0, #17]
    2514:	ea22 0303 	bic.w	r3, r2, r3
    2518:	7443      	strb	r3, [r0, #17]
    251a:	bd10      	pop	{r4, pc}

0000251c <UART_HAL_GetStatusFlag>:
UART_HAL_GetStatusFlag():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:708
bool UART_HAL_GetStatusFlag(UART_Type * base, uart_status_flag_t statusFlag)
{
    uint8_t reg = (uint32_t)statusFlag >> UART_SHIFT;
    uint8_t temp = 0;

    switch ( reg )
    251c:	0a0b      	lsrs	r3, r1, #8
    251e:	2b03      	cmp	r3, #3
    2520:	d80f      	bhi.n	2542 <UART_HAL_GetStatusFlag+0x26>
    2522:	e8df f003 	tbb	[pc, r3]
    2526:	0402      	.short	0x0402
    2528:	0806      	.short	0x0806
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:711
    {
        case 0 :
            temp = UART_RD_S1(base) >> (uint8_t)(statusFlag) & 1U;
    252a:	7900      	ldrb	r0, [r0, #4]
    252c:	e004      	b.n	2538 <UART_HAL_GetStatusFlag+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:714
            break;
        case 1 :
            temp = UART_RD_S2(base) >> (uint8_t)(statusFlag) & 1U;
    252e:	7940      	ldrb	r0, [r0, #5]
    2530:	e002      	b.n	2538 <UART_HAL_GetStatusFlag+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:718
            break;
#if FSL_FEATURE_UART_HAS_EXTENDED_DATA_REGISTER_FLAGS
        case 2 :
            temp = UART_RD_ED(base) >> (uint8_t)(statusFlag) & 1U;
    2532:	7b00      	ldrb	r0, [r0, #12]
    2534:	e000      	b.n	2538 <UART_HAL_GetStatusFlag+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:723
            break;
#endif
#if FSL_FEATURE_UART_HAS_FIFO
        case 3 :
            temp = UART_RD_SFIFO(base) >> (uint8_t)(statusFlag) & 1U;
    2536:	7c80      	ldrb	r0, [r0, #18]
    2538:	b2c9      	uxtb	r1, r1
    253a:	4108      	asrs	r0, r1
    253c:	f000 0001 	and.w	r0, r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:724
            break;
    2540:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:706
 *
 *END*/
bool UART_HAL_GetStatusFlag(UART_Type * base, uart_status_flag_t statusFlag)
{
    uint8_t reg = (uint32_t)statusFlag >> UART_SHIFT;
    uint8_t temp = 0;
    2542:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:730
#endif
        default :
            break;
    }
    return (bool)temp;
}
    2544:	4770      	bx	lr

00002546 <UART_HAL_ClearStatusFlag>:
UART_HAL_ClearStatusFlag():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:747
{
    uart_status_t retVal = kStatus_UART_Success;
    uint8_t dummy = 0;
    dummy++;  /** For unused variable warning */

    switch(statusFlag)
    2546:	f240 1307 	movw	r3, #263	; 0x107
    254a:	4299      	cmp	r1, r3
    254c:	d020      	beq.n	2590 <UART_HAL_ClearStatusFlag+0x4a>
    254e:	f5b1 7f84 	cmp.w	r1, #264	; 0x108
    2552:	d20d      	bcs.n	2570 <UART_HAL_ClearStatusFlag+0x2a>
    2554:	2907      	cmp	r1, #7
    2556:	d804      	bhi.n	2562 <UART_HAL_ClearStatusFlag+0x1c>
    2558:	2905      	cmp	r1, #5
    255a:	d224      	bcs.n	25a6 <UART_HAL_ClearStatusFlag+0x60>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:771
        case kUartIdleLineDetect:
        case kUartRxOverrun:
        case kUartNoiseDetect:
        case kUartFrameErr:
        case kUartParityErr:
            dummy = UART_RD_S1(base);
    255c:	7903      	ldrb	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:772
            dummy = UART_RD_D(base);
    255e:	79c3      	ldrb	r3, [r0, #7]
    2560:	e018      	b.n	2594 <UART_HAL_ClearStatusFlag+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:747
{
    uart_status_t retVal = kStatus_UART_Success;
    uint8_t dummy = 0;
    dummy++;  /** For unused variable warning */

    switch(statusFlag)
    2562:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    2566:	d01e      	beq.n	25a6 <UART_HAL_ClearStatusFlag+0x60>
    2568:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
    256c:	d014      	beq.n	2598 <UART_HAL_ClearStatusFlag+0x52>
    256e:	e011      	b.n	2594 <UART_HAL_ClearStatusFlag+0x4e>
    2570:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
    2574:	d014      	beq.n	25a0 <UART_HAL_ClearStatusFlag+0x5a>
    2576:	d802      	bhi.n	257e <UART_HAL_ClearStatusFlag+0x38>
    2578:	f2a1 2106 	subw	r1, r1, #518	; 0x206
    257c:	e005      	b.n	258a <UART_HAL_ClearStatusFlag+0x44>
    257e:	f240 3301 	movw	r3, #769	; 0x301
    2582:	4299      	cmp	r1, r3
    2584:	d00a      	beq.n	259c <UART_HAL_ClearStatusFlag+0x56>
    2586:	f2a1 3106 	subw	r1, r1, #774	; 0x306
    258a:	2901      	cmp	r1, #1
    258c:	d90b      	bls.n	25a6 <UART_HAL_ClearStatusFlag+0x60>
    258e:	e001      	b.n	2594 <UART_HAL_ClearStatusFlag+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:777
            dummy = UART_RD_D(base);
            break;

#if FSL_FEATURE_UART_HAS_LIN_BREAK_DETECT
        case kUartLineBreakDetect:
            UART_WR_S2(base, UART_S2_LBKDIF_MASK);
    2590:	2380      	movs	r3, #128	; 0x80
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:782
            break;
#endif

        case kUartRxActiveEdgeDetect:
            UART_WR_S2(base, UART_S2_RXEDGIF_MASK);
    2592:	7143      	strb	r3, [r0, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:743
 * status bits.
 *
 *END*/
uart_status_t UART_HAL_ClearStatusFlag(UART_Type * base, uart_status_flag_t statusFlag)
{
    uart_status_t retVal = kStatus_UART_Success;
    2594:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:773
        case kUartNoiseDetect:
        case kUartFrameErr:
        case kUartParityErr:
            dummy = UART_RD_S1(base);
            dummy = UART_RD_D(base);
            break;
    2596:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:782
            UART_WR_S2(base, UART_S2_LBKDIF_MASK);
            break;
#endif

        case kUartRxActiveEdgeDetect:
            UART_WR_S2(base, UART_S2_RXEDGIF_MASK);
    2598:	2340      	movs	r3, #64	; 0x40
    259a:	e7fa      	b.n	2592 <UART_HAL_ClearStatusFlag+0x4c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:787
            break;

#if FSL_FEATURE_UART_HAS_FIFO
        case kUartTxBuffOverflow:
            UART_WR_SFIFO(base, UART_SFIFO_TXOF_MASK);
    259c:	2302      	movs	r3, #2
    259e:	e000      	b.n	25a2 <UART_HAL_ClearStatusFlag+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:791
            break;

        case kUartRxBuffUnderflow:
            UART_WR_SFIFO(base, UART_SFIFO_RXUF_MASK);
    25a0:	2301      	movs	r3, #1
    25a2:	7483      	strb	r3, [r0, #18]
    25a4:	e7f6      	b.n	2594 <UART_HAL_ClearStatusFlag+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:763
#endif
#if FSL_FEATURE_UART_HAS_FIFO
        case kUartTxBuffEmpty:
        case kUartRxBuffEmpty:
#endif
            retVal = kStatus_UART_ClearStatusFlagError;
    25a6:	2004      	movs	r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:799
        default:
            break;
    }

    return retVal;
}
    25a8:	4770      	bx	lr

000025aa <UART_HAL_SetTxFifoCmd>:
UART_HAL_SetTxFifoCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:820
uart_status_t UART_HAL_SetTxFifoCmd(UART_Type * base, bool enable)
{
     /** before enabling the tx fifo, UARTx_C2[TE] (transmitter) and
     * UARTx_C2[RE] (receiver) must be disabled.
     * if not, return an error code */
    uint8_t txEnable = UART_BRD_C2_TE(base);
    25aa:	f100 7204 	add.w	r2, r0, #34603008	; 0x2100000
    25ae:	3203      	adds	r2, #3
    25b0:	0152      	lsls	r2, r2, #5
    25b2:	7b13      	ldrb	r3, [r2, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:821
    uint8_t rxEnable = UART_BRD_C2_RE(base);
    25b4:	7a12      	ldrb	r2, [r2, #8]
    25b6:	b2d2      	uxtb	r2, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:823

    if (txEnable || rxEnable)
    25b8:	b93b      	cbnz	r3, 25ca <UART_HAL_SetTxFifoCmd+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:823 (discriminator 1)
    25ba:	b932      	cbnz	r2, 25ca <UART_HAL_SetTxFifoCmd+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:829
    {
        return kStatus_UART_TxOrRxNotDisabled;
    }
    else
    {
        UART_BWR_PFIFO_TXFE(base, enable);
    25bc:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    25c0:	3310      	adds	r3, #16
    25c2:	015b      	lsls	r3, r3, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:830
        return kStatus_UART_Success;
    25c4:	4610      	mov	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:829
    {
        return kStatus_UART_TxOrRxNotDisabled;
    }
    else
    {
        UART_BWR_PFIFO_TXFE(base, enable);
    25c6:	7719      	strb	r1, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:830
        return kStatus_UART_Success;
    25c8:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:825
    uint8_t txEnable = UART_BRD_C2_TE(base);
    uint8_t rxEnable = UART_BRD_C2_RE(base);

    if (txEnable || rxEnable)
    {
        return kStatus_UART_TxOrRxNotDisabled;
    25ca:	2007      	movs	r0, #7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:832
    else
    {
        UART_BWR_PFIFO_TXFE(base, enable);
        return kStatus_UART_Success;
    }
}
    25cc:	4770      	bx	lr

000025ce <UART_HAL_SetRxFifoCmd>:
UART_HAL_SetRxFifoCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:849
uart_status_t UART_HAL_SetRxFifoCmd(UART_Type * base, bool enable)
{
     /** before enabling the rx fifo, UARTx_C2[TE] (transmitter) and
     * UARTx_C2[RE] (receiver) must be disabled
     * if not, return an error code */
    uint8_t txEnable = UART_BRD_C2_TE(base);
    25ce:	f100 7204 	add.w	r2, r0, #34603008	; 0x2100000
    25d2:	3203      	adds	r2, #3
    25d4:	0152      	lsls	r2, r2, #5
    25d6:	7b13      	ldrb	r3, [r2, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:850
    uint8_t rxEnable = UART_BRD_C2_RE(base);
    25d8:	7a12      	ldrb	r2, [r2, #8]
    25da:	b2d2      	uxtb	r2, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:852

    if (txEnable || rxEnable)
    25dc:	b93b      	cbnz	r3, 25ee <UART_HAL_SetRxFifoCmd+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:852 (discriminator 1)
    25de:	b932      	cbnz	r2, 25ee <UART_HAL_SetRxFifoCmd+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:858
    {
        return kStatus_UART_TxOrRxNotDisabled;
    }
    else
    {
        UART_BWR_PFIFO_RXFE(base, enable);
    25e0:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    25e4:	3310      	adds	r3, #16
    25e6:	015b      	lsls	r3, r3, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:859
        return kStatus_UART_Success;
    25e8:	4610      	mov	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:858
    {
        return kStatus_UART_TxOrRxNotDisabled;
    }
    else
    {
        UART_BWR_PFIFO_RXFE(base, enable);
    25ea:	7319      	strb	r1, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:859
        return kStatus_UART_Success;
    25ec:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:854
    uint8_t txEnable = UART_BRD_C2_TE(base);
    uint8_t rxEnable = UART_BRD_C2_RE(base);

    if (txEnable || rxEnable)
    {
        return kStatus_UART_TxOrRxNotDisabled;
    25ee:	2007      	movs	r0, #7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:861
    else
    {
        UART_BWR_PFIFO_RXFE(base, enable);
        return kStatus_UART_Success;
    }
}
    25f0:	4770      	bx	lr

000025f2 <UART_HAL_FlushTxFifo>:
UART_HAL_FlushTxFifo():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:876
 *END*/
uart_status_t UART_HAL_FlushTxFifo(UART_Type * base)
{
     /** in order to flush the tx fifo, UARTx_C2[TE] (transmitter) must be
     * disabled. If not, return an error code */
    if (UART_BRD_C2_TE(base) != 0)
    25f2:	f100 7204 	add.w	r2, r0, #34603008	; 0x2100000
    25f6:	3203      	adds	r2, #3
    25f8:	0152      	lsls	r2, r2, #5
    25fa:	7b13      	ldrb	r3, [r2, #12]
    25fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2600:	b93b      	cbnz	r3, 2612 <UART_HAL_FlushTxFifo+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:883
        return kStatus_UART_TxNotDisabled;
    }
    else
    {
         /** Set the bit to flush fifo*/
        UART_BWR_CFIFO_TXFLUSH(base, 1U);
    2602:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    2606:	3311      	adds	r3, #17
    2608:	015b      	lsls	r3, r3, #5
    260a:	2101      	movs	r1, #1
    260c:	7719      	strb	r1, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:884
        return kStatus_UART_Success;
    260e:	4610      	mov	r0, r2
    2610:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:878
{
     /** in order to flush the tx fifo, UARTx_C2[TE] (transmitter) must be
     * disabled. If not, return an error code */
    if (UART_BRD_C2_TE(base) != 0)
    {
        return kStatus_UART_TxNotDisabled;
    2612:	2005      	movs	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:886
    {
         /** Set the bit to flush fifo*/
        UART_BWR_CFIFO_TXFLUSH(base, 1U);
        return kStatus_UART_Success;
    }
}
    2614:	4770      	bx	lr

00002616 <UART_HAL_FlushRxFifo>:
UART_HAL_FlushRxFifo():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:901
 *END*/
uart_status_t UART_HAL_FlushRxFifo(UART_Type * base)
{
     /** in order to flush the rx fifo, UARTx_C2[RE] (receiver) must be disabled
     * if not, return an error code. */
    if (UART_BRD_C2_RE(base) != 0)
    2616:	f100 7204 	add.w	r2, r0, #34603008	; 0x2100000
    261a:	3203      	adds	r2, #3
    261c:	0152      	lsls	r2, r2, #5
    261e:	7a13      	ldrb	r3, [r2, #8]
    2620:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2624:	b93b      	cbnz	r3, 2636 <UART_HAL_FlushRxFifo+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:908
        return kStatus_UART_RxNotDisabled;
    }
    else
    {
         /** Set the bit to flush fifo*/
        UART_BWR_CFIFO_RXFLUSH(base, 1U);
    2626:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    262a:	3311      	adds	r3, #17
    262c:	015b      	lsls	r3, r3, #5
    262e:	2101      	movs	r1, #1
    2630:	7619      	strb	r1, [r3, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:909
        return kStatus_UART_Success;
    2632:	4610      	mov	r0, r2
    2634:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:903
{
     /** in order to flush the rx fifo, UARTx_C2[RE] (receiver) must be disabled
     * if not, return an error code. */
    if (UART_BRD_C2_RE(base) != 0)
    {
        return kStatus_UART_RxNotDisabled;
    2636:	2006      	movs	r0, #6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:911
    {
         /** Set the bit to flush fifo*/
        UART_BWR_CFIFO_RXFLUSH(base, 1U);
        return kStatus_UART_Success;
    }
}
    2638:	4770      	bx	lr

0000263a <UART_HAL_SetTxFifoWatermark>:
UART_HAL_SetTxFifoWatermark():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:926
 *END*/
uart_status_t UART_HAL_SetTxFifoWatermark(UART_Type * base, uint8_t watermark)
{
     /** in order to set the tx watermark, UARTx_C2[TE] (transmitter) must be
     * disabled. If not, return an error code */
    if (UART_BRD_C2_TE(base) != 0)
    263a:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    263e:	3303      	adds	r3, #3
    2640:	015b      	lsls	r3, r3, #5
    2642:	7b1b      	ldrb	r3, [r3, #12]
    2644:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2648:	b913      	cbnz	r3, 2650 <UART_HAL_SetTxFifoWatermark+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:935
    else
    {
         /** Programming the transmit watermark should be done when the
         * transmitter is disabled and the value must be set less than
         * the size given in PFIFO[TXFIFOSIZE] */
        UART_WR_TWFIFO(base, watermark);
    264a:	74c1      	strb	r1, [r0, #19]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:936
        return kStatus_UART_Success;
    264c:	4610      	mov	r0, r2
    264e:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:928
{
     /** in order to set the tx watermark, UARTx_C2[TE] (transmitter) must be
     * disabled. If not, return an error code */
    if (UART_BRD_C2_TE(base) != 0)
    {
        return kStatus_UART_TxNotDisabled;
    2650:	2005      	movs	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:938
         * transmitter is disabled and the value must be set less than
         * the size given in PFIFO[TXFIFOSIZE] */
        UART_WR_TWFIFO(base, watermark);
        return kStatus_UART_Success;
    }
}
    2652:	4770      	bx	lr

00002654 <UART_HAL_SetRxFifoWatermark>:
UART_HAL_SetRxFifoWatermark():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:953
 *END*/
uart_status_t UART_HAL_SetRxFifoWatermark(UART_Type * base, uint8_t watermark)
{
     /** in order to set the rx watermark, UARTx_C2[RE] (receiver) must be disabled
     * if not, return an error code. */
    if (UART_BRD_C2_RE(base) != 0)
    2654:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    2658:	3303      	adds	r3, #3
    265a:	015b      	lsls	r3, r3, #5
    265c:	7a1b      	ldrb	r3, [r3, #8]
    265e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2662:	b913      	cbnz	r3, 266a <UART_HAL_SetRxFifoWatermark+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:962
    else
    {
         /** Programming the receive watermark should be done when the receiver is
         * disabled and the value must be set less than the size given in
         * PFIFO[RXFIFOSIZE] and greater than zero.  */
        UART_WR_RWFIFO(base, watermark);
    2664:	7541      	strb	r1, [r0, #21]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:963
        return kStatus_UART_Success;
    2666:	4610      	mov	r0, r2
    2668:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:955
{
     /** in order to set the rx watermark, UARTx_C2[RE] (receiver) must be disabled
     * if not, return an error code. */
    if (UART_BRD_C2_RE(base) != 0)
    {
        return kStatus_UART_RxNotDisabled;
    266a:	2006      	movs	r0, #6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/uart/fsl_uart_hal.c:965
         * disabled and the value must be set less than the size given in
         * PFIFO[RXFIFOSIZE] and greater than zero.  */
        UART_WR_RWFIFO(base, watermark);
        return kStatus_UART_Success;
    }
}
    266c:	4770      	bx	lr
	...

00002670 <RTC_HAL_Enable>:
RTC_HAL_SetOscillatorCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:598
 *         -true: enables oscillator.
 *         -false: disables oscillator.
 */
static inline void RTC_HAL_SetOscillatorCmd(RTC_Type *rtcBase, bool enable)
{
    RTC_BWR_CR_OSCE(rtcBase, enable);
    2670:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    2674:	3011      	adds	r0, #17
    2676:	0140      	lsls	r0, r0, #5
    2678:	2301      	movs	r3, #1
RTC_HAL_Enable():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/rtc/fsl_rtc_hal.c:249

    /*
     * OSCE bit should also be set if we have a 32KHz external crystal feeding the System OSC.
     * Setting the OSCE bit will activate the OSC32KCLK clock from the System OSC.
     */
    if ((g_xtal0ClkFreq == 32768) && (!(RTC_HAL_IsOscillatorEnabled(rtcBase))))
    267a:	4a05      	ldr	r2, [pc, #20]	; (2690 <RTC_HAL_Enable+0x20>)
RTC_HAL_SetOscillatorCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:598
    267c:	6003      	str	r3, [r0, #0]
RTC_HAL_Enable():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/rtc/fsl_rtc_hal.c:249
    267e:	6812      	ldr	r2, [r2, #0]
    2680:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2684:	d102      	bne.n	268c <RTC_HAL_Enable+0x1c>
RTC_HAL_IsOscillatorEnabled():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:611
 * @return true: 32.768 kHz oscillator is enabled
 *         false: 32.768 kHz oscillator is disabled.
 */
static inline bool RTC_HAL_IsOscillatorEnabled(RTC_Type *rtcBase)
{
    return (bool)RTC_BRD_CR_OSCE(rtcBase);
    2686:	6802      	ldr	r2, [r0, #0]
RTC_HAL_Enable():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/rtc/fsl_rtc_hal.c:249
    2688:	b902      	cbnz	r2, 268c <RTC_HAL_Enable+0x1c>
RTC_HAL_SetOscillatorCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:598
 *         -true: enables oscillator.
 *         -false: disables oscillator.
 */
static inline void RTC_HAL_SetOscillatorCmd(RTC_Type *rtcBase, bool enable)
{
    RTC_BWR_CR_OSCE(rtcBase, enable);
    268a:	6003      	str	r3, [r0, #0]
    268c:	4770      	bx	lr
    268e:	bf00      	nop
    2690:	1fff0c50 	.word	0x1fff0c50

00002694 <RTC_HAL_Init>:
RTC_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/rtc/fsl_rtc_hal.c:284
 * module if the time invalid flag is set.
 *
 *END*/
void RTC_HAL_Init(RTC_Type *rtcBase)
{
    if(RTC_BRD_SR_TIF(rtcBase))
    2694:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    2698:	3314      	adds	r3, #20
    269a:	015b      	lsls	r3, r3, #5
    269c:	681b      	ldr	r3, [r3, #0]
    269e:	b163      	cbz	r3, 26ba <RTC_HAL_Init+0x26>
RTC_HAL_SoftwareReset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:627
 *
 * @param  rtcBase The RTC base address pointer
 */
static inline void RTC_HAL_SoftwareReset(RTC_Type *rtcBase)
{
    RTC_BWR_CR_SWR(rtcBase, 1u);
    26a0:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    26a4:	3310      	adds	r3, #16
    26a6:	015b      	lsls	r3, r3, #5
    26a8:	2201      	movs	r2, #1
RTC_HAL_SoftwareResetFlagClear():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:637
 *
 * @param  rtcBase The RTC base address pointer
 */
static inline void RTC_HAL_SoftwareResetFlagClear(RTC_Type *rtcBase)
{
    RTC_BWR_CR_SWR(rtcBase, 0u);
    26aa:	2100      	movs	r1, #0
RTC_HAL_SoftwareReset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:627
 *
 * @param  rtcBase The RTC base address pointer
 */
static inline void RTC_HAL_SoftwareReset(RTC_Type *rtcBase)
{
    RTC_BWR_CR_SWR(rtcBase, 1u);
    26ac:	601a      	str	r2, [r3, #0]
RTC_HAL_SoftwareResetFlagClear():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:637
 *
 * @param  rtcBase The RTC base address pointer
 */
static inline void RTC_HAL_SoftwareResetFlagClear(RTC_Type *rtcBase)
{
    RTC_BWR_CR_SWR(rtcBase, 0u);
    26ae:	6019      	str	r1, [r3, #0]
RTC_HAL_SetSecsReg():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:273
 * @param  seconds [in] seconds value.
 *
 */
static inline void RTC_HAL_SetSecsReg(RTC_Type *rtcBase, const uint32_t seconds)
{
    RTC_WR_TPR_TPR(rtcBase, (uint32_t)0x00000000U);
    26b0:	6843      	ldr	r3, [r0, #4]
    26b2:	0c1b      	lsrs	r3, r3, #16
    26b4:	041b      	lsls	r3, r3, #16
    26b6:	6043      	str	r3, [r0, #4]
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:274
    RTC_WR_TSR(rtcBase, seconds);
    26b8:	6002      	str	r2, [r0, #0]
RTC_HAL_SetSecsIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:782
 *         -true: Seconds interrupt is enabled.
 *         -false: Seconds interrupt is disabled.
 */
static inline void RTC_HAL_SetSecsIntCmd(RTC_Type *rtcBase, bool enable)
{
    RTC_BWR_IER_TSIE(rtcBase, (uint32_t) enable);
    26ba:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    26be:	301c      	adds	r0, #28
    26c0:	0140      	lsls	r0, r0, #5
    26c2:	2300      	movs	r3, #0
    26c4:	6103      	str	r3, [r0, #16]
RTC_HAL_SetAlarmIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:813
 *         -true: Time alarm flag does generate an interrupt.
 *         -false: Time alarm flag does not generate an interrupt.
 */
static inline void RTC_HAL_SetAlarmIntCmd(RTC_Type *rtcBase, bool enable)
{
    RTC_BWR_IER_TAIE(rtcBase, (uint32_t) enable);
    26c6:	6083      	str	r3, [r0, #8]
RTC_HAL_SetTimeOverflowIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:828
 *         -true: Time overflow flag does generate an interrupt.
 *         -false: Time overflow flag does not generate an interrupt.
 */
static inline void RTC_HAL_SetTimeOverflowIntCmd(RTC_Type *rtcBase, bool enable)
{
    RTC_BWR_IER_TOIE(rtcBase, (uint32_t) enable);
    26c8:	6043      	str	r3, [r0, #4]
RTC_HAL_SetTimeInvalidIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_rtc_hal.h:844
 *         -true: Time invalid flag does generate an interrupt.
 *         -false: Time invalid flag does not generate an interrupt.
 */
static inline void RTC_HAL_SetTimeInvalidIntCmd(RTC_Type *rtcBase, bool enable)
{
    RTC_BWR_IER_TIIE(rtcBase, (uint32_t) enable);
    26ca:	6003      	str	r3, [r0, #0]
    26cc:	4770      	bx	lr
	...

000026d0 <CLOCK_HAL_TestOscFreq>:
CLOCK_HAL_TestOscFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:68
uint32_t CLOCK_HAL_TestOscFreq(MCG_Type * base, mcg_oscsel_select_t oscselVal)
{
    uint32_t extFreq;

#if FSL_FEATURE_MCG_USE_OSCSEL
    switch (oscselVal)
    26d0:	2901      	cmp	r1, #1
    26d2:	d007      	beq.n	26e4 <CLOCK_HAL_TestOscFreq+0x14>
    26d4:	d304      	bcc.n	26e0 <CLOCK_HAL_TestOscFreq+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:84
        case kMcgOscselIrc:          /** Selects 48 MHz IRC Oscillator */
            extFreq = CPU_INTERNAL_IRC_48M;
            break;
#endif
        default:
            extFreq = 0U;
    26d6:	4805      	ldr	r0, [pc, #20]	; (26ec <CLOCK_HAL_TestOscFreq+0x1c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:68
uint32_t CLOCK_HAL_TestOscFreq(MCG_Type * base, mcg_oscsel_select_t oscselVal)
{
    uint32_t extFreq;

#if FSL_FEATURE_MCG_USE_OSCSEL
    switch (oscselVal)
    26d8:	2902      	cmp	r1, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:84
        case kMcgOscselIrc:          /** Selects 48 MHz IRC Oscillator */
            extFreq = CPU_INTERNAL_IRC_48M;
            break;
#endif
        default:
            extFreq = 0U;
    26da:	bf18      	it	ne
    26dc:	2000      	movne	r0, #0
    26de:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:71

#if FSL_FEATURE_MCG_USE_OSCSEL
    switch (oscselVal)
    {
        case kMcgOscselOsc:          /** Selects System Oscillator (OSCCLK) */
            extFreq = g_xtal0ClkFreq;
    26e0:	4b03      	ldr	r3, [pc, #12]	; (26f0 <CLOCK_HAL_TestOscFreq+0x20>)
    26e2:	e000      	b.n	26e6 <CLOCK_HAL_TestOscFreq+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:75
            break;
#if FSL_FEATURE_MCG_HAS_RTC_32K
        case kMcgOscselRtc:          /** Selects 32 kHz RTC Oscillator */
            extFreq = g_xtalRtcClkFreq;
    26e4:	4b03      	ldr	r3, [pc, #12]	; (26f4 <CLOCK_HAL_TestOscFreq+0x24>)
    26e6:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:91
    }
#else
    extFreq = g_xtal0ClkFreq;
#endif
    return extFreq;
}
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop
    26ec:	02dc6c00 	.word	0x02dc6c00
    26f0:	1fff0c50 	.word	0x1fff0c50
    26f4:	1fff0c54 	.word	0x1fff0c54

000026f8 <CLOCK_HAL_GetMcgExternalClkFreq>:
CLOCK_HAL_GetMcgExternalClkFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:105
 *END*/
static uint32_t CLOCK_HAL_GetMcgExternalClkFreq(MCG_Type * base)
{
#if FSL_FEATURE_MCG_USE_OSCSEL
     /** OSC frequency selected by OSCSEL. */
    return CLOCK_HAL_TestOscFreq(base, (mcg_oscsel_select_t)MCG_BRD_C7_OSCSEL(base));
    26f8:	7b01      	ldrb	r1, [r0, #12]
    26fa:	f001 0103 	and.w	r1, r1, #3
    26fe:	f7ff bfe7 	b.w	26d0 <CLOCK_HAL_TestOscFreq>

00002702 <CLOCK_HAL_TestFllExternalRefFreq>:
CLOCK_HAL_TestFllExternalRefFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:125
                                          uint32_t extFreq,
                                          uint8_t  frdivVal,
                                          osc_range_t range0,
                                          mcg_oscsel_select_t oscsel)
{
    extFreq >>= frdivVal;
    2702:	fa21 f002 	lsr.w	r0, r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:127

    if ((kOscRangeLow != range0)
    2706:	b1a3      	cbz	r3, 2732 <CLOCK_HAL_TestFllExternalRefFreq+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:129
#if FSL_FEATURE_MCG_USE_OSCSEL
      && (kMcgOscselRtc != oscsel)
    2708:	f89d 3000 	ldrb.w	r3, [sp]
    270c:	2b01      	cmp	r3, #1
    270e:	d010      	beq.n	2732 <CLOCK_HAL_TestFllExternalRefFreq+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:133
#endif
        )
    {
        switch (frdivVal)
    2710:	2a07      	cmp	r2, #7
    2712:	d80d      	bhi.n	2730 <CLOCK_HAL_TestFllExternalRefFreq+0x2e>
    2714:	e8df f002 	tbb	[pc, r2]
    2718:	04040404 	.word	0x04040404
    271c:	08060404 	.word	0x08060404
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:141
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                extFreq >>= 5U;
    2720:	0940      	lsrs	r0, r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:142
                break;
    2722:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:145
#if FSL_FEATURE_MCG_FRDIV_SUPPORT_1280
            case 6:
                extFreq /= 20U; /* 64*20=1280 */
    2724:	2314      	movs	r3, #20
    2726:	e000      	b.n	272a <CLOCK_HAL_TestFllExternalRefFreq+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:150
                break;
#endif
#if FSL_FEATURE_MCG_FRDIV_SUPPORT_1536
            case 7:
                extFreq /= 12U; /* 128*12=1536 */
    2728:	230c      	movs	r3, #12
    272a:	fbb0 f0f3 	udiv	r0, r0, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:151
                break;
    272e:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:154
#endif
            default:
                extFreq = 0U;  /** Reserved. */
    2730:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:159
                break;
        }
    }
    return extFreq;
}
    2732:	4770      	bx	lr

00002734 <CLOCK_HAL_GetFllRefClk>:
CLOCK_HAL_GetFllRefClk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:170
 * This is an internal function to get the fll reference clock. The returned
 * value will be used for other APIs to calculate teh fll and other clock value.
 *
 *END*/
uint32_t CLOCK_HAL_GetFllRefClk(MCG_Type * base)
{
    2734:	b513      	push	{r0, r1, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:176
    uint32_t mcgffclk;
    uint8_t frdiv;
    osc_range_t range;
    mcg_oscsel_select_t oscsel;

    if (MCG_BRD_C1_IREFS(base) == kMcgFllSrcExternal)
    2736:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    273a:	015b      	lsls	r3, r3, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:170
 * This is an internal function to get the fll reference clock. The returned
 * value will be used for other APIs to calculate teh fll and other clock value.
 *
 *END*/
uint32_t CLOCK_HAL_GetFllRefClk(MCG_Type * base)
{
    273c:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:176
    uint32_t mcgffclk;
    uint8_t frdiv;
    osc_range_t range;
    mcg_oscsel_select_t oscsel;

    if (MCG_BRD_C1_IREFS(base) == kMcgFllSrcExternal)
    273e:	7a1b      	ldrb	r3, [r3, #8]
    2740:	b983      	cbnz	r3, 2764 <CLOCK_HAL_GetFllRefClk+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:179
    {
         /** External reference clock is selected */
        mcgffclk = CLOCK_HAL_GetMcgExternalClkFreq(base);
    2742:	f7ff ffd9 	bl	26f8 <CLOCK_HAL_GetMcgExternalClkFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:180
        frdiv = MCG_BRD_C1_FRDIV(base);
    2746:	7822      	ldrb	r2, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:181
        range = (osc_range_t)MCG_BRD_C2_RANGE(base);
    2748:	7863      	ldrb	r3, [r4, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:179
    mcg_oscsel_select_t oscsel;

    if (MCG_BRD_C1_IREFS(base) == kMcgFllSrcExternal)
    {
         /** External reference clock is selected */
        mcgffclk = CLOCK_HAL_GetMcgExternalClkFreq(base);
    274a:	4601      	mov	r1, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:183
        frdiv = MCG_BRD_C1_FRDIV(base);
        range = (osc_range_t)MCG_BRD_C2_RANGE(base);
#if FSL_FEATURE_MCG_USE_OSCSEL
        oscsel = (mcg_oscsel_select_t)MCG_BRD_C7_OSCSEL(base);
    274c:	7b20      	ldrb	r0, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:188
#else
        oscsel = kMcgOscselOsc;
#endif

        mcgffclk = CLOCK_HAL_TestFllExternalRefFreq(base, mcgffclk, frdiv, range, oscsel);
    274e:	f000 0003 	and.w	r0, r0, #3
    2752:	9000      	str	r0, [sp, #0]
    2754:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    2758:	4620      	mov	r0, r4
    275a:	f3c3 1301 	ubfx	r3, r3, #4, #2
    275e:	f7ff ffd0 	bl	2702 <CLOCK_HAL_TestFllExternalRefFreq>
    2762:	e001      	b.n	2768 <CLOCK_HAL_GetFllRefClk+0x34>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:193
    }
    else
    {
         /** The slow internal reference clock is selected */
        mcgffclk = g_slowInternalRefClkFreq;
    2764:	4b01      	ldr	r3, [pc, #4]	; (276c <CLOCK_HAL_GetFllRefClk+0x38>)
    2766:	6818      	ldr	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:196
    }
    return mcgffclk;
}
    2768:	b002      	add	sp, #8
    276a:	bd10      	pop	{r4, pc}
    276c:	1fff0424 	.word	0x1fff0424

00002770 <CLOCK_HAL_TestFllFreq>:
CLOCK_HAL_TestFllFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:208
 *END*/
uint32_t CLOCK_HAL_TestFllFreq(MCG_Type * base,
                               uint32_t fllRef,
                               mcg_dmx32_select_t dmx32,
                               mcg_dco_range_select_t drs)
{
    2770:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:217
        {1920, 2197},
        {2560, 2929}
    };

     /** if DMX32 set */
    if (dmx32)
    2772:	b11a      	cbz	r2, 277c <CLOCK_HAL_TestFllFreq+0xc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:219
    {
        if (fllRef > kMcgConstant32768)
    2774:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    2778:	d907      	bls.n	278a <CLOCK_HAL_TestFllFreq+0x1a>
    277a:	e00d      	b.n	2798 <CLOCK_HAL_TestFllFreq+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:226
            return 0U;
        }
    }
    else
    {
        if ((fllRef < kMcgConstant31250) || (fllRef > kMcgConstant39063))
    277c:	f5a1 44f4 	sub.w	r4, r1, #31232	; 0x7a00
    2780:	3c12      	subs	r4, #18
    2782:	f641 6085 	movw	r0, #7813	; 0x1e85
    2786:	4284      	cmp	r4, r0
    2788:	d808      	bhi.n	279c <CLOCK_HAL_TestFllFreq+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:232
        {
            return 0U;
        }
    }

    return fllRef * fllFactorTable[drs][dmx32];
    278a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    278e:	4c04      	ldr	r4, [pc, #16]	; (27a0 <CLOCK_HAL_TestFllFreq+0x30>)
    2790:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
    2794:	4348      	muls	r0, r1
    2796:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:221
     /** if DMX32 set */
    if (dmx32)
    {
        if (fllRef > kMcgConstant32768)
        {
            return 0U;
    2798:	2000      	movs	r0, #0
    279a:	bd10      	pop	{r4, pc}
    279c:	4610      	mov	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:233
            return 0U;
        }
    }

    return fllRef * fllFactorTable[drs][dmx32];
}
    279e:	bd10      	pop	{r4, pc}
    27a0:	0000719e 	.word	0x0000719e

000027a4 <CLOCK_HAL_GetFllClk>:
CLOCK_HAL_GetFllClk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:245
 * current mcg configurations and settings. Fll should be properly configured
 * in order to get the valid value.
 *
 *END*/
uint32_t CLOCK_HAL_GetFllClk(MCG_Type * base)
{
    27a4:	b510      	push	{r4, lr}
CLOCK_HAL_IsPllSelected():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_mcg_hal.h:777
 * @param base  Base address for current MCG instance.
 * @return True if PLL output is selected to MCGOUT, false if FLL output is selected.
 */
static inline bool CLOCK_HAL_IsPllSelected(MCG_Type * base)
{
    return (bool)MCG_BRD_S_PLLST(base);
    27a6:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    27aa:	3306      	adds	r3, #6
    27ac:	015b      	lsls	r3, r3, #5
CLOCK_HAL_GetFllClk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:245
    27ae:	4604      	mov	r4, r0
CLOCK_HAL_IsPllSelected():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_mcg_hal.h:777
    27b0:	7d1b      	ldrb	r3, [r3, #20]
CLOCK_HAL_GetFllClk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:252
    mcg_dmx32_select_t dmx32;
    mcg_dco_range_select_t drs;

#if FSL_FEATURE_MCG_HAS_PLL
     /** If FLL is not enabled, return 0. */
    if (CLOCK_HAL_IsPllSelected(base))
    27b2:	b983      	cbnz	r3, 27d6 <CLOCK_HAL_GetFllClk+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:258
    {
        return 0U;
    }
#endif

    mcgfllclk = CLOCK_HAL_GetFllRefClk(base);
    27b4:	f7ff ffbe 	bl	2734 <CLOCK_HAL_GetFllRefClk>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:260

    if (0U == mcgfllclk)
    27b8:	4601      	mov	r1, r0
    27ba:	b160      	cbz	r0, 27d6 <CLOCK_HAL_GetFllClk+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:265
    {
        return 0U;
    }

    dmx32 = (mcg_dmx32_select_t)MCG_BRD_C4_DMX32(base);
    27bc:	f104 7304 	add.w	r3, r4, #34603008	; 0x2100000
    27c0:	3303      	adds	r3, #3
    27c2:	015b      	lsls	r3, r3, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:269
    drs   = (mcg_dco_range_select_t)MCG_BRD_C4_DRST_DRS(base);


    mcgfllclk = CLOCK_HAL_TestFllFreq(base, mcgfllclk, dmx32, drs);
    27c4:	4620      	mov	r0, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:265
    if (0U == mcgfllclk)
    {
        return 0U;
    }

    dmx32 = (mcg_dmx32_select_t)MCG_BRD_C4_DMX32(base);
    27c6:	7f1a      	ldrb	r2, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:266
    drs   = (mcg_dco_range_select_t)MCG_BRD_C4_DRST_DRS(base);
    27c8:	78e3      	ldrb	r3, [r4, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:272


    mcgfllclk = CLOCK_HAL_TestFllFreq(base, mcgfllclk, dmx32, drs);

    return mcgfllclk;
}
    27ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:269

    dmx32 = (mcg_dmx32_select_t)MCG_BRD_C4_DMX32(base);
    drs   = (mcg_dco_range_select_t)MCG_BRD_C4_DRST_DRS(base);


    mcgfllclk = CLOCK_HAL_TestFllFreq(base, mcgfllclk, dmx32, drs);
    27ce:	f3c3 1341 	ubfx	r3, r3, #5, #2
    27d2:	f7ff bfcd 	b.w	2770 <CLOCK_HAL_TestFllFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:272

    return mcgfllclk;
}
    27d6:	2000      	movs	r0, #0
    27d8:	bd10      	pop	{r4, pc}

000027da <CLOCK_HAL_GetPll0Clk>:
CLOCK_HAL_GetPll0Clk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:520
 * on current mcg configurations and settings. PLL/PLL0 should be properly
 * configured in order to get the valid value.
 *
 *END*/
uint32_t CLOCK_HAL_GetPll0Clk(MCG_Type * base)
{
    27da:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:525
    uint32_t mcgpll0clk;
    uint8_t  divider;

     /** If PLL0 is not enabled, return 0. */
    if (!(MCG_BRD_S_PLLST(base) || MCG_BRD_C5_PLLCLKEN0(base)))
    27dc:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    27e0:	3306      	adds	r3, #6
    27e2:	015b      	lsls	r3, r3, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:520
 * on current mcg configurations and settings. PLL/PLL0 should be properly
 * configured in order to get the valid value.
 *
 *END*/
uint32_t CLOCK_HAL_GetPll0Clk(MCG_Type * base)
{
    27e4:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:525
    uint32_t mcgpll0clk;
    uint8_t  divider;

     /** If PLL0 is not enabled, return 0. */
    if (!(MCG_BRD_S_PLLST(base) || MCG_BRD_C5_PLLCLKEN0(base)))
    27e6:	7d1b      	ldrb	r3, [r3, #20]
    27e8:	b93b      	cbnz	r3, 27fa <CLOCK_HAL_GetPll0Clk+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:525 (discriminator 1)
    27ea:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    27ee:	3304      	adds	r3, #4
    27f0:	015b      	lsls	r3, r3, #5
    27f2:	7e1b      	ldrb	r3, [r3, #24]
    27f4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    27f8:	b16b      	cbz	r3, 2816 <CLOCK_HAL_GetPll0Clk+0x3c>
CLOCK_HAL_GetPll0RefFreq():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:506
    {
        return g_xtal1ClkFreq;
    }
#else
     /** Use OSCSEL frequency. */
    return CLOCK_HAL_GetMcgExternalClkFreq(base);
    27fa:	4620      	mov	r0, r4
    27fc:	f7ff ff7c 	bl	26f8 <CLOCK_HAL_GetMcgExternalClkFreq>
CLOCK_HAL_GetPll0Clk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:532
        return 0U;
    }

    mcgpll0clk = CLOCK_HAL_GetPll0RefFreq(base);

    divider = (FSL_FEATURE_MCG_PLL_PRDIV_BASE + MCG_BRD_C5_PRDIV0(base));
    2800:	7923      	ldrb	r3, [r4, #4]
    2802:	f003 031f 	and.w	r3, r3, #31
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:535

     /** Calculate the PLL reference clock*/
    mcgpll0clk /= divider;
    2806:	3301      	adds	r3, #1
    2808:	fbb0 f3f3 	udiv	r3, r0, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:536
    divider = (MCG_BRD_C6_VDIV0(base) + FSL_FEATURE_MCG_PLL_VDIV_BASE);
    280c:	7960      	ldrb	r0, [r4, #5]
    280e:	f000 001f 	and.w	r0, r0, #31
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:539

     /** Calculate the MCG output clock*/
    mcgpll0clk = (mcgpll0clk * divider);
    2812:	3018      	adds	r0, #24
    2814:	4358      	muls	r0, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:545

#if FSL_FEATURE_MCG_HAS_PLL_INTERNAL_DIV
    mcgpll0clk >>= 1U;
#endif
    return mcgpll0clk;
}
    2816:	bd10      	pop	{r4, pc}

00002818 <CLOCK_HAL_GetInternalRefClk>:
CLOCK_HAL_GetInternalRefClk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:671
 *END*/
uint32_t CLOCK_HAL_GetInternalRefClk(MCG_Type * base)
{
    uint32_t mcgirclk;

    if (!MCG_BRD_C1_IRCLKEN(base))
    2818:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    281c:	015b      	lsls	r3, r3, #5
    281e:	791b      	ldrb	r3, [r3, #4]
    2820:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2824:	b183      	cbz	r3, 2848 <CLOCK_HAL_GetInternalRefClk+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:676
    {
        return 0U;
    }

    if (MCG_BRD_C2_IRCS(base) == kMcgIrcSlow)
    2826:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    282a:	3301      	adds	r3, #1
    282c:	015b      	lsls	r3, r3, #5
    282e:	781b      	ldrb	r3, [r3, #0]
    2830:	b913      	cbnz	r3, 2838 <CLOCK_HAL_GetInternalRefClk+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:679
    {
         /** Slow internal reference clock selected*/
        mcgirclk = g_slowInternalRefClkFreq;
    2832:	4b06      	ldr	r3, [pc, #24]	; (284c <CLOCK_HAL_GetInternalRefClk+0x34>)
    2834:	6818      	ldr	r0, [r3, #0]
    2836:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:683
    }
    else
    {
        mcgirclk = g_fastInternalRefClkFreq >> MCG_BRD_SC_FCRDIV(base);
    2838:	4b05      	ldr	r3, [pc, #20]	; (2850 <CLOCK_HAL_GetInternalRefClk+0x38>)
    283a:	7a00      	ldrb	r0, [r0, #8]
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	f3c0 0042 	ubfx	r0, r0, #1, #3
    2842:	fa23 f000 	lsr.w	r0, r3, r0
    2846:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:673
{
    uint32_t mcgirclk;

    if (!MCG_BRD_C1_IRCLKEN(base))
    {
        return 0U;
    2848:	4610      	mov	r0, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:686
    else
    {
        mcgirclk = g_fastInternalRefClkFreq >> MCG_BRD_SC_FCRDIV(base);
    }
    return mcgirclk;
}
    284a:	4770      	bx	lr
    284c:	1fff0424 	.word	0x1fff0424
    2850:	1fff0428 	.word	0x1fff0428

00002854 <CLOCK_HAL_GetOutClk>:
CLOCK_HAL_GetClkOutStat():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_mcg_hal.h:427
 *                 - 10: External reference clock is selected.
 *                 - 11: Output of the PLL is selected.
 */
static inline mcg_clkout_stat_t CLOCK_HAL_GetClkOutStat(MCG_Type * base)
{
    return (mcg_clkout_stat_t)MCG_BRD_S_CLKST(base);
    2854:	7983      	ldrb	r3, [r0, #6]
CLOCK_HAL_GetOutClk():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:725
uint32_t CLOCK_HAL_GetOutClk(MCG_Type * base)
{
    uint32_t mcgoutclk;
    mcg_clkout_stat_t src = CLOCK_HAL_GetClkOutStat(base);

    switch (src)
    2856:	f3c3 0381 	ubfx	r3, r3, #2, #2
    285a:	2b02      	cmp	r3, #2
    285c:	d009      	beq.n	2872 <CLOCK_HAL_GetOutClk+0x1e>
    285e:	2b03      	cmp	r3, #3
    2860:	d003      	beq.n	286a <CLOCK_HAL_GetOutClk+0x16>
    2862:	2b01      	cmp	r3, #1
    2864:	d003      	beq.n	286e <CLOCK_HAL_GetOutClk+0x1a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:749
                mcgoutclk = CLOCK_HAL_GetPll0Clk(base);
            }
            break;
#endif
        case kMcgClkOutStatFll:
            mcgoutclk = CLOCK_HAL_GetFllClk(base);
    2866:	f7ff bf9d 	b.w	27a4 <CLOCK_HAL_GetFllClk>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:744
                mcgoutclk = CLOCK_HAL_GetExtPllClk(base);
            }
            else
#endif
            {
                mcgoutclk = CLOCK_HAL_GetPll0Clk(base);
    286a:	f7ff bfb6 	b.w	27da <CLOCK_HAL_GetPll0Clk>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:752
#endif
        case kMcgClkOutStatFll:
            mcgoutclk = CLOCK_HAL_GetFllClk(base);
            break;
        case kMcgClkOutStatInternal:   /** Internal clock. */
            mcgoutclk = CLOCK_HAL_GetInternalRefClk(base);
    286e:	f7ff bfd3 	b.w	2818 <CLOCK_HAL_GetInternalRefClk>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/mcg/fsl_mcg_hal.c:755
            break;
        case kMcgClkOutStatExternal:   /** External clock. */
            mcgoutclk = CLOCK_HAL_GetMcgExternalClkFreq(base);
    2872:	f7ff bf41 	b.w	26f8 <CLOCK_HAL_GetMcgExternalClkFreq>

00002876 <LPTMR_HAL_SetTimerWorkingMode>:
LPTMR_HAL_SetTimerWorkingMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:87
 * Function Name : LPTMR_HAL_SetTimerWorkingMode
 * Description   : Config the LPTMR working mode.
 *
 *END*/
void LPTMR_HAL_SetTimerWorkingMode(LPTMR_Type * base,  lptmr_working_mode_user_config_t timerMode)
{
    2876:	b082      	sub	sp, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:90
    uint32_t csr;

    csr = LPTMR_RD_CSR(base);
    2878:	6802      	ldr	r2, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:87
 * Function Name : LPTMR_HAL_SetTimerWorkingMode
 * Description   : Config the LPTMR working mode.
 *
 *END*/
void LPTMR_HAL_SetTimerWorkingMode(LPTMR_Type * base,  lptmr_working_mode_user_config_t timerMode)
{
    287a:	9101      	str	r1, [sp, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:93
    uint32_t csr;

    csr = LPTMR_RD_CSR(base);
    csr &= ~(LPTMR_CSR_TCF_MASK | LPTMR_CSR_TMS_MASK | LPTMR_CSR_TFC_MASK
             | LPTMR_CSR_TPP_MASK | LPTMR_CSR_TPS_MASK);
    csr |= LPTMR_CSR_TMS(timerMode.timerModeSelect)
    287c:	f89d 1004 	ldrb.w	r1, [sp, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:94
        | LPTMR_CSR_TFC(timerMode.freeRunningEnable)
    2880:	f89d 3005 	ldrb.w	r3, [sp, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:93
    uint32_t csr;

    csr = LPTMR_RD_CSR(base);
    csr &= ~(LPTMR_CSR_TCF_MASK | LPTMR_CSR_TMS_MASK | LPTMR_CSR_TFC_MASK
             | LPTMR_CSR_TPP_MASK | LPTMR_CSR_TPS_MASK);
    csr |= LPTMR_CSR_TMS(timerMode.timerModeSelect)
    2884:	0049      	lsls	r1, r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:94
        | LPTMR_CSR_TFC(timerMode.freeRunningEnable)
    2886:	009b      	lsls	r3, r3, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:93
    uint32_t csr;

    csr = LPTMR_RD_CSR(base);
    csr &= ~(LPTMR_CSR_TCF_MASK | LPTMR_CSR_TMS_MASK | LPTMR_CSR_TFC_MASK
             | LPTMR_CSR_TPP_MASK | LPTMR_CSR_TPS_MASK);
    csr |= LPTMR_CSR_TMS(timerMode.timerModeSelect)
    2888:	f001 0102 	and.w	r1, r1, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:94
        | LPTMR_CSR_TFC(timerMode.freeRunningEnable)
    288c:	f003 0304 	and.w	r3, r3, #4
    2890:	430b      	orrs	r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:91
void LPTMR_HAL_SetTimerWorkingMode(LPTMR_Type * base,  lptmr_working_mode_user_config_t timerMode)
{
    uint32_t csr;

    csr = LPTMR_RD_CSR(base);
    csr &= ~(LPTMR_CSR_TCF_MASK | LPTMR_CSR_TMS_MASK | LPTMR_CSR_TFC_MASK
    2892:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:95
             | LPTMR_CSR_TPP_MASK | LPTMR_CSR_TPS_MASK);
    csr |= LPTMR_CSR_TMS(timerMode.timerModeSelect)
        | LPTMR_CSR_TFC(timerMode.freeRunningEnable)
        | LPTMR_CSR_TPP(timerMode.pinPolarity)
    2896:	4313      	orrs	r3, r2
    2898:	f89d 2006 	ldrb.w	r2, [sp, #6]
    289c:	00d2      	lsls	r2, r2, #3
    289e:	f002 0208 	and.w	r2, r2, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:96
        | LPTMR_CSR_TPS(timerMode.pinSelect);
    28a2:	4313      	orrs	r3, r2
    28a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    28a8:	0112      	lsls	r2, r2, #4
    28aa:	f002 0230 	and.w	r2, r2, #48	; 0x30
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:93
    uint32_t csr;

    csr = LPTMR_RD_CSR(base);
    csr &= ~(LPTMR_CSR_TCF_MASK | LPTMR_CSR_TMS_MASK | LPTMR_CSR_TFC_MASK
             | LPTMR_CSR_TPP_MASK | LPTMR_CSR_TPS_MASK);
    csr |= LPTMR_CSR_TMS(timerMode.timerModeSelect)
    28ae:	4313      	orrs	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:98
        | LPTMR_CSR_TFC(timerMode.freeRunningEnable)
        | LPTMR_CSR_TPP(timerMode.pinPolarity)
        | LPTMR_CSR_TPS(timerMode.pinSelect);

    LPTMR_WR_CSR(base, csr);
    28b0:	6003      	str	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:99
}
    28b2:	b002      	add	sp, #8
    28b4:	4770      	bx	lr

000028b6 <LPTMR_HAL_SetPrescalerMode>:
LPTMR_HAL_SetPrescalerMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:112
void LPTMR_HAL_SetPrescalerMode(LPTMR_Type * base,  lptmr_prescaler_user_config_t prescaler_config)
{
    uint32_t psr;

    psr = LPTMR_PSR_PCS(prescaler_config.prescalerClockSelect)
        | LPTMR_PSR_PBYP(prescaler_config.prescalerBypass)
    28b6:	008a      	lsls	r2, r1, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:113
        | LPTMR_PSR_PRESCALE(prescaler_config.prescalerValue);
    28b8:	0b4b      	lsrs	r3, r1, #13
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:112
void LPTMR_HAL_SetPrescalerMode(LPTMR_Type * base,  lptmr_prescaler_user_config_t prescaler_config)
{
    uint32_t psr;

    psr = LPTMR_PSR_PCS(prescaler_config.prescalerClockSelect)
        | LPTMR_PSR_PBYP(prescaler_config.prescalerBypass)
    28ba:	f002 0204 	and.w	r2, r2, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:113
        | LPTMR_PSR_PRESCALE(prescaler_config.prescalerValue);
    28be:	f003 0378 	and.w	r3, r3, #120	; 0x78
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:112
void LPTMR_HAL_SetPrescalerMode(LPTMR_Type * base,  lptmr_prescaler_user_config_t prescaler_config)
{
    uint32_t psr;

    psr = LPTMR_PSR_PCS(prescaler_config.prescalerClockSelect)
        | LPTMR_PSR_PBYP(prescaler_config.prescalerBypass)
    28c2:	4313      	orrs	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:111
 *END*/
void LPTMR_HAL_SetPrescalerMode(LPTMR_Type * base,  lptmr_prescaler_user_config_t prescaler_config)
{
    uint32_t psr;

    psr = LPTMR_PSR_PCS(prescaler_config.prescalerClockSelect)
    28c4:	f3c1 2101 	ubfx	r1, r1, #8, #2
    28c8:	430b      	orrs	r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:108
 * Function Name : LPTMR_HAL_SetPrescalerMode
 * Description   : Set the LPTMR prescaler mode.
 *
 *END*/
void LPTMR_HAL_SetPrescalerMode(LPTMR_Type * base,  lptmr_prescaler_user_config_t prescaler_config)
{
    28ca:	b082      	sub	sp, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:115

    psr = LPTMR_PSR_PCS(prescaler_config.prescalerClockSelect)
        | LPTMR_PSR_PBYP(prescaler_config.prescalerBypass)
        | LPTMR_PSR_PRESCALE(prescaler_config.prescalerValue);

    LPTMR_WR_PSR(base, psr);
    28cc:	6043      	str	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/lptmr/fsl_lptmr_hal.c:116
}
    28ce:	b002      	add	sp, #8
    28d0:	4770      	bx	lr

000028d2 <I2C_HAL_Init>:
I2C_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:129
 *
 *END*/
void I2C_HAL_Init(I2C_Type * base)
{

    I2C_WR_A1(base, 0u);
    28d2:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:139
    I2C_WR_FLT(base, 0u);
    I2C_WR_RA(base, 0u);

#if FSL_FEATURE_I2C_HAS_SMBUS
    I2C_WR_SMB(base, 0u);
    I2C_WR_A2(base, 0xc2u);
    28d4:	22c2      	movs	r2, #194	; 0xc2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:129
 *
 *END*/
void I2C_HAL_Init(I2C_Type * base)
{

    I2C_WR_A1(base, 0u);
    28d6:	7003      	strb	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:130
    I2C_WR_F(base, 0u);
    28d8:	7043      	strb	r3, [r0, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:131
    I2C_WR_C1(base, 0u);
    28da:	7083      	strb	r3, [r0, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:132
    I2C_WR_S(base, 0u);
    28dc:	70c3      	strb	r3, [r0, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:133
    I2C_WR_C2(base, 0u);
    28de:	7143      	strb	r3, [r0, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:134
    I2C_WR_FLT(base, 0u);
    28e0:	7183      	strb	r3, [r0, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:135
    I2C_WR_RA(base, 0u);
    28e2:	71c3      	strb	r3, [r0, #7]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:138

#if FSL_FEATURE_I2C_HAS_SMBUS
    I2C_WR_SMB(base, 0u);
    28e4:	7203      	strb	r3, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:139
    I2C_WR_A2(base, 0xc2u);
    28e6:	7242      	strb	r2, [r0, #9]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:140
    I2C_WR_SLTH(base, 0u);
    28e8:	7283      	strb	r3, [r0, #10]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:141
    I2C_WR_SLTL(base, 0u);
    28ea:	72c3      	strb	r3, [r0, #11]
    28ec:	4770      	bx	lr
	...

000028f0 <I2C_HAL_SetBaudRate>:
I2C_HAL_SetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:155
 *END*/
void I2C_HAL_SetBaudRate(I2C_Type * base,
                         uint32_t sourceClockInHz,
                         uint32_t kbps,
                         uint32_t * absoluteError_Hz)
{
    28f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:160
    uint32_t mult, i, multiplier, computedRate, absError;
    uint32_t hz = kbps * 1000u;
    uint32_t bestError = 0xffffffffu;
    uint32_t bestMult = 0u;
    uint32_t bestIcr = 0u;
    28f4:	f04f 0c00 	mov.w	ip, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:157
                         uint32_t sourceClockInHz,
                         uint32_t kbps,
                         uint32_t * absoluteError_Hz)
{
    uint32_t mult, i, multiplier, computedRate, absError;
    uint32_t hz = kbps * 1000u;
    28f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    28fc:	4362      	muls	r2, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:158
    uint32_t bestError = 0xffffffffu;
    28fe:	f04f 35ff 	mov.w	r5, #4294967295
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:165
    uint32_t bestIcr = 0u;

     /** Search for the settings with the lowest error.
     * mult is the MULT field of the I2C_F register, and ranges from 0-2. It selects the
     * multiplier factor for the divider. */
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    2902:	4664      	mov	r4, ip
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:159
                         uint32_t * absoluteError_Hz)
{
    uint32_t mult, i, multiplier, computedRate, absError;
    uint32_t hz = kbps * 1000u;
    uint32_t bestError = 0xffffffffu;
    uint32_t bestMult = 0u;
    2904:	46e0      	mov	r8, ip
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:167
     /** Search for the settings with the lowest error.
     * mult is the MULT field of the I2C_F register, and ranges from 0-2. It selects the
     * multiplier factor for the divider. */
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    {
        multiplier = 1u << mult;
    2906:	f04f 0a01 	mov.w	sl, #1
    290a:	fa0a fa04 	lsl.w	sl, sl, r4
    290e:	2700      	movs	r7, #0
    2910:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2964 <I2C_HAL_SetBaudRate+0x74>
    2914:	eb09 0607 	add.w	r6, r9, r7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:172

         /** Scan table to find best match.*/
        for (i = 0u; i < ARRAY_SIZE(kI2CDividerTable); ++i)
        {
            computedRate = sourceClockInHz / (multiplier * kI2CDividerTable[i].sclDivider);
    2918:	8876      	ldrh	r6, [r6, #2]
    291a:	fb0a f606 	mul.w	r6, sl, r6
    291e:	fbb1 f6f6 	udiv	r6, r1, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:173
            absError = hz > computedRate ? hz - computedRate : computedRate - hz;
    2922:	42b2      	cmp	r2, r6
    2924:	bf8c      	ite	hi
    2926:	ebc6 0602 	rsbhi	r6, r6, r2
    292a:	ebc2 0606 	rsbls	r6, r2, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:175

            if (absError < bestError)
    292e:	42ae      	cmp	r6, r5
    2930:	d204      	bcs.n	293c <I2C_HAL_SetBaudRate+0x4c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:178
            {
                bestMult = mult;
                bestIcr = kI2CDividerTable[i].icr;
    2932:	f819 c007 	ldrb.w	ip, [r9, r7]
    2936:	46a0      	mov	r8, r4
    2938:	4635      	mov	r5, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:183
                bestError = absError;

                 /** If the error is 0, then we can stop searching
                 * because we won't find a better match.*/
                if (absError == 0)
    293a:	b116      	cbz	r6, 2942 <I2C_HAL_SetBaudRate+0x52>
    293c:	3704      	adds	r7, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:170
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    {
        multiplier = 1u << mult;

         /** Scan table to find best match.*/
        for (i = 0u; i < ARRAY_SIZE(kI2CDividerTable); ++i)
    293e:	2fc8      	cmp	r7, #200	; 0xc8
    2940:	d1e6      	bne.n	2910 <I2C_HAL_SetBaudRate+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:165
    uint32_t bestIcr = 0u;

     /** Search for the settings with the lowest error.
     * mult is the MULT field of the I2C_F register, and ranges from 0-2. It selects the
     * multiplier factor for the divider. */
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    2942:	3401      	adds	r4, #1
    2944:	2c03      	cmp	r4, #3
    2946:	d001      	beq.n	294c <I2C_HAL_SetBaudRate+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:165 (discriminator 2)
    2948:	2d00      	cmp	r5, #0
    294a:	d1dc      	bne.n	2906 <I2C_HAL_SetBaudRate+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:192
            }
        }
    }

     /** Set the resulting error.*/
    if (absoluteError_Hz)
    294c:	b103      	cbz	r3, 2950 <I2C_HAL_SetBaudRate+0x60>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:194
    {
        *absoluteError_Hz = bestError;
    294e:	601d      	str	r5, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:198
    }

     /** Set frequency register based on best settings.*/
    I2C_WR_F(base, I2C_F_MULT(bestMult) | I2C_F_ICR(bestIcr));
    2950:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    2954:	ea4c 1888 	orr.w	r8, ip, r8, lsl #6
    2958:	fa5f f888 	uxtb.w	r8, r8
    295c:	f880 8001 	strb.w	r8, [r0, #1]
    2960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2964:	000071ae 	.word	0x000071ae

00002968 <I2C_HAL_SendStop>:
I2C_HAL_SendStop():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:254
 * Description   : Sends a STOP signal on the I2C bus.
 * This function changes the direction to receive.
 *
 *END*/
i2c_status_t I2C_HAL_SendStop(I2C_Type * base)
{
    2968:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:255
    assert(I2C_BRD_C1_MST(base) == 1);
    296a:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    296e:	3302      	adds	r3, #2
    2970:	015b      	lsls	r3, r3, #5
    2972:	7d1b      	ldrb	r3, [r3, #20]
    2974:	2b01      	cmp	r3, #1
    2976:	d005      	beq.n	2984 <I2C_HAL_SendStop+0x1c>
    2978:	480c      	ldr	r0, [pc, #48]	; (29ac <I2C_HAL_SendStop+0x44>)
    297a:	4a0d      	ldr	r2, [pc, #52]	; (29b0 <I2C_HAL_SendStop+0x48>)
    297c:	4b0d      	ldr	r3, [pc, #52]	; (29b4 <I2C_HAL_SendStop+0x4c>)
    297e:	21ff      	movs	r1, #255	; 0xff
    2980:	f003 fa62 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:259
    uint32_t i = 0;

     /** Start the STOP signal */
    I2C_CLR_C1(base, I2C_C1_MST_MASK | I2C_C1_TX_MASK);
    2984:	7883      	ldrb	r3, [r0, #2]
    2986:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    298a:	7083      	strb	r3, [r0, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:262

     /** Wait for the STOP signal finish. */
    while(I2C_HAL_GetStatusFlag(base, kI2CBusBusy))
    298c:	f44f 6380 	mov.w	r3, #1024	; 0x400
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604 (discriminator 1)
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    2990:	78c2      	ldrb	r2, [r0, #3]
    2992:	f002 0220 	and.w	r2, r2, #32
I2C_HAL_SendStop():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:262 (discriminator 1)
    2996:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    299a:	b11a      	cbz	r2, 29a4 <I2C_HAL_SendStop+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:264
    {
        if (++i == 0x400U)
    299c:	3b01      	subs	r3, #1
    299e:	d003      	beq.n	29a8 <I2C_HAL_SendStop+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:271
             /** Something is wrong because the bus is still busy. */
            return kStatus_I2C_StopSignalFail;
        }
        else
        {
            __asm("nop");
    29a0:	bf00      	nop
    29a2:	e7f5      	b.n	2990 <I2C_HAL_SendStop+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:275
        }
    }

    return kStatus_I2C_Success;
    29a4:	4608      	mov	r0, r1
    29a6:	bd08      	pop	{r3, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:267
    while(I2C_HAL_GetStatusFlag(base, kI2CBusBusy))
    {
        if (++i == 0x400U)
        {
             /** Something is wrong because the bus is still busy. */
            return kStatus_I2C_StopSignalFail;
    29a8:	2009      	movs	r0, #9
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/i2c/fsl_i2c_hal.c:276
            __asm("nop");
        }
    }

    return kStatus_I2C_Success;
}
    29aa:	bd08      	pop	{r3, pc}
    29ac:	00007276 	.word	0x00007276
    29b0:	000072f1 	.word	0x000072f1
    29b4:	000072d7 	.word	0x000072d7

000029b8 <GPIO_HAL_SetPinDir>:
GPIO_HAL_SetPinDir():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:46
 * Description   : Set individual gpio pin to general input or output.
 *
 *END*/
void GPIO_HAL_SetPinDir(GPIO_Type * base, uint32_t pin, gpio_pin_direction_t direction)
{
    assert(pin < 32);
    29b8:	291f      	cmp	r1, #31
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:45
 * Function Name : GPIO_HAL_SetPinDir
 * Description   : Set individual gpio pin to general input or output.
 *
 *END*/
void GPIO_HAL_SetPinDir(GPIO_Type * base, uint32_t pin, gpio_pin_direction_t direction)
{
    29ba:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:46
    assert(pin < 32);
    29bc:	d905      	bls.n	29ca <GPIO_HAL_SetPinDir+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:46 (discriminator 1)
    29be:	480a      	ldr	r0, [pc, #40]	; (29e8 <GPIO_HAL_SetPinDir+0x30>)
    29c0:	4a0a      	ldr	r2, [pc, #40]	; (29ec <GPIO_HAL_SetPinDir+0x34>)
    29c2:	4b0b      	ldr	r3, [pc, #44]	; (29f0 <GPIO_HAL_SetPinDir+0x38>)
    29c4:	212e      	movs	r1, #46	; 0x2e
    29c6:	f003 fa3f 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:48

    if (direction == kGpioDigitalOutput)
    29ca:	2a01      	cmp	r2, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:50
    {
        GPIO_SET_PDDR(base, 1U << pin);
    29cc:	6943      	ldr	r3, [r0, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:48
 *END*/
void GPIO_HAL_SetPinDir(GPIO_Type * base, uint32_t pin, gpio_pin_direction_t direction)
{
    assert(pin < 32);

    if (direction == kGpioDigitalOutput)
    29ce:	d103      	bne.n	29d8 <GPIO_HAL_SetPinDir+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:50
    {
        GPIO_SET_PDDR(base, 1U << pin);
    29d0:	408a      	lsls	r2, r1
    29d2:	431a      	orrs	r2, r3
    29d4:	6142      	str	r2, [r0, #20]
    29d6:	bd08      	pop	{r3, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:54
    }
    else
    {
        GPIO_CLR_PDDR(base, 1U << pin);
    29d8:	2201      	movs	r2, #1
    29da:	fa02 f101 	lsl.w	r1, r2, r1
    29de:	ea23 0101 	bic.w	r1, r3, r1
    29e2:	6141      	str	r1, [r0, #20]
    29e4:	bd08      	pop	{r3, pc}
    29e6:	bf00      	nop
    29e8:	0000732d 	.word	0x0000732d
    29ec:	00007302 	.word	0x00007302
    29f0:	00007390 	.word	0x00007390

000029f4 <GPIO_HAL_WritePinOutput>:
GPIO_HAL_WritePinOutput():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:66
 * Description   : Set output level of individual gpio pin to logic 1 or 0.
 *
 *END*/
void GPIO_HAL_WritePinOutput(GPIO_Type * base, uint32_t pin, uint32_t output)
{
    assert(pin < 32);
    29f4:	291f      	cmp	r1, #31
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:65
 * Function Name : GPIO_HAL_WritePinOutput
 * Description   : Set output level of individual gpio pin to logic 1 or 0.
 *
 *END*/
void GPIO_HAL_WritePinOutput(GPIO_Type * base, uint32_t pin, uint32_t output)
{
    29f6:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:66
    assert(pin < 32);
    29f8:	d905      	bls.n	2a06 <GPIO_HAL_WritePinOutput+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:66 (discriminator 1)
    29fa:	4807      	ldr	r0, [pc, #28]	; (2a18 <GPIO_HAL_WritePinOutput+0x24>)
    29fc:	4a07      	ldr	r2, [pc, #28]	; (2a1c <GPIO_HAL_WritePinOutput+0x28>)
    29fe:	4b08      	ldr	r3, [pc, #32]	; (2a20 <GPIO_HAL_WritePinOutput+0x2c>)
    2a00:	2142      	movs	r1, #66	; 0x42
    2a02:	f003 fa21 	bl	5e48 <__assert_func>
    2a06:	2301      	movs	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:70

    if (output != 0U)
    {
        GPIO_WR_PSOR(base, 1U << pin);  /** Set pin output to high level.*/
    2a08:	fa03 f101 	lsl.w	r1, r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:68
 *END*/
void GPIO_HAL_WritePinOutput(GPIO_Type * base, uint32_t pin, uint32_t output)
{
    assert(pin < 32);

    if (output != 0U)
    2a0c:	b10a      	cbz	r2, 2a12 <GPIO_HAL_WritePinOutput+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:70
    {
        GPIO_WR_PSOR(base, 1U << pin);  /** Set pin output to high level.*/
    2a0e:	6041      	str	r1, [r0, #4]
    2a10:	bd08      	pop	{r3, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/gpio/fsl_gpio_hal.c:74
    }
    else
    {
        GPIO_WR_PCOR(base, 1U << pin);  /** Set pin output to low level.*/
    2a12:	6081      	str	r1, [r0, #8]
    2a14:	bd08      	pop	{r3, pc}
    2a16:	bf00      	nop
    2a18:	0000732d 	.word	0x0000732d
    2a1c:	00007315 	.word	0x00007315
    2a20:	00007390 	.word	0x00007390

00002a24 <EDMA_HAL_SetErrorIntCmd>:
EDMA_HAL_SetErrorIntCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:124
 *
 *END*/
void EDMA_HAL_SetErrorIntCmd(DMA_Type * base, bool enable, edma_channel_indicator_t channel)
{

    if (enable)
    2a24:	b109      	cbz	r1, 2a2a <EDMA_HAL_SetErrorIntCmd+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:126
    {
        DMA_WR_SEEI(base, channel);
    2a26:	7642      	strb	r2, [r0, #25]
    2a28:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:130
    }
    else
    {
        DMA_WR_CEEI(base, channel);
    2a2a:	7602      	strb	r2, [r0, #24]
    2a2c:	4770      	bx	lr

00002a2e <EDMA_HAL_SetDmaRequestCmd>:
EDMA_HAL_SetDmaRequestCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:173
 *
 *END*/
void EDMA_HAL_SetDmaRequestCmd(DMA_Type * base, edma_channel_indicator_t channel,bool enable)
{

    if (enable)
    2a2e:	b10a      	cbz	r2, 2a34 <EDMA_HAL_SetDmaRequestCmd+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:175
    {
        DMA_WR_SERQ(base, channel);
    2a30:	76c1      	strb	r1, [r0, #27]
    2a32:	4770      	bx	lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:179
    }
    else
    {
        DMA_WR_CERQ(base, channel);
    2a34:	7681      	strb	r1, [r0, #26]
    2a36:	4770      	bx	lr

00002a38 <EDMA_HAL_HTCDClearReg>:
EDMA_HAL_HTCDClearReg():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:190
 * Function Name : EDMA_HAL_HTCDClearReg
 * Description   : Set registers to 0 for hardware TCD of eDMA channel.
 *
 *END*/
void EDMA_HAL_HTCDClearReg(DMA_Type * base,uint32_t channel)
{
    2a38:	eb00 1141 	add.w	r1, r0, r1, lsl #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:191
    DMA_WR_SADDR(base, channel, 0U);
    2a3c:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    2a40:	2300      	movs	r3, #0
    2a42:	6013      	str	r3, [r2, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:192
    DMA_WR_SOFF(base, channel, 0U);
    2a44:	f241 0204 	movw	r2, #4100	; 0x1004
    2a48:	528b      	strh	r3, [r1, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:193
    DMA_WR_ATTR(base, channel, 0U);
    2a4a:	f241 0206 	movw	r2, #4102	; 0x1006
    2a4e:	528b      	strh	r3, [r1, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:194
    DMA_WR_NBYTES_MLNO(base, channel, 0U);
    2a50:	f241 0208 	movw	r2, #4104	; 0x1008
    2a54:	1888      	adds	r0, r1, r2
    2a56:	508b      	str	r3, [r1, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:195
    DMA_WR_SLAST(base, channel, 0U);
    2a58:	6043      	str	r3, [r0, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:196
    DMA_WR_DADDR(base, channel, 0U);
    2a5a:	f241 0010 	movw	r0, #4112	; 0x1010
    2a5e:	180a      	adds	r2, r1, r0
    2a60:	500b      	str	r3, [r1, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:199
    DMA_WR_DOFF(base, channel, 0U);
    DMA_WR_CITER_ELINKNO(base, channel, 0U);
    DMA_WR_DLAST_SGA(base, channel, 0U);
    2a62:	f241 0018 	movw	r0, #4120	; 0x1018
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:197
    DMA_WR_SOFF(base, channel, 0U);
    DMA_WR_ATTR(base, channel, 0U);
    DMA_WR_NBYTES_MLNO(base, channel, 0U);
    DMA_WR_SLAST(base, channel, 0U);
    DMA_WR_DADDR(base, channel, 0U);
    DMA_WR_DOFF(base, channel, 0U);
    2a66:	8093      	strh	r3, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:198
    DMA_WR_CITER_ELINKNO(base, channel, 0U);
    2a68:	80d3      	strh	r3, [r2, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:199
    DMA_WR_DLAST_SGA(base, channel, 0U);
    2a6a:	180a      	adds	r2, r1, r0
    2a6c:	500b      	str	r3, [r1, r0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:200
    DMA_WR_CSR(base, channel, 0U);
    2a6e:	8093      	strh	r3, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:201
    DMA_WR_BITER_ELINKNO(base, channel, 0U);
    2a70:	80d3      	strh	r3, [r2, #6]
    2a72:	4770      	bx	lr

00002a74 <EDMA_HAL_Init>:
EDMA_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:44
 * Function Name : EDMA_HAL_Init
 * Description   : Initializes eDMA module to known state.
 *
 *END*/
void EDMA_HAL_Init(DMA_Type * base)
{
    2a74:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:48
    uint32_t i;

     /** Clear the bit of CR register */
    DMA_BWR_CR_CLM(base, 0U);
    2a76:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    2a7a:	015b      	lsls	r3, r3, #5
    2a7c:	2100      	movs	r1, #0
    2a7e:	6199      	str	r1, [r3, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:44
 * Function Name : EDMA_HAL_Init
 * Description   : Initializes eDMA module to known state.
 *
 *END*/
void EDMA_HAL_Init(DMA_Type * base)
{
    2a80:	4605      	mov	r5, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:49
    uint32_t i;

     /** Clear the bit of CR register */
    DMA_BWR_CR_CLM(base, 0U);
    DMA_BWR_CR_CX(base, 0U);
    2a82:	6459      	str	r1, [r3, #68]	; 0x44
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:60
#if (FSL_FEATURE_EDMA_CHANNEL_GROUP_COUNT > 1)
    EDMA_HAL_SetGroupArbitrationMode(base,kEDMAGroupArbitrationFixedPriority);
    EDMA_HAL_SetGroupPriority(base,kEDMAGroup0PriorityHighGroup1PriorityLow);
#endif

    for (i = 0; i < FSL_FEATURE_EDMA_MODULE_CHANNEL; i++)
    2a84:	460c      	mov	r4, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:50
    uint32_t i;

     /** Clear the bit of CR register */
    DMA_BWR_CR_CLM(base, 0U);
    DMA_BWR_CR_CX(base, 0U);
    DMA_BWR_CR_ECX(base, 0U);
    2a86:	6419      	str	r1, [r3, #64]	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:51
    DMA_BWR_CR_EDBG(base, 0U);
    2a88:	6059      	str	r1, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:52
    DMA_BWR_CR_EMLM(base, 0U);
    2a8a:	61d9      	str	r1, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:53
    DMA_BWR_CR_ERCA(base, 0U);
    2a8c:	6099      	str	r1, [r3, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:62 (discriminator 2)
    EDMA_HAL_SetGroupPriority(base,kEDMAGroup0PriorityHighGroup1PriorityLow);
#endif

    for (i = 0; i < FSL_FEATURE_EDMA_MODULE_CHANNEL; i++)
    {
        EDMA_HAL_HTCDClearReg(base, i);
    2a8e:	4621      	mov	r1, r4
    2a90:	4628      	mov	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:60 (discriminator 2)
#if (FSL_FEATURE_EDMA_CHANNEL_GROUP_COUNT > 1)
    EDMA_HAL_SetGroupArbitrationMode(base,kEDMAGroupArbitrationFixedPriority);
    EDMA_HAL_SetGroupPriority(base,kEDMAGroup0PriorityHighGroup1PriorityLow);
#endif

    for (i = 0; i < FSL_FEATURE_EDMA_MODULE_CHANNEL; i++)
    2a92:	3401      	adds	r4, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:62 (discriminator 2)
    {
        EDMA_HAL_HTCDClearReg(base, i);
    2a94:	f7ff ffd0 	bl	2a38 <EDMA_HAL_HTCDClearReg>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:60 (discriminator 2)
#if (FSL_FEATURE_EDMA_CHANNEL_GROUP_COUNT > 1)
    EDMA_HAL_SetGroupArbitrationMode(base,kEDMAGroupArbitrationFixedPriority);
    EDMA_HAL_SetGroupPriority(base,kEDMAGroup0PriorityHighGroup1PriorityLow);
#endif

    for (i = 0; i < FSL_FEATURE_EDMA_MODULE_CHANNEL; i++)
    2a98:	2c10      	cmp	r4, #16
    2a9a:	d1f8      	bne.n	2a8e <EDMA_HAL_Init+0x1a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:64
    {
        EDMA_HAL_HTCDClearReg(base, i);
    }
}
    2a9c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002aa0 <EDMA_HAL_HTCDSetAttribute>:
EDMA_HAL_HTCDSetAttribute():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:215
void EDMA_HAL_HTCDSetAttribute(
                DMA_Type * base, uint32_t channel,
                edma_modulo_t srcModulo, edma_modulo_t destModulo,
                edma_transfer_size_t srcTransferSize, edma_transfer_size_t destTransferSize)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2aa0:	290f      	cmp	r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:214
 *END*/
void EDMA_HAL_HTCDSetAttribute(
                DMA_Type * base, uint32_t channel,
                edma_modulo_t srcModulo, edma_modulo_t destModulo,
                edma_transfer_size_t srcTransferSize, edma_transfer_size_t destTransferSize)
{
    2aa2:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:215
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2aa4:	d905      	bls.n	2ab2 <EDMA_HAL_HTCDSetAttribute+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:215 (discriminator 1)
    2aa6:	480d      	ldr	r0, [pc, #52]	; (2adc <EDMA_HAL_HTCDSetAttribute+0x3c>)
    2aa8:	4a0d      	ldr	r2, [pc, #52]	; (2ae0 <EDMA_HAL_HTCDSetAttribute+0x40>)
    2aaa:	4b0e      	ldr	r3, [pc, #56]	; (2ae4 <EDMA_HAL_HTCDSetAttribute+0x44>)
    2aac:	21d7      	movs	r1, #215	; 0xd7
    2aae:	f003 f9cb 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:217

    DMA_WR_ATTR(base, channel,
    2ab2:	f89d 5010 	ldrb.w	r5, [sp, #16]
    2ab6:	f89d 4014 	ldrb.w	r4, [sp, #20]
    2aba:	022d      	lsls	r5, r5, #8
    2abc:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
    2ac0:	f004 0407 	and.w	r4, r4, #7
    2ac4:	432c      	orrs	r4, r5
    2ac6:	00db      	lsls	r3, r3, #3
    2ac8:	ea44 22c2 	orr.w	r2, r4, r2, lsl #11
    2acc:	b2db      	uxtb	r3, r3
    2ace:	3180      	adds	r1, #128	; 0x80
    2ad0:	431a      	orrs	r2, r3
    2ad2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    2ad6:	b292      	uxth	r2, r2
    2ad8:	80c2      	strh	r2, [r0, #6]
    2ada:	bd38      	pop	{r3, r4, r5, pc}
    2adc:	000073ed 	.word	0x000073ed
    2ae0:	000074c1 	.word	0x000074c1
    2ae4:	00007450 	.word	0x00007450

00002ae8 <EDMA_HAL_HTCDSetNbytes>:
EDMA_HAL_HTCDSetNbytes():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:230
 * Description   : Configures the nbytes for eDMA channel.
 *
 *END*/
void EDMA_HAL_HTCDSetNbytes(DMA_Type * base, uint32_t channel, uint32_t nbytes)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2ae8:	290f      	cmp	r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:229
 * Function Name : EDMA_HAL_HTCDSetNbytes
 * Description   : Configures the nbytes for eDMA channel.
 *
 *END*/
void EDMA_HAL_HTCDSetNbytes(DMA_Type * base, uint32_t channel, uint32_t nbytes)
{
    2aea:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:230
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2aec:	d905      	bls.n	2afa <EDMA_HAL_HTCDSetNbytes+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:230 (discriminator 1)
    2aee:	4816      	ldr	r0, [pc, #88]	; (2b48 <EDMA_HAL_HTCDSetNbytes+0x60>)
    2af0:	4a16      	ldr	r2, [pc, #88]	; (2b4c <EDMA_HAL_HTCDSetNbytes+0x64>)
    2af2:	4b17      	ldr	r3, [pc, #92]	; (2b50 <EDMA_HAL_HTCDSetNbytes+0x68>)
    2af4:	21e6      	movs	r1, #230	; 0xe6
    2af6:	f003 f9a7 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:232

    if (DMA_BRD_CR_EMLM(base))
    2afa:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    2afe:	015b      	lsls	r3, r3, #5
    2b00:	0149      	lsls	r1, r1, #5
    2b02:	69dc      	ldr	r4, [r3, #28]
    2b04:	f241 0308 	movw	r3, #4104	; 0x1008
    2b08:	b1dc      	cbz	r4, 2b42 <EDMA_HAL_HTCDSetNbytes+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:234
    {
        if (!(DMA_BRD_NBYTES_MLOFFNO_SMLOE(base, channel) ||
    2b0a:	4c12      	ldr	r4, [pc, #72]	; (2b54 <EDMA_HAL_HTCDSetNbytes+0x6c>)
    2b0c:	1845      	adds	r5, r0, r1
    2b0e:	442c      	add	r4, r5
    2b10:	0164      	lsls	r4, r4, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:237
                                 DMA_BRD_NBYTES_MLOFFNO_DMLOE(base, channel)))
        {
            DMA_BWR_NBYTES_MLOFFNO_NBYTES(base, channel, nbytes);
    2b12:	4408      	add	r0, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:234
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);

    if (DMA_BRD_CR_EMLM(base))
    {
        if (!(DMA_BRD_NBYTES_MLOFFNO_SMLOE(base, channel) ||
    2b14:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    2b16:	b945      	cbnz	r5, 2b2a <EDMA_HAL_HTCDSetNbytes+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:235 (discriminator 1)
                                 DMA_BRD_NBYTES_MLOFFNO_DMLOE(base, channel)))
    2b18:	6fa4      	ldr	r4, [r4, #120]	; 0x78
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:234 (discriminator 1)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);

    if (DMA_BRD_CR_EMLM(base))
    {
        if (!(DMA_BRD_NBYTES_MLOFFNO_SMLOE(base, channel) ||
    2b1a:	b934      	cbnz	r4, 2b2a <EDMA_HAL_HTCDSetNbytes+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:237
                                 DMA_BRD_NBYTES_MLOFFNO_DMLOE(base, channel)))
        {
            DMA_BWR_NBYTES_MLOFFNO_NBYTES(base, channel, nbytes);
    2b1c:	58c1      	ldr	r1, [r0, r3]
    2b1e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
    2b22:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
    2b26:	430a      	orrs	r2, r1
    2b28:	e00c      	b.n	2b44 <EDMA_HAL_HTCDSetNbytes+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:241
        }
        else
        {
            DMA_BWR_NBYTES_MLOFFYES_NBYTES(base, channel, nbytes);
    2b2a:	f241 0408 	movw	r4, #4104	; 0x1008
    2b2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    2b32:	5903      	ldr	r3, [r0, r4]
    2b34:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    2b38:	f023 0303 	bic.w	r3, r3, #3
    2b3c:	4313      	orrs	r3, r2
    2b3e:	5103      	str	r3, [r0, r4]
    2b40:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:247
        }

    }
    else
    {
        DMA_WR_NBYTES_MLNO(base, channel, nbytes);
    2b42:	4408      	add	r0, r1
    2b44:	50c2      	str	r2, [r0, r3]
    2b46:	bd38      	pop	{r3, r4, r5, pc}
    2b48:	000073ed 	.word	0x000073ed
    2b4c:	000074db 	.word	0x000074db
    2b50:	00007450 	.word	0x00007450
    2b54:	02101008 	.word	0x02101008

00002b58 <EDMA_HAL_HTCDSetScatterGatherLink>:
EDMA_HAL_HTCDSetScatterGatherLink():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:307
 *
 *END*/
void EDMA_HAL_HTCDSetScatterGatherLink(
                DMA_Type * base, uint32_t channel, edma_software_tcd_t *stcd)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2b58:	290f      	cmp	r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:306
 * for the hardware TCD.
 *
 *END*/
void EDMA_HAL_HTCDSetScatterGatherLink(
                DMA_Type * base, uint32_t channel, edma_software_tcd_t *stcd)
{
    2b5a:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:307
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2b5c:	d906      	bls.n	2b6c <EDMA_HAL_HTCDSetScatterGatherLink+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:307 (discriminator 1)
    2b5e:	4809      	ldr	r0, [pc, #36]	; (2b84 <EDMA_HAL_HTCDSetScatterGatherLink+0x2c>)
    2b60:	4a09      	ldr	r2, [pc, #36]	; (2b88 <EDMA_HAL_HTCDSetScatterGatherLink+0x30>)
    2b62:	4b0a      	ldr	r3, [pc, #40]	; (2b8c <EDMA_HAL_HTCDSetScatterGatherLink+0x34>)
    2b64:	f240 1133 	movw	r1, #307	; 0x133
    2b68:	f003 f96e 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:308
    DMA_BWR_CSR_ESG(base, channel, true);
    2b6c:	0149      	lsls	r1, r1, #5
    2b6e:	4b08      	ldr	r3, [pc, #32]	; (2b90 <EDMA_HAL_HTCDSetScatterGatherLink+0x38>)
    2b70:	1844      	adds	r4, r0, r1
    2b72:	4423      	add	r3, r4
    2b74:	015b      	lsls	r3, r3, #5
    2b76:	2401      	movs	r4, #1
    2b78:	821c      	strh	r4, [r3, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:309
    DMA_WR_DLAST_SGA (base, channel, (uint32_t)stcd);
    2b7a:	4401      	add	r1, r0
    2b7c:	f241 0318 	movw	r3, #4120	; 0x1018
    2b80:	50ca      	str	r2, [r1, r3]
    2b82:	bd10      	pop	{r4, pc}
    2b84:	000073ed 	.word	0x000073ed
    2b88:	00007523 	.word	0x00007523
    2b8c:	00007450 	.word	0x00007450
    2b90:	0210101c 	.word	0x0210101c

00002b94 <EDMA_HAL_HTCDSetChannelMinorLink>:
EDMA_HAL_HTCDSetChannelMinorLink():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:321
 *
 *END*/
void EDMA_HAL_HTCDSetChannelMinorLink(
                DMA_Type * base, uint32_t channel, uint32_t linkChannel, bool enable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2b94:	290f      	cmp	r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:320
 * Description   : Set Channel minor link for hardware TCD.
 *
 *END*/
void EDMA_HAL_HTCDSetChannelMinorLink(
                DMA_Type * base, uint32_t channel, uint32_t linkChannel, bool enable)
{
    2b96:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:321
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2b98:	d906      	bls.n	2ba8 <EDMA_HAL_HTCDSetChannelMinorLink+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:321 (discriminator 1)
    2b9a:	4818      	ldr	r0, [pc, #96]	; (2bfc <EDMA_HAL_HTCDSetChannelMinorLink+0x68>)
    2b9c:	4a18      	ldr	r2, [pc, #96]	; (2c00 <EDMA_HAL_HTCDSetChannelMinorLink+0x6c>)
    2b9e:	4b19      	ldr	r3, [pc, #100]	; (2c04 <EDMA_HAL_HTCDSetChannelMinorLink+0x70>)
    2ba0:	f240 1141 	movw	r1, #321	; 0x141
    2ba4:	f003 f950 	bl	5e48 <__assert_func>
    2ba8:	0149      	lsls	r1, r1, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:325

    if (enable)
    {
        DMA_BWR_BITER_ELINKYES_ELINK(base, channel, enable);
    2baa:	1844      	adds	r4, r0, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:323
void EDMA_HAL_HTCDSetChannelMinorLink(
                DMA_Type * base, uint32_t channel, uint32_t linkChannel, bool enable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);

    if (enable)
    2bac:	b1eb      	cbz	r3, 2bea <EDMA_HAL_HTCDSetChannelMinorLink+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:325
    {
        DMA_BWR_BITER_ELINKYES_ELINK(base, channel, enable);
    2bae:	4b16      	ldr	r3, [pc, #88]	; (2c08 <EDMA_HAL_HTCDSetChannelMinorLink+0x74>)
    2bb0:	4423      	add	r3, r4
    2bb2:	015b      	lsls	r3, r3, #5
    2bb4:	2501      	movs	r5, #1
    2bb6:	879d      	strh	r5, [r3, #60]	; 0x3c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:326
        DMA_BWR_BITER_ELINKYES_LINKCH(base, channel, linkChannel);
    2bb8:	4623      	mov	r3, r4
    2bba:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    2bbe:	0252      	lsls	r2, r2, #9
    2bc0:	8be6      	ldrh	r6, [r4, #30]
    2bc2:	b2b6      	uxth	r6, r6
    2bc4:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
    2bc8:	f426 56f0 	bic.w	r6, r6, #7680	; 0x1e00
    2bcc:	4316      	orrs	r6, r2
    2bce:	83e6      	strh	r6, [r4, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:327
        DMA_BWR_CITER_ELINKYES_ELINK(base, channel, enable);
    2bd0:	4c0e      	ldr	r4, [pc, #56]	; (2c0c <EDMA_HAL_HTCDSetChannelMinorLink+0x78>)
    2bd2:	441c      	add	r4, r3
    2bd4:	0164      	lsls	r4, r4, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:328
        DMA_BWR_CITER_ELINKYES_LINKCH(base, channel, linkChannel);
    2bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:327

    if (enable)
    {
        DMA_BWR_BITER_ELINKYES_ELINK(base, channel, enable);
        DMA_BWR_BITER_ELINKYES_LINKCH(base, channel, linkChannel);
        DMA_BWR_CITER_ELINKYES_ELINK(base, channel, enable);
    2bda:	87a5      	strh	r5, [r4, #60]	; 0x3c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:328
        DMA_BWR_CITER_ELINKYES_LINKCH(base, channel, linkChannel);
    2bdc:	8ad9      	ldrh	r1, [r3, #22]
    2bde:	b289      	uxth	r1, r1
    2be0:	f421 51f0 	bic.w	r1, r1, #7680	; 0x1e00
    2be4:	430a      	orrs	r2, r1
    2be6:	82da      	strh	r2, [r3, #22]
    2be8:	bd70      	pop	{r4, r5, r6, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:332
    }
    else
    {
        DMA_BWR_BITER_ELINKNO_ELINK(base, channel, enable);
    2bea:	4a07      	ldr	r2, [pc, #28]	; (2c08 <EDMA_HAL_HTCDSetChannelMinorLink+0x74>)
    2bec:	4422      	add	r2, r4
    2bee:	0152      	lsls	r2, r2, #5
    2bf0:	8793      	strh	r3, [r2, #60]	; 0x3c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:333
        DMA_BWR_CITER_ELINKNO_ELINK(base, channel, enable);
    2bf2:	4a06      	ldr	r2, [pc, #24]	; (2c0c <EDMA_HAL_HTCDSetChannelMinorLink+0x78>)
    2bf4:	4422      	add	r2, r4
    2bf6:	0152      	lsls	r2, r2, #5
    2bf8:	8793      	strh	r3, [r2, #60]	; 0x3c
    2bfa:	bd70      	pop	{r4, r5, r6, pc}
    2bfc:	000073ed 	.word	0x000073ed
    2c00:	00007399 	.word	0x00007399
    2c04:	00007450 	.word	0x00007450
    2c08:	0210101e 	.word	0x0210101e
    2c0c:	02101016 	.word	0x02101016

00002c10 <EDMA_HAL_HTCDSetMajorCount>:
EDMA_HAL_HTCDSetMajorCount():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:346
 * channel link setting.
 *
 *END*/
void EDMA_HAL_HTCDSetMajorCount(DMA_Type * base, uint32_t channel, uint32_t count)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2c10:	290f      	cmp	r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:345
 * Description   : Sets the major iteration count according to minor loop
 * channel link setting.
 *
 *END*/
void EDMA_HAL_HTCDSetMajorCount(DMA_Type * base, uint32_t channel, uint32_t count)
{
    2c12:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:346
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2c14:	d906      	bls.n	2c24 <EDMA_HAL_HTCDSetMajorCount+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:346 (discriminator 1)
    2c16:	4817      	ldr	r0, [pc, #92]	; (2c74 <EDMA_HAL_HTCDSetMajorCount+0x64>)
    2c18:	4a17      	ldr	r2, [pc, #92]	; (2c78 <EDMA_HAL_HTCDSetMajorCount+0x68>)
    2c1a:	4b18      	ldr	r3, [pc, #96]	; (2c7c <EDMA_HAL_HTCDSetMajorCount+0x6c>)
    2c1c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2c20:	f003 f912 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:348

    if (DMA_BRD_BITER_ELINKNO_ELINK(base, channel))
    2c24:	0149      	lsls	r1, r1, #5
    2c26:	4b16      	ldr	r3, [pc, #88]	; (2c80 <EDMA_HAL_HTCDSetMajorCount+0x70>)
    2c28:	1844      	adds	r4, r0, r1
    2c2a:	4423      	add	r3, r4
    2c2c:	015b      	lsls	r3, r3, #5
    2c2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2c30:	b29b      	uxth	r3, r3
    2c32:	b173      	cbz	r3, 2c52 <EDMA_HAL_HTCDSetMajorCount+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:350
    {
        DMA_BWR_BITER_ELINKYES_BITER(base, channel, count);
    2c34:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    2c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2c3c:	8bd9      	ldrh	r1, [r3, #30]
    2c3e:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    2c42:	4311      	orrs	r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:351
        DMA_BWR_CITER_ELINKYES_CITER(base, channel, count);
    2c44:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:350
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);

    if (DMA_BRD_BITER_ELINKNO_ELINK(base, channel))
    {
        DMA_BWR_BITER_ELINKYES_BITER(base, channel, count);
    2c48:	83d9      	strh	r1, [r3, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:351
        DMA_BWR_CITER_ELINKYES_CITER(base, channel, count);
    2c4a:	8ac3      	ldrh	r3, [r0, #22]
    2c4c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    2c50:	e00d      	b.n	2c6e <EDMA_HAL_HTCDSetMajorCount+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:355
    }
    else
    {
        DMA_BWR_BITER_ELINKNO_BITER(base, channel, count);
    2c52:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    2c56:	f3c2 020e 	ubfx	r2, r2, #0, #15
    2c5a:	8bd9      	ldrh	r1, [r3, #30]
    2c5c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    2c60:	4311      	orrs	r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:356
        DMA_BWR_CITER_ELINKNO_CITER(base, channel, count);
    2c62:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:355
        DMA_BWR_BITER_ELINKYES_BITER(base, channel, count);
        DMA_BWR_CITER_ELINKYES_CITER(base, channel, count);
    }
    else
    {
        DMA_BWR_BITER_ELINKNO_BITER(base, channel, count);
    2c66:	83d9      	strh	r1, [r3, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:356
        DMA_BWR_CITER_ELINKNO_CITER(base, channel, count);
    2c68:	8ac3      	ldrh	r3, [r0, #22]
    2c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    2c6e:	431a      	orrs	r2, r3
    2c70:	82c2      	strh	r2, [r0, #22]
    2c72:	bd10      	pop	{r4, pc}
    2c74:	000073ed 	.word	0x000073ed
    2c78:	000073ba 	.word	0x000073ba
    2c7c:	00007450 	.word	0x00007450
    2c80:	0210101e 	.word	0x0210101e

00002c84 <EDMA_HAL_STCDSetAttribute>:
EDMA_HAL_STCDSetAttribute():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:459
 *END*/
void EDMA_HAL_STCDSetAttribute(
                edma_software_tcd_t *stcd,
                edma_modulo_t srcModulo, edma_modulo_t destModulo,
                edma_transfer_size_t srcTransferSize, edma_transfer_size_t destTransferSize)
{
    2c84:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:460
    assert(stcd);
    2c86:	b930      	cbnz	r0, 2c96 <EDMA_HAL_STCDSetAttribute+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:460 (discriminator 1)
    2c88:	480a      	ldr	r0, [pc, #40]	; (2cb4 <EDMA_HAL_STCDSetAttribute+0x30>)
    2c8a:	4a0b      	ldr	r2, [pc, #44]	; (2cb8 <EDMA_HAL_STCDSetAttribute+0x34>)
    2c8c:	4b0b      	ldr	r3, [pc, #44]	; (2cbc <EDMA_HAL_STCDSetAttribute+0x38>)
    2c8e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2c92:	f003 f8d9 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:462

    stcd->ATTR = DMA_ATTR_SMOD(srcModulo) | DMA_ATTR_DMOD(destModulo) |
    2c96:	f89d 4008 	ldrb.w	r4, [sp, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:463
                    DMA_ATTR_SSIZE(srcTransferSize) | DMA_ATTR_DSIZE(destTransferSize);
    2c9a:	021b      	lsls	r3, r3, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:462
                edma_modulo_t srcModulo, edma_modulo_t destModulo,
                edma_transfer_size_t srcTransferSize, edma_transfer_size_t destTransferSize)
{
    assert(stcd);

    stcd->ATTR = DMA_ATTR_SMOD(srcModulo) | DMA_ATTR_DMOD(destModulo) |
    2c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2ca0:	f004 0407 	and.w	r4, r4, #7
    2ca4:	4323      	orrs	r3, r4
    2ca6:	00d2      	lsls	r2, r2, #3
    2ca8:	ea43 21c1 	orr.w	r1, r3, r1, lsl #11
    2cac:	b2d2      	uxtb	r2, r2
    2cae:	4311      	orrs	r1, r2
    2cb0:	80c1      	strh	r1, [r0, #6]
    2cb2:	bd10      	pop	{r4, pc}
    2cb4:	000073ed 	.word	0x000073ed
    2cb8:	000074f2 	.word	0x000074f2
    2cbc:	0000747a 	.word	0x0000747a

00002cc0 <EDMA_HAL_STCDSetNbytes>:
EDMA_HAL_STCDSetNbytes():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:473
 * Function Name : EDMA_HAL_STCDSetNbytes
 * Description   : Configures the nbytes for software TCD
 *
 *END*/
void EDMA_HAL_STCDSetNbytes(DMA_Type * base, edma_software_tcd_t *stcd, uint32_t nbytes)
{
    2cc0:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:474
    assert(stcd);
    2cc2:	b931      	cbnz	r1, 2cd2 <EDMA_HAL_STCDSetNbytes+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:474 (discriminator 1)
    2cc4:	480b      	ldr	r0, [pc, #44]	; (2cf4 <EDMA_HAL_STCDSetNbytes+0x34>)
    2cc6:	4a0c      	ldr	r2, [pc, #48]	; (2cf8 <EDMA_HAL_STCDSetNbytes+0x38>)
    2cc8:	4b0c      	ldr	r3, [pc, #48]	; (2cfc <EDMA_HAL_STCDSetNbytes+0x3c>)
    2cca:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    2cce:	f003 f8bb 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:476

    if (DMA_BRD_CR_EMLM(base))
    2cd2:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    2cd6:	0140      	lsls	r0, r0, #5
    2cd8:	69c3      	ldr	r3, [r0, #28]
    2cda:	b14b      	cbz	r3, 2cf0 <EDMA_HAL_STCDSetNbytes+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:480
    {
        if (stcd->NBYTES | (DMA_NBYTES_MLOFFNO_SMLOE_MASK | DMA_NBYTES_MLOFFNO_DMLOE_MASK))
        {
            stcd->NBYTES = (stcd->NBYTES & ~DMA_NBYTES_MLOFFYES_NBYTES_MASK) |
    2cdc:	688b      	ldr	r3, [r1, #8]
    2cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:481
                            DMA_NBYTES_MLOFFYES_NBYTES(nbytes);
    2ce2:	f3c2 0209 	ubfx	r2, r2, #0, #10
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:480

    if (DMA_BRD_CR_EMLM(base))
    {
        if (stcd->NBYTES | (DMA_NBYTES_MLOFFNO_SMLOE_MASK | DMA_NBYTES_MLOFFNO_DMLOE_MASK))
        {
            stcd->NBYTES = (stcd->NBYTES & ~DMA_NBYTES_MLOFFYES_NBYTES_MASK) |
    2ce6:	f023 0303 	bic.w	r3, r3, #3
    2cea:	4313      	orrs	r3, r2
    2cec:	608b      	str	r3, [r1, #8]
    2cee:	bd08      	pop	{r3, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:491
                             DMA_NBYTES_MLOFFNO_NBYTES(nbytes);
        }
    }
    else
    {
        stcd->NBYTES = (stcd->NBYTES & ~DMA_NBYTES_MLNO_NBYTES_MASK) |
    2cf0:	608a      	str	r2, [r1, #8]
    2cf2:	bd08      	pop	{r3, pc}
    2cf4:	000073ed 	.word	0x000073ed
    2cf8:	0000750c 	.word	0x0000750c
    2cfc:	0000747a 	.word	0x0000747a

00002d00 <EDMA_HAL_STCDSetMajorCount>:
EDMA_HAL_STCDSetMajorCount():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:572
 * Function Name : EDMA_HAL_STCDSetMajorCount
 * Description   : Sets the major iteration count according to minor loop channel link setting.
 *
 *END*/
void EDMA_HAL_STCDSetMajorCount(edma_software_tcd_t *stcd, uint32_t count)
{
    2d00:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:573
    assert(stcd);
    2d02:	b930      	cbnz	r0, 2d12 <EDMA_HAL_STCDSetMajorCount+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:573 (discriminator 1)
    2d04:	4810      	ldr	r0, [pc, #64]	; (2d48 <EDMA_HAL_STCDSetMajorCount+0x48>)
    2d06:	4a11      	ldr	r2, [pc, #68]	; (2d4c <EDMA_HAL_STCDSetMajorCount+0x4c>)
    2d08:	4b11      	ldr	r3, [pc, #68]	; (2d50 <EDMA_HAL_STCDSetMajorCount+0x50>)
    2d0a:	f240 213d 	movw	r1, #573	; 0x23d
    2d0e:	f003 f89b 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:575

    if (stcd->BITER & DMA_BITER_ELINKNO_ELINK_MASK)
    2d12:	8bc2      	ldrh	r2, [r0, #30]
    2d14:	8ac3      	ldrh	r3, [r0, #22]
    2d16:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    2d1a:	d00a      	beq.n	2d32 <EDMA_HAL_STCDSetMajorCount+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:577
    {
        stcd->BITER = (stcd->BITER & ~DMA_BITER_ELINKYES_BITER_MASK) |
    2d1c:	f3c1 0108 	ubfx	r1, r1, #0, #9
    2d20:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    2d24:	430a      	orrs	r2, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:579
                            DMA_BITER_ELINKYES_BITER(count);
        stcd->CITER = (stcd->CITER & ~DMA_CITER_ELINKYES_CITER_MASK) |
    2d26:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:577
{
    assert(stcd);

    if (stcd->BITER & DMA_BITER_ELINKNO_ELINK_MASK)
    {
        stcd->BITER = (stcd->BITER & ~DMA_BITER_ELINKYES_BITER_MASK) |
    2d2a:	83c2      	strh	r2, [r0, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:579
                            DMA_BITER_ELINKYES_BITER(count);
        stcd->CITER = (stcd->CITER & ~DMA_CITER_ELINKYES_CITER_MASK) |
    2d2c:	f023 0301 	bic.w	r3, r3, #1
    2d30:	e006      	b.n	2d40 <EDMA_HAL_STCDSetMajorCount+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:584
                            DMA_CITER_ELINKYES_CITER(count);
    }
    else
    {
        stcd->BITER = (stcd->BITER & ~DMA_BITER_ELINKNO_BITER_MASK) |
    2d32:	f3c1 010e 	ubfx	r1, r1, #0, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:586
                            DMA_BITER_ELINKNO_BITER(count);
        stcd->CITER = (stcd->CITER & ~DMA_CITER_ELINKNO_CITER_MASK) |
    2d36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:584
        stcd->CITER = (stcd->CITER & ~DMA_CITER_ELINKYES_CITER_MASK) |
                            DMA_CITER_ELINKYES_CITER(count);
    }
    else
    {
        stcd->BITER = (stcd->BITER & ~DMA_BITER_ELINKNO_BITER_MASK) |
    2d3a:	83c1      	strh	r1, [r0, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:586
                            DMA_BITER_ELINKNO_BITER(count);
        stcd->CITER = (stcd->CITER & ~DMA_CITER_ELINKNO_CITER_MASK) |
    2d3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2d40:	4319      	orrs	r1, r3
    2d42:	82c1      	strh	r1, [r0, #22]
    2d44:	bd08      	pop	{r3, pc}
    2d46:	bf00      	nop
    2d48:	000073ed 	.word	0x000073ed
    2d4c:	000074a6 	.word	0x000074a6
    2d50:	0000747a 	.word	0x0000747a

00002d54 <EDMA_HAL_PushSTCDToHTCD>:
EDMA_HAL_PushSTCDToHTCD():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:599
 * Description   : Copy the configuration data from the software TCD to hardware TCD.
 *
 *END*/
void EDMA_HAL_PushSTCDToHTCD(DMA_Type * base, uint32_t channel, edma_software_tcd_t *stcd)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2d54:	290f      	cmp	r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:598
 * Function Name : EDMA_HAL_PushSTCDToHTCD
 * Description   : Copy the configuration data from the software TCD to hardware TCD.
 *
 *END*/
void EDMA_HAL_PushSTCDToHTCD(DMA_Type * base, uint32_t channel, edma_software_tcd_t *stcd)
{
    2d56:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:599
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    2d58:	d905      	bls.n	2d66 <EDMA_HAL_PushSTCDToHTCD+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:599 (discriminator 1)
    2d5a:	481c      	ldr	r0, [pc, #112]	; (2dcc <EDMA_HAL_PushSTCDToHTCD+0x78>)
    2d5c:	4a1c      	ldr	r2, [pc, #112]	; (2dd0 <EDMA_HAL_PushSTCDToHTCD+0x7c>)
    2d5e:	4b1d      	ldr	r3, [pc, #116]	; (2dd4 <EDMA_HAL_PushSTCDToHTCD+0x80>)
    2d60:	f240 2157 	movw	r1, #599	; 0x257
    2d64:	e005      	b.n	2d72 <EDMA_HAL_PushSTCDToHTCD+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:600
    assert(stcd);
    2d66:	b932      	cbnz	r2, 2d76 <EDMA_HAL_PushSTCDToHTCD+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:600 (discriminator 1)
    2d68:	4818      	ldr	r0, [pc, #96]	; (2dcc <EDMA_HAL_PushSTCDToHTCD+0x78>)
    2d6a:	4a19      	ldr	r2, [pc, #100]	; (2dd0 <EDMA_HAL_PushSTCDToHTCD+0x7c>)
    2d6c:	4b1a      	ldr	r3, [pc, #104]	; (2dd8 <EDMA_HAL_PushSTCDToHTCD+0x84>)
    2d6e:	f44f 7116 	mov.w	r1, #600	; 0x258
    2d72:	f003 f869 	bl	5e48 <__assert_func>
    2d76:	eb00 1041 	add.w	r0, r0, r1, lsl #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:602

    DMA_WR_SADDR(base, channel, stcd->SADDR);
    2d7a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    2d7e:	6813      	ldr	r3, [r2, #0]
    2d80:	600b      	str	r3, [r1, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:603
    DMA_WR_SOFF(base, channel, stcd->SOFF);
    2d82:	f241 0304 	movw	r3, #4100	; 0x1004
    2d86:	8891      	ldrh	r1, [r2, #4]
    2d88:	52c1      	strh	r1, [r0, r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:604
    DMA_WR_ATTR(base, channel, stcd->ATTR);
    2d8a:	f241 0306 	movw	r3, #4102	; 0x1006
    2d8e:	88d1      	ldrh	r1, [r2, #6]
    2d90:	52c1      	strh	r1, [r0, r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:605
    DMA_WR_NBYTES_MLNO(base, channel, stcd->NBYTES);
    2d92:	f241 0408 	movw	r4, #4104	; 0x1008
    2d96:	6891      	ldr	r1, [r2, #8]
    2d98:	5101      	str	r1, [r0, r4]
    2d9a:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:606
    DMA_WR_SLAST(base, channel, stcd->SLAST);
    2d9e:	68d1      	ldr	r1, [r2, #12]
    2da0:	60d9      	str	r1, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:607
    DMA_WR_DADDR(base, channel, stcd->DADDR);
    2da2:	f241 0410 	movw	r4, #4112	; 0x1010
    2da6:	6911      	ldr	r1, [r2, #16]
    2da8:	5101      	str	r1, [r0, r4]
    2daa:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:608
    DMA_WR_DOFF(base, channel, stcd->DOFF);
    2dae:	8a91      	ldrh	r1, [r2, #20]
    2db0:	8299      	strh	r1, [r3, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:609
    DMA_WR_CITER_ELINKYES(base, channel, stcd->CITER);
    2db2:	8ad1      	ldrh	r1, [r2, #22]
    2db4:	82d9      	strh	r1, [r3, #22]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:610
    DMA_WR_DLAST_SGA(base, channel, stcd->DLAST_SGA);
    2db6:	f241 0418 	movw	r4, #4120	; 0x1018
    2dba:	6991      	ldr	r1, [r2, #24]
    2dbc:	5101      	str	r1, [r0, r4]
    2dbe:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:611
    DMA_WR_CSR(base, channel, stcd->CSR);
    2dc2:	8b91      	ldrh	r1, [r2, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:612
    DMA_WR_BITER_ELINKYES(base, channel, stcd->BITER);
    2dc4:	8bd2      	ldrh	r2, [r2, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:611
    DMA_WR_SLAST(base, channel, stcd->SLAST);
    DMA_WR_DADDR(base, channel, stcd->DADDR);
    DMA_WR_DOFF(base, channel, stcd->DOFF);
    DMA_WR_CITER_ELINKYES(base, channel, stcd->CITER);
    DMA_WR_DLAST_SGA(base, channel, stcd->DLAST_SGA);
    DMA_WR_CSR(base, channel, stcd->CSR);
    2dc6:	8399      	strh	r1, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:612
    DMA_WR_BITER_ELINKYES(base, channel, stcd->BITER);
    2dc8:	83da      	strh	r2, [r3, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:610
    DMA_WR_NBYTES_MLNO(base, channel, stcd->NBYTES);
    DMA_WR_SLAST(base, channel, stcd->SLAST);
    DMA_WR_DADDR(base, channel, stcd->DADDR);
    DMA_WR_DOFF(base, channel, stcd->DOFF);
    DMA_WR_CITER_ELINKYES(base, channel, stcd->CITER);
    DMA_WR_DLAST_SGA(base, channel, stcd->DLAST_SGA);
    2dca:	bd10      	pop	{r4, pc}
    2dcc:	000073ed 	.word	0x000073ed
    2dd0:	000073d5 	.word	0x000073d5
    2dd4:	00007450 	.word	0x00007450
    2dd8:	0000747a 	.word	0x0000747a

00002ddc <EDMA_HAL_STCDSetBasicTransfer>:
EDMA_HAL_STCDSetBasicTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:624
 *
 *END*/
edma_status_t EDMA_HAL_STCDSetBasicTransfer(
            DMA_Type * base, edma_software_tcd_t *stcd, edma_transfer_config_t *config,
            bool enableInt, bool disableDmaRequest)
{
    2ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2dde:	4607      	mov	r7, r0
    2de0:	4615      	mov	r5, r2
    2de2:	461e      	mov	r6, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:625
    assert(stcd);
    2de4:	460c      	mov	r4, r1
    2de6:	b931      	cbnz	r1, 2df6 <EDMA_HAL_STCDSetBasicTransfer+0x1a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:625 (discriminator 1)
    2de8:	4819      	ldr	r0, [pc, #100]	; (2e50 <EDMA_HAL_STCDSetBasicTransfer+0x74>)
    2dea:	4a1a      	ldr	r2, [pc, #104]	; (2e54 <EDMA_HAL_STCDSetBasicTransfer+0x78>)
    2dec:	4b1a      	ldr	r3, [pc, #104]	; (2e58 <EDMA_HAL_STCDSetBasicTransfer+0x7c>)
    2dee:	f240 2171 	movw	r1, #625	; 0x271
    2df2:	f003 f829 	bl	5e48 <__assert_func>
EDMA_HAL_STCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:995
 * @param address The source memory address.
 */
static inline void EDMA_HAL_STCDSetSrcAddr(edma_software_tcd_t *stcd, uint32_t address)
{
    assert(stcd);
    stcd->SADDR = DMA_SADDR_SADDR(address);
    2df6:	6812      	ldr	r2, [r2, #0]
EDMA_HAL_STCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1010
 * @param offset signed-offset for source address.
 */
static inline void EDMA_HAL_STCDSetSrcOffset(edma_software_tcd_t *stcd, int16_t offset)
{
    assert(stcd);
    stcd->SOFF = DMA_SOFF_SOFF(offset);
    2df8:	896b      	ldrh	r3, [r5, #10]
EDMA_HAL_STCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:995
 * @param address The source memory address.
 */
static inline void EDMA_HAL_STCDSetSrcAddr(edma_software_tcd_t *stcd, uint32_t address)
{
    assert(stcd);
    stcd->SADDR = DMA_SADDR_SADDR(address);
    2dfa:	600a      	str	r2, [r1, #0]
EDMA_HAL_STCDSetBasicTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:633
    EDMA_HAL_STCDSetDestAddr(stcd, config->destAddr);

    EDMA_HAL_STCDSetSrcOffset(stcd, config->srcOffset);
    EDMA_HAL_STCDSetDestOffset(stcd, config->destOffset);

    EDMA_HAL_STCDSetAttribute(stcd, config->srcModulo, config->destModulo,
    2dfc:	7a68      	ldrb	r0, [r5, #9]
EDMA_HAL_STCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1086
 * @param address The pointer to the destination addresss.
 */
static inline void EDMA_HAL_STCDSetDestAddr(edma_software_tcd_t *stcd, uint32_t address)
{
    assert(stcd);
    stcd->DADDR = DMA_DADDR_DADDR(address);
    2dfe:	686a      	ldr	r2, [r5, #4]
EDMA_HAL_STCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1010
 * @param offset signed-offset for source address.
 */
static inline void EDMA_HAL_STCDSetSrcOffset(edma_software_tcd_t *stcd, int16_t offset)
{
    assert(stcd);
    stcd->SOFF = DMA_SOFF_SOFF(offset);
    2e00:	808b      	strh	r3, [r1, #4]
EDMA_HAL_STCDSetDestOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1101
 * @param offset signed-offset
 */
static inline void EDMA_HAL_STCDSetDestOffset(edma_software_tcd_t *stcd, int16_t offset)
{
    assert(stcd);
    stcd->DOFF = DMA_DOFF_DOFF(offset);
    2e02:	89ab      	ldrh	r3, [r5, #12]
EDMA_HAL_STCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1086
 * @param address The pointer to the destination addresss.
 */
static inline void EDMA_HAL_STCDSetDestAddr(edma_software_tcd_t *stcd, uint32_t address)
{
    assert(stcd);
    stcd->DADDR = DMA_DADDR_DADDR(address);
    2e04:	610a      	str	r2, [r1, #16]
EDMA_HAL_STCDSetDestOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1101
 * @param offset signed-offset
 */
static inline void EDMA_HAL_STCDSetDestOffset(edma_software_tcd_t *stcd, int16_t offset)
{
    assert(stcd);
    stcd->DOFF = DMA_DOFF_DOFF(offset);
    2e06:	828b      	strh	r3, [r1, #20]
EDMA_HAL_STCDSetBasicTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:633
    2e08:	7e6a      	ldrb	r2, [r5, #25]
    2e0a:	7a2b      	ldrb	r3, [r5, #8]
    2e0c:	7e29      	ldrb	r1, [r5, #24]
    2e0e:	9000      	str	r0, [sp, #0]
    2e10:	4620      	mov	r0, r4
    2e12:	f7ff ff37 	bl	2c84 <EDMA_HAL_STCDSetAttribute>
EDMA_HAL_STCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1074
 * @param size adjustment value
 */
static inline void EDMA_HAL_STCDSetSrcLastAdjust(edma_software_tcd_t *stcd, int32_t size)
{
    assert(stcd);
    stcd->SLAST = (stcd->SLAST & ~DMA_SLAST_SLAST_MASK) | DMA_SLAST_SLAST(size);
    2e16:	692a      	ldr	r2, [r5, #16]
    2e18:	60e2      	str	r2, [r4, #12]
EDMA_HAL_STCDSetDestLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1118
 */
static inline void EDMA_HAL_STCDSetDestLastAdjust(
                edma_software_tcd_t *stcd, uint32_t adjust)
{
    assert(stcd);
    stcd->DLAST_SGA = DMA_DLAST_SGA_DLASTSGA(adjust);
    2e1a:	696a      	ldr	r2, [r5, #20]
    2e1c:	61a2      	str	r2, [r4, #24]
EDMA_HAL_STCDSetBasicTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:638
            config->srcTransferSize, config->destTransferSize);

    EDMA_HAL_STCDSetSrcLastAdjust(stcd, config->srcLastAddrAdjust);
    EDMA_HAL_STCDSetDestLastAdjust(stcd, config->destLastAddrAdjust);
    EDMA_HAL_STCDSetNbytes(base, stcd, config->minorLoopCount);
    2e1e:	4638      	mov	r0, r7
    2e20:	4621      	mov	r1, r4
    2e22:	69ea      	ldr	r2, [r5, #28]
    2e24:	f7ff ff4c 	bl	2cc0 <EDMA_HAL_STCDSetNbytes>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:639
    EDMA_HAL_STCDSetMajorCount(stcd, config->majorLoopCount);
    2e28:	4620      	mov	r0, r4
    2e2a:	8c29      	ldrh	r1, [r5, #32]
    2e2c:	f7ff ff68 	bl	2d00 <EDMA_HAL_STCDSetMajorCount>
EDMA_HAL_STCDSetIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1237
 * @param enable Enable (true) /Disable (false) interrupt after TCD done.
 */
static inline void EDMA_HAL_STCDSetIntCmd(edma_software_tcd_t *stcd, bool enable)
{
    assert(stcd);
    stcd->CSR = (stcd->CSR & ~DMA_CSR_INTMAJOR_MASK) | ((uint32_t)enable << DMA_CSR_INTMAJOR_SHIFT);
    2e30:	8ba3      	ldrh	r3, [r4, #28]
    2e32:	f023 0302 	bic.w	r3, r3, #2
    2e36:	ea43 0646 	orr.w	r6, r3, r6, lsl #1
EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1203
 */
static inline void EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd(
                edma_software_tcd_t *stcd, bool disable)
{
    assert(stcd);
    stcd->CSR = (stcd->CSR & ~DMA_CSR_DREQ_MASK) | ((uint32_t)disable << DMA_CSR_DREQ_SHIFT);
    2e3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2e3e:	f026 0608 	bic.w	r6, r6, #8
    2e42:	ea46 06c3 	orr.w	r6, r6, r3, lsl #3
EDMA_HAL_STCDSetBasicTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:644

    EDMA_HAL_STCDSetIntCmd(stcd, enableInt);
    EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd(stcd, disableDmaRequest);
    return kStatus_EDMA_Success;
}
    2e46:	2000      	movs	r0, #0
EDMA_HAL_STCDSetDisableDmaRequestAfterTCDDoneCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:1203
    2e48:	83a6      	strh	r6, [r4, #28]
EDMA_HAL_STCDSetBasicTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/edma/fsl_edma_hal.c:644
    2e4a:	b003      	add	sp, #12
    2e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e4e:	bf00      	nop
    2e50:	000073ed 	.word	0x000073ed
    2e54:	00007488 	.word	0x00007488
    2e58:	0000747a 	.word	0x0000747a

00002e5c <DSPI_HAL_Init>:
DSPI_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:56
 * This function basically resets all of the DSPI registers to their default setting including
 * disabling the module.
 *
 *END*/
void DSPI_HAL_Init(SPI_Type * base)
{
    2e5c:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:58
     /** first, make sure the module is enabled to allow writes to certain registers*/
    SPI_BWR_MCR_MDIS(base, 0);
    2e5e:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    2e62:	015b      	lsls	r3, r3, #5
    2e64:	2200      	movs	r2, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:61

     /** Halt all transfers*/
    SPI_BWR_MCR_HALT(base, 1);
    2e66:	2101      	movs	r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:65

     /** set the registers to their default states*/
     /** clear the status bits (write-1-to-clear)*/
    SPI_WR_SR(base, SPI_SR_TCF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TFUF_MASK | SPI_SR_TFFF_MASK |
    2e68:	4c08      	ldr	r4, [pc, #32]	; (2e8c <DSPI_HAL_Init+0x30>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:58
 *
 *END*/
void DSPI_HAL_Init(SPI_Type * base)
{
     /** first, make sure the module is enabled to allow writes to certain registers*/
    SPI_BWR_MCR_MDIS(base, 0);
    2e6a:	639a      	str	r2, [r3, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:61

     /** Halt all transfers*/
    SPI_BWR_MCR_HALT(base, 1);
    2e6c:	6019      	str	r1, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:65

     /** set the registers to their default states*/
     /** clear the status bits (write-1-to-clear)*/
    SPI_WR_SR(base, SPI_SR_TCF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TFUF_MASK | SPI_SR_TFFF_MASK |
    2e6e:	62c4      	str	r4, [r0, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:69
              SPI_SR_RFOF_MASK | SPI_SR_RFDF_MASK);

    SPI_WR_TCR(base, 0);
    SPI_WR_CTAR(base, 0, 0x78000000);  /** CTAR0 */
    2e70:	f04f 44f0 	mov.w	r4, #2013265920	; 0x78000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:68
     /** set the registers to their default states*/
     /** clear the status bits (write-1-to-clear)*/
    SPI_WR_SR(base, SPI_SR_TCF_MASK | SPI_SR_EOQF_MASK | SPI_SR_TFUF_MASK | SPI_SR_TFFF_MASK |
              SPI_SR_RFOF_MASK | SPI_SR_RFDF_MASK);

    SPI_WR_TCR(base, 0);
    2e74:	6082      	str	r2, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:69
    SPI_WR_CTAR(base, 0, 0x78000000);  /** CTAR0 */
    2e76:	60c4      	str	r4, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:70
    SPI_WR_CTAR(base, 1, 0x78000000);  /** CTAR1 */
    2e78:	6104      	str	r4, [r0, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:71
    SPI_WR_RSER(base, 0);
    2e7a:	6302      	str	r2, [r0, #48]	; 0x30
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:76

     /** Clear out PUSHR register. Since DSPI is halted, nothing should be transmitted. Be
     * sure the flush the FIFOs afterwards
     */
    SPI_WR_PUSHR(base, 0);
    2e7c:	6342      	str	r2, [r0, #52]	; 0x34
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:79

     /** flush the fifos*/
    SPI_BWR_MCR_CLR_TXF(base, true);
    2e7e:	62d9      	str	r1, [r3, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:80
    SPI_BWR_MCR_CLR_RXF(base, true);
    2e80:	6299      	str	r1, [r3, #40]	; 0x28
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:83

     /** Now set MCR to default value, which disables module: set MDIS and HALT, clear other bits */
    SPI_WR_MCR(base, SPI_MCR_MDIS_MASK | SPI_MCR_HALT_MASK);
    2e82:	f244 0301 	movw	r3, #16385	; 0x4001
    2e86:	6003      	str	r3, [r0, #0]
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	bf00      	nop
    2e8c:	9a0a0000 	.word	0x9a0a0000

00002e90 <DSPI_HAL_SetBaudRate>:
DSPI_HAL_SetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:98
 * module source clock (in Hz).
 *
 *END*/
uint32_t DSPI_HAL_SetBaudRate(SPI_Type * base, dspi_ctar_selection_t whichCtar,
                              uint32_t bitsPerSec, uint32_t sourceClockInHz)
{
    2e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e94:	b085      	sub	sp, #20
    2e96:	9101      	str	r1, [sp, #4]
DSPI_HAL_IsMaster():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:313
 * @param base Module base pointer of type SPI_Type.
 * @return Returns true if the module is in master mode or false if the module is in slave mode.
 */
static inline bool DSPI_HAL_IsMaster(SPI_Type * base)
{
    return (bool)SPI_RD_MCR_MSTR(base);
    2e98:	6801      	ldr	r1, [r0, #0]
DSPI_HAL_SetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:98
    2e9a:	9300      	str	r3, [sp, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:100
     /** for master mode configuration, if slave mode detected, return 0*/
    if (!DSPI_HAL_IsMaster(base))
    2e9c:	2900      	cmp	r1, #0
    2e9e:	da5d      	bge.n	2f5c <DSPI_HAL_SetBaudRate+0xcc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:128
    {
        for (scaler = 0; (scaler < 16) && min_diff; scaler++)
        {
            for (dbr = 1; (dbr < 3) && min_diff; dbr++)
            {
                realBaudrate = ((sourceClockInHz * dbr) /
    2ea0:	2400      	movs	r4, #0
    2ea2:	0059      	lsls	r1, r3, #1
    2ea4:	9102      	str	r1, [sp, #8]
    2ea6:	f04f 0801 	mov.w	r8, #1
    2eaa:	f04f 31ff 	mov.w	r1, #4294967295
    2eae:	4627      	mov	r7, r4
    2eb0:	46a4      	mov	ip, r4
    2eb2:	4626      	mov	r6, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:129 (discriminator 1)
                                (s_baudratePrescaler[prescaler] * (s_baudrateScaler[scaler])));
    2eb4:	4d2b      	ldr	r5, [pc, #172]	; (2f64 <DSPI_HAL_SetBaudRate+0xd4>)
    2eb6:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    2eba:	9503      	str	r5, [sp, #12]
    2ebc:	2500      	movs	r5, #0
    2ebe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2f68 <DSPI_HAL_SetBaudRate+0xd8>
    2ec2:	9b03      	ldr	r3, [sp, #12]
    2ec4:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
    2ec8:	fb0a fa03 	mul.w	sl, sl, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:128 (discriminator 1)
    {
        for (scaler = 0; (scaler < 16) && min_diff; scaler++)
        {
            for (dbr = 1; (dbr < 3) && min_diff; dbr++)
            {
                realBaudrate = ((sourceClockInHz * dbr) /
    2ecc:	9b00      	ldr	r3, [sp, #0]
    2ece:	fbb3 f9fa 	udiv	r9, r3, sl
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:134 (discriminator 1)
                                (s_baudratePrescaler[prescaler] * (s_baudrateScaler[scaler])));

                 /** calculate the baud rate difference based on the conditional statement
                 * that states that the calculated baud rate must not exceed the desired baud rate
                 */
                if (baudrate >= realBaudrate)
    2ed2:	454a      	cmp	r2, r9
    2ed4:	d309      	bcc.n	2eea <DSPI_HAL_SetBaudRate+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:136
                {
                    diff = baudrate-realBaudrate;
    2ed6:	ebc9 0b02 	rsb	fp, r9, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:137
                    if (min_diff > diff)
    2eda:	4559      	cmp	r1, fp
    2edc:	d905      	bls.n	2eea <DSPI_HAL_SetBaudRate+0x5a>
    2ede:	4659      	mov	r1, fp
    2ee0:	464c      	mov	r4, r9
    2ee2:	462f      	mov	r7, r5
    2ee4:	46b4      	mov	ip, r6
    2ee6:	f04f 0801 	mov.w	r8, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:126
     /** In all for loops, if min_diff = 0, the exit for loop*/
    for (prescaler = 0; (prescaler < 4) && min_diff; prescaler++)
    {
        for (scaler = 0; (scaler < 16) && min_diff; scaler++)
        {
            for (dbr = 1; (dbr < 3) && min_diff; dbr++)
    2eea:	b171      	cbz	r1, 2f0a <DSPI_HAL_SetBaudRate+0x7a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:128
            {
                realBaudrate = ((sourceClockInHz * dbr) /
    2eec:	9b02      	ldr	r3, [sp, #8]
    2eee:	fbb3 fafa 	udiv	sl, r3, sl
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:134
                                (s_baudratePrescaler[prescaler] * (s_baudrateScaler[scaler])));

                 /** calculate the baud rate difference based on the conditional statement
                 * that states that the calculated baud rate must not exceed the desired baud rate
                 */
                if (baudrate >= realBaudrate)
    2ef2:	4552      	cmp	r2, sl
    2ef4:	d309      	bcc.n	2f0a <DSPI_HAL_SetBaudRate+0x7a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:136
                {
                    diff = baudrate-realBaudrate;
    2ef6:	ebca 0902 	rsb	r9, sl, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:137
                    if (min_diff > diff)
    2efa:	4549      	cmp	r1, r9
    2efc:	d905      	bls.n	2f0a <DSPI_HAL_SetBaudRate+0x7a>
    2efe:	4649      	mov	r1, r9
    2f00:	4654      	mov	r4, sl
    2f02:	462f      	mov	r7, r5
    2f04:	46b4      	mov	ip, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:126
     /** In all for loops, if min_diff = 0, the exit for loop*/
    for (prescaler = 0; (prescaler < 4) && min_diff; prescaler++)
    {
        for (scaler = 0; (scaler < 16) && min_diff; scaler++)
        {
            for (dbr = 1; (dbr < 3) && min_diff; dbr++)
    2f06:	f04f 0802 	mov.w	r8, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:124
    bestBaudrate = 0;  /** required to avoid compilation warning */

     /** In all for loops, if min_diff = 0, the exit for loop*/
    for (prescaler = 0; (prescaler < 4) && min_diff; prescaler++)
    {
        for (scaler = 0; (scaler < 16) && min_diff; scaler++)
    2f0a:	3501      	adds	r5, #1
    2f0c:	2d10      	cmp	r5, #16
    2f0e:	d001      	beq.n	2f14 <DSPI_HAL_SetBaudRate+0x84>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:124 (discriminator 2)
    2f10:	2900      	cmp	r1, #0
    2f12:	d1d4      	bne.n	2ebe <DSPI_HAL_SetBaudRate+0x2e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:122
    bestScaler = 0;
    bestDbr = 1;
    bestBaudrate = 0;  /** required to avoid compilation warning */

     /** In all for loops, if min_diff = 0, the exit for loop*/
    for (prescaler = 0; (prescaler < 4) && min_diff; prescaler++)
    2f14:	3601      	adds	r6, #1
    2f16:	2e04      	cmp	r6, #4
    2f18:	d001      	beq.n	2f1e <DSPI_HAL_SetBaudRate+0x8e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:122 (discriminator 2)
    2f1a:	2900      	cmp	r1, #0
    2f1c:	d1ca      	bne.n	2eb4 <DSPI_HAL_SetBaudRate+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:152
            }
        }
    }

     /** write the best dbr, prescalar, and baud rate scalar to the CTAR */
    SPI_BWR_CTAR_DBR(base, whichCtar, (bestDbr - 1));
    2f1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    2f22:	eb00 0389 	add.w	r3, r0, r9, lsl #2
    2f26:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    2f2a:	330c      	adds	r3, #12
    2f2c:	015b      	lsls	r3, r3, #5
    2f2e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
    2f32:	f108 32ff 	add.w	r2, r8, #4294967295
    2f36:	67da      	str	r2, [r3, #124]	; 0x7c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:153
    SPI_BWR_CTAR_PBR(base, whichCtar, bestPrescaler);
    2f38:	68c2      	ldr	r2, [r0, #12]
    2f3a:	ea4f 430c 	mov.w	r3, ip, lsl #16
    2f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    2f42:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    2f46:	4313      	orrs	r3, r2
    2f48:	60c3      	str	r3, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:154
    SPI_BWR_CTAR_BR(base, whichCtar, bestScaler);
    2f4a:	68c3      	ldr	r3, [r0, #12]
    2f4c:	f007 070f 	and.w	r7, r7, #15
    2f50:	f023 030f 	bic.w	r3, r3, #15
    2f54:	431f      	orrs	r7, r3
    2f56:	60c7      	str	r7, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:157

     /** return the actual calculated baud rate */
    return bestBaudrate;
    2f58:	4620      	mov	r0, r4
    2f5a:	e000      	b.n	2f5e <DSPI_HAL_SetBaudRate+0xce>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:102
                              uint32_t bitsPerSec, uint32_t sourceClockInHz)
{
     /** for master mode configuration, if slave mode detected, return 0*/
    if (!DSPI_HAL_IsMaster(base))
    {
        return 0;
    2f5c:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:158
    SPI_BWR_CTAR_PBR(base, whichCtar, bestPrescaler);
    SPI_BWR_CTAR_BR(base, whichCtar, bestScaler);

     /** return the actual calculated baud rate */
    return bestBaudrate;
}
    2f5e:	b005      	add	sp, #20
    2f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f64:	00007588 	.word	0x00007588
    2f68:	00007548 	.word	0x00007548

00002f6c <DSPI_HAL_SetPcsPolarityMode>:
DSPI_HAL_SetPcsPolarityMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:195
void DSPI_HAL_SetPcsPolarityMode(SPI_Type * base, dspi_which_pcs_config_t pcs,
                                 dspi_pcs_polarity_config_t activeLowOrHigh)
{
    uint32_t temp;

    temp = SPI_RD_MCR_PCSIS(base);
    2f6c:	6803      	ldr	r3, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:197

    if (activeLowOrHigh == kDspiPcs_ActiveLow)
    2f6e:	2a01      	cmp	r2, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:195
void DSPI_HAL_SetPcsPolarityMode(SPI_Type * base, dspi_which_pcs_config_t pcs,
                                 dspi_pcs_polarity_config_t activeLowOrHigh)
{
    uint32_t temp;

    temp = SPI_RD_MCR_PCSIS(base);
    2f70:	f3c3 4305 	ubfx	r3, r3, #16, #6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:206
    else   /** kDspiPcsPolarity_ActiveHigh */
    {
        temp &= ~(unsigned)pcs;
    }

    SPI_BWR_MCR_PCSIS(base, temp);
    2f74:	6802      	ldr	r2, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:199

    temp = SPI_RD_MCR_PCSIS(base);

    if (activeLowOrHigh == kDspiPcs_ActiveLow)
    {
        temp |= pcs;
    2f76:	bf0c      	ite	eq
    2f78:	430b      	orreq	r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:203
    }
    else   /** kDspiPcsPolarity_ActiveHigh */
    {
        temp &= ~(unsigned)pcs;
    2f7a:	438b      	bicne	r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:206
    }

    SPI_BWR_MCR_PCSIS(base, temp);
    2f7c:	041b      	lsls	r3, r3, #16
    2f7e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
    2f82:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
    2f86:	4313      	orrs	r3, r2
    2f88:	6003      	str	r3, [r0, #0]
    2f8a:	4770      	bx	lr

00002f8c <DSPI_HAL_SetFifoCmd>:
DSPI_HAL_SetFifoCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:221
 *
 *END*/
void DSPI_HAL_SetFifoCmd(SPI_Type * base, bool enableTxFifo, bool enableRxFifo)
{
     /** first see if MDIS is set or cleared */
    uint32_t isMdisSet = SPI_RD_MCR_MDIS(base);
    2f8c:	6803      	ldr	r3, [r0, #0]
    2f8e:	f3c3 3380 	ubfx	r3, r3, #14, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:219
 * Note that to disable, the caller must pass in a logic 0 (false) for the particular FIFO
 * configuration.  To enable, the caller must pass in a logic 1 (true).
 *
 *END*/
void DSPI_HAL_SetFifoCmd(SPI_Type * base, bool enableTxFifo, bool enableRxFifo)
{
    2f92:	b530      	push	{r4, r5, lr}
    2f94:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:223
     /** first see if MDIS is set or cleared */
    uint32_t isMdisSet = SPI_RD_MCR_MDIS(base);

    if (isMdisSet)
    2f98:	b113      	cbz	r3, 2fa0 <DSPI_HAL_SetFifoCmd+0x14>
DSPI_HAL_Enable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:248
 *
 * @param base Module base pointer of type SPI_Type.
 */
static inline void DSPI_HAL_Enable(SPI_Type * base)
{
    SPI_BWR_MCR_MDIS(base, 0);
    2f9a:	0144      	lsls	r4, r0, #5
    2f9c:	2500      	movs	r5, #0
    2f9e:	63a5      	str	r5, [r4, #56]	; 0x38
DSPI_HAL_SetFifoCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:233

     /** Note, the bit definition is "disable FIFO", so a "1" would disable. If user wants to enable
     * the FIFOs, they pass in true, which we must logically negate (turn to false) to enable the
     * FIFO
     */
    SPI_BWR_MCR_DIS_TXF(base, !(enableTxFifo == true));
    2fa0:	0140      	lsls	r0, r0, #5
    2fa2:	f081 0101 	eor.w	r1, r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:234
    SPI_BWR_MCR_DIS_RXF(base, !(enableRxFifo == true));
    2fa6:	f082 0201 	eor.w	r2, r2, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:233

     /** Note, the bit definition is "disable FIFO", so a "1" would disable. If user wants to enable
     * the FIFOs, they pass in true, which we must logically negate (turn to false) to enable the
     * FIFO
     */
    SPI_BWR_MCR_DIS_TXF(base, !(enableTxFifo == true));
    2faa:	6341      	str	r1, [r0, #52]	; 0x34
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:234
    SPI_BWR_MCR_DIS_RXF(base, !(enableRxFifo == true));
    2fac:	6302      	str	r2, [r0, #48]	; 0x30
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:237

     /** set MDIS (disable DSPI) if it was set to begin with */
    if (isMdisSet)
    2fae:	b10b      	cbz	r3, 2fb4 <DSPI_HAL_SetFifoCmd+0x28>
DSPI_HAL_Disable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:258
 *
 * @param base Module base pointer of type SPI_Type.
 */
static inline void DSPI_HAL_Disable(SPI_Type * base)
{
    SPI_BWR_MCR_MDIS(base, 1);
    2fb0:	2301      	movs	r3, #1
    2fb2:	6383      	str	r3, [r0, #56]	; 0x38
    2fb4:	bd30      	pop	{r4, r5, pc}

00002fb6 <DSPI_HAL_SetFlushFifoCmd>:
DSPI_HAL_SetFlushFifoCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:251
 * Description   : Flush DSPI fifos.
 *
 *END*/
void DSPI_HAL_SetFlushFifoCmd(SPI_Type * base, bool enableFlushTxFifo, bool enableFlushRxFifo)
{
    SPI_BWR_MCR_CLR_TXF(base, (enableFlushTxFifo == true));
    2fb6:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    2fba:	0140      	lsls	r0, r0, #5
    2fbc:	62c1      	str	r1, [r0, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:252
    SPI_BWR_MCR_CLR_RXF(base, (enableFlushRxFifo == true));
    2fbe:	6282      	str	r2, [r0, #40]	; 0x28
    2fc0:	4770      	bx	lr

00002fc2 <DSPI_HAL_SetDataFormat>:
DSPI_HAL_SetDataFormat():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:276
                                     const dspi_data_format_config_t * config)
{
     /** check bits-per-frame value to make sure it it within the proper range
     * in either master or slave mode
     */
    if ((config->bitsPerFrame < 4) ||
    2fc2:	6813      	ldr	r3, [r2, #0]
    2fc4:	2b03      	cmp	r3, #3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:272
 *
 *END*/
dspi_status_t DSPI_HAL_SetDataFormat(SPI_Type * base,
                                     dspi_ctar_selection_t whichCtar,
                                     const dspi_data_format_config_t * config)
{
    2fc6:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:276
     /** check bits-per-frame value to make sure it it within the proper range
     * in either master or slave mode
     */
    if ((config->bitsPerFrame < 4) ||
    2fc8:	d939      	bls.n	303e <DSPI_HAL_SetDataFormat+0x7c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:276 (discriminator 1)
    2fca:	2b10      	cmp	r3, #16
    2fcc:	d907      	bls.n	2fde <DSPI_HAL_SetDataFormat+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:277
        ((config->bitsPerFrame > 16) && (SPI_RD_MCR_MSTR(base) == 1)) ||
    2fce:	6804      	ldr	r4, [r0, #0]
    2fd0:	2c00      	cmp	r4, #0
    2fd2:	db34      	blt.n	303e <DSPI_HAL_SetDataFormat+0x7c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:277 (discriminator 1)
    2fd4:	2b20      	cmp	r3, #32
    2fd6:	d902      	bls.n	2fde <DSPI_HAL_SetDataFormat+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:281
#if FSL_FEATURE_DSPI_HAS_SEPARATE_TXDATA_CMD_FIFO
        ((config->bitsPerFrame > 16) && (SPI_RD_MCR_MSTR(base) == 0)))
#else
        ((config->bitsPerFrame > 32) && (SPI_RD_MCR_MSTR(base) == 0)))
    2fd8:	6804      	ldr	r4, [r0, #0]
    2fda:	2c00      	cmp	r4, #0
    2fdc:	da2f      	bge.n	303e <DSPI_HAL_SetDataFormat+0x7c>
DSPI_HAL_IsMaster():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:313
 * @param base Module base pointer of type SPI_Type.
 * @return Returns true if the module is in master mode or false if the module is in slave mode.
 */
static inline bool DSPI_HAL_IsMaster(SPI_Type * base)
{
    return (bool)SPI_RD_MCR_MSTR(base);
    2fde:	6804      	ldr	r4, [r0, #0]
DSPI_HAL_SetDataFormat():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:288
    {
        return kStatus_DSPI_InvalidBitCount;
    }

     /** for master mode configuration */
    if (DSPI_HAL_IsMaster(base))
    2fe0:	2c00      	cmp	r4, #0
    2fe2:	ea4f 0481 	mov.w	r4, r1, lsl #2
    2fe6:	4404      	add	r4, r0
    2fe8:	f103 33ff 	add.w	r3, r3, #4294967295
    2fec:	f101 0102 	add.w	r1, r1, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:290
    {
        SPI_BWR_CTAR_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    2ff0:	68e5      	ldr	r5, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:288
    {
        return kStatus_DSPI_InvalidBitCount;
    }

     /** for master mode configuration */
    if (DSPI_HAL_IsMaster(base))
    2ff2:	da13      	bge.n	301c <DSPI_HAL_SetDataFormat+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:290
    {
        SPI_BWR_CTAR_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    2ff4:	06db      	lsls	r3, r3, #27
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:291
        SPI_BWR_CTAR_CPOL(base, whichCtar, config->clkPolarity);
    2ff6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:290
    }

     /** for master mode configuration */
    if (DSPI_HAL_IsMaster(base))
    {
        SPI_BWR_CTAR_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    2ffa:	f025 45f0 	bic.w	r5, r5, #2013265920	; 0x78000000
    2ffe:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:291
        SPI_BWR_CTAR_CPOL(base, whichCtar, config->clkPolarity);
    3002:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:290
    }

     /** for master mode configuration */
    if (DSPI_HAL_IsMaster(base))
    {
        SPI_BWR_CTAR_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    3006:	432b      	orrs	r3, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:291
        SPI_BWR_CTAR_CPOL(base, whichCtar, config->clkPolarity);
    3008:	3004      	adds	r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:290
    }

     /** for master mode configuration */
    if (DSPI_HAL_IsMaster(base))
    {
        SPI_BWR_CTAR_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    300a:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:291
        SPI_BWR_CTAR_CPOL(base, whichCtar, config->clkPolarity);
    300c:	0140      	lsls	r0, r0, #5
    300e:	7913      	ldrb	r3, [r2, #4]
    3010:	6683      	str	r3, [r0, #104]	; 0x68
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:292
        SPI_BWR_CTAR_CPHA(base, whichCtar, config->clkPhase);
    3012:	7953      	ldrb	r3, [r2, #5]
    3014:	6643      	str	r3, [r0, #100]	; 0x64
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:293
        SPI_BWR_CTAR_LSBFE(base, whichCtar, config->direction);
    3016:	7993      	ldrb	r3, [r2, #6]
    3018:	6603      	str	r3, [r0, #96]	; 0x60
    301a:	e00e      	b.n	303a <DSPI_HAL_SetDataFormat+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:298
    }
    else  /** for slave mode configuration */
    {
        SPI_BWR_CTAR_SLAVE_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
        SPI_BWR_CTAR_SLAVE_CPOL(base, whichCtar, config->clkPolarity);
    301c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:297
        SPI_BWR_CTAR_CPHA(base, whichCtar, config->clkPhase);
        SPI_BWR_CTAR_LSBFE(base, whichCtar, config->direction);
    }
    else  /** for slave mode configuration */
    {
        SPI_BWR_CTAR_SLAVE_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    3020:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:298
        SPI_BWR_CTAR_SLAVE_CPOL(base, whichCtar, config->clkPolarity);
    3024:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:297
        SPI_BWR_CTAR_CPHA(base, whichCtar, config->clkPhase);
        SPI_BWR_CTAR_LSBFE(base, whichCtar, config->direction);
    }
    else  /** for slave mode configuration */
    {
        SPI_BWR_CTAR_SLAVE_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    3028:	ea45 63c3 	orr.w	r3, r5, r3, lsl #27
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:298
        SPI_BWR_CTAR_SLAVE_CPOL(base, whichCtar, config->clkPolarity);
    302c:	3004      	adds	r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:297
        SPI_BWR_CTAR_CPHA(base, whichCtar, config->clkPhase);
        SPI_BWR_CTAR_LSBFE(base, whichCtar, config->direction);
    }
    else  /** for slave mode configuration */
    {
        SPI_BWR_CTAR_SLAVE_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
    302e:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:298
        SPI_BWR_CTAR_SLAVE_CPOL(base, whichCtar, config->clkPolarity);
    3030:	0140      	lsls	r0, r0, #5
    3032:	7913      	ldrb	r3, [r2, #4]
    3034:	6683      	str	r3, [r0, #104]	; 0x68
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:299
        SPI_BWR_CTAR_SLAVE_CPHA(base, whichCtar, config->clkPhase);
    3036:	7953      	ldrb	r3, [r2, #5]
    3038:	6643      	str	r3, [r0, #100]	; 0x64
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:301
    }
    return kStatus_DSPI_Success;
    303a:	2000      	movs	r0, #0
    303c:	bd30      	pop	{r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:284
        ((config->bitsPerFrame > 16) && (SPI_RD_MCR_MSTR(base) == 0)))
#else
        ((config->bitsPerFrame > 32) && (SPI_RD_MCR_MSTR(base) == 0)))
#endif
    {
        return kStatus_DSPI_InvalidBitCount;
    303e:	2006      	movs	r0, #6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:302
        SPI_BWR_CTAR_SLAVE_FMSZ(base, whichCtar, (config->bitsPerFrame - 1));
        SPI_BWR_CTAR_SLAVE_CPOL(base, whichCtar, config->clkPolarity);
        SPI_BWR_CTAR_SLAVE_CPHA(base, whichCtar, config->clkPhase);
    }
    return kStatus_DSPI_Success;
}
    3040:	bd30      	pop	{r4, r5, pc}

00003042 <DSPI_HAL_SetDelay>:
DSPI_HAL_SetDelay():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:321
 * This basically allows the user to directly set the prescaler/scaler values if they have
 * pre-calculated them or if they simply wish to manually increment either value.
 *END*/
void DSPI_HAL_SetDelay(SPI_Type * base, dspi_ctar_selection_t whichCtar, uint32_t prescaler,
                       uint32_t scaler, dspi_delay_type_t whichDelay)
{
    3042:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:323
     /** these settings are only relevant in master mode */
    if ((bool)SPI_RD_MCR_MSTR(base))
    3044:	6805      	ldr	r5, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:321
 * This basically allows the user to directly set the prescaler/scaler values if they have
 * pre-calculated them or if they simply wish to manually increment either value.
 *END*/
void DSPI_HAL_SetDelay(SPI_Type * base, dspi_ctar_selection_t whichCtar, uint32_t prescaler,
                       uint32_t scaler, dspi_delay_type_t whichDelay)
{
    3046:	f89d 400c 	ldrb.w	r4, [sp, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:323
     /** these settings are only relevant in master mode */
    if ((bool)SPI_RD_MCR_MSTR(base))
    304a:	2d00      	cmp	r5, #0
    304c:	da37      	bge.n	30be <DSPI_HAL_SetDelay+0x7c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:325
    {
        if (whichDelay == kDspiPcsToSck)
    304e:	2c01      	cmp	r4, #1
    3050:	d10f      	bne.n	3072 <DSPI_HAL_SetDelay+0x30>
    3052:	eb00 0081 	add.w	r0, r0, r1, lsl #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:327
        {
            SPI_BWR_CTAR_PCSSCK(base, whichCtar, prescaler);
    3056:	0592      	lsls	r2, r2, #22
    3058:	68c1      	ldr	r1, [r0, #12]
    305a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    305e:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
    3062:	430a      	orrs	r2, r1
    3064:	60c2      	str	r2, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:328
            SPI_BWR_CTAR_CSSCK(base, whichCtar, scaler);
    3066:	68c2      	ldr	r2, [r0, #12]
    3068:	031b      	lsls	r3, r3, #12
    306a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    306e:	b29b      	uxth	r3, r3
    3070:	e023      	b.n	30ba <DSPI_HAL_SetDelay+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:331
        }

        if (whichDelay == kDspiLastSckToPcs)
    3072:	2c02      	cmp	r4, #2
    3074:	d110      	bne.n	3098 <DSPI_HAL_SetDelay+0x56>
    3076:	eb00 0081 	add.w	r0, r0, r1, lsl #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:333
        {
            SPI_BWR_CTAR_PASC(base, whichCtar, prescaler);
    307a:	0512      	lsls	r2, r2, #20
    307c:	68c1      	ldr	r1, [r0, #12]
    307e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    3082:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
    3086:	430a      	orrs	r2, r1
    3088:	60c2      	str	r2, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:334
            SPI_BWR_CTAR_ASC(base, whichCtar, scaler);
    308a:	68c2      	ldr	r2, [r0, #12]
    308c:	021b      	lsls	r3, r3, #8
    308e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    3092:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3096:	e010      	b.n	30ba <DSPI_HAL_SetDelay+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:337
        }

        if (whichDelay == kDspiAfterTransfer)
    3098:	2c03      	cmp	r4, #3
    309a:	d110      	bne.n	30be <DSPI_HAL_SetDelay+0x7c>
    309c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:339
        {
            SPI_BWR_CTAR_PDT(base, whichCtar, prescaler);
    30a0:	0492      	lsls	r2, r2, #18
    30a2:	68c1      	ldr	r1, [r0, #12]
    30a4:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    30a8:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
    30ac:	430a      	orrs	r2, r1
    30ae:	60c2      	str	r2, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:340
            SPI_BWR_CTAR_DT(base, whichCtar, scaler);
    30b0:	68c2      	ldr	r2, [r0, #12]
    30b2:	011b      	lsls	r3, r3, #4
    30b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
    30b8:	b2db      	uxtb	r3, r3
    30ba:	4313      	orrs	r3, r2
    30bc:	60c3      	str	r3, [r0, #12]
    30be:	bd30      	pop	{r4, r5, pc}

000030c0 <DSPI_HAL_SetTxFifoFillDmaIntMode>:
DSPI_HAL_SetTxFifoFillDmaIntMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:455
 *  DSPI_HAL_SetTxFifoFillDmaIntMode(base, kDspiGenerateIntReq, false); <- to disable
 *
 *END*/
void DSPI_HAL_SetTxFifoFillDmaIntMode(SPI_Type * base, dspi_dma_or_int_mode_t mode, bool enable)
{
    SPI_BWR_RSER_TFFF_DIRS(base, mode);   /** Configure as DMA or interrupt */
    30c0:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    30c4:	3033      	adds	r0, #51	; 0x33
    30c6:	0140      	lsls	r0, r0, #5
    30c8:	6001      	str	r1, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:456
    SPI_BWR_RSER_TFFF_RE(base, (enable == true));   /** Enable or disable the request */
    30ca:	6042      	str	r2, [r0, #4]
    30cc:	4770      	bx	lr

000030ce <DSPI_HAL_SetRxFifoDrainDmaIntMode>:
DSPI_HAL_SetRxFifoDrainDmaIntMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:475
 *  DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateIntReq, false); <- to disable
 *
 *END*/
void DSPI_HAL_SetRxFifoDrainDmaIntMode(SPI_Type * base, dspi_dma_or_int_mode_t mode, bool enable)
{
    SPI_BWR_RSER_RFDF_DIRS(base, mode);   /** Configure as DMA or interrupt */
    30ce:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    30d2:	3032      	adds	r0, #50	; 0x32
    30d4:	0140      	lsls	r0, r0, #5
    30d6:	6001      	str	r1, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:476
    SPI_BWR_RSER_RFDF_RE(base, (enable == true));   /** Enable or disable the request */
    30d8:	6042      	str	r2, [r0, #4]
    30da:	4770      	bx	lr

000030dc <DSPI_HAL_SetIntMode>:
DSPI_HAL_SetIntMode():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:501
 *
 *END*/
void DSPI_HAL_SetIntMode(SPI_Type * base,
                                  dspi_status_and_interrupt_request_t interruptSrc,
                                  bool enable)
{
    30dc:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:504
    uint32_t temp;

    temp = (SPI_RD_RSER(base) & ~(0x1U << interruptSrc)) | ((uint32_t)enable << interruptSrc);
    30de:	2301      	movs	r3, #1
    30e0:	6b04      	ldr	r4, [r0, #48]	; 0x30
    30e2:	408b      	lsls	r3, r1
    30e4:	ea24 0303 	bic.w	r3, r4, r3
    30e8:	408a      	lsls	r2, r1
    30ea:	4313      	orrs	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:505
    SPI_WR_RSER(base, temp);
    30ec:	6303      	str	r3, [r0, #48]	; 0x30
    30ee:	bd10      	pop	{r4, pc}

000030f0 <DSPI_HAL_GetFormattedCommand>:
DSPI_HAL_GetFormattedCommand():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:672
    uint32_t temp;

     /** Format the 16-bit command word according to the PUSHR data register bit field
     * Note, to work around MISRA warnings typecast each variable before the shift
     */
    temp = ((uint32_t)(command->isChipSelectContinuous) << SPI_PUSHR_CONT_SHIFT) |
    30f0:	780b      	ldrb	r3, [r1, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:673
           ((uint32_t)(command->whichCtar) << SPI_PUSHR_CTAS_SHIFT) |
    30f2:	784a      	ldrb	r2, [r1, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:676
           ((uint32_t)(command->whichPcs) << SPI_PUSHR_PCS_SHIFT) |
           ((uint32_t)(command->isEndOfQueue) << SPI_PUSHR_EOQ_SHIFT) |
           ((uint32_t)(command->clearTransferCount) << SPI_PUSHR_CTCNT_SHIFT);
    30f4:	7908      	ldrb	r0, [r1, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:672
    uint32_t temp;

     /** Format the 16-bit command word according to the PUSHR data register bit field
     * Note, to work around MISRA warnings typecast each variable before the shift
     */
    temp = ((uint32_t)(command->isChipSelectContinuous) << SPI_PUSHR_CONT_SHIFT) |
    30f6:	07db      	lsls	r3, r3, #31
    30f8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:674
           ((uint32_t)(command->whichCtar) << SPI_PUSHR_CTAS_SHIFT) |
           ((uint32_t)(command->whichPcs) << SPI_PUSHR_PCS_SHIFT) |
    30fc:	788a      	ldrb	r2, [r1, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:673

     /** Format the 16-bit command word according to the PUSHR data register bit field
     * Note, to work around MISRA warnings typecast each variable before the shift
     */
    temp = ((uint32_t)(command->isChipSelectContinuous) << SPI_PUSHR_CONT_SHIFT) |
           ((uint32_t)(command->whichCtar) << SPI_PUSHR_CTAS_SHIFT) |
    30fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:675
           ((uint32_t)(command->whichPcs) << SPI_PUSHR_PCS_SHIFT) |
           ((uint32_t)(command->isEndOfQueue) << SPI_PUSHR_EOQ_SHIFT) |
    3102:	78ca      	ldrb	r2, [r1, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:674
     /** Format the 16-bit command word according to the PUSHR data register bit field
     * Note, to work around MISRA warnings typecast each variable before the shift
     */
    temp = ((uint32_t)(command->isChipSelectContinuous) << SPI_PUSHR_CONT_SHIFT) |
           ((uint32_t)(command->whichCtar) << SPI_PUSHR_CTAS_SHIFT) |
           ((uint32_t)(command->whichPcs) << SPI_PUSHR_PCS_SHIFT) |
    3104:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dspi/fsl_dspi_hal.c:679
           ((uint32_t)(command->isEndOfQueue) << SPI_PUSHR_EOQ_SHIFT) |
           ((uint32_t)(command->clearTransferCount) << SPI_PUSHR_CTCNT_SHIFT);

    return temp;
}
    3108:	ea43 6080 	orr.w	r0, r3, r0, lsl #26
    310c:	4770      	bx	lr

0000310e <DMAMUX_HAL_Init>:
DMAMUX_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dmamux/fsl_dmamux_hal.c:47
 *END*/
void DMAMUX_HAL_Init(DMAMUX_Type * base)
{
    int i;

    for (i = 0; i < FSL_FEATURE_DMAMUX_MODULE_CHANNEL; i++)
    310e:	2300      	movs	r3, #0
    3110:	18c2      	adds	r2, r0, r3
    3112:	0152      	lsls	r2, r2, #5
    3114:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dmamux/fsl_dmamux_hal.c:49 (discriminator 2)
    {
        DMAMUX_BWR_CHCFG_ENBL(base, i, 0U);
    3118:	2100      	movs	r1, #0
    311a:	7711      	strb	r1, [r2, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dmamux/fsl_dmamux_hal.c:50 (discriminator 2)
        DMAMUX_BWR_CHCFG_SOURCE(base, i, 0U);
    311c:	5cc2      	ldrb	r2, [r0, r3]
    311e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3122:	54c2      	strb	r2, [r0, r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dmamux/fsl_dmamux_hal.c:47 (discriminator 2)
 *END*/
void DMAMUX_HAL_Init(DMAMUX_Type * base)
{
    int i;

    for (i = 0; i < FSL_FEATURE_DMAMUX_MODULE_CHANNEL; i++)
    3124:	3301      	adds	r3, #1
    3126:	2b10      	cmp	r3, #16
    3128:	d1f2      	bne.n	3110 <DMAMUX_HAL_Init+0x2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/dmamux/fsl_dmamux_hal.c:52
    {
        DMAMUX_BWR_CHCFG_ENBL(base, i, 0U);
        DMAMUX_BWR_CHCFG_SOURCE(base, i, 0U);
    }
}
    312a:	4770      	bx	lr

0000312c <ADC16_HAL_Init>:
ADC16_HAL_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:46
 * be cleared in this function.
 *
 *END*/
void ADC16_HAL_Init(ADC_Type * base)
{
    ADC_WR_CFG1(base, 0U);
    312c:	2300      	movs	r3, #0
    312e:	6083      	str	r3, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:47
    ADC_WR_CFG2(base, 0U);
    3130:	60c3      	str	r3, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:48
    ADC_WR_CV1(base, 0U);
    3132:	6183      	str	r3, [r0, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:49
    ADC_WR_CV2(base, 0U);
    3134:	61c3      	str	r3, [r0, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:50
    ADC_WR_SC2(base, 0U);
    3136:	6203      	str	r3, [r0, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:51
    ADC_WR_SC3(base, 0U);
    3138:	6243      	str	r3, [r0, #36]	; 0x24
    313a:	4770      	bx	lr

0000313c <ADC16_HAL_ConfigChn>:
ADC16_HAL_ConfigChn():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:128
 * mode, once the available channel is set, the conversion begins to execute.
 *
 *END*/
void ADC16_HAL_ConfigChn(ADC_Type * base, uint32_t chnGroup, const adc16_chn_config_t *configPtr)
{
    assert(chnGroup < FSL_FEATURE_ADC16_CONVERSION_CONTROL_COUNT);
    313c:	2901      	cmp	r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:127
 * hardware trigger can be used to the first group. When in software trigger
 * mode, once the available channel is set, the conversion begins to execute.
 *
 *END*/
void ADC16_HAL_ConfigChn(ADC_Type * base, uint32_t chnGroup, const adc16_chn_config_t *configPtr)
{
    313e:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:128
    assert(chnGroup < FSL_FEATURE_ADC16_CONVERSION_CONTROL_COUNT);
    3140:	d905      	bls.n	314e <ADC16_HAL_ConfigChn+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:128 (discriminator 1)
    3142:	480b      	ldr	r0, [pc, #44]	; (3170 <ADC16_HAL_ConfigChn+0x34>)
    3144:	4a0b      	ldr	r2, [pc, #44]	; (3174 <ADC16_HAL_ConfigChn+0x38>)
    3146:	4b0c      	ldr	r3, [pc, #48]	; (3178 <ADC16_HAL_ConfigChn+0x3c>)
    3148:	2180      	movs	r1, #128	; 0x80
    314a:	f002 fe7d 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:132
    uint16_t tmp = 0U;

     /** Interrupt enable. */
    if (configPtr->convCompletedIntEnable)
    314e:	7853      	ldrb	r3, [r2, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:139
        tmp |= ADC_SC1_AIEN_MASK;
    }

     /** Differential mode enable. */
#if FSL_FEATURE_ADC16_HAS_DIFF_MODE
    if (configPtr->diffConvEnable)
    3150:	7894      	ldrb	r4, [r2, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:129
 *
 *END*/
void ADC16_HAL_ConfigChn(ADC_Type * base, uint32_t chnGroup, const adc16_chn_config_t *configPtr)
{
    assert(chnGroup < FSL_FEATURE_ADC16_CONVERSION_CONTROL_COUNT);
    uint16_t tmp = 0U;
    3152:	2b00      	cmp	r3, #0
    3154:	bf14      	ite	ne
    3156:	2340      	movne	r3, #64	; 0x40
    3158:	2300      	moveq	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:139
        tmp |= ADC_SC1_AIEN_MASK;
    }

     /** Differential mode enable. */
#if FSL_FEATURE_ADC16_HAS_DIFF_MODE
    if (configPtr->diffConvEnable)
    315a:	b114      	cbz	r4, 3162 <ADC16_HAL_ConfigChn+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:141
    {
        tmp |= ADC_SC1_DIFF_MASK;
    315c:	f043 0320 	orr.w	r3, r3, #32
    3160:	b29b      	uxth	r3, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:146
    }
#endif  /** FSL_FEATURE_ADC16_HAS_DIFF_MODE */

     /** Input channel select. */
    tmp |= ADC_SC1_ADCH((uint32_t)(configPtr->chnIdx));
    3162:	7812      	ldrb	r2, [r2, #0]
    3164:	f002 021f 	and.w	r2, r2, #31
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:148

    ADC_WR_SC1(base, chnGroup, tmp);
    3168:	4313      	orrs	r3, r2
    316a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    316e:	bd10      	pop	{r4, pc}
    3170:	000075ac 	.word	0x000075ac
    3174:	00007598 	.word	0x00007598
    3178:	00007611 	.word	0x00007611

0000317c <ADC16_HAL_ConfigConverter>:
ADC16_HAL_ConfigConverter():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:164
 *END*/
void ADC16_HAL_ConfigConverter(ADC_Type * base, const adc16_converter_config_t *configPtr)
{
    uint16_t cfg1, cfg2, sc2, sc3;

    cfg1 = ADC_RD_CFG1(base);
    317c:	6882      	ldr	r2, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:172
              | ADC_CFG1_ADLSMP_MASK
              | ADC_CFG1_MODE_MASK
              | ADC_CFG1_ADICLK_MASK );

     /** Low power mode. */
    if (configPtr->lowPowerEnable)
    317e:	780b      	ldrb	r3, [r1, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:161
 * converter's sampling condition. Usually, it would be called before
 * executing the ADC16's job.
 *
 *END*/
void ADC16_HAL_ConfigConverter(ADC_Type * base, const adc16_converter_config_t *configPtr)
{
    3180:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:165
    uint16_t cfg1, cfg2, sc2, sc3;

    cfg1 = ADC_RD_CFG1(base);
    cfg1 &= ~(  ADC_CFG1_ADLPC_MASK
    3182:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:172
              | ADC_CFG1_ADLSMP_MASK
              | ADC_CFG1_MODE_MASK
              | ADC_CFG1_ADICLK_MASK );

     /** Low power mode. */
    if (configPtr->lowPowerEnable)
    3186:	b10b      	cbz	r3, 318c <ADC16_HAL_ConfigConverter+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:174
    {
        cfg1 |= ADC_CFG1_ADLPC_MASK;
    3188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:177
    }
     /** Clock divider. */
    cfg1 |= ADC_CFG1_ADIV(configPtr->clkDividerMode);
    318c:	784b      	ldrb	r3, [r1, #1]
    318e:	015b      	lsls	r3, r3, #5
    3190:	f003 0360 	and.w	r3, r3, #96	; 0x60
    3194:	4313      	orrs	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:179
     /** Long sample time. */
    if (configPtr->longSampleTimeEnable)
    3196:	788a      	ldrb	r2, [r1, #2]
    3198:	b112      	cbz	r2, 31a0 <ADC16_HAL_ConfigConverter+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:181
    {
        cfg1 |= ADC_CFG1_ADLSMP_MASK;
    319a:	f043 0310 	orr.w	r3, r3, #16
    319e:	b29b      	uxth	r3, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:184
    }
     /** Sample resolution mode. */
    cfg1 |= ADC_CFG1_MODE(configPtr->resolution);
    31a0:	78ca      	ldrb	r2, [r1, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:186
     /** Clock source input. */
    cfg1 |= ADC_CFG1_ADICLK(configPtr->clkSrc);
    31a2:	790d      	ldrb	r5, [r1, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:184
    if (configPtr->longSampleTimeEnable)
    {
        cfg1 |= ADC_CFG1_ADLSMP_MASK;
    }
     /** Sample resolution mode. */
    cfg1 |= ADC_CFG1_MODE(configPtr->resolution);
    31a4:	0092      	lsls	r2, r2, #2
    31a6:	f002 020c 	and.w	r2, r2, #12
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:186
     /** Clock source input. */
    cfg1 |= ADC_CFG1_ADICLK(configPtr->clkSrc);
    31aa:	f005 0503 	and.w	r5, r5, #3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:184
    if (configPtr->longSampleTimeEnable)
    {
        cfg1 |= ADC_CFG1_ADLSMP_MASK;
    }
     /** Sample resolution mode. */
    cfg1 |= ADC_CFG1_MODE(configPtr->resolution);
    31ae:	4315      	orrs	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:188
     /** Clock source input. */
    cfg1 |= ADC_CFG1_ADICLK(configPtr->clkSrc);

    cfg2 = ADC_RD_CFG2(base);
    31b0:	68c2      	ldr	r2, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:186
        cfg1 |= ADC_CFG1_ADLSMP_MASK;
    }
     /** Sample resolution mode. */
    cfg1 |= ADC_CFG1_MODE(configPtr->resolution);
     /** Clock source input. */
    cfg1 |= ADC_CFG1_ADICLK(configPtr->clkSrc);
    31b2:	431d      	orrs	r5, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:189

    cfg2 = ADC_RD_CFG2(base);
    cfg2 &= ~( ADC_CFG2_ADACKEN_MASK
    31b4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    31b8:	4013      	ands	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:193
             | ADC_CFG2_ADHSC_MASK
             | ADC_CFG2_ADLSTS_MASK );
     /** Asynchronous clock output enable. */
    if (configPtr->asyncClkEnable)
    31ba:	794a      	ldrb	r2, [r1, #5]
    31bc:	b10a      	cbz	r2, 31c2 <ADC16_HAL_ConfigConverter+0x46>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:195
    {
        cfg2 |= ADC_CFG2_ADACKEN_MASK;
    31be:	f043 0308 	orr.w	r3, r3, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:198
    }
     /** High speed configuration. */
    if (configPtr->highSpeedEnable)
    31c2:	798a      	ldrb	r2, [r1, #6]
    31c4:	b10a      	cbz	r2, 31ca <ADC16_HAL_ConfigConverter+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:200
    {
        cfg2 |= ADC_CFG2_ADHSC_MASK;
    31c6:	f043 0304 	orr.w	r3, r3, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:203
    }
     /** Long sample time select. */
    cfg2 |= ADC_CFG2_ADLSTS(configPtr->longSampleCycleMode);
    31ca:	79ca      	ldrb	r2, [r1, #7]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:205

    sc2 = ADC_RD_SC2(base);
    31cc:	6a04      	ldr	r4, [r0, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:203
    if (configPtr->highSpeedEnable)
    {
        cfg2 |= ADC_CFG2_ADHSC_MASK;
    }
     /** Long sample time select. */
    cfg2 |= ADC_CFG2_ADLSTS(configPtr->longSampleCycleMode);
    31ce:	f002 0203 	and.w	r2, r2, #3
    31d2:	4313      	orrs	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:206

    sc2 = ADC_RD_SC2(base);
    sc2 &= ~( ADC_SC2_ADTRG_MASK
    31d4:	f64f 72b8 	movw	r2, #65464	; 0xffb8
    31d8:	4022      	ands	r2, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:213
#if FSL_FEATURE_ADC16_HAS_DMA
            | ADC_SC2_DMAEN_MASK
#endif  /** FSL_FEATURE_ADC16_HAS_DMA */
    );
     /** Conversion trigger select. */
    if (configPtr->hwTriggerEnable)
    31da:	7a0c      	ldrb	r4, [r1, #8]
    31dc:	b10c      	cbz	r4, 31e2 <ADC16_HAL_ConfigConverter+0x66>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:215
    {
        sc2 |= ADC_SC2_ADTRG_MASK;
    31de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:218
    }
     /** Voltage reference selection. */
    sc2 |= ADC_SC2_REFSEL(configPtr->refVoltSrc);
    31e2:	7a4c      	ldrb	r4, [r1, #9]
    31e4:	f004 0403 	and.w	r4, r4, #3
    31e8:	4314      	orrs	r4, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:221
#if FSL_FEATURE_ADC16_HAS_DMA
     /** DMA. */
    if (configPtr->dmaEnable)
    31ea:	7aca      	ldrb	r2, [r1, #11]
    31ec:	b112      	cbz	r2, 31f4 <ADC16_HAL_ConfigConverter+0x78>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:223
    {
        sc2 |= ADC_SC2_DMAEN_MASK;
    31ee:	f044 0404 	orr.w	r4, r4, #4
    31f2:	b2a4      	uxth	r4, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:227
    }
#endif  /** FSL_FEATURE_ADC16_HAS_DMA */

    sc3 = ADC_RD_SC3(base);
    31f4:	6a46      	ldr	r6, [r0, #36]	; 0x24
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:231
    sc3 &= ~( ADC_SC3_ADCO_MASK
            | ADC_SC3_CALF_MASK );
     /** Continuous conversion enable. */
    if (configPtr->continuousConvEnable)
    31f6:	7a89      	ldrb	r1, [r1, #10]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:228
        sc2 |= ADC_SC2_DMAEN_MASK;
    }
#endif  /** FSL_FEATURE_ADC16_HAS_DMA */

    sc3 = ADC_RD_SC3(base);
    sc3 &= ~( ADC_SC3_ADCO_MASK
    31f8:	f64f 72b7 	movw	r2, #65463	; 0xffb7
    31fc:	4032      	ands	r2, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:231
            | ADC_SC3_CALF_MASK );
     /** Continuous conversion enable. */
    if (configPtr->continuousConvEnable)
    31fe:	b109      	cbz	r1, 3204 <ADC16_HAL_ConfigConverter+0x88>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:233
    {
        sc3 |= ADC_SC3_ADCO_MASK;
    3200:	f042 0208 	orr.w	r2, r2, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:236
    }

    ADC_WR_CFG1(base, cfg1);
    3204:	6085      	str	r5, [r0, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:237
    ADC_WR_CFG2(base, cfg2);
    3206:	60c3      	str	r3, [r0, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:238
    ADC_WR_SC2(base, sc2);
    3208:	6204      	str	r4, [r0, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/hal/src/adc16/fsl_adc16_hal.c:239
    ADC_WR_SC3(base, sc3);
    320a:	6242      	str	r2, [r0, #36]	; 0x24
    320c:	bd70      	pop	{r4, r5, r6, pc}
	...

00003210 <UART_DRV_StartSendData>:
UART_DRV_StartSendData():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:737
 *END*/
static uart_status_t UART_DRV_StartSendData(uint32_t instance,
                                            const uint8_t * txBuff,
                                            uint32_t txSize)
{
    assert(instance < UART_INSTANCE_COUNT);
    3210:	2805      	cmp	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:736
 *
 *END*/
static uart_status_t UART_DRV_StartSendData(uint32_t instance,
                                            const uint8_t * txBuff,
                                            uint32_t txSize)
{
    3212:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:737
    assert(instance < UART_INSTANCE_COUNT);
    3214:	d906      	bls.n	3224 <UART_DRV_StartSendData+0x14>
    3216:	4810      	ldr	r0, [pc, #64]	; (3258 <UART_DRV_StartSendData+0x48>)
    3218:	4a10      	ldr	r2, [pc, #64]	; (325c <UART_DRV_StartSendData+0x4c>)
    321a:	4b11      	ldr	r3, [pc, #68]	; (3260 <UART_DRV_StartSendData+0x50>)
    321c:	f240 21e1 	movw	r1, #737	; 0x2e1
    3220:	f002 fe12 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:739

    UART_Type * base = g_uartBase[instance];
    3224:	4b0f      	ldr	r3, [pc, #60]	; (3264 <UART_DRV_StartSendData+0x54>)
    3226:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:740
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    322a:	4b0f      	ldr	r3, [pc, #60]	; (3268 <UART_DRV_StartSendData+0x58>)
    322c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:744

     /** Check that we're not busy already transmitting data from a previous
     * function call. */
    if (uartState->isTxBusy)
    3230:	7d1c      	ldrb	r4, [r3, #20]
    3232:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    3236:	b954      	cbnz	r4, 324e <UART_DRV_StartSendData+0x3e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:749
    {
        return kStatus_UART_TxBusy;
    }

    if (txSize == 0U)
    3238:	b15a      	cbz	r2, 3252 <UART_DRV_StartSendData+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:756
        return kStatus_UART_NoDataToDeal;
    }

     /** Initialize the module driver state structure. */
    uartState->txBuff = txBuff;
    uartState->txSize = txSize;
    323a:	60da      	str	r2, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:757
    uartState->isTxBusy = true;
    323c:	2201      	movs	r2, #1
    323e:	751a      	strb	r2, [r3, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:755
    {
        return kStatus_UART_NoDataToDeal;
    }

     /** Initialize the module driver state structure. */
    uartState->txBuff = txBuff;
    3240:	6059      	str	r1, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:763

     /** Enable the transmitter data register empty interrupt. The TDRE flag will
     * set whenever the TX buffer is emptied into the TX shift register (for
     * non-FIFO IPs) or when the data in the TX FIFO is at or below the
     * programmed watermark (for FIFO-supported IPs). */
    UART_BWR_C2_TIE(base, 1U);
    3242:	f105 7304 	add.w	r3, r5, #34603008	; 0x2100000
    3246:	3303      	adds	r3, #3
    3248:	015b      	lsls	r3, r3, #5
    324a:	771a      	strb	r2, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:765

    return kStatus_UART_Success;
    324c:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:746

     /** Check that we're not busy already transmitting data from a previous
     * function call. */
    if (uartState->isTxBusy)
    {
        return kStatus_UART_TxBusy;
    324e:	2008      	movs	r0, #8
    3250:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:751
    }

    if (txSize == 0U)
    {
        return kStatus_UART_NoDataToDeal;
    3252:	200e      	movs	r0, #14
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:766
     * non-FIFO IPs) or when the data in the TX FIFO is at or below the
     * programmed watermark (for FIFO-supported IPs). */
    UART_BWR_C2_TIE(base, 1U);

    return kStatus_UART_Success;
}
    3254:	bd38      	pop	{r3, r4, r5, pc}
    3256:	bf00      	nop
    3258:	000076a3 	.word	0x000076a3
    325c:	0000783e 	.word	0x0000783e
    3260:	0000770d 	.word	0x0000770d
    3264:	00007648 	.word	0x00007648
    3268:	1fff0c58 	.word	0x1fff0c58

0000326c <UART_DRV_CompleteSendData>:
UART_DRV_CompleteSendData():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:707
 * This is not a public API as it is called from other driver functions.
 *
 *END*/
static void UART_DRV_CompleteSendData(uint32_t instance)
{
    assert(instance < UART_INSTANCE_COUNT);
    326c:	2805      	cmp	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:706
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END*/
static void UART_DRV_CompleteSendData(uint32_t instance)
{
    326e:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:707
    assert(instance < UART_INSTANCE_COUNT);
    3270:	d906      	bls.n	3280 <UART_DRV_CompleteSendData+0x14>
    3272:	480e      	ldr	r0, [pc, #56]	; (32ac <UART_DRV_CompleteSendData+0x40>)
    3274:	4a0e      	ldr	r2, [pc, #56]	; (32b0 <UART_DRV_CompleteSendData+0x44>)
    3276:	4b0f      	ldr	r3, [pc, #60]	; (32b4 <UART_DRV_CompleteSendData+0x48>)
    3278:	f240 21c3 	movw	r1, #707	; 0x2c3
    327c:	f002 fde4 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:710

    UART_Type * base = g_uartBase[instance];
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    3280:	4b0d      	ldr	r3, [pc, #52]	; (32b8 <UART_DRV_CompleteSendData+0x4c>)
    3282:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:709
 *END*/
static void UART_DRV_CompleteSendData(uint32_t instance)
{
    assert(instance < UART_INSTANCE_COUNT);

    UART_Type * base = g_uartBase[instance];
    3286:	4b0d      	ldr	r3, [pc, #52]	; (32bc <UART_DRV_CompleteSendData+0x50>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:713
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];

     /** Disable the transmitter data register empty interrupt */
    UART_BWR_C2_TIE(base, 0U);
    3288:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    328c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    3290:	3303      	adds	r3, #3
    3292:	015b      	lsls	r3, r3, #5
    3294:	2200      	movs	r2, #0
    3296:	771a      	strb	r2, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:716

     /** Signal the synchronous completion object. */
    if (uartState->isTxBlocking)
    3298:	7da3      	ldrb	r3, [r4, #22]
    329a:	4615      	mov	r5, r2
    329c:	b11b      	cbz	r3, 32a6 <UART_DRV_CompleteSendData+0x3a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:718
    {
        OSA_SemaPost(&uartState->txIrqSync);
    329e:	f104 0018 	add.w	r0, r4, #24
    32a2:	f7fe ff49 	bl	2138 <OSA_SemaPost>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:722
    }

     /** Update the information of the module driver state */
    uartState->isTxBusy = false;
    32a6:	7525      	strb	r5, [r4, #20]
    32a8:	bd38      	pop	{r3, r4, r5, pc}
    32aa:	bf00      	nop
    32ac:	000076a3 	.word	0x000076a3
    32b0:	00007812 	.word	0x00007812
    32b4:	0000770d 	.word	0x0000770d
    32b8:	1fff0c58 	.word	0x1fff0c58
    32bc:	00007648 	.word	0x00007648

000032c0 <UART_DRV_CompleteReceiveData>:
UART_DRV_CompleteReceiveData():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:778
 * This is not a public API as it is called from other driver functions.
 *
 *END*/
static void UART_DRV_CompleteReceiveData(uint32_t instance)
{
    assert(instance < UART_INSTANCE_COUNT);
    32c0:	2805      	cmp	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:777
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END*/
static void UART_DRV_CompleteReceiveData(uint32_t instance)
{
    32c2:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:778
    assert(instance < UART_INSTANCE_COUNT);
    32c4:	d906      	bls.n	32d4 <UART_DRV_CompleteReceiveData+0x14>
    32c6:	4810      	ldr	r0, [pc, #64]	; (3308 <UART_DRV_CompleteReceiveData+0x48>)
    32c8:	4a10      	ldr	r2, [pc, #64]	; (330c <UART_DRV_CompleteReceiveData+0x4c>)
    32ca:	4b11      	ldr	r3, [pc, #68]	; (3310 <UART_DRV_CompleteReceiveData+0x50>)
    32cc:	f240 310a 	movw	r1, #778	; 0x30a
    32d0:	f002 fdba 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:780

    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    32d4:	4b0f      	ldr	r3, [pc, #60]	; (3314 <UART_DRV_CompleteReceiveData+0x54>)
    32d6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:781
    UART_Type * base = g_uartBase[instance];
    32da:	4b0f      	ldr	r3, [pc, #60]	; (3318 <UART_DRV_CompleteReceiveData+0x58>)
    32dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:784

     /** Disable receive data full and rx overrun interrupt */
    UART_BWR_C2_RIE(base, 0U);
    32e0:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    32e4:	3303      	adds	r3, #3
    32e6:	015b      	lsls	r3, r3, #5
    32e8:	2500      	movs	r5, #0
    32ea:	751d      	strb	r5, [r3, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:785
    UART_HAL_SetIntMode(base, kUartIntRxOverrun, false);
    32ec:	f240 2103 	movw	r1, #515	; 0x203
    32f0:	462a      	mov	r2, r5
    32f2:	f7ff f8df 	bl	24b4 <UART_HAL_SetIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:788

     /** Signal the synchronous completion object. */
    if (uartState->isRxBlocking)
    32f6:	7de3      	ldrb	r3, [r4, #23]
    32f8:	b11b      	cbz	r3, 3302 <UART_DRV_CompleteReceiveData+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:790
    {
        OSA_SemaPost(&uartState->rxIrqSync);
    32fa:	f104 001c 	add.w	r0, r4, #28
    32fe:	f7fe ff1b 	bl	2138 <OSA_SemaPost>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:794
    }

     /** Update the information of the module driver state */
    uartState->isRxBusy = false;
    3302:	7565      	strb	r5, [r4, #21]
    3304:	bd38      	pop	{r3, r4, r5, pc}
    3306:	bf00      	nop
    3308:	000076a3 	.word	0x000076a3
    330c:	00007855 	.word	0x00007855
    3310:	0000770d 	.word	0x0000770d
    3314:	1fff0c58 	.word	0x1fff0c58
    3318:	00007648 	.word	0x00007648

0000331c <UART_DRV_Init>:
UART_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:83
 *    UART_DRV_Init(instance, &uartState, &uartConfig);
 *
 *END*/
uart_status_t UART_DRV_Init(uint32_t instance, uart_state_t * uartStatePtr,
                            const uart_user_config_t * uartUserConfig)
{
    331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3320:	4605      	mov	r5, r0
    3322:	4617      	mov	r7, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:84
    assert(uartStatePtr && uartUserConfig);
    3324:	460e      	mov	r6, r1
    3326:	b101      	cbz	r1, 332a <UART_DRV_Init+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:84 (discriminator 2)
    3328:	b922      	cbnz	r2, 3334 <UART_DRV_Init+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:84 (discriminator 1)
    332a:	4849      	ldr	r0, [pc, #292]	; (3450 <UART_DRV_Init+0x134>)
    332c:	4a49      	ldr	r2, [pc, #292]	; (3454 <UART_DRV_Init+0x138>)
    332e:	4b4a      	ldr	r3, [pc, #296]	; (3458 <UART_DRV_Init+0x13c>)
    3330:	2154      	movs	r1, #84	; 0x54
    3332:	e007      	b.n	3344 <UART_DRV_Init+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:85
    assert(g_uartBase[instance]);
    3334:	4b49      	ldr	r3, [pc, #292]	; (345c <UART_DRV_Init+0x140>)
    3336:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    333a:	b92c      	cbnz	r4, 3348 <UART_DRV_Init+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:85 (discriminator 1)
    333c:	4844      	ldr	r0, [pc, #272]	; (3450 <UART_DRV_Init+0x134>)
    333e:	4a45      	ldr	r2, [pc, #276]	; (3454 <UART_DRV_Init+0x138>)
    3340:	4b47      	ldr	r3, [pc, #284]	; (3460 <UART_DRV_Init+0x144>)
    3342:	2155      	movs	r1, #85	; 0x55
    3344:	f002 fd80 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:86
    assert(instance < UART_INSTANCE_COUNT);
    3348:	2805      	cmp	r0, #5
    334a:	d904      	bls.n	3356 <UART_DRV_Init+0x3a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:86 (discriminator 1)
    334c:	4840      	ldr	r0, [pc, #256]	; (3450 <UART_DRV_Init+0x134>)
    334e:	4a41      	ldr	r2, [pc, #260]	; (3454 <UART_DRV_Init+0x138>)
    3350:	4b44      	ldr	r3, [pc, #272]	; (3464 <UART_DRV_Init+0x148>)
    3352:	2156      	movs	r1, #86	; 0x56
    3354:	e7f6      	b.n	3344 <UART_DRV_Init+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:92

    UART_Type * base = g_uartBase[instance];
    uint32_t uartSourceClock;

     /** Exit if current instance is already initialized. */
    if (g_uartStatePtr[instance])
    3356:	f8df 9128 	ldr.w	r9, [pc, #296]	; 3480 <UART_DRV_Init+0x164>
    335a:	f859 8020 	ldr.w	r8, [r9, r0, lsl #2]
    335e:	f1b8 0f00 	cmp.w	r8, #0
    3362:	d172      	bne.n	344a <UART_DRV_Init+0x12e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:98
    {
        return kStatus_UART_Initialized;
    }

     /** Clear the state structure for this instance. */
    memset(uartStatePtr, 0, sizeof(uart_state_t));
    3364:	2230      	movs	r2, #48	; 0x30
    3366:	4608      	mov	r0, r1
    3368:	4641      	mov	r1, r8
    336a:	f002 fdf4 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:104

     /** Save runtime structure pointer.*/
    g_uartStatePtr[instance] = uartStatePtr;

     /** Un-gate UART module clock */
    CLOCK_SYS_EnableUartClock(instance);
    336e:	4628      	mov	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:101

     /** Clear the state structure for this instance. */
    memset(uartStatePtr, 0, sizeof(uart_state_t));

     /** Save runtime structure pointer.*/
    g_uartStatePtr[instance] = uartStatePtr;
    3370:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:104

     /** Un-gate UART module clock */
    CLOCK_SYS_EnableUartClock(instance);
    3374:	f7fe fe8c 	bl	2090 <CLOCK_SYS_EnableUartClock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:107

     /** Initialize UART to a known state. */
    UART_HAL_Init(base);
    3378:	4620      	mov	r0, r4
    337a:	f7ff f854 	bl	2426 <UART_HAL_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:110

     /** Create Semaphore for txIrq and rxIrq. */
    OSA_SemaCreate(&uartStatePtr->txIrqSync, 0);
    337e:	4641      	mov	r1, r8
    3380:	f106 0018 	add.w	r0, r6, #24
    3384:	f7fe fe9c 	bl	20c0 <OSA_SemaCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:111
    OSA_SemaCreate(&uartStatePtr->rxIrqSync, 0);
    3388:	4641      	mov	r1, r8
    338a:	f106 001c 	add.w	r0, r6, #28
    338e:	f7fe fe97 	bl	20c0 <OSA_SemaCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:114

     /** UART clock source is either system or bus clock depending on instance */
    uartSourceClock = CLOCK_SYS_GetUartFreq(instance);
    3392:	4628      	mov	r0, r5
    3394:	f7fe fe0e 	bl	1fb4 <CLOCK_SYS_GetUartFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:117

     /** Initialize UART baud rate, bit count, parity and stop bit. */
    UART_HAL_SetBaudRate(base, uartSourceClock, uartUserConfig->baudRate);
    3398:	683a      	ldr	r2, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:114
     /** Create Semaphore for txIrq and rxIrq. */
    OSA_SemaCreate(&uartStatePtr->txIrqSync, 0);
    OSA_SemaCreate(&uartStatePtr->rxIrqSync, 0);

     /** UART clock source is either system or bus clock depending on instance */
    uartSourceClock = CLOCK_SYS_GetUartFreq(instance);
    339a:	4601      	mov	r1, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:117

     /** Initialize UART baud rate, bit count, parity and stop bit. */
    UART_HAL_SetBaudRate(base, uartSourceClock, uartUserConfig->baudRate);
    339c:	4620      	mov	r0, r4
    339e:	f7ff f857 	bl	2450 <UART_HAL_SetBaudRate>
UART_HAL_SetBitCountPerChar():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:452
 */
static inline void UART_HAL_SetBitCountPerChar(UART_Type * base,
                                          uart_bit_count_per_char_t bitCountPerChar)
{
     /** config 8- (M=0) or 9-bits (M=1) */
    UART_BWR_C1_M(base, bitCountPerChar);
    33a2:	f104 7304 	add.w	r3, r4, #34603008	; 0x2100000
    33a6:	3302      	adds	r3, #2
    33a8:	015b      	lsls	r3, r3, #5
UART_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:118
    UART_HAL_SetBitCountPerChar(base, uartUserConfig->bitCountPerChar);
    33aa:	79ba      	ldrb	r2, [r7, #6]
UART_HAL_SetBitCountPerChar():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:452
    33ac:	741a      	strb	r2, [r3, #16]
UART_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:119
    UART_HAL_SetParityMode(base, uartUserConfig->parityMode);
    33ae:	7939      	ldrb	r1, [r7, #4]
    33b0:	4620      	mov	r0, r4
    33b2:	f7ff f86e 	bl	2492 <UART_HAL_SetParityMode>
UART_HAL_SetStopBitCount():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:480
 * @param   stopBitCount Number of stop bits setting (1 or 2 - see uart_stop_bit_count_t struct).
 * @return  An error code (an unsupported setting in some UARTs) or kStatus_UART_Success.
 */
static inline void UART_HAL_SetStopBitCount(UART_Type * base, uart_stop_bit_count_t stopBitCount)
{
    UART_BWR_BDH_SBNS(base, stopBitCount);
    33b6:	f104 7304 	add.w	r3, r4, #34603008	; 0x2100000
    33ba:	015b      	lsls	r3, r3, #5
UART_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:121
#if FSL_FEATURE_UART_HAS_STOP_BIT_CONFIG_SUPPORT
    UART_HAL_SetStopBitCount(base, uartUserConfig->stopBitCount);
    33bc:	797a      	ldrb	r2, [r7, #5]
UART_HAL_SetStopBitCount():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:480
    33be:	751a      	strb	r2, [r3, #20]
UART_HAL_GetTxFifoSize():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:790
 *    0x0: 1 data word; 0x1: 4 data words; 0x2: 8 data words; 0x3: 16 data words
 *    0x4: 32 data words; 0x5: 64 data words; 0x6: 128 data words; 0x7: reserved
 */
static inline uint8_t UART_HAL_GetTxFifoSize(UART_Type * base)
{
    return UART_BRD_PFIFO_TXFIFOSIZE(base);
    33c0:	7c23      	ldrb	r3, [r4, #16]
    33c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
    33c6:	2101      	movs	r1, #1
UART_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:129
#if FSL_FEATURE_UART_HAS_FIFO
    uint8_t fifoSize;
     /** Obtain raw TX FIFO size bit setting */
    fifoSize = UART_HAL_GetTxFifoSize(base);
     /** Now calculate the number of data words per given FIFO size */
    uartStatePtr->txFifoEntryCount = (fifoSize == 0 ? 1 : 0x1 << (fifoSize + 1));
    33c8:	b113      	cbz	r3, 33d0 <UART_DRV_Init+0xb4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:129 (discriminator 1)
    33ca:	440b      	add	r3, r1
    33cc:	4099      	lsls	r1, r3
    33ce:	b2c9      	uxtb	r1, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:138 (discriminator 3)
     * means that TDRE will only interrupt when the TX buffer (the one entry in
     * the TX FIFO) is empty. Otherwise, if we set the watermark to 1, the TDRE
     * will always be set regardless if the TX buffer was empty or not as the
     * spec says TDRE will set when the FIFO is at or below the configured
     * watermark. */
    if (uartStatePtr->txFifoEntryCount > 1)
    33d0:	2901      	cmp	r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:129 (discriminator 3)
#if FSL_FEATURE_UART_HAS_FIFO
    uint8_t fifoSize;
     /** Obtain raw TX FIFO size bit setting */
    fifoSize = UART_HAL_GetTxFifoSize(base);
     /** Now calculate the number of data words per given FIFO size */
    uartStatePtr->txFifoEntryCount = (fifoSize == 0 ? 1 : 0x1 << (fifoSize + 1));
    33d2:	7031      	strb	r1, [r6, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:140 (discriminator 3)
     * will always be set regardless if the TX buffer was empty or not as the
     * spec says TDRE will set when the FIFO is at or below the configured
     * watermark. */
    if (uartStatePtr->txFifoEntryCount > 1)
    {
        UART_HAL_SetTxFifoWatermark(base, (uartStatePtr->txFifoEntryCount >> 1U));
    33d4:	4620      	mov	r0, r4
    33d6:	bf8c      	ite	hi
    33d8:	0849      	lsrhi	r1, r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:144 (discriminator 3)
    }
    else
    {
        UART_HAL_SetTxFifoWatermark(base, 0);
    33da:	2100      	movls	r1, #0
    33dc:	f7ff f92d 	bl	263a <UART_HAL_SetTxFifoWatermark>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:155 (discriminator 3)
     * dynamically changed. This means if the rxSize is less than the programmed
     * watermark the interrupt will never occur. If we try to change the
     * watermark, this will involve shutting down the receiver first - which is
     * not a desirable operation when the UART is actively receiving data.
     * Hence, the best solution is to set the RX FIFO watermark to 1. */
    UART_HAL_SetRxFifoWatermark(base, 1);
    33e0:	2101      	movs	r1, #1
    33e2:	4620      	mov	r0, r4
    33e4:	f7ff f936 	bl	2654 <UART_HAL_SetRxFifoWatermark>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:158 (discriminator 3)

     /** Enable and flush the FIFO prior to enabling the TX/RX */
    UART_HAL_SetTxFifoCmd(base, true);
    33e8:	2101      	movs	r1, #1
    33ea:	4620      	mov	r0, r4
    33ec:	f7ff f8dd 	bl	25aa <UART_HAL_SetTxFifoCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:159 (discriminator 3)
    UART_HAL_SetRxFifoCmd(base, true);
    33f0:	2101      	movs	r1, #1
    33f2:	4620      	mov	r0, r4
    33f4:	f7ff f8eb 	bl	25ce <UART_HAL_SetRxFifoCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:160 (discriminator 3)
    UART_HAL_FlushTxFifo(base);
    33f8:	4620      	mov	r0, r4
    33fa:	f7ff f8fa 	bl	25f2 <UART_HAL_FlushTxFifo>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:161 (discriminator 3)
    UART_HAL_FlushRxFifo(base);
    33fe:	4620      	mov	r0, r4
    3400:	f7ff f909 	bl	2616 <UART_HAL_FlushRxFifo>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:171 (discriminator 3)
     * only when the tx buffer is empty. */
    uartStatePtr->txFifoEntryCount = 1;
#endif

     /** Enable UART interrupt on NVIC level. */
    INT_SYS_EnableIRQ(g_uartRxTxIrqId[instance]);
    3404:	4b18      	ldr	r3, [pc, #96]	; (3468 <UART_DRV_Init+0x14c>)
    3406:	5d5a      	ldrb	r2, [r3, r5]
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93 (discriminator 3)
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    3408:	b253      	sxtb	r3, r2
    340a:	2b00      	cmp	r3, #0
    340c:	da04      	bge.n	3418 <UART_DRV_Init+0xfc>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
    340e:	4817      	ldr	r0, [pc, #92]	; (346c <UART_DRV_Init+0x150>)
    3410:	4a17      	ldr	r2, [pc, #92]	; (3470 <UART_DRV_Init+0x154>)
    3412:	4b18      	ldr	r3, [pc, #96]	; (3474 <UART_DRV_Init+0x158>)
    3414:	215d      	movs	r1, #93	; 0x5d
    3416:	e795      	b.n	3344 <UART_DRV_Init+0x28>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    3418:	2b55      	cmp	r3, #85	; 0x55
    341a:	dd04      	ble.n	3426 <UART_DRV_Init+0x10a>
    341c:	4813      	ldr	r0, [pc, #76]	; (346c <UART_DRV_Init+0x150>)
    341e:	4a14      	ldr	r2, [pc, #80]	; (3470 <UART_DRV_Init+0x154>)
    3420:	4b15      	ldr	r3, [pc, #84]	; (3478 <UART_DRV_Init+0x15c>)
    3422:	215e      	movs	r1, #94	; 0x5e
    3424:	e78e      	b.n	3344 <UART_DRV_Init+0x28>
UART_HAL_EnableTransmitter():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:324
 *
 * @param   base UART module base pointer.
 */
static inline void UART_HAL_EnableTransmitter(UART_Type * base)
{
    UART_BWR_C2_TE(base, 1U);
    3426:	f104 7404 	add.w	r4, r4, #34603008	; 0x2100000
    342a:	3403      	adds	r4, #3
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    342c:	0958      	lsrs	r0, r3, #5
UART_HAL_EnableTransmitter():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:324
    342e:	0164      	lsls	r4, r4, #5
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    3430:	2301      	movs	r3, #1
    3432:	4912      	ldr	r1, [pc, #72]	; (347c <UART_DRV_Init+0x160>)
    3434:	f002 021f 	and.w	r2, r2, #31
    3438:	fa03 f202 	lsl.w	r2, r3, r2
    343c:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
UART_HAL_EnableTransmitter():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:324
    3440:	7323      	strb	r3, [r4, #12]
UART_HAL_EnableReceiver():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:361
 *
 * @param   base UART module base pointer.
 */
static inline void UART_HAL_EnableReceiver(UART_Type * base)
{
    UART_BWR_C2_RE(base, 1U);
    3442:	7223      	strb	r3, [r4, #8]
UART_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:177

     /** Finally, enable the UART transmitter and receiver*/
    UART_HAL_EnableTransmitter(base);
    UART_HAL_EnableReceiver(base);

    return kStatus_UART_Success;
    3444:	2000      	movs	r0, #0
    3446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:94
    uint32_t uartSourceClock;

     /** Exit if current instance is already initialized. */
    if (g_uartStatePtr[instance])
    {
        return kStatus_UART_Initialized;
    344a:	200d      	movs	r0, #13
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:178
     /** Finally, enable the UART transmitter and receiver*/
    UART_HAL_EnableTransmitter(base);
    UART_HAL_EnableReceiver(base);

    return kStatus_UART_Success;
}
    344c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3450:	000076a3 	.word	0x000076a3
    3454:	00007695 	.word	0x00007695
    3458:	0000772c 	.word	0x0000772c
    345c:	00007648 	.word	0x00007648
    3460:	0000774b 	.word	0x0000774b
    3464:	0000770d 	.word	0x0000770d
    3468:	1fff042c 	.word	0x1fff042c
    346c:	00007760 	.word	0x00007760
    3470:	0000782c 	.word	0x0000782c
    3474:	000077ca 	.word	0x000077ca
    3478:	000077d9 	.word	0x000077d9
    347c:	e000e100 	.word	0xe000e100
    3480:	1fff0c58 	.word	0x1fff0c58

00003484 <UART_DRV_InstallRxCallback>:
UART_DRV_InstallRxCallback():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:253
                                              uart_rx_callback_t function,
                                              uint8_t * rxBuff,
                                              void * callbackParam,
                                              bool alwaysEnableRxIrq)
{
    assert(instance < UART_INSTANCE_COUNT);
    3484:	2805      	cmp	r0, #5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:252
uart_rx_callback_t UART_DRV_InstallRxCallback(uint32_t instance,
                                              uart_rx_callback_t function,
                                              uint8_t * rxBuff,
                                              void * callbackParam,
                                              bool alwaysEnableRxIrq)
{
    3486:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:253
    assert(instance < UART_INSTANCE_COUNT);
    3488:	d905      	bls.n	3496 <UART_DRV_InstallRxCallback+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:253 (discriminator 1)
    348a:	480c      	ldr	r0, [pc, #48]	; (34bc <UART_DRV_InstallRxCallback+0x38>)
    348c:	4a0c      	ldr	r2, [pc, #48]	; (34c0 <UART_DRV_InstallRxCallback+0x3c>)
    348e:	4b0d      	ldr	r3, [pc, #52]	; (34c4 <UART_DRV_InstallRxCallback+0x40>)
    3490:	21fd      	movs	r1, #253	; 0xfd
    3492:	f002 fcd9 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:254
    UART_Type * base = g_uartBase[instance];
    3496:	4b0c      	ldr	r3, [pc, #48]	; (34c8 <UART_DRV_InstallRxCallback+0x44>)
    3498:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:255
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    349c:	4b0b      	ldr	r3, [pc, #44]	; (34cc <UART_DRV_InstallRxCallback+0x48>)
    349e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:260

    uart_rx_callback_t currentCallback = uartState->rxCallback;
    uartState->rxCallback = function;
//    uartState->rxCallbackParam = callbackParam;
    uartState->rxBuff = rxBuff;
    34a2:	609a      	str	r2, [r3, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:263

     /** Enable/Disable the receive data full interrupt */
    uartState->isRxBusy = true;
    34a4:	2201      	movs	r2, #1
    34a6:	755a      	strb	r2, [r3, #21]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:257
{
    assert(instance < UART_INSTANCE_COUNT);
    UART_Type * base = g_uartBase[instance];
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];

    uart_rx_callback_t currentCallback = uartState->rxCallback;
    34a8:	6a18      	ldr	r0, [r3, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:258
    uartState->rxCallback = function;
    34aa:	6219      	str	r1, [r3, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:264
//    uartState->rxCallbackParam = callbackParam;
    uartState->rxBuff = rxBuff;

     /** Enable/Disable the receive data full interrupt */
    uartState->isRxBusy = true;
    UART_BWR_C2_RIE(base, alwaysEnableRxIrq);
    34ac:	f104 7304 	add.w	r3, r4, #34603008	; 0x2100000
    34b0:	3303      	adds	r3, #3
    34b2:	015b      	lsls	r3, r3, #5
    34b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    34b8:	751a      	strb	r2, [r3, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:267

    return currentCallback;
}
    34ba:	bd10      	pop	{r4, pc}
    34bc:	000076a3 	.word	0x000076a3
    34c0:	00007660 	.word	0x00007660
    34c4:	0000770d 	.word	0x0000770d
    34c8:	00007648 	.word	0x00007648
    34cc:	1fff0c58 	.word	0x1fff0c58

000034d0 <UART_DRV_SendDataBlocking>:
UART_DRV_SendDataBlocking():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:306
 *END*/
uart_status_t UART_DRV_SendDataBlocking(uint32_t instance,
                                        const uint8_t * txBuff,
                                        uint32_t txSize,
                                        uint32_t timeout)
{
    34d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34d2:	461f      	mov	r7, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:307
    assert(txBuff);
    34d4:	b929      	cbnz	r1, 34e2 <UART_DRV_SendDataBlocking+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:307 (discriminator 1)
    34d6:	4818      	ldr	r0, [pc, #96]	; (3538 <UART_DRV_SendDataBlocking+0x68>)
    34d8:	4a18      	ldr	r2, [pc, #96]	; (353c <UART_DRV_SendDataBlocking+0x6c>)
    34da:	4b19      	ldr	r3, [pc, #100]	; (3540 <UART_DRV_SendDataBlocking+0x70>)
    34dc:	f240 1133 	movw	r1, #307	; 0x133
    34e0:	e006      	b.n	34f0 <UART_DRV_SendDataBlocking+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:308
    assert(instance < UART_INSTANCE_COUNT);
    34e2:	2805      	cmp	r0, #5
    34e4:	d906      	bls.n	34f4 <UART_DRV_SendDataBlocking+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:308 (discriminator 1)
    34e6:	4814      	ldr	r0, [pc, #80]	; (3538 <UART_DRV_SendDataBlocking+0x68>)
    34e8:	4a14      	ldr	r2, [pc, #80]	; (353c <UART_DRV_SendDataBlocking+0x6c>)
    34ea:	4b16      	ldr	r3, [pc, #88]	; (3544 <UART_DRV_SendDataBlocking+0x74>)
    34ec:	f44f 719a 	mov.w	r1, #308	; 0x134
    34f0:	f002 fcaa 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:310

    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    34f4:	4b14      	ldr	r3, [pc, #80]	; (3548 <UART_DRV_SendDataBlocking+0x78>)
    34f6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:311
    UART_Type * base = g_uartBase[instance];
    34fa:	4b14      	ldr	r3, [pc, #80]	; (354c <UART_DRV_SendDataBlocking+0x7c>)
    34fc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:316
    uart_status_t retVal = kStatus_UART_Success;
    osa_status_t syncStatus;

     /** Indicates current transaction is blocking.*/
    uartState->isTxBlocking = true;
    3500:	2301      	movs	r3, #1
    3502:	75a3      	strb	r3, [r4, #22]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:319

     /** Start the transmission process */
    retVal = UART_DRV_StartSendData(instance, txBuff, txSize);
    3504:	f7ff fe84 	bl	3210 <UART_DRV_StartSendData>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:321

    if (retVal == kStatus_UART_Success)
    3508:	4605      	mov	r5, r0
    350a:	b990      	cbnz	r0, 3532 <UART_DRV_SendDataBlocking+0x62>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:326
    {
         /** Wait until the transmit is complete. */
        do
        {
            syncStatus = OSA_SemaWait(&uartState->txIrqSync, timeout);
    350c:	f104 0018 	add.w	r0, r4, #24
    3510:	4639      	mov	r1, r7
    3512:	f7fe fded 	bl	20f0 <OSA_SemaWait>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:327
        }while(syncStatus == kStatus_OSA_Idle);
    3516:	2803      	cmp	r0, #3
    3518:	d0f8      	beq.n	350c <UART_DRV_SendDataBlocking+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:329

        if (syncStatus != kStatus_OSA_Success)
    351a:	b138      	cbz	r0, 352c <UART_DRV_SendDataBlocking+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:332
        {
             /** Disable the transmitter data register empty interrupt */
            UART_BWR_C2_TIE(base, 0U);
    351c:	f106 7304 	add.w	r3, r6, #34603008	; 0x2100000
    3520:	3303      	adds	r3, #3
    3522:	015b      	lsls	r3, r3, #5
    3524:	2200      	movs	r2, #0
    3526:	771a      	strb	r2, [r3, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:337

             /** Update the information of the module driver state */
            uartState->isTxBusy = false;

            retVal = kStatus_UART_Timeout;
    3528:	250c      	movs	r5, #12
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:335
        {
             /** Disable the transmitter data register empty interrupt */
            UART_BWR_C2_TIE(base, 0U);

             /** Update the information of the module driver state */
            uartState->isTxBusy = false;
    352a:	7522      	strb	r2, [r4, #20]
UART_HAL_GetTxDatawordCountInFifo():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:897 (discriminator 1)
 * @param   base UART module base pointer.
 * @return  The number of data words currently in the UART transmit FIFO.
 */
static inline uint8_t UART_HAL_GetTxDatawordCountInFifo(UART_Type * base)
{
    return UART_RD_TCFIFO(base);
    352c:	7d33      	ldrb	r3, [r6, #20]
UART_DRV_SendDataBlocking():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:342 (discriminator 1)
            retVal = kStatus_UART_Timeout;
        }

#if FSL_FEATURE_UART_HAS_FIFO
         /** Wait till the TX FIFO is empty before returning. */
        while(UART_HAL_GetTxDatawordCountInFifo(base) != 0) { }
    352e:	2b00      	cmp	r3, #0
    3530:	d1fc      	bne.n	352c <UART_DRV_SendDataBlocking+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:347
#endif
    }

    return retVal;
}
    3532:	4628      	mov	r0, r5
    3534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3536:	bf00      	nop
    3538:	000076a3 	.word	0x000076a3
    353c:	0000767b 	.word	0x0000767b
    3540:	00007804 	.word	0x00007804
    3544:	0000770d 	.word	0x0000770d
    3548:	1fff0c58 	.word	0x1fff0c58
    354c:	00007648 	.word	0x00007648

00003550 <UART_DRV_IRQHandler>:
UART_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:601
 * This handler uses the buffers stored in the uart_state_t structs to transfer
 * data. This is not a public API as it is called whenever an interrupt occurs.
 *
 *END*/
void UART_DRV_IRQHandler(uint32_t instance)
{
    3550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:602
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    3552:	4b32      	ldr	r3, [pc, #200]	; (361c <UART_DRV_IRQHandler+0xcc>)
    3554:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:603
    UART_Type * base = g_uartBase[instance];
    3558:	4b31      	ldr	r3, [pc, #196]	; (3620 <UART_DRV_IRQHandler+0xd0>)
    355a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:606

     /** Exit the ISR if no transfer is happening for this instance. */
    if ((!uartState->isTxBusy) && (!uartState->isRxBusy))
    355e:	7d23      	ldrb	r3, [r4, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:601
 * This handler uses the buffers stored in the uart_state_t structs to transfer
 * data. This is not a public API as it is called whenever an interrupt occurs.
 *
 *END*/
void UART_DRV_IRQHandler(uint32_t instance)
{
    3560:	4606      	mov	r6, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:606
    uart_state_t * uartState = (uart_state_t *)g_uartStatePtr[instance];
    UART_Type * base = g_uartBase[instance];

     /** Exit the ISR if no transfer is happening for this instance. */
    if ((!uartState->isTxBusy) && (!uartState->isRxBusy))
    3562:	b913      	cbnz	r3, 356a <UART_DRV_IRQHandler+0x1a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:606 (discriminator 1)
    3564:	7d63      	ldrb	r3, [r4, #21]
    3566:	2b00      	cmp	r3, #0
    3568:	d056      	beq.n	3618 <UART_DRV_IRQHandler+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:613
        return;
    }

     /** Handle receive data register full interrupt, if rx data register full
     * interrupt is enabled AND there is data available. */
    if((UART_BRD_C2_RIE(base)) && (UART_BRD_S1_RDRF(base)))
    356a:	f105 7304 	add.w	r3, r5, #34603008	; 0x2100000
    356e:	3303      	adds	r3, #3
    3570:	015f      	lsls	r7, r3, #5
    3572:	7d3b      	ldrb	r3, [r7, #20]
    3574:	b1eb      	cbz	r3, 35b2 <UART_DRV_IRQHandler+0x62>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:613 (discriminator 1)
    3576:	f105 7304 	add.w	r3, r5, #34603008	; 0x2100000
    357a:	3304      	adds	r3, #4
    357c:	015b      	lsls	r3, r3, #5
    357e:	7d1b      	ldrb	r3, [r3, #20]
    3580:	b1bb      	cbz	r3, 35b2 <UART_DRV_IRQHandler+0x62>
UART_HAL_GetRxDatawordCountInFifo():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:924 (discriminator 1)
 * @param   base UART module base pointer.
 * @return  The number of data words currently in the UART receive FIFO.
 */
static inline uint8_t UART_HAL_GetRxDatawordCountInFifo(UART_Type * base)
{
    return UART_RD_RCFIFO(base);
    3582:	7dab      	ldrb	r3, [r5, #22]
UART_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:617 (discriminator 1)
    {
#if FSL_FEATURE_UART_HAS_FIFO
         /** Read out all data from RX FIFO */
        while(UART_HAL_GetRxDatawordCountInFifo(base))
    3584:	b1ab      	cbz	r3, 35b2 <UART_DRV_IRQHandler+0x62>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:621
        {
#endif
             /** Get data and put into receive buffer */
            UART_HAL_Getchar(base, uartState->rxBuff);
    3586:	4628      	mov	r0, r5
    3588:	68a1      	ldr	r1, [r4, #8]
    358a:	f7fe ff8f 	bl	24ac <UART_HAL_Getchar>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:624

             /** Invoke callback if there is one */
            if (uartState->rxCallback != NULL)
    358e:	6a23      	ldr	r3, [r4, #32]
    3590:	b11b      	cbz	r3, 359a <UART_DRV_IRQHandler+0x4a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:626
            {
                uartState->rxCallback(instance, uartState);
    3592:	4630      	mov	r0, r6
    3594:	4621      	mov	r1, r4
    3596:	4798      	blx	r3
    3598:	e7f3      	b.n	3582 <UART_DRV_IRQHandler+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:630
            }
            else
            {
                ++uartState->rxBuff;
    359a:	68a3      	ldr	r3, [r4, #8]
    359c:	3301      	adds	r3, #1
    359e:	60a3      	str	r3, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:631
                --uartState->rxSize;
    35a0:	6923      	ldr	r3, [r4, #16]
    35a2:	3b01      	subs	r3, #1
    35a4:	6123      	str	r3, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:634

                 /** Check and see if this was the last byte */
                if (uartState->rxSize == 0U)
    35a6:	6923      	ldr	r3, [r4, #16]
    35a8:	2b00      	cmp	r3, #0
    35aa:	d1ea      	bne.n	3582 <UART_DRV_IRQHandler+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:636
                {
                    UART_DRV_CompleteReceiveData(instance);
    35ac:	4630      	mov	r0, r6
    35ae:	f7ff fe87 	bl	32c0 <UART_DRV_CompleteReceiveData>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:649
#endif
    }

     /** Handle transmit data register empty interrupt, if tx data register empty
     * interrupt is enabled AND tx data register is currently empty. */
    if((UART_BRD_C2_TIE(base)) && (UART_BRD_S1_TDRE(base)))
    35b2:	7f3b      	ldrb	r3, [r7, #28]
    35b4:	b32b      	cbz	r3, 3602 <UART_DRV_IRQHandler+0xb2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:649 (discriminator 1)
    35b6:	f105 7304 	add.w	r3, r5, #34603008	; 0x2100000
    35ba:	3304      	adds	r3, #4
    35bc:	015b      	lsls	r3, r3, #5
    35be:	7f1b      	ldrb	r3, [r3, #28]
    35c0:	b1fb      	cbz	r3, 3602 <UART_DRV_IRQHandler+0xb2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:652
    {
         /** Check to see if there are any more bytes to send */
        if (uartState->txSize)
    35c2:	68e3      	ldr	r3, [r4, #12]
    35c4:	b1eb      	cbz	r3, 3602 <UART_DRV_IRQHandler+0xb2>
UART_HAL_GetTxDatawordCountInFifo():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_uart_hal.h:897
 * @param   base UART module base pointer.
 * @return  The number of data words currently in the UART transmit FIFO.
 */
static inline uint8_t UART_HAL_GetTxDatawordCountInFifo(UART_Type * base)
{
    return UART_RD_TCFIFO(base);
    35c6:	7d2b      	ldrb	r3, [r5, #20]
UART_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:656
        {
            uint8_t emptyEntryCountInFifo;
#if FSL_FEATURE_UART_HAS_FIFO
            emptyEntryCountInFifo = uartState->txFifoEntryCount -
    35c8:	7827      	ldrb	r7, [r4, #0]
    35ca:	1aff      	subs	r7, r7, r3
    35cc:	b2ff      	uxtb	r7, r7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:661 (discriminator 1)
                                    UART_HAL_GetTxDatawordCountInFifo(base);
#else
            emptyEntryCountInFifo = uartState->txFifoEntryCount;
#endif
            while(emptyEntryCountInFifo--)
    35ce:	b1c7      	cbz	r7, 3602 <UART_DRV_IRQHandler+0xb2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:664
            {
                 /** Transmit data and update tx size/buff */
                UART_HAL_Putchar(base, *(uartState->txBuff));
    35d0:	6863      	ldr	r3, [r4, #4]
    35d2:	4628      	mov	r0, r5
    35d4:	7819      	ldrb	r1, [r3, #0]
    35d6:	f7fe ff66 	bl	24a6 <UART_HAL_Putchar>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:667

                 /** Invoke callback if there is one */
                if (uartState->txCallback != NULL)
    35da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    35dc:	b11b      	cbz	r3, 35e6 <UART_DRV_IRQHandler+0x96>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:671
                {
                    /** The callback MUST set the txSize to 0 if the
                    * transmit is ended.*/
                   uartState->txCallback(instance, uartState);
    35de:	4630      	mov	r0, r6
    35e0:	4621      	mov	r1, r4
    35e2:	4798      	blx	r3
    35e4:	e005      	b.n	35f2 <UART_DRV_IRQHandler+0xa2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:675
                }
                else
                {
                    ++uartState->txBuff;
    35e6:	6863      	ldr	r3, [r4, #4]
    35e8:	3301      	adds	r3, #1
    35ea:	6063      	str	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:676
                    --uartState->txSize;
    35ec:	68e3      	ldr	r3, [r4, #12]
    35ee:	3b01      	subs	r3, #1
    35f0:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:680
                }

                 /** Check and see if this was the last byte */
                if (uartState->txSize == 0U)
    35f2:	68e3      	ldr	r3, [r4, #12]
    35f4:	3f01      	subs	r7, #1
    35f6:	b2ff      	uxtb	r7, r7
    35f8:	2b00      	cmp	r3, #0
    35fa:	d1e8      	bne.n	35ce <UART_DRV_IRQHandler+0x7e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:682
                {
                    UART_DRV_CompleteSendData(instance);
    35fc:	4630      	mov	r0, r6
    35fe:	f7ff fe35 	bl	326c <UART_DRV_CompleteSendData>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:690
            }
        }
    }

     /** Handle receive overrun interrupt */
    if (UART_HAL_GetStatusFlag(base, kUartRxOverrun))
    3602:	4628      	mov	r0, r5
    3604:	2103      	movs	r1, #3
    3606:	f7fe ff89 	bl	251c <UART_HAL_GetStatusFlag>
    360a:	b128      	cbz	r0, 3618 <UART_DRV_IRQHandler+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:693
    {
         /** Clear the flag, OR the rxDataRegFull will not be set any more */
        UART_HAL_ClearStatusFlag(base, kUartRxOverrun);
    360c:	4628      	mov	r0, r5
    360e:	2103      	movs	r1, #3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:695
    }
}
    3610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/uart/fsl_uart_driver.c:693

     /** Handle receive overrun interrupt */
    if (UART_HAL_GetStatusFlag(base, kUartRxOverrun))
    {
         /** Clear the flag, OR the rxDataRegFull will not be set any more */
        UART_HAL_ClearStatusFlag(base, kUartRxOverrun);
    3614:	f7fe bf97 	b.w	2546 <UART_HAL_ClearStatusFlag>
    3618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    361a:	bf00      	nop
    361c:	1fff0c58 	.word	0x1fff0c58
    3620:	00007648 	.word	0x00007648

00003624 <INT_SYS_EnableIRQ>:
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    3624:	2800      	cmp	r0, #0
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:91
 * the peripheral interrupt, from 0 to a maximum supported IRQ.
 *
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
    3626:	b508      	push	{r3, lr}
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
     /** check IRQ number */
    assert(0 <= irqNumber);
    3628:	da04      	bge.n	3634 <INT_SYS_EnableIRQ+0x10>
    362a:	480b      	ldr	r0, [pc, #44]	; (3658 <INT_SYS_EnableIRQ+0x34>)
    362c:	4a0b      	ldr	r2, [pc, #44]	; (365c <INT_SYS_EnableIRQ+0x38>)
    362e:	4b0c      	ldr	r3, [pc, #48]	; (3660 <INT_SYS_EnableIRQ+0x3c>)
    3630:	215d      	movs	r1, #93	; 0x5d
    3632:	e005      	b.n	3640 <INT_SYS_EnableIRQ+0x1c>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    3634:	2855      	cmp	r0, #85	; 0x55
    3636:	dd05      	ble.n	3644 <INT_SYS_EnableIRQ+0x20>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94 (discriminator 1)
    3638:	4807      	ldr	r0, [pc, #28]	; (3658 <INT_SYS_EnableIRQ+0x34>)
    363a:	4a08      	ldr	r2, [pc, #32]	; (365c <INT_SYS_EnableIRQ+0x38>)
    363c:	4b09      	ldr	r3, [pc, #36]	; (3664 <INT_SYS_EnableIRQ+0x40>)
    363e:	215e      	movs	r1, #94	; 0x5e
    3640:	f002 fc02 	bl	5e48 <__assert_func>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    3644:	0942      	lsrs	r2, r0, #5
    3646:	2301      	movs	r3, #1
    3648:	f000 001f 	and.w	r0, r0, #31
    364c:	fa03 f000 	lsl.w	r0, r3, r0
    3650:	4b05      	ldr	r3, [pc, #20]	; (3668 <INT_SYS_EnableIRQ+0x44>)
    3652:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    3656:	bd08      	pop	{r3, pc}
    3658:	00007760 	.word	0x00007760
    365c:	00007931 	.word	0x00007931
    3660:	000077ca 	.word	0x000077ca
    3664:	000077d9 	.word	0x000077d9
    3668:	e000e100 	.word	0xe000e100

0000366c <RTC_DRV_Init>:
RTC_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:65
 *
 *END*/

rtc_status_t RTC_DRV_Init(uint32_t instance)
{
    RTC_Type *rtcBase = g_rtcBase[instance];
    366c:	4b15      	ldr	r3, [pc, #84]	; (36c4 <RTC_DRV_Init+0x58>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:64
 * This function will initialize the Real Time Clock module.
 *
 *END*/

rtc_status_t RTC_DRV_Init(uint32_t instance)
{
    366e:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:65
    RTC_Type *rtcBase = g_rtcBase[instance];
    3670:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
 * @param base Base address for current SIM instance.
 * @param name Name of the module to enable.
 */
static inline void SIM_HAL_EnableClock(SIM_Type * base, sim_clock_gate_name_t name)
{
    SIM_BWR_SCGC_BIT(base, name, 1U);
    3674:	4b14      	ldr	r3, [pc, #80]	; (36c8 <RTC_DRV_Init+0x5c>)
    3676:	2401      	movs	r4, #1
RTC_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:64
 * This function will initialize the Real Time Clock module.
 *
 *END*/

rtc_status_t RTC_DRV_Init(uint32_t instance)
{
    3678:	4605      	mov	r5, r0
CLOCK_SYS_EnableRtcClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    367a:	601c      	str	r4, [r3, #0]
RTC_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:71

     /** Enable clock gate to RTC module */
    CLOCK_SYS_EnableRtcClock(0U);

     /** Initialize the general configuration for RTC module.*/
    RTC_HAL_Init(rtcBase);
    367c:	4630      	mov	r0, r6
    367e:	f7ff f809 	bl	2694 <RTC_HAL_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:72
    RTC_HAL_Enable(rtcBase);
    3682:	4630      	mov	r0, r6
    3684:	f7fe fff4 	bl	2670 <RTC_HAL_Enable>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:74

    NVIC_ClearPendingIRQ(g_rtcIrqId[instance]);
    3688:	4b10      	ldr	r3, [pc, #64]	; (36cc <RTC_DRV_Init+0x60>)
    368a:	5d5b      	ldrb	r3, [r3, r5]
NVIC_ClearPendingIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1674
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    368c:	b258      	sxtb	r0, r3
    368e:	0942      	lsrs	r2, r0, #5
    3690:	f003 031f 	and.w	r3, r3, #31
    3694:	fa04 f103 	lsl.w	r1, r4, r3
    3698:	3260      	adds	r2, #96	; 0x60
    369a:	4b0d      	ldr	r3, [pc, #52]	; (36d0 <RTC_DRV_Init+0x64>)
    369c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
RTC_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:75
    NVIC_ClearPendingIRQ(g_rtcSecondsIrqId[instance]);
    36a0:	4a0c      	ldr	r2, [pc, #48]	; (36d4 <RTC_DRV_Init+0x68>)
    36a2:	5d52      	ldrb	r2, [r2, r5]
NVIC_ClearPendingIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1674
    36a4:	b255      	sxtb	r5, r2
    36a6:	0969      	lsrs	r1, r5, #5
    36a8:	f002 021f 	and.w	r2, r2, #31
    36ac:	3160      	adds	r1, #96	; 0x60
    36ae:	4094      	lsls	r4, r2
    36b0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
RTC_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:76
    INT_SYS_EnableIRQ(g_rtcIrqId[instance]);
    36b4:	f7ff ffb6 	bl	3624 <INT_SYS_EnableIRQ>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:77
    INT_SYS_EnableIRQ(g_rtcSecondsIrqId[instance]);
    36b8:	4628      	mov	r0, r5
    36ba:	f7ff ffb3 	bl	3624 <INT_SYS_EnableIRQ>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/rtc/fsl_rtc_driver.c:80

    return kStatusRtcSuccess;
}
    36be:	2000      	movs	r0, #0
    36c0:	bd70      	pop	{r4, r5, r6, pc}
    36c2:	bf00      	nop
    36c4:	00007874 	.word	0x00007874
    36c8:	429007f4 	.word	0x429007f4
    36cc:	00007878 	.word	0x00007878
    36d0:	e000e100 	.word	0xe000e100
    36d4:	00007872 	.word	0x00007872

000036d8 <INT_SYS_DisableIRQ>:
INT_SYS_DisableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:112
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_DisableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    36d8:	2800      	cmp	r0, #0
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:110
 * register.
 *
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_DisableIRQ(IRQn_Type irqNumber)
{
    36da:	b508      	push	{r3, lr}
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:112
     /** check IRQ number */
    assert(0 <= irqNumber);
    36dc:	da04      	bge.n	36e8 <INT_SYS_DisableIRQ+0x10>
    36de:	480c      	ldr	r0, [pc, #48]	; (3710 <INT_SYS_DisableIRQ+0x38>)
    36e0:	4a0c      	ldr	r2, [pc, #48]	; (3714 <INT_SYS_DisableIRQ+0x3c>)
    36e2:	4b0d      	ldr	r3, [pc, #52]	; (3718 <INT_SYS_DisableIRQ+0x40>)
    36e4:	2170      	movs	r1, #112	; 0x70
    36e6:	e005      	b.n	36f4 <INT_SYS_DisableIRQ+0x1c>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:113
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    36e8:	2855      	cmp	r0, #85	; 0x55
    36ea:	dd05      	ble.n	36f8 <INT_SYS_DisableIRQ+0x20>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:113 (discriminator 1)
    36ec:	4808      	ldr	r0, [pc, #32]	; (3710 <INT_SYS_DisableIRQ+0x38>)
    36ee:	4a09      	ldr	r2, [pc, #36]	; (3714 <INT_SYS_DisableIRQ+0x3c>)
    36f0:	4b0a      	ldr	r3, [pc, #40]	; (371c <INT_SYS_DisableIRQ+0x44>)
    36f2:	2171      	movs	r1, #113	; 0x71
    36f4:	f002 fba8 	bl	5e48 <__assert_func>
NVIC_DisableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1639
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    36f8:	0942      	lsrs	r2, r0, #5
    36fa:	2301      	movs	r3, #1
    36fc:	f000 001f 	and.w	r0, r0, #31
    3700:	fa03 f000 	lsl.w	r0, r3, r0
    3704:	3220      	adds	r2, #32
    3706:	4b06      	ldr	r3, [pc, #24]	; (3720 <INT_SYS_DisableIRQ+0x48>)
    3708:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    370c:	bd08      	pop	{r3, pc}
    370e:	bf00      	nop
    3710:	00007760 	.word	0x00007760
    3714:	00007a4b 	.word	0x00007a4b
    3718:	000077ca 	.word	0x000077ca
    371c:	000077d9 	.word	0x000077d9
    3720:	e000e100 	.word	0xe000e100

00003724 <LPTMR_DRV_Init>:
LPTMR_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:59
 * This function will initialize the LPTMR driver according to user configure
 * strcuture.
 *
 *END*/
lptmr_status_t LPTMR_DRV_Init(uint32_t instance, lptmr_state_t *userStatePtr, const lptmr_user_config_t* userConfigPtr)
{
    3724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3728:	460d      	mov	r5, r1
    372a:	4614      	mov	r4, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:60
    assert(instance < LPTMR_INSTANCE_COUNT);
    372c:	b120      	cbz	r0, 3738 <LPTMR_DRV_Init+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:60 (discriminator 1)
    372e:	483d      	ldr	r0, [pc, #244]	; (3824 <LPTMR_DRV_Init+0x100>)
    3730:	4a3d      	ldr	r2, [pc, #244]	; (3828 <LPTMR_DRV_Init+0x104>)
    3732:	4b3e      	ldr	r3, [pc, #248]	; (382c <LPTMR_DRV_Init+0x108>)
    3734:	213c      	movs	r1, #60	; 0x3c
    3736:	e047      	b.n	37c8 <LPTMR_DRV_Init+0xa4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:62

    LPTMR_Type * base = g_lptmrBase[instance];
    3738:	4b3d      	ldr	r3, [pc, #244]	; (3830 <LPTMR_DRV_Init+0x10c>)
    373a:	681e      	ldr	r6, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:66
    lptmr_prescaler_user_config_t prescalerUserConfig;
    lptmr_working_mode_user_config_t workingModeUserConfig;

    if ((!userConfigPtr) || (!userStatePtr))
    373c:	2a00      	cmp	r2, #0
    373e:	d06b      	beq.n	3818 <LPTMR_DRV_Init+0xf4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:66 (discriminator 1)
    3740:	2900      	cmp	r1, #0
    3742:	d069      	beq.n	3818 <LPTMR_DRV_Init+0xf4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:72
    {
        return kStatus_LPTMR_NullArgument;
    }

     /** prescaler value 0 is invalid while working as pulse counter */
    if ((kLptmrTimerModePulseCounter == userConfigPtr->timerMode) &&
    3744:	7813      	ldrb	r3, [r2, #0]
    3746:	7912      	ldrb	r2, [r2, #4]
    3748:	2b01      	cmp	r3, #1
    374a:	79a3      	ldrb	r3, [r4, #6]
    374c:	d102      	bne.n	3754 <LPTMR_DRV_Init+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:72 (discriminator 1)
    374e:	b10a      	cbz	r2, 3754 <LPTMR_DRV_Init+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:73
         (true == userConfigPtr->prescalerEnable) &&
    3750:	2b00      	cmp	r3, #0
    3752:	d063      	beq.n	381c <LPTMR_DRV_Init+0xf8>
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    3754:	4937      	ldr	r1, [pc, #220]	; (3834 <LPTMR_DRV_Init+0x110>)
    3756:	f04f 0801 	mov.w	r8, #1
LPTMR_HAL_Disable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:159
 *
 * @param base The LPTMR peripheral base address.
 */
static inline void LPTMR_HAL_Disable(LPTMR_Type * base)
{
    LPTMR_BWR_CSR_TEN(base, (uint8_t)false);
    375a:	f106 7704 	add.w	r7, r6, #34603008	; 0x2100000
CLOCK_SYS_EnableLptmrClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    375e:	f8c1 8000 	str.w	r8, [r1]
LPTMR_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:87
     /** Disable lptmr and reset lptmr logic */
    LPTMR_HAL_Disable(base);

     /** LPTMR prescaler configure */
    prescalerUserConfig.prescalerClockSelect = (lptmr_prescaler_clock_select_t)userConfigPtr->prescalerClockSource;
    prescalerUserConfig.prescalerBypass = (uint8_t)(userConfigPtr->prescalerEnable == false);
    3762:	ea82 0208 	eor.w	r2, r2, r8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:86

     /** Disable lptmr and reset lptmr logic */
    LPTMR_HAL_Disable(base);

     /** LPTMR prescaler configure */
    prescalerUserConfig.prescalerClockSelect = (lptmr_prescaler_clock_select_t)userConfigPtr->prescalerClockSource;
    3766:	7961      	ldrb	r1, [r4, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:87
    prescalerUserConfig.prescalerBypass = (uint8_t)(userConfigPtr->prescalerEnable == false);
    3768:	f88d 2000 	strb.w	r2, [sp]
LPTMR_HAL_Disable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:159
    376c:	017f      	lsls	r7, r7, #5
LPTMR_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:88
    prescalerUserConfig.prescalerValue = userConfigPtr->prescalerValue;
    376e:	f88d 3002 	strb.w	r3, [sp, #2]
LPTMR_HAL_Disable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:159
    3772:	f04f 0900 	mov.w	r9, #0
LPTMR_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:86

     /** Disable lptmr and reset lptmr logic */
    LPTMR_HAL_Disable(base);

     /** LPTMR prescaler configure */
    prescalerUserConfig.prescalerClockSelect = (lptmr_prescaler_clock_select_t)userConfigPtr->prescalerClockSource;
    3776:	f88d 1001 	strb.w	r1, [sp, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:89
    prescalerUserConfig.prescalerBypass = (uint8_t)(userConfigPtr->prescalerEnable == false);
    prescalerUserConfig.prescalerValue = userConfigPtr->prescalerValue;
    LPTMR_HAL_SetPrescalerMode(base, prescalerUserConfig);
    377a:	4630      	mov	r0, r6
    377c:	9900      	ldr	r1, [sp, #0]
LPTMR_HAL_Disable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:159
    377e:	f8c7 9000 	str.w	r9, [r7]
LPTMR_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:89
    3782:	f7ff f898 	bl	28b6 <LPTMR_HAL_SetPrescalerMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:92

     /** Working Mode configure */
    workingModeUserConfig.timerModeSelect = userConfigPtr->timerMode;
    3786:	7823      	ldrb	r3, [r4, #0]
    3788:	f88d 3004 	strb.w	r3, [sp, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:93
    workingModeUserConfig.freeRunningEnable = userConfigPtr->freeRunningEnable;
    378c:	78e3      	ldrb	r3, [r4, #3]
    378e:	f88d 3005 	strb.w	r3, [sp, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:94
    workingModeUserConfig.pinPolarity = userConfigPtr->pinPolarity;
    3792:	78a3      	ldrb	r3, [r4, #2]
    3794:	f88d 3006 	strb.w	r3, [sp, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:95
    workingModeUserConfig.pinSelect = userConfigPtr->pinSelect;
    3798:	7863      	ldrb	r3, [r4, #1]
    379a:	f88d 3007 	strb.w	r3, [sp, #7]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:96
    LPTMR_HAL_SetTimerWorkingMode(base,workingModeUserConfig);
    379e:	4630      	mov	r0, r6
    37a0:	9901      	ldr	r1, [sp, #4]
    37a2:	f7ff f868 	bl	2876 <LPTMR_HAL_SetTimerWorkingMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:99

     /** Internal context */
    lptmr_state_ptrs[instance] = userStatePtr;
    37a6:	4b24      	ldr	r3, [pc, #144]	; (3838 <LPTMR_DRV_Init+0x114>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:104

    userStatePtr->userCallbackFunc = NULL;

     /** LPTMR interrupt */
    if (userConfigPtr->isInterruptEnabled)
    37a8:	79e2      	ldrb	r2, [r4, #7]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:99
    workingModeUserConfig.pinPolarity = userConfigPtr->pinPolarity;
    workingModeUserConfig.pinSelect = userConfigPtr->pinSelect;
    LPTMR_HAL_SetTimerWorkingMode(base,workingModeUserConfig);

     /** Internal context */
    lptmr_state_ptrs[instance] = userStatePtr;
    37aa:	601d      	str	r5, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:101

    userStatePtr->userCallbackFunc = NULL;
    37ac:	f8c5 9000 	str.w	r9, [r5]
    37b0:	4b22      	ldr	r3, [pc, #136]	; (383c <LPTMR_DRV_Init+0x118>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:104

     /** LPTMR interrupt */
    if (userConfigPtr->isInterruptEnabled)
    37b2:	b1da      	cbz	r2, 37ec <LPTMR_DRV_Init+0xc8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:107
    {
        LPTMR_HAL_SetIntCmd(base,true);
        INT_SYS_EnableIRQ(g_lptmrIrqId[instance]);
    37b4:	781a      	ldrb	r2, [r3, #0]
LPTMR_HAL_SetIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:193
 * @param baseAddr The LPTMR peripheral base address
 * @param enable Pass true to enable LPTMR interrupt
 */
static inline void LPTMR_HAL_SetIntCmd(LPTMR_Type * baseAddr,  bool enable)
{
    LPTMR_BWR_CSR_TIE(baseAddr, enable);
    37b6:	f8c7 8018 	str.w	r8, [r7, #24]
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    37ba:	b253      	sxtb	r3, r2
    37bc:	454b      	cmp	r3, r9
    37be:	da05      	bge.n	37cc <LPTMR_DRV_Init+0xa8>
    37c0:	481f      	ldr	r0, [pc, #124]	; (3840 <LPTMR_DRV_Init+0x11c>)
    37c2:	4a20      	ldr	r2, [pc, #128]	; (3844 <LPTMR_DRV_Init+0x120>)
    37c4:	4b20      	ldr	r3, [pc, #128]	; (3848 <LPTMR_DRV_Init+0x124>)
    37c6:	215d      	movs	r1, #93	; 0x5d
    37c8:	f002 fb3e 	bl	5e48 <__assert_func>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    37cc:	2b55      	cmp	r3, #85	; 0x55
    37ce:	dd04      	ble.n	37da <LPTMR_DRV_Init+0xb6>
    37d0:	481b      	ldr	r0, [pc, #108]	; (3840 <LPTMR_DRV_Init+0x11c>)
    37d2:	4a1c      	ldr	r2, [pc, #112]	; (3844 <LPTMR_DRV_Init+0x120>)
    37d4:	4b1d      	ldr	r3, [pc, #116]	; (384c <LPTMR_DRV_Init+0x128>)
    37d6:	215e      	movs	r1, #94	; 0x5e
    37d8:	e7f6      	b.n	37c8 <LPTMR_DRV_Init+0xa4>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    37da:	095b      	lsrs	r3, r3, #5
    37dc:	f002 021f 	and.w	r2, r2, #31
    37e0:	491b      	ldr	r1, [pc, #108]	; (3850 <LPTMR_DRV_Init+0x12c>)
    37e2:	fa08 f202 	lsl.w	r2, r8, r2
    37e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    37ea:	e004      	b.n	37f6 <LPTMR_DRV_Init+0xd2>
LPTMR_HAL_SetIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:193
    37ec:	61ba      	str	r2, [r7, #24]
LPTMR_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:112
    }
    else
    {
        LPTMR_HAL_SetIntCmd(base,false);
        INT_SYS_DisableIRQ(g_lptmrIrqId[instance]);
    37ee:	f993 0000 	ldrsb.w	r0, [r3]
    37f2:	f7ff ff71 	bl	36d8 <INT_SYS_DisableIRQ>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:116
    }

     /** Caculate prescaler clock frequency */
    if ( kLptmrTimerModeTimeCounter == userConfigPtr->timerMode)
    37f6:	7826      	ldrb	r6, [r4, #0]
    37f8:	b10e      	cbz	r6, 37fe <LPTMR_DRV_Init+0xda>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:127
        {
            userStatePtr->prescalerClockHz = (userStatePtr->prescalerClockHz >> ((uint32_t)(userConfigPtr->prescalerValue+1)));
        }
    }

    return kStatus_LPTMR_Success;
    37fa:	2000      	movs	r0, #0
    37fc:	e00f      	b.n	381e <LPTMR_DRV_Init+0xfa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:118
    }

     /** Caculate prescaler clock frequency */
    if ( kLptmrTimerModeTimeCounter == userConfigPtr->timerMode)
    {
        userStatePtr->prescalerClockHz = CLOCK_SYS_GetLptmrFreq(instance,
    37fe:	4630      	mov	r0, r6
    3800:	7961      	ldrb	r1, [r4, #5]
    3802:	f7fe fbc3 	bl	1f8c <CLOCK_SYS_GetLptmrFreq>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:121
                userConfigPtr->prescalerClockSource);

        if (userConfigPtr->prescalerEnable)
    3806:	7923      	ldrb	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:118
    }

     /** Caculate prescaler clock frequency */
    if ( kLptmrTimerModeTimeCounter == userConfigPtr->timerMode)
    {
        userStatePtr->prescalerClockHz = CLOCK_SYS_GetLptmrFreq(instance,
    3808:	6068      	str	r0, [r5, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:121
                userConfigPtr->prescalerClockSource);

        if (userConfigPtr->prescalerEnable)
    380a:	2b00      	cmp	r3, #0
    380c:	d0f5      	beq.n	37fa <LPTMR_DRV_Init+0xd6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:123
        {
            userStatePtr->prescalerClockHz = (userStatePtr->prescalerClockHz >> ((uint32_t)(userConfigPtr->prescalerValue+1)));
    380e:	79a3      	ldrb	r3, [r4, #6]
    3810:	3301      	adds	r3, #1
    3812:	40d8      	lsrs	r0, r3
    3814:	6068      	str	r0, [r5, #4]
    3816:	e7f0      	b.n	37fa <LPTMR_DRV_Init+0xd6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:68
    lptmr_prescaler_user_config_t prescalerUserConfig;
    lptmr_working_mode_user_config_t workingModeUserConfig;

    if ((!userConfigPtr) || (!userStatePtr))
    {
        return kStatus_LPTMR_NullArgument;
    3818:	2002      	movs	r0, #2
    381a:	e000      	b.n	381e <LPTMR_DRV_Init+0xfa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:76
     /** prescaler value 0 is invalid while working as pulse counter */
    if ((kLptmrTimerModePulseCounter == userConfigPtr->timerMode) &&
         (true == userConfigPtr->prescalerEnable) &&
         (kLptmrPrescalerDivide2 == userConfigPtr->prescalerValue))
    {
        return kStatus_LPTMR_InvalidPrescalerValue;
    381c:	2003      	movs	r0, #3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:128
            userStatePtr->prescalerClockHz = (userStatePtr->prescalerClockHz >> ((uint32_t)(userConfigPtr->prescalerValue+1)));
        }
    }

    return kStatus_LPTMR_Success;
}
    381e:	b003      	add	sp, #12
    3820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3824:	0000796d 	.word	0x0000796d
    3828:	00007949 	.word	0x00007949
    382c:	000079d9 	.word	0x000079d9
    3830:	00007944 	.word	0x00007944
    3834:	42900700 	.word	0x42900700
    3838:	1fff0c70 	.word	0x1fff0c70
    383c:	00007948 	.word	0x00007948
    3840:	00007760 	.word	0x00007760
    3844:	00007a39 	.word	0x00007a39
    3848:	000077ca 	.word	0x000077ca
    384c:	000077d9 	.word	0x000077d9
    3850:	e000e100 	.word	0xe000e100

00003854 <LPTMR_DRV_IRQHandler>:
LPTMR_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:359
 * It includes the process for interrupt mode defined by driver. Currently, it
 * will be called inside the system-defined ISR.
 *
 *END*/
void LPTMR_DRV_IRQHandler(uint32_t instance)
{
    3854:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:360
    assert(instance < LPTMR_INSTANCE_COUNT);
    3856:	b128      	cbz	r0, 3864 <LPTMR_DRV_IRQHandler+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:360 (discriminator 1)
    3858:	4810      	ldr	r0, [pc, #64]	; (389c <LPTMR_DRV_IRQHandler+0x48>)
    385a:	4a11      	ldr	r2, [pc, #68]	; (38a0 <LPTMR_DRV_IRQHandler+0x4c>)
    385c:	4b11      	ldr	r3, [pc, #68]	; (38a4 <LPTMR_DRV_IRQHandler+0x50>)
    385e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    3862:	e007      	b.n	3874 <LPTMR_DRV_IRQHandler+0x20>
SIM_HAL_GetGateCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:507
 * @param name Name of the module to get.
 * @return state true - ungated(Enabled), false - gated (Disabled)
 */
static inline bool SIM_HAL_GetGateCmd(SIM_Type * base, sim_clock_gate_name_t name)
{
    return (bool)SIM_BRD_SCGC_BIT(base, name);
    3864:	4b10      	ldr	r3, [pc, #64]	; (38a8 <LPTMR_DRV_IRQHandler+0x54>)
    3866:	681b      	ldr	r3, [r3, #0]
LPTMR_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:361
    assert(CLOCK_SYS_GetLptmrGateCmd(instance));
    3868:	b933      	cbnz	r3, 3878 <LPTMR_DRV_IRQHandler+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:361 (discriminator 1)
    386a:	480c      	ldr	r0, [pc, #48]	; (389c <LPTMR_DRV_IRQHandler+0x48>)
    386c:	4a0c      	ldr	r2, [pc, #48]	; (38a0 <LPTMR_DRV_IRQHandler+0x4c>)
    386e:	4b0f      	ldr	r3, [pc, #60]	; (38ac <LPTMR_DRV_IRQHandler+0x58>)
    3870:	f240 1169 	movw	r1, #361	; 0x169
    3874:	f002 fae8 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:363

    LPTMR_Type * base = g_lptmrBase[instance];
    3878:	4b0d      	ldr	r3, [pc, #52]	; (38b0 <LPTMR_DRV_IRQHandler+0x5c>)
LPTMR_HAL_ClearIntFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_lptmr_hal.h:169
 *
 * @param base The LPTMR peripheral base address.
 */
static inline void LPTMR_HAL_ClearIntFlag(LPTMR_Type * base)
{
    LPTMR_BWR_CSR_TCF(base, 1);
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    3880:	015b      	lsls	r3, r3, #5
    3882:	2201      	movs	r2, #1
    3884:	61da      	str	r2, [r3, #28]
LPTMR_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:368

     /** Clear interrupt flag */
    LPTMR_HAL_ClearIntFlag(base);

    if (lptmr_state_ptrs[instance])
    3886:	4b0b      	ldr	r3, [pc, #44]	; (38b4 <LPTMR_DRV_IRQHandler+0x60>)
    3888:	681a      	ldr	r2, [r3, #0]
    388a:	b12a      	cbz	r2, 3898 <LPTMR_DRV_IRQHandler+0x44>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:370
    {
        if (lptmr_state_ptrs[instance]->userCallbackFunc)
    388c:	681a      	ldr	r2, [r3, #0]
    388e:	6812      	ldr	r2, [r2, #0]
    3890:	b112      	cbz	r2, 3898 <LPTMR_DRV_IRQHandler+0x44>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/lptmr/fsl_lptmr_driver.c:373
        {
             /** Execute user-defined callback function. */
            (*(lptmr_state_ptrs[instance]->userCallbackFunc))();
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	4798      	blx	r3
    3898:	bd08      	pop	{r3, pc}
    389a:	bf00      	nop
    389c:	0000796d 	.word	0x0000796d
    38a0:	00007958 	.word	0x00007958
    38a4:	000079d9 	.word	0x000079d9
    38a8:	42900700 	.word	0x42900700
    38ac:	000079f9 	.word	0x000079f9
    38b0:	00007944 	.word	0x00007944
    38b4:	1fff0c70 	.word	0x1fff0c70

000038b8 <I2C_DRV_CompleteTransfer>:
I2C_DRV_CompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:468
 * transaction APIs.
 *
 *END*/
static void I2C_DRV_CompleteTransfer(uint32_t instance)
{
    assert(instance < I2C_INSTANCE_COUNT);
    38b8:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:467
 * This function is a static function which will be called by other data
 * transaction APIs.
 *
 *END*/
static void I2C_DRV_CompleteTransfer(uint32_t instance)
{
    38ba:	b510      	push	{r4, lr}
    38bc:	4603      	mov	r3, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:468
    assert(instance < I2C_INSTANCE_COUNT);
    38be:	d906      	bls.n	38ce <I2C_DRV_CompleteTransfer+0x16>
    38c0:	4813      	ldr	r0, [pc, #76]	; (3910 <I2C_DRV_CompleteTransfer+0x58>)
    38c2:	4a14      	ldr	r2, [pc, #80]	; (3914 <I2C_DRV_CompleteTransfer+0x5c>)
    38c4:	4b14      	ldr	r3, [pc, #80]	; (3918 <I2C_DRV_CompleteTransfer+0x60>)
    38c6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    38ca:	f002 fabd 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:470

    I2C_Type * base = g_i2cBase[instance];
    38ce:	4a13      	ldr	r2, [pc, #76]	; (391c <I2C_DRV_CompleteTransfer+0x64>)
    38d0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:471
    i2c_master_state_t * master = (i2c_master_state_t *)g_i2cStatePtr[instance];
    38d4:	4a12      	ldr	r2, [pc, #72]	; (3920 <I2C_DRV_CompleteTransfer+0x68>)
    38d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:473

    if ((!master->isRequesting)
    38da:	7ce3      	ldrb	r3, [r4, #19]
    38dc:	b12b      	cbz	r3, 38ea <I2C_DRV_CompleteTransfer+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:474
     || (master->status == kStatus_I2C_ReceivedNak)
    38de:	7c23      	ldrb	r3, [r4, #16]
    38e0:	2b05      	cmp	r3, #5
    38e2:	d002      	beq.n	38ea <I2C_DRV_CompleteTransfer+0x32>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:475
     || (master->status == kStatus_I2C_Timeout))
    38e4:	7c23      	ldrb	r3, [r4, #16]
    38e6:	2b04      	cmp	r3, #4
    38e8:	d109      	bne.n	38fe <I2C_DRV_CompleteTransfer+0x46>
I2C_HAL_SetIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:645
 * @param base The I2C peripheral base pointer
 * @param enable   Pass true to enable interrupt, false to disable.
 */
static inline void I2C_HAL_SetIntCmd(I2C_Type * base, bool enable)
{
    I2C_BWR_C1_IICIE(base, (uint8_t)enable);
    38ea:	f100 7304 	add.w	r3, r0, #34603008	; 0x2100000
    38ee:	3302      	adds	r3, #2
    38f0:	015b      	lsls	r3, r3, #5
    38f2:	2200      	movs	r2, #0
    38f4:	761a      	strb	r2, [r3, #24]
I2C_DRV_CompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:481
    {
         /** Disable interrupt. */
        I2C_HAL_SetIntCmd(base, false);

         /** Generate stop signal. */
        I2C_HAL_SendStop(base);
    38f6:	f7ff f837 	bl	2968 <I2C_HAL_SendStop>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:484

         /** Indicate I2C bus is idle. */
        master->i2cIdle = true;
    38fa:	2301      	movs	r3, #1
    38fc:	7463      	strb	r3, [r4, #17]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:487
    }

    if (master->isBlocking)
    38fe:	7ca3      	ldrb	r3, [r4, #18]
    3900:	b12b      	cbz	r3, 390e <I2C_DRV_CompleteTransfer+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:489
    {
        OSA_SemaPost(&master->irqSync);
    3902:	f104 0018 	add.w	r0, r4, #24
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:491
    }
}
    3906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:489
        master->i2cIdle = true;
    }

    if (master->isBlocking)
    {
        OSA_SemaPost(&master->irqSync);
    390a:	f7fe bc15 	b.w	2138 <OSA_SemaPost>
    390e:	bd10      	pop	{r4, pc}
    3910:	00007ac8 	.word	0x00007ac8
    3914:	00007b63 	.word	0x00007b63
    3918:	00007b37 	.word	0x00007b37
    391c:	00007a64 	.word	0x00007a64
    3920:	1fff0c74 	.word	0x1fff0c74

00003924 <I2C_DRV_MasterInit>:
I2C_DRV_MasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:88
 * This function will initialize the I2C master mode driver, enable I2C clock,
 * and enable I2C interrupt.
 *
 *END*/
i2c_status_t I2C_DRV_MasterInit(uint32_t instance, i2c_master_state_t * master)
{
    3924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3928:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:89
    assert(master);
    392a:	460d      	mov	r5, r1
    392c:	b921      	cbnz	r1, 3938 <I2C_DRV_MasterInit+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:89 (discriminator 1)
    392e:	4827      	ldr	r0, [pc, #156]	; (39cc <I2C_DRV_MasterInit+0xa8>)
    3930:	4a27      	ldr	r2, [pc, #156]	; (39d0 <I2C_DRV_MasterInit+0xac>)
    3932:	4b28      	ldr	r3, [pc, #160]	; (39d4 <I2C_DRV_MasterInit+0xb0>)
    3934:	2159      	movs	r1, #89	; 0x59
    3936:	e005      	b.n	3944 <I2C_DRV_MasterInit+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:90
    assert(instance < I2C_INSTANCE_COUNT);
    3938:	2802      	cmp	r0, #2
    393a:	d905      	bls.n	3948 <I2C_DRV_MasterInit+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:90 (discriminator 1)
    393c:	4823      	ldr	r0, [pc, #140]	; (39cc <I2C_DRV_MasterInit+0xa8>)
    393e:	4a24      	ldr	r2, [pc, #144]	; (39d0 <I2C_DRV_MasterInit+0xac>)
    3940:	4b25      	ldr	r3, [pc, #148]	; (39d8 <I2C_DRV_MasterInit+0xb4>)
    3942:	215a      	movs	r1, #90	; 0x5a
    3944:	f002 fa80 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:95

    I2C_Type * base = g_i2cBase[instance];

     /** Exit if current instance is already initialized */
    if (g_i2cStatePtr[instance])
    3948:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 39f8 <I2C_DRV_MasterInit+0xd4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:92
i2c_status_t I2C_DRV_MasterInit(uint32_t instance, i2c_master_state_t * master)
{
    assert(master);
    assert(instance < I2C_INSTANCE_COUNT);

    I2C_Type * base = g_i2cBase[instance];
    394c:	4b23      	ldr	r3, [pc, #140]	; (39dc <I2C_DRV_MasterInit+0xb8>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:95

     /** Exit if current instance is already initialized */
    if (g_i2cStatePtr[instance])
    394e:	f858 6020 	ldr.w	r6, [r8, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:92
i2c_status_t I2C_DRV_MasterInit(uint32_t instance, i2c_master_state_t * master)
{
    assert(master);
    assert(instance < I2C_INSTANCE_COUNT);

    I2C_Type * base = g_i2cBase[instance];
    3952:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:95

     /** Exit if current instance is already initialized */
    if (g_i2cStatePtr[instance])
    3956:	2e00      	cmp	r6, #0
    3958:	d134      	bne.n	39c4 <I2C_DRV_MasterInit+0xa0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:101
    {
        return kStatus_I2C_Initialized;
    }

     /** Initialize driver instance struct */
    memset(master, 0, sizeof(i2c_master_state_t));
    395a:	221c      	movs	r2, #28
    395c:	4608      	mov	r0, r1
    395e:	4631      	mov	r1, r6
    3960:	f002 faf9 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:104

     /** Create sync object for transfer. */
    OSA_SemaCreate(&master->irqSync, 0);
    3964:	4631      	mov	r1, r6
    3966:	f105 0018 	add.w	r0, r5, #24
    396a:	f7fe fba9 	bl	20c0 <OSA_SemaCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:107

     /** Enable clock for I2C.*/
    CLOCK_SYS_EnableI2cClock(instance);
    396e:	4620      	mov	r0, r4
    3970:	f7fe fb76 	bl	2060 <CLOCK_SYS_EnableI2cClock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:110

     /** Initialize peripheral to known state.*/
    I2C_HAL_Init(base);
    3974:	4638      	mov	r0, r7
    3976:	f7fe ffac 	bl	28d2 <I2C_HAL_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:116

     /** Save runtime structure pointer */
    g_i2cStatePtr[instance] = master;

     /** Enable I2C interrupt in NVIC level.*/
    INT_SYS_EnableIRQ(g_i2cIrqId[instance]);
    397a:	4b19      	ldr	r3, [pc, #100]	; (39e0 <I2C_DRV_MasterInit+0xbc>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:113

     /** Initialize peripheral to known state.*/
    I2C_HAL_Init(base);

     /** Save runtime structure pointer */
    g_i2cStatePtr[instance] = master;
    397c:	f848 5024 	str.w	r5, [r8, r4, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:116

     /** Enable I2C interrupt in NVIC level.*/
    INT_SYS_EnableIRQ(g_i2cIrqId[instance]);
    3980:	5d1a      	ldrb	r2, [r3, r4]
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    3982:	b253      	sxtb	r3, r2
    3984:	2b00      	cmp	r3, #0
    3986:	da04      	bge.n	3992 <I2C_DRV_MasterInit+0x6e>
    3988:	4816      	ldr	r0, [pc, #88]	; (39e4 <I2C_DRV_MasterInit+0xc0>)
    398a:	4a17      	ldr	r2, [pc, #92]	; (39e8 <I2C_DRV_MasterInit+0xc4>)
    398c:	4b17      	ldr	r3, [pc, #92]	; (39ec <I2C_DRV_MasterInit+0xc8>)
    398e:	215d      	movs	r1, #93	; 0x5d
    3990:	e7d8      	b.n	3944 <I2C_DRV_MasterInit+0x20>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    3992:	2b55      	cmp	r3, #85	; 0x55
    3994:	dd04      	ble.n	39a0 <I2C_DRV_MasterInit+0x7c>
    3996:	4813      	ldr	r0, [pc, #76]	; (39e4 <I2C_DRV_MasterInit+0xc0>)
    3998:	4a13      	ldr	r2, [pc, #76]	; (39e8 <I2C_DRV_MasterInit+0xc4>)
    399a:	4b15      	ldr	r3, [pc, #84]	; (39f0 <I2C_DRV_MasterInit+0xcc>)
    399c:	215e      	movs	r1, #94	; 0x5e
    399e:	e7d1      	b.n	3944 <I2C_DRV_MasterInit+0x20>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    39a0:	0958      	lsrs	r0, r3, #5
    39a2:	4914      	ldr	r1, [pc, #80]	; (39f4 <I2C_DRV_MasterInit+0xd0>)
    39a4:	2301      	movs	r3, #1
    39a6:	f002 021f 	and.w	r2, r2, #31
    39aa:	fa03 f202 	lsl.w	r2, r3, r2
    39ae:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
I2C_HAL_Enable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:109
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_Enable(I2C_Type * base)
{
    I2C_BWR_C1_IICEN(base, 0x1U);
    39b2:	f107 7004 	add.w	r0, r7, #34603008	; 0x2100000
    39b6:	3002      	adds	r0, #2
    39b8:	0140      	lsls	r0, r0, #5
I2C_DRV_MasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:119

     /** Indicate I2C bus is idle. */
    master->i2cIdle = true;
    39ba:	746b      	strb	r3, [r5, #17]
I2C_HAL_Enable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:109
    39bc:	7703      	strb	r3, [r0, #28]
I2C_DRV_MasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:124

     /** Enable module.*/
    I2C_HAL_Enable(base);

    return kStatus_I2C_Success;
    39be:	4630      	mov	r0, r6
    39c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:97
    I2C_Type * base = g_i2cBase[instance];

     /** Exit if current instance is already initialized */
    if (g_i2cStatePtr[instance])
    {
        return kStatus_I2C_Initialized;
    39c4:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:125

     /** Enable module.*/
    I2C_HAL_Enable(base);

    return kStatus_I2C_Success;
}
    39c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39ca:	bf00      	nop
    39cc:	00007ac8 	.word	0x00007ac8
    39d0:	00007a70 	.word	0x00007a70
    39d4:	00007b55 	.word	0x00007b55
    39d8:	00007b37 	.word	0x00007b37
    39dc:	00007a64 	.word	0x00007a64
    39e0:	00007a5e 	.word	0x00007a5e
    39e4:	00007760 	.word	0x00007760
    39e8:	00007a9d 	.word	0x00007a9d
    39ec:	000077ca 	.word	0x000077ca
    39f0:	000077d9 	.word	0x000077d9
    39f4:	e000e100 	.word	0xe000e100
    39f8:	1fff0c74 	.word	0x1fff0c74

000039fc <I2C_DRV_MasterSetBaudRate>:
I2C_DRV_MasterSetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:174
 * Description   : configures the I2C bus to access a device.
 * This function will set baud rate.
 *
 *END*/
void I2C_DRV_MasterSetBaudRate(uint32_t instance, const i2c_device_t * device)
{
    39fc:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:175
    assert(device);
    39fe:	460c      	mov	r4, r1
    3a00:	b921      	cbnz	r1, 3a0c <I2C_DRV_MasterSetBaudRate+0x10>
    3a02:	4811      	ldr	r0, [pc, #68]	; (3a48 <I2C_DRV_MasterSetBaudRate+0x4c>)
    3a04:	4a11      	ldr	r2, [pc, #68]	; (3a4c <I2C_DRV_MasterSetBaudRate+0x50>)
    3a06:	4b12      	ldr	r3, [pc, #72]	; (3a50 <I2C_DRV_MasterSetBaudRate+0x54>)
    3a08:	21af      	movs	r1, #175	; 0xaf
    3a0a:	e005      	b.n	3a18 <I2C_DRV_MasterSetBaudRate+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:176
    assert(instance < I2C_INSTANCE_COUNT);
    3a0c:	2802      	cmp	r0, #2
    3a0e:	d905      	bls.n	3a1c <I2C_DRV_MasterSetBaudRate+0x20>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:176 (discriminator 1)
    3a10:	480d      	ldr	r0, [pc, #52]	; (3a48 <I2C_DRV_MasterSetBaudRate+0x4c>)
    3a12:	4a0e      	ldr	r2, [pc, #56]	; (3a4c <I2C_DRV_MasterSetBaudRate+0x50>)
    3a14:	4b0f      	ldr	r3, [pc, #60]	; (3a54 <I2C_DRV_MasterSetBaudRate+0x58>)
    3a16:	21b0      	movs	r1, #176	; 0xb0
    3a18:	f002 fa16 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:178

    I2C_Type * base = g_i2cBase[instance];
    3a1c:	4a0e      	ldr	r2, [pc, #56]	; (3a58 <I2C_DRV_MasterSetBaudRate+0x5c>)
    3a1e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:182
    uint32_t i2cClockFreq;

     /** Get current runtime structure. */
    i2c_master_state_t * master = (i2c_master_state_t *)g_i2cStatePtr[instance];
    3a22:	4a0e      	ldr	r2, [pc, #56]	; (3a5c <I2C_DRV_MasterSetBaudRate+0x60>)
    3a24:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:185

     /** Set baud rate if different.*/
    if (device->baudRate_kbps != master->lastBaudRate_kbps)
    3a28:	684a      	ldr	r2, [r1, #4]
    3a2a:	696b      	ldr	r3, [r5, #20]
    3a2c:	429a      	cmp	r2, r3
    3a2e:	d009      	beq.n	3a44 <I2C_DRV_MasterSetBaudRate+0x48>
CLOCK_SYS_GetI2cFreq():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\src\clock\mk64f12/fsl_clock_mk64f12.h:775
 * @param instance module device instance
 * @return freq    clock frequency for this module
 */
static inline uint32_t CLOCK_SYS_GetI2cFreq(uint32_t instance)
{
    return CLOCK_SYS_GetBusClockFreq();
    3a30:	f7fe fa6a 	bl	1f08 <CLOCK_SYS_GetBusClockFreq>
I2C_DRV_MasterSetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:189
    {
         /** Get the current bus clock.*/
        i2cClockFreq = CLOCK_SYS_GetI2cFreq(instance);
        I2C_HAL_SetBaudRate(base, i2cClockFreq, device->baudRate_kbps, NULL);
    3a34:	2300      	movs	r3, #0
CLOCK_SYS_GetI2cFreq():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\src\clock\mk64f12/fsl_clock_mk64f12.h:775
    3a36:	4601      	mov	r1, r0
I2C_DRV_MasterSetBaudRate():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:189
    3a38:	6862      	ldr	r2, [r4, #4]
    3a3a:	4630      	mov	r0, r6
    3a3c:	f7fe ff58 	bl	28f0 <I2C_HAL_SetBaudRate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:192

         /** Record baud rate change */
        master->lastBaudRate_kbps = device->baudRate_kbps;
    3a40:	6863      	ldr	r3, [r4, #4]
    3a42:	616b      	str	r3, [r5, #20]
    3a44:	bd70      	pop	{r4, r5, r6, pc}
    3a46:	bf00      	nop
    3a48:	00007ac8 	.word	0x00007ac8
    3a4c:	00007a83 	.word	0x00007a83
    3a50:	00007b5c 	.word	0x00007b5c
    3a54:	00007b37 	.word	0x00007b37
    3a58:	00007a64 	.word	0x00007a64
    3a5c:	1fff0c74 	.word	0x1fff0c74

00003a60 <I2C_DRV_MasterIRQHandler>:
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:358
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END*/
void I2C_DRV_MasterIRQHandler(uint32_t instance)
{
    assert(instance < I2C_INSTANCE_COUNT);
    3a60:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:357
 * i2c_master_state_t structs to transfer data.
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END*/
void I2C_DRV_MasterIRQHandler(uint32_t instance)
{
    3a62:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:358
    assert(instance < I2C_INSTANCE_COUNT);
    3a64:	d906      	bls.n	3a74 <I2C_DRV_MasterIRQHandler+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:358 (discriminator 1)
    3a66:	4821      	ldr	r0, [pc, #132]	; (3aec <I2C_DRV_MasterIRQHandler+0x8c>)
    3a68:	4a21      	ldr	r2, [pc, #132]	; (3af0 <I2C_DRV_MasterIRQHandler+0x90>)
    3a6a:	4b22      	ldr	r3, [pc, #136]	; (3af4 <I2C_DRV_MasterIRQHandler+0x94>)
    3a6c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    3a70:	f002 f9ea 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:360

    I2C_Type * base = g_i2cBase[instance];
    3a74:	4a20      	ldr	r2, [pc, #128]	; (3af8 <I2C_DRV_MasterIRQHandler+0x98>)
    3a76:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3a7a:	f105 7304 	add.w	r3, r5, #34603008	; 0x2100000
I2C_HAL_ClearInt():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:677
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearInt(I2C_Type * base)
{
    I2C_WR_S(base, I2C_S_IICIF_MASK);
    3a7e:	2202      	movs	r2, #2
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3a80:	3302      	adds	r3, #2
I2C_HAL_ClearInt():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:677
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearInt(I2C_Type * base)
{
    I2C_WR_S(base, I2C_S_IICIF_MASK);
    3a82:	70ea      	strb	r2, [r5, #3]
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3a84:	015b      	lsls	r3, r3, #5
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:366

     /** Clear the interrupt flag*/
    I2C_HAL_ClearInt(base);

     /** Get current runtime structure */
    i2c_master_state_t * master = (i2c_master_state_t *)g_i2cStatePtr[instance];
    3a86:	4a1d      	ldr	r2, [pc, #116]	; (3afc <I2C_DRV_MasterIRQHandler+0x9c>)
    3a88:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
    3a8c:	7c1a      	ldrb	r2, [r3, #16]
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3a8e:	78e9      	ldrb	r1, [r5, #3]
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:372

     /** Get current master transfer direction */
    i2c_direction_t direction = I2C_HAL_GetDirMode(base);

     /** Exit immediately if there is no transfer in progress OR not in master mode */
    if ((!I2C_HAL_GetStatusFlag(base, kI2CBusBusy)) ||
    3a90:	0689      	lsls	r1, r1, #26
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3a92:	b2d2      	uxtb	r2, r2
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:372
    3a94:	d528      	bpl.n	3ae8 <I2C_DRV_MasterIRQHandler+0x88>
I2C_HAL_IsMaster():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:617
 * @retval true The module is in master mode, which implies it is also performing a transfer.
 * @retval false The module is in slave mode.
 */
static inline bool I2C_HAL_IsMaster(I2C_Type * base)
{
    return (bool)I2C_BRD_C1_MST(base);
    3a96:	7d19      	ldrb	r1, [r3, #20]
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:372
    3a98:	b331      	cbz	r1, 3ae8 <I2C_DRV_MasterIRQHandler+0x88>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:379
    {
        return;
    }

     /** Handle send */
    if (direction == kI2CSend)
    3a9a:	2a01      	cmp	r2, #1
    3a9c:	d113      	bne.n	3ac6 <I2C_DRV_MasterIRQHandler+0x66>
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3a9e:	78eb      	ldrb	r3, [r5, #3]
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:382
    {
         /** Check whether we got an ACK or NAK from the former byte we sent */
        if (I2C_HAL_GetStatusFlag(base, kI2CReceivedNak))
    3aa0:	07db      	lsls	r3, r3, #31
    3aa2:	d502      	bpl.n	3aaa <I2C_DRV_MasterIRQHandler+0x4a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:385
        {
             /** Record that we got a NAK */
            master->status = kStatus_I2C_ReceivedNak;
    3aa4:	2305      	movs	r3, #5
    3aa6:	7423      	strb	r3, [r4, #16]
    3aa8:	e009      	b.n	3abe <I2C_DRV_MasterIRQHandler+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:395
        else
        {
             /** Continue send if still have data. TxSize/txBuff index need
             * increment first because one byte is already sent in order
             * to trigger interrupt */
            if (--master->txSize > 0)
    3aaa:	68e3      	ldr	r3, [r4, #12]
    3aac:	3b01      	subs	r3, #1
    3aae:	60e3      	str	r3, [r4, #12]
    3ab0:	b12b      	cbz	r3, 3abe <I2C_DRV_MasterIRQHandler+0x5e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:398
            {
                /** Transmit next byte and update buffer index */
                I2C_HAL_WriteByte(base, *(++master->txBuff));
    3ab2:	68a3      	ldr	r3, [r4, #8]
    3ab4:	1c5a      	adds	r2, r3, #1
    3ab6:	60a2      	str	r2, [r4, #8]
    3ab8:	785b      	ldrb	r3, [r3, #1]
I2C_HAL_WriteByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:411
#if FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING
    while (!I2C_BRD_S2_EMPTY(base))
    {}
#endif

    I2C_WR_D(base, byte);
    3aba:	712b      	strb	r3, [r5, #4]
    3abc:	bd38      	pop	{r3, r4, r5, pc}
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:427
        }

         /** Read recently received byte into buffer and update buffer index */
        *(master->rxBuff++) = I2C_HAL_ReadByte(base);
    }
}
    3abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:403
                I2C_HAL_WriteByte(base, *(++master->txBuff));
            }
            else
            {
                 /** Finish send data, send STOP, disable interrupt */
                I2C_DRV_CompleteTransfer(instance);
    3ac2:	f7ff bef9 	b.w	38b8 <I2C_DRV_CompleteTransfer>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:409
            }
        }
    }
    else  /** Handle receive */
    {
        switch (--master->rxSize)
    3ac6:	6862      	ldr	r2, [r4, #4]
    3ac8:	3a01      	subs	r2, #1
    3aca:	6062      	str	r2, [r4, #4]
    3acc:	b11a      	cbz	r2, 3ad6 <I2C_DRV_MasterIRQHandler+0x76>
    3ace:	2a01      	cmp	r2, #1
    3ad0:	d004      	beq.n	3adc <I2C_DRV_MasterIRQHandler+0x7c>
I2C_HAL_SendAck():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:325
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_SendAck(I2C_Type * base)
{
    I2C_BWR_C1_TXAK(base, 0x0U);
    3ad2:	2200      	movs	r2, #0
    3ad4:	e002      	b.n	3adc <I2C_DRV_MasterIRQHandler+0x7c>
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:413
        {
            case 0x0U:
                 /** Finish receive data, send STOP, disable interrupt */
                I2C_DRV_CompleteTransfer(instance);
    3ad6:	f7ff feef 	bl	38b8 <I2C_DRV_CompleteTransfer>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:414
                break;
    3ada:	e000      	b.n	3ade <I2C_DRV_MasterIRQHandler+0x7e>
I2C_HAL_SendAck():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:325
    3adc:	731a      	strb	r2, [r3, #12]
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:425
                I2C_HAL_SendAck(base);
                break;
        }

         /** Read recently received byte into buffer and update buffer index */
        *(master->rxBuff++) = I2C_HAL_ReadByte(base);
    3ade:	6823      	ldr	r3, [r4, #0]
    3ae0:	1c5a      	adds	r2, r3, #1
    3ae2:	6022      	str	r2, [r4, #0]
I2C_HAL_ReadByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:388
 * @return This function returns the last byte received while the I2C module is configured in master
 *     receive or slave receive mode.
 */
static inline uint8_t I2C_HAL_ReadByte(I2C_Type * base)
{
    return I2C_RD_D(base);
    3ae4:	792a      	ldrb	r2, [r5, #4]
I2C_DRV_MasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_master_driver.c:425
    3ae6:	701a      	strb	r2, [r3, #0]
    3ae8:	bd38      	pop	{r3, r4, r5, pc}
    3aea:	bf00      	nop
    3aec:	00007ac8 	.word	0x00007ac8
    3af0:	00007aaf 	.word	0x00007aaf
    3af4:	00007b37 	.word	0x00007b37
    3af8:	00007a64 	.word	0x00007a64
    3afc:	1fff0c74 	.word	0x1fff0c74

00003b00 <I2C_DRV_IRQHandler>:
I2C_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:68
 *
 * @param instance   Instance number of the I2C module.
 */
void I2C_DRV_IRQHandler(uint32_t instance)
{
    assert(instance < I2C_INSTANCE_COUNT);
    3b00:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:67
 * was set incorrectly.
 *
 * @param instance   Instance number of the I2C module.
 */
void I2C_DRV_IRQHandler(uint32_t instance)
{
    3b02:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:68
    assert(instance < I2C_INSTANCE_COUNT);
    3b04:	d905      	bls.n	3b12 <I2C_DRV_IRQHandler+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:68 (discriminator 1)
    3b06:	480b      	ldr	r0, [pc, #44]	; (3b34 <I2C_DRV_IRQHandler+0x34>)
    3b08:	4a0b      	ldr	r2, [pc, #44]	; (3b38 <I2C_DRV_IRQHandler+0x38>)
    3b0a:	4b0c      	ldr	r3, [pc, #48]	; (3b3c <I2C_DRV_IRQHandler+0x3c>)
    3b0c:	2144      	movs	r1, #68	; 0x44
    3b0e:	f002 f99b 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:69
    I2C_Type * base = g_i2cBase[instance];
    3b12:	4a0b      	ldr	r2, [pc, #44]	; (3b40 <I2C_DRV_IRQHandler+0x40>)
I2C_HAL_IsMaster():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:617
 * @retval true The module is in master mode, which implies it is also performing a transfer.
 * @retval false The module is in slave mode.
 */
static inline bool I2C_HAL_IsMaster(I2C_Type * base)
{
    return (bool)I2C_BRD_C1_MST(base);
    3b14:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    3b18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    3b1c:	3302      	adds	r3, #2
    3b1e:	015b      	lsls	r3, r3, #5
    3b20:	7d1b      	ldrb	r3, [r3, #20]
I2C_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:71

    if (I2C_HAL_IsMaster(base))
    3b22:	b11b      	cbz	r3, 3b2c <I2C_DRV_IRQHandler+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:81
    else
    {
         /** Slave mode.*/
        I2C_DRV_SlaveIRQHandler(instance);
    }
}
    3b24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:74
    I2C_Type * base = g_i2cBase[instance];

    if (I2C_HAL_IsMaster(base))
    {
         /** Master mode.*/
        I2C_DRV_MasterIRQHandler(instance);
    3b28:	f7ff bf9a 	b.w	3a60 <I2C_DRV_MasterIRQHandler>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:81
    else
    {
         /** Slave mode.*/
        I2C_DRV_SlaveIRQHandler(instance);
    }
}
    3b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_shared_function.c:79
        I2C_DRV_MasterIRQHandler(instance);
    }
    else
    {
         /** Slave mode.*/
        I2C_DRV_SlaveIRQHandler(instance);
    3b30:	f000 b80e 	b.w	3b50 <I2C_DRV_SlaveIRQHandler>
    3b34:	00007b7c 	.word	0x00007b7c
    3b38:	00007bed 	.word	0x00007bed
    3b3c:	00007b37 	.word	0x00007b37
    3b40:	00007a64 	.word	0x00007a64

00003b44 <I2C_HAL_SetIntCmd>:
I2C_HAL_SetIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:645
 * @param base The I2C peripheral base pointer
 * @param enable   Pass true to enable interrupt, false to disable.
 */
static inline void I2C_HAL_SetIntCmd(I2C_Type * base, bool enable)
{
    I2C_BWR_C1_IICIE(base, (uint8_t)enable);
    3b44:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
    3b48:	3002      	adds	r0, #2
    3b4a:	0140      	lsls	r0, r0, #5
    3b4c:	7601      	strb	r1, [r0, #24]
    3b4e:	4770      	bx	lr

00003b50 <I2C_DRV_SlaveIRQHandler>:
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:558
 * ISR action be called inside I2C IRQ handler entry.
 *
 *END*/
void I2C_DRV_SlaveIRQHandler(uint32_t instance)
{
    assert(instance < I2C_INSTANCE_COUNT);
    3b50:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:557
 * Description   : I2C Slave Generic ISR.
 * ISR action be called inside I2C IRQ handler entry.
 *
 *END*/
void I2C_DRV_SlaveIRQHandler(uint32_t instance)
{
    3b52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b56:	4606      	mov	r6, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:558
    assert(instance < I2C_INSTANCE_COUNT);
    3b58:	d906      	bls.n	3b68 <I2C_DRV_SlaveIRQHandler+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:558 (discriminator 1)
    3b5a:	4874      	ldr	r0, [pc, #464]	; (3d2c <I2C_DRV_SlaveIRQHandler+0x1dc>)
    3b5c:	4a74      	ldr	r2, [pc, #464]	; (3d30 <I2C_DRV_SlaveIRQHandler+0x1e0>)
    3b5e:	4b75      	ldr	r3, [pc, #468]	; (3d34 <I2C_DRV_SlaveIRQHandler+0x1e4>)
    3b60:	f240 212e 	movw	r1, #558	; 0x22e
    3b64:	f002 f970 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:560

    I2C_Type * base = g_i2cBase[instance];
    3b68:	4b73      	ldr	r3, [pc, #460]	; (3d38 <I2C_DRV_SlaveIRQHandler+0x1e8>)
    3b6a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
I2C_HAL_GetStartFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:783
 * @param base The I2C peripheral base pointer
 * @return Whether START signal is detected on bus or not.
 */
static inline bool I2C_HAL_GetStartFlag(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_STARTF(base);
    3b6e:	f105 7204 	add.w	r2, r5, #34603008	; 0x2100000
    3b72:	3206      	adds	r2, #6
    3b74:	0153      	lsls	r3, r2, #5
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:580
    bool     stopDetected = I2C_HAL_GetStopFlag(base);
    stopIntEnabled = I2C_HAL_GetStopIntCmd(base);
#endif

     /** Get current runtime structure */
    i2c_slave_state_t * i2cSlaveState = (i2c_slave_state_t *)g_i2cStatePtr[instance];
    3b76:	4a71      	ldr	r2, [pc, #452]	; (3d3c <I2C_DRV_SlaveIRQHandler+0x1ec>)
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3b78:	78ef      	ldrb	r7, [r5, #3]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:580
    3b7a:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
    3b7e:	f895 c003 	ldrb.w	ip, [r5, #3]
I2C_HAL_GetStartFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:783
 * @param base The I2C peripheral base pointer
 * @return Whether START signal is detected on bus or not.
 */
static inline bool I2C_HAL_GetStartFlag(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_STARTF(base);
    3b82:	f893 9010 	ldrb.w	r9, [r3, #16]
I2C_HAL_GetStartStopIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:772
 * @param base The I2C peripheral base pointer
 * @return Whether stop detect interrupt is enabled or not.
 */
static inline bool I2C_HAL_GetStartStopIntCmd(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_SSIE(base);
    3b86:	7d19      	ldrb	r1, [r3, #20]
I2C_HAL_GetStopFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:697
 * @param base The I2C peripheral base pointer
 * @return Whether a STOP signal is detected on bus or not.
 */
static inline bool I2C_HAL_GetStopFlag(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_STOPF(base);
    3b88:	f893 8018 	ldrb.w	r8, [r3, #24]
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3b8c:	f105 7204 	add.w	r2, r5, #34603008	; 0x2100000
    3b90:	3202      	adds	r2, #2
    3b92:	0152      	lsls	r2, r2, #5
I2C_HAL_GetStartStopIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:772
 * @param base The I2C peripheral base pointer
 * @return Whether stop detect interrupt is enabled or not.
 */
static inline bool I2C_HAL_GetStartStopIntCmd(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_SSIE(base);
    3b94:	3100      	adds	r1, #0
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3b96:	7c10      	ldrb	r0, [r2, #16]
I2C_HAL_GetStartStopIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:772
 * @param base The I2C peripheral base pointer
 * @return Whether stop detect interrupt is enabled or not.
 */
static inline bool I2C_HAL_GetStartStopIntCmd(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_SSIE(base);
    3b98:	bf18      	it	ne
    3b9a:	2101      	movne	r1, #1
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3b9c:	b2ff      	uxtb	r7, r7
    3b9e:	fa5f fc8c 	uxtb.w	ip, ip
I2C_HAL_GetStartFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:783
 * @param base The I2C peripheral base pointer
 * @return Whether START signal is detected on bus or not.
 */
static inline bool I2C_HAL_GetStartFlag(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_STARTF(base);
    3ba2:	fa5f f989 	uxtb.w	r9, r9
I2C_HAL_GetStopFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:697
 * @param base The I2C peripheral base pointer
 * @return Whether a STOP signal is detected on bus or not.
 */
static inline bool I2C_HAL_GetStopFlag(I2C_Type * base)
{
    return (bool)I2C_BRD_FLT_STOPF(base);
    3ba6:	fa5f f888 	uxtb.w	r8, r8
I2C_HAL_GetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:367
 * @retval #kI2CTransmit I2C is configured for master or slave transmit mode.
 * @retval #kI2CReceive I2C is configured for master or slave receive mode.
 */
static inline i2c_direction_t I2C_HAL_GetDirMode(I2C_Type * base)
{
    return (i2c_direction_t)I2C_BRD_C1_TX(base);
    3baa:	b2c0      	uxtb	r0, r0
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:587
     /** Get current slave transfer direction */
    i2c_direction_t direction = I2C_HAL_GetDirMode(base);

#if FSL_FEATURE_I2C_HAS_START_STOP_DETECT
    /*--------------- Handle START ------------------*/
    if (startIntEnabled && startDetected)
    3bac:	b341      	cbz	r1, 3c00 <I2C_DRV_SlaveIRQHandler+0xb0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:587 (discriminator 1)
    3bae:	f1b9 0f00 	cmp.w	r9, #0
    3bb2:	d009      	beq.n	3bc8 <I2C_DRV_SlaveIRQHandler+0x78>
I2C_HAL_ClearStartFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:793
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearStartFlag(I2C_Type * base)
{
    I2C_BWR_FLT_STARTF(base, 0x1U);
    3bb4:	2101      	movs	r1, #1
    3bb6:	7419      	strb	r1, [r3, #16]
I2C_HAL_ClearInt():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:677
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearInt(I2C_Type * base)
{
    I2C_WR_S(base, I2C_S_IICIF_MASK);
    3bb8:	2302      	movs	r3, #2
    3bba:	70eb      	strb	r3, [r5, #3]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:592
    {
        I2C_HAL_ClearStartFlag(base);
        I2C_HAL_ClearInt(base);

        if(i2cSlaveState->slaveCallback != NULL)
    3bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	f000 80b2 	beq.w	3d28 <I2C_DRV_SlaveIRQHandler+0x1d8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:595
        {
            /*Call callback to handle when the driver detect START signal*/
            i2cSlaveState->slaveCallback(instance,
    3bc4:	b2f0      	uxtb	r0, r6
    3bc6:	e0a7      	b.n	3d18 <I2C_DRV_SlaveIRQHandler+0x1c8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:606 (discriminator 1)
    }
#endif

#if FSL_FEATURE_I2C_HAS_START_STOP_DETECT || FSL_FEATURE_I2C_HAS_STOP_DETECT
    /*--------------- Handle STOP ------------------*/
    if (stopIntEnabled && stopDetected)
    3bc8:	f1b8 0f00 	cmp.w	r8, #0
    3bcc:	d018      	beq.n	3c00 <I2C_DRV_SlaveIRQHandler+0xb0>
I2C_HAL_ClearStopFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:707
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearStopFlag(I2C_Type * base)
{
    I2C_BWR_FLT_STOPF(base, 0x1U);
    3bce:	2201      	movs	r2, #1
    3bd0:	761a      	strb	r2, [r3, #24]
I2C_HAL_ClearInt():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:677
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearInt(I2C_Type * base)
{
    I2C_WR_S(base, I2C_S_IICIF_MASK);
    3bd2:	2302      	movs	r3, #2
    3bd4:	70eb      	strb	r3, [r5, #3]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:611
    {
        I2C_HAL_ClearStopFlag(base);
        I2C_HAL_ClearInt(base);

        if(!i2cSlaveState->slaveListening)
    3bd6:	f894 1020 	ldrb.w	r1, [r4, #32]
    3bda:	b911      	cbnz	r1, 3be2 <I2C_DRV_SlaveIRQHandler+0x92>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:614
        {
             /** Disable I2C interrupt in the peripheral.*/
            I2C_HAL_SetIntCmd(base, false);
    3bdc:	4628      	mov	r0, r5
    3bde:	f7ff ffb1 	bl	3b44 <I2C_HAL_SetIntCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:617
        }

        if(i2cSlaveState->slaveCallback != NULL)
    3be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3be4:	b11b      	cbz	r3, 3bee <I2C_DRV_SlaveIRQHandler+0x9e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:620
        {
             /*Call callback to handle when the driver detect STOP signal*/
            i2cSlaveState->slaveCallback(instance,
    3be6:	b2f0      	uxtb	r0, r6
    3be8:	2180      	movs	r1, #128	; 0x80
    3bea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3bec:	4798      	blx	r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:625
                                         kI2CSlaveStopDetect,
                                         i2cSlaveState->callbackParam);
        }

        if (i2cSlaveState->isRxBlocking)
    3bee:	7de3      	ldrb	r3, [r4, #23]
    3bf0:	b123      	cbz	r3, 3bfc <I2C_DRV_SlaveIRQHandler+0xac>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:627
        {
            OSA_EventSet(&i2cSlaveState->irqEvent, kI2CSlaveStopDetect);
    3bf2:	f104 0018 	add.w	r0, r4, #24
    3bf6:	2180      	movs	r1, #128	; 0x80
    3bf8:	f7fe fb80 	bl	22fc <OSA_EventSet>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:630
        }

        i2cSlaveState->status = kStatus_I2C_Idle;
    3bfc:	230a      	movs	r3, #10
    3bfe:	e090      	b.n	3d22 <I2C_DRV_SlaveIRQHandler+0x1d2>
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3c00:	f3cc 1380 	ubfx	r3, ip, #6, #1
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:639
#endif

     /** Clear I2C IRQ.*/
    I2C_HAL_ClearInt(base);

    if (wasArbLost)
    3c04:	06ff      	lsls	r7, r7, #27
I2C_HAL_ClearInt():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:677
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearInt(I2C_Type * base)
{
    I2C_WR_S(base, I2C_S_IICIF_MASK);
    3c06:	f04f 0c02 	mov.w	ip, #2
    3c0a:	f885 c003 	strb.w	ip, [r5, #3]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:639
    3c0e:	d512      	bpl.n	3c36 <I2C_DRV_SlaveIRQHandler+0xe6>
I2C_HAL_ClearArbitrationLost():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:627
 *
 * @param base The I2C peripheral base pointer
 */
static inline void I2C_HAL_ClearArbitrationLost(I2C_Type * base)
{
    I2C_WR_S(base, I2C_S_ARBL_MASK);
    3c10:	2110      	movs	r1, #16
    3c12:	70e9      	strb	r1, [r5, #3]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:642
    {
        I2C_HAL_ClearArbitrationLost(base);
        if (!addressed)
    3c14:	b123      	cbz	r3, 3c20 <I2C_DRV_SlaveIRQHandler+0xd0>
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3c16:	78eb      	ldrb	r3, [r5, #3]
    3c18:	f3c3 0380 	ubfx	r3, r3, #2, #1
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:659
    /*--------------- Handle Address ------------------*/
     /** Addressed only happens when receiving address. */
    if (addressed)  /** Slave is addressed. */
    {
         /** Master read from Slave. Slave transmit.*/
        if (I2C_HAL_GetStatusFlag(base, kI2CSlaveTransmit))
    3c1c:	b96b      	cbnz	r3, 3c3a <I2C_DRV_SlaveIRQHandler+0xea>
    3c1e:	e016      	b.n	3c4e <I2C_DRV_SlaveIRQHandler+0xfe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:645
    {
        I2C_HAL_ClearArbitrationLost(base);
        if (!addressed)
        {
            i2cSlaveState->status = kStatus_I2C_AribtrationLost;
            if(!i2cSlaveState->slaveListening)
    3c20:	f894 1020 	ldrb.w	r1, [r4, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:644
    if (wasArbLost)
    {
        I2C_HAL_ClearArbitrationLost(base);
        if (!addressed)
        {
            i2cSlaveState->status = kStatus_I2C_AribtrationLost;
    3c24:	2308      	movs	r3, #8
    3c26:	7023      	strb	r3, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:645
            if(!i2cSlaveState->slaveListening)
    3c28:	2900      	cmp	r1, #0
    3c2a:	d17d      	bne.n	3d28 <I2C_DRV_SlaveIRQHandler+0x1d8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:648
            {
                 /** Disable I2C interrupt in the peripheral.*/
                I2C_HAL_SetIntCmd(base, false);
    3c2c:	4628      	mov	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:813
        {
             /** The Txbuff is empty --> set kStatus_I2C_SlaveTxUnderrun*/
            i2cSlaveState->status = kStatus_I2C_SlaveTxUnderrun ;
        }
    }
}
    3c2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:648
        {
            i2cSlaveState->status = kStatus_I2C_AribtrationLost;
            if(!i2cSlaveState->slaveListening)
            {
                 /** Disable I2C interrupt in the peripheral.*/
                I2C_HAL_SetIntCmd(base, false);
    3c32:	f7ff bf87 	b.w	3b44 <I2C_HAL_SetIntCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:656
        }
    }

    /*--------------- Handle Address ------------------*/
     /** Addressed only happens when receiving address. */
    if (addressed)  /** Slave is addressed. */
    3c36:	b1a3      	cbz	r3, 3c62 <I2C_DRV_SlaveIRQHandler+0x112>
    3c38:	e7ed      	b.n	3c16 <I2C_DRV_SlaveIRQHandler+0xc6>
I2C_HAL_SetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:354
 *     - #kI2CTransmit
 *     - #kI2CReceive
 */
static inline void I2C_HAL_SetDirMode(I2C_Type * base, i2c_direction_t direction)
{
    I2C_BWR_C1_TX(base, (uint8_t)direction);
    3c3a:	2301      	movs	r3, #1
    3c3c:	7413      	strb	r3, [r2, #16]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:664
        if (I2C_HAL_GetStatusFlag(base, kI2CSlaveTransmit))
        {
             /** Switch to TX mode*/
            I2C_HAL_SetDirMode(base, kI2CSend);

            if(i2cSlaveState->slaveCallback != NULL)
    3c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c40:	2b00      	cmp	r3, #0
    3c42:	d056      	beq.n	3cf2 <I2C_DRV_SlaveIRQHandler+0x1a2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:667
            {
                /*Call callback to handle when the driver get read request*/
                i2cSlaveState->slaveCallback(instance,
    3c44:	b2f0      	uxtb	r0, r6
    3c46:	2102      	movs	r1, #2
    3c48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3c4a:	4798      	blx	r3
    3c4c:	e051      	b.n	3cf2 <I2C_DRV_SlaveIRQHandler+0x1a2>
I2C_HAL_SetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:354
    3c4e:	7413      	strb	r3, [r2, #16]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:679
        else  /** Master write to Slave. Slave receive.*/
        {
             /** Switch to RX mode.*/
            I2C_HAL_SetDirMode(base, kI2CReceive);

            if(i2cSlaveState->slaveCallback != NULL)
    3c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c52:	b11b      	cbz	r3, 3c5c <I2C_DRV_SlaveIRQHandler+0x10c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:682
            {
                /*Call callback to handle when the driver get write request*/
                i2cSlaveState->slaveCallback(instance,
    3c54:	b2f0      	uxtb	r0, r6
    3c56:	2104      	movs	r1, #4
    3c58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3c5a:	4798      	blx	r3
I2C_HAL_ReadByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:388
 * @return This function returns the last byte received while the I2C module is configured in master
 *     receive or slave receive mode.
 */
static inline uint8_t I2C_HAL_ReadByte(I2C_Type * base)
{
    return I2C_RD_D(base);
    3c5c:	792b      	ldrb	r3, [r5, #4]
    3c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:695
    }
    /*--------------- Handle Transfer ------------------*/
    else
    {
         /** Handle transmit */
        if (direction == kI2CSend)
    3c62:	2801      	cmp	r0, #1
    3c64:	d11e      	bne.n	3ca4 <I2C_DRV_SlaveIRQHandler+0x154>
I2C_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:604
 *         - true: related status flag is being set.
 *         - false: related status flag is not set.
 */
static inline bool I2C_HAL_GetStatusFlag(I2C_Type * base, i2c_status_flag_t statusFlag)
{
    return (bool)((I2C_RD_S(base) >> statusFlag) & 0x1U);
    3c66:	78e8      	ldrb	r0, [r5, #3]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:697
        {
            if (I2C_HAL_GetStatusFlag(base, kI2CReceivedNak))
    3c68:	07c0      	lsls	r0, r0, #31
    3c6a:	d542      	bpl.n	3cf2 <I2C_DRV_SlaveIRQHandler+0x1a2>
I2C_HAL_SetDirMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:354
 *     - #kI2CTransmit
 *     - #kI2CReceive
 */
static inline void I2C_HAL_SetDirMode(I2C_Type * base, i2c_direction_t direction)
{
    I2C_BWR_C1_TX(base, (uint8_t)direction);
    3c6c:	7413      	strb	r3, [r2, #16]
I2C_HAL_ReadByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:388
 * @return This function returns the last byte received while the I2C module is configured in master
 *     receive or slave receive mode.
 */
static inline uint8_t I2C_HAL_ReadByte(I2C_Type * base)
{
    return I2C_RD_D(base);
    3c6e:	792b      	ldrb	r3, [r5, #4]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:704
                 /** Switch to RX mode.*/
                I2C_HAL_SetDirMode(base, kI2CReceive);
                 /** Read dummy character to release bus */
                I2C_HAL_ReadByte(base);

                if ((!i2cSlaveState->slaveListening) && (!stopIntEnabled))
    3c70:	f894 3020 	ldrb.w	r3, [r4, #32]
    3c74:	b91b      	cbnz	r3, 3c7e <I2C_DRV_SlaveIRQHandler+0x12e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:704 (discriminator 1)
    3c76:	b911      	cbnz	r1, 3c7e <I2C_DRV_SlaveIRQHandler+0x12e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:707
                {
                     /** Disable I2C interrupt in the peripheral.*/
                    I2C_HAL_SetIntCmd(base, false);
    3c78:	4628      	mov	r0, r5
    3c7a:	f7ff ff63 	bl	3b44 <I2C_HAL_SetIntCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:710
                }

                if(i2cSlaveState->slaveCallback != NULL)
    3c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c80:	b11b      	cbz	r3, 3c8a <I2C_DRV_SlaveIRQHandler+0x13a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:713
                {
                      /** Receive TX NAK, mean transaction is finished, call callback to handle */
                    i2cSlaveState->slaveCallback(instance,
    3c82:	b2f0      	uxtb	r0, r6
    3c84:	2108      	movs	r1, #8
    3c86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3c88:	4798      	blx	r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:718
                                                 kI2CSlaveTxNAK,
                                                 i2cSlaveState->callbackParam);
                }

                if (i2cSlaveState->isTxBlocking)
    3c8a:	7da3      	ldrb	r3, [r4, #22]
    3c8c:	b123      	cbz	r3, 3c98 <I2C_DRV_SlaveIRQHandler+0x148>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:720
                {
                    OSA_EventSet(&i2cSlaveState->irqEvent, kI2CSlaveTxNAK);
    3c8e:	f104 0018 	add.w	r0, r4, #24
    3c92:	2108      	movs	r1, #8
    3c94:	f7fe fb32 	bl	22fc <OSA_EventSet>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:723
                }

                i2cSlaveState->txSize = 0;
    3c98:	2300      	movs	r3, #0
    3c9a:	6063      	str	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:724
                i2cSlaveState->txBuff = NULL;
    3c9c:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:725
                i2cSlaveState->isTxBusy = false;
    3c9e:	7523      	strb	r3, [r4, #20]
    3ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
I2C_HAL_ReadByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:388
    3ca4:	792a      	ldrb	r2, [r5, #4]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:738
        else
        {
             /** Get byte from data register */
            i2cData = I2C_HAL_ReadByte(base);

            if (i2cSlaveState->rxSize)
    3ca6:	68a3      	ldr	r3, [r4, #8]
I2C_HAL_ReadByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:388
    3ca8:	b2d2      	uxtb	r2, r2
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:738
    3caa:	b303      	cbz	r3, 3cee <I2C_DRV_SlaveIRQHandler+0x19e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:740
            {
                *(i2cSlaveState->rxBuff) = i2cData;
    3cac:	6923      	ldr	r3, [r4, #16]
    3cae:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:741
                ++ i2cSlaveState->rxBuff;
    3cb0:	6923      	ldr	r3, [r4, #16]
    3cb2:	3301      	adds	r3, #1
    3cb4:	6123      	str	r3, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:742
                -- i2cSlaveState->rxSize;
    3cb6:	68a3      	ldr	r3, [r4, #8]
    3cb8:	3b01      	subs	r3, #1
    3cba:	60a3      	str	r3, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:744

                if (!i2cSlaveState->rxSize)
    3cbc:	68a3      	ldr	r3, [r4, #8]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d132      	bne.n	3d28 <I2C_DRV_SlaveIRQHandler+0x1d8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:746
                {
                    if (!stopIntEnabled)
    3cc2:	b961      	cbnz	r1, 3cde <I2C_DRV_SlaveIRQHandler+0x18e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:748
                    {
                        if(!i2cSlaveState->slaveListening)
    3cc4:	f894 3020 	ldrb.w	r3, [r4, #32]
    3cc8:	b913      	cbnz	r3, 3cd0 <I2C_DRV_SlaveIRQHandler+0x180>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:751
                        {
                             /** Disable I2C interrupt in the peripheral.*/
                            I2C_HAL_SetIntCmd(base, false);
    3cca:	4628      	mov	r0, r5
    3ccc:	f7ff ff3a 	bl	3b44 <I2C_HAL_SetIntCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:755
                        }

                         /** All bytes are received, so we're done with this transfer */
                        if (i2cSlaveState->isRxBlocking)
    3cd0:	7de3      	ldrb	r3, [r4, #23]
    3cd2:	b123      	cbz	r3, 3cde <I2C_DRV_SlaveIRQHandler+0x18e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:757
                        {
                            OSA_EventSet(&i2cSlaveState->irqEvent, kI2CSlaveRxFull);
    3cd4:	f104 0018 	add.w	r0, r4, #24
    3cd8:	2120      	movs	r1, #32
    3cda:	f7fe fb0f 	bl	22fc <OSA_EventSet>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:761
                        }
                    }

                    i2cSlaveState->isRxBusy = false;
    3cde:	2300      	movs	r3, #0
    3ce0:	7563      	strb	r3, [r4, #21]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:762
                    i2cSlaveState->rxBuff = NULL;
    3ce2:	6123      	str	r3, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:764

                    if(i2cSlaveState->slaveCallback != NULL)
    3ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ce6:	b1fb      	cbz	r3, 3d28 <I2C_DRV_SlaveIRQHandler+0x1d8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:767
                    {
                         /** Rx buffer is full, call callback to handle */
                        i2cSlaveState->slaveCallback(instance,
    3ce8:	b2f0      	uxtb	r0, r6
    3cea:	2120      	movs	r1, #32
    3cec:	e014      	b.n	3d18 <I2C_DRV_SlaveIRQHandler+0x1c8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:776
                }
            }
            else
            {
                 /** The Rxbuff is full --> Set kStatus_I2C_SlaveRxOverrun*/
                i2cSlaveState->status = kStatus_I2C_SlaveRxOverrun;
    3cee:	2307      	movs	r3, #7
    3cf0:	e017      	b.n	3d22 <I2C_DRV_SlaveIRQHandler+0x1d2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:785

     /** DO TRANSMIT*/
    if (doTransmit)
    {
         /** Send byte to data register */
        if (i2cSlaveState->txSize)
    3cf2:	6863      	ldr	r3, [r4, #4]
    3cf4:	b1a3      	cbz	r3, 3d20 <I2C_DRV_SlaveIRQHandler+0x1d0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:787
        {
            i2cData = *(i2cSlaveState->txBuff);
    3cf6:	68e3      	ldr	r3, [r4, #12]
    3cf8:	781b      	ldrb	r3, [r3, #0]
I2C_HAL_WriteByte():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_i2c_hal.h:411
#if FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING
    while (!I2C_BRD_S2_EMPTY(base))
    {}
#endif

    I2C_WR_D(base, byte);
    3cfa:	712b      	strb	r3, [r5, #4]
I2C_DRV_SlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:789
            I2C_HAL_WriteByte(base, i2cData);
            ++ i2cSlaveState->txBuff;
    3cfc:	68e3      	ldr	r3, [r4, #12]
    3cfe:	3301      	adds	r3, #1
    3d00:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:790
            -- i2cSlaveState->txSize;
    3d02:	6863      	ldr	r3, [r4, #4]
    3d04:	3b01      	subs	r3, #1
    3d06:	6063      	str	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:791
            if (!i2cSlaveState->txSize)
    3d08:	6863      	ldr	r3, [r4, #4]
    3d0a:	b96b      	cbnz	r3, 3d28 <I2C_DRV_SlaveIRQHandler+0x1d8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:794
            {
                 /** All bytes are received, so we're done with this transfer */
                i2cSlaveState->txBuff = NULL;
    3d0c:	60e3      	str	r3, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:795
                i2cSlaveState->isTxBusy = false;
    3d0e:	7523      	strb	r3, [r4, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:797

                if(i2cSlaveState->slaveCallback != NULL)
    3d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3d12:	b14b      	cbz	r3, 3d28 <I2C_DRV_SlaveIRQHandler+0x1d8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:800
                {
                     /** Tx buffer is empty, finish transaction, call callback to handle */
                    i2cSlaveState->slaveCallback(instance,
    3d14:	b2f0      	uxtb	r0, r6
    3d16:	2110      	movs	r1, #16
    3d18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3d1a:	4798      	blx	r3
    3d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/i2c/fsl_i2c_slave_driver.c:810
            }
        }
        else
        {
             /** The Txbuff is empty --> set kStatus_I2C_SlaveTxUnderrun*/
            i2cSlaveState->status = kStatus_I2C_SlaveTxUnderrun ;
    3d20:	2306      	movs	r3, #6
    3d22:	7023      	strb	r3, [r4, #0]
    3d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d2c:	00007c18 	.word	0x00007c18
    3d30:	00007c00 	.word	0x00007c00
    3d34:	00007b37 	.word	0x00007b37
    3d38:	00007a64 	.word	0x00007a64
    3d3c:	1fff0c74 	.word	0x1fff0c74

00003d40 <PORT_HAL_SetMuxMode.part.0>:
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:251
 * @param mux  pin muxing slot selection
 *        - kPortPinDisabled: Pin disabled.
 *        - kPortMuxAsGpio  : Set as GPIO.
 *        - others          : chip-specific.
 */
static inline void PORT_HAL_SetMuxMode(PORT_Type * base,
    3d40:	b508      	push	{r3, lr}
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:255
                                       uint32_t pin,
                                       port_mux_t mux)
{
    assert(pin < 32U);
    3d42:	4803      	ldr	r0, [pc, #12]	; (3d50 <PORT_HAL_SetMuxMode.part.0+0x10>)
    3d44:	4a03      	ldr	r2, [pc, #12]	; (3d54 <PORT_HAL_SetMuxMode.part.0+0x14>)
    3d46:	4b04      	ldr	r3, [pc, #16]	; (3d58 <PORT_HAL_SetMuxMode.part.0+0x18>)
    3d48:	21ff      	movs	r1, #255	; 0xff
    3d4a:	f002 f87d 	bl	5e48 <__assert_func>
    3d4e:	bf00      	nop
    3d50:	00007cf7 	.word	0x00007cf7
    3d54:	00007ce3 	.word	0x00007ce3
    3d58:	00007d55 	.word	0x00007d55

00003d5c <GPIO_DRV_InputPinInit>:
GPIO_DRV_InputPinInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:81
 * Function Name : GPIO_DRV_InputPinInit
 * Description   : Initialize one GPIO input pin used by board.
 *
 *END*/
void GPIO_DRV_InputPinInit(const gpio_input_pin_user_config_t *inputPin)
{
    3d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:83
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(inputPin->pinName);
    3d60:	6804      	ldr	r4, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:85
    uint32_t pin = GPIO_EXTRACT_PIN(inputPin->pinName);
    GPIO_Type * gpioBase = g_gpioBase[port];
    3d62:	4b2f      	ldr	r3, [pc, #188]	; (3e20 <GPIO_DRV_InputPinInit+0xc4>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:83
 *
 *END*/
void GPIO_DRV_InputPinInit(const gpio_input_pin_user_config_t *inputPin)
{
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(inputPin->pinName);
    3d64:	f3c4 2707 	ubfx	r7, r4, #8, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:81
 * Function Name : GPIO_DRV_InputPinInit
 * Description   : Initialize one GPIO input pin used by board.
 *
 *END*/
void GPIO_DRV_InputPinInit(const gpio_input_pin_user_config_t *inputPin)
{
    3d68:	4606      	mov	r6, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:85
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(inputPin->pinName);
    uint32_t pin = GPIO_EXTRACT_PIN(inputPin->pinName);
    GPIO_Type * gpioBase = g_gpioBase[port];
    3d6a:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:86
    PORT_Type * portBase = g_portBase[port];
    3d6e:	4b2d      	ldr	r3, [pc, #180]	; (3e24 <GPIO_DRV_InputPinInit+0xc8>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:84
 *END*/
void GPIO_DRV_InputPinInit(const gpio_input_pin_user_config_t *inputPin)
{
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(inputPin->pinName);
    uint32_t pin = GPIO_EXTRACT_PIN(inputPin->pinName);
    3d70:	b2e4      	uxtb	r4, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:89
    GPIO_Type * gpioBase = g_gpioBase[port];
    PORT_Type * portBase = g_portBase[port];

     /** Un-gate port clock*/
    CLOCK_SYS_EnablePortClock(port);
    3d72:	4638      	mov	r0, r7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:86
{
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(inputPin->pinName);
    uint32_t pin = GPIO_EXTRACT_PIN(inputPin->pinName);
    GPIO_Type * gpioBase = g_gpioBase[port];
    PORT_Type * portBase = g_portBase[port];
    3d74:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:89

     /** Un-gate port clock*/
    CLOCK_SYS_EnablePortClock(port);
    3d78:	f7fe f92a 	bl	1fd0 <CLOCK_SYS_EnablePortClock>
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:255
    3d7c:	2c1f      	cmp	r4, #31
    3d7e:	d901      	bls.n	3d84 <GPIO_DRV_InputPinInit+0x28>
    3d80:	f7ff ffde 	bl	3d40 <PORT_HAL_SetMuxMode.part.0>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:256
    PORT_BWR_PCR_MUX(base, pin, mux);
    3d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    3d88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    3d8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    3d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3d94:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
GPIO_DRV_InputPinInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:95

     /** Set current pin as gpio.*/
    PORT_HAL_SetMuxMode(portBase, pin, kPortMuxAsGpio);

     /** Set current pin as digital input.*/
    GPIO_HAL_SetPinDir(gpioBase, pin, kGpioDigitalInput);
    3d98:	4621      	mov	r1, r4
    3d9a:	2200      	movs	r2, #0
    3d9c:	eb05 0884 	add.w	r8, r5, r4, lsl #2
    3da0:	4648      	mov	r0, r9
    3da2:	f7fe fe09 	bl	29b8 <GPIO_HAL_SetPinDir>
PORT_HAL_SetPullCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:157
static inline void PORT_HAL_SetPullCmd(PORT_Type * base,
                                       uint32_t pin,
                                       bool isPullEnabled)
{
    assert(pin < 32U);
    PORT_BWR_PCR_PE(base, pin, isPullEnabled);
    3da6:	f108 7304 	add.w	r3, r8, #34603008	; 0x2100000
    3daa:	015b      	lsls	r3, r3, #5
    3dac:	7932      	ldrb	r2, [r6, #4]
    3dae:	605a      	str	r2, [r3, #4]
PORT_HAL_SetPullMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:138
static inline void PORT_HAL_SetPullMode(PORT_Type * base,
                                        uint32_t pin,
                                        port_pull_t pullSelect)
{
    assert(pin < 32U);
    PORT_BWR_PCR_PS(base, pin, pullSelect);
    3db0:	7972      	ldrb	r2, [r6, #5]
    3db2:	601a      	str	r2, [r3, #0]
PORT_HAL_SetPassiveFilterCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:199
static inline void PORT_HAL_SetPassiveFilterCmd(PORT_Type * base,
                                                uint32_t pin,
                                                bool isPassiveFilterEnabled)
{
    assert(pin < 32U);
    PORT_BWR_PCR_PFE(base, pin, isPassiveFilterEnabled);
    3db4:	79b2      	ldrb	r2, [r6, #6]
    3db6:	611a      	str	r2, [r3, #16]
PORT_HAL_SetDigitalFilterCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:294
static inline void PORT_HAL_SetDigitalFilterCmd(PORT_Type * base,
                                                     uint32_t pin,
                                                     bool isDigitalFilterEnabled)
{
    assert(pin < 32U);
    PORT_SET_DFER(base, (uint32_t)isDigitalFilterEnabled << pin);
    3db8:	79f3      	ldrb	r3, [r6, #7]
    3dba:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    3dbe:	40a3      	lsls	r3, r4
    3dc0:	4313      	orrs	r3, r2
    3dc2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
GPIO_DRV_InputPinInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:113
    #if FSL_FEATURE_PORT_HAS_DIGITAL_FILTER
    PORT_HAL_SetDigitalFilterCmd(portBase, pin,
            inputPin->config.isDigitalFilterEnabled);
    #endif
    #if FSL_FEATURE_GPIO_HAS_INTERRUPT_VECTOR
    PORT_HAL_SetPinIntMode(portBase, pin, inputPin->config.interrupt);
    3dc6:	7a32      	ldrb	r2, [r6, #8]
PORT_HAL_SetPinIntMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:381
static inline void PORT_HAL_SetPinIntMode(PORT_Type * base,
                                          uint32_t pin,
                                          port_interrupt_config_t intConfig)
{
    assert(pin < 32U);
    PORT_BWR_PCR_IRQC(base, pin, intConfig);
    3dc8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3dcc:	0411      	lsls	r1, r2, #16
    3dce:	f023 7387 	bic.w	r3, r3, #17694720	; 0x10e0000
    3dd2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    3dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3dda:	430b      	orrs	r3, r1
    3ddc:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
GPIO_DRV_InputPinInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:116

     /** Configure NVIC */
    if ((inputPin->config.interrupt) && (g_portIrqId[port]))
    3de0:	b1da      	cbz	r2, 3e1a <GPIO_DRV_InputPinInit+0xbe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:116 (discriminator 1)
    3de2:	4b11      	ldr	r3, [pc, #68]	; (3e28 <GPIO_DRV_InputPinInit+0xcc>)
    3de4:	5ddb      	ldrb	r3, [r3, r7]
    3de6:	b1c3      	cbz	r3, 3e1a <GPIO_DRV_InputPinInit+0xbe>
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    3de8:	b25a      	sxtb	r2, r3
    3dea:	2a00      	cmp	r2, #0
    3dec:	da04      	bge.n	3df8 <GPIO_DRV_InputPinInit+0x9c>
    3dee:	480f      	ldr	r0, [pc, #60]	; (3e2c <GPIO_DRV_InputPinInit+0xd0>)
    3df0:	4a0f      	ldr	r2, [pc, #60]	; (3e30 <GPIO_DRV_InputPinInit+0xd4>)
    3df2:	4b10      	ldr	r3, [pc, #64]	; (3e34 <GPIO_DRV_InputPinInit+0xd8>)
    3df4:	215d      	movs	r1, #93	; 0x5d
    3df6:	e005      	b.n	3e04 <GPIO_DRV_InputPinInit+0xa8>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    3df8:	2a55      	cmp	r2, #85	; 0x55
    3dfa:	dd05      	ble.n	3e08 <GPIO_DRV_InputPinInit+0xac>
    3dfc:	480b      	ldr	r0, [pc, #44]	; (3e2c <GPIO_DRV_InputPinInit+0xd0>)
    3dfe:	4a0c      	ldr	r2, [pc, #48]	; (3e30 <GPIO_DRV_InputPinInit+0xd4>)
    3e00:	4b0d      	ldr	r3, [pc, #52]	; (3e38 <GPIO_DRV_InputPinInit+0xdc>)
    3e02:	215e      	movs	r1, #94	; 0x5e
    3e04:	f002 f820 	bl	5e48 <__assert_func>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    3e08:	2101      	movs	r1, #1
    3e0a:	f003 031f 	and.w	r3, r3, #31
    3e0e:	fa01 f303 	lsl.w	r3, r1, r3
    3e12:	0952      	lsrs	r2, r2, #5
    3e14:	4909      	ldr	r1, [pc, #36]	; (3e3c <GPIO_DRV_InputPinInit+0xe0>)
    3e16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    3e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e1e:	bf00      	nop
    3e20:	00007c8c 	.word	0x00007c8c
    3e24:	00007ca0 	.word	0x00007ca0
    3e28:	00007cb4 	.word	0x00007cb4
    3e2c:	00007760 	.word	0x00007760
    3e30:	00007cb9 	.word	0x00007cb9
    3e34:	000077ca 	.word	0x000077ca
    3e38:	000077d9 	.word	0x000077d9
    3e3c:	e000e100 	.word	0xe000e100

00003e40 <GPIO_DRV_OutputPinInit>:
GPIO_DRV_OutputPinInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:131
 * Function Name : GPIO_DRV_OutputPinInit
 * Description   : Initialize one GPIO output pin used by board.
 *
 *END*/
void GPIO_DRV_OutputPinInit(const gpio_output_pin_user_config_t *outputPin)
{
    3e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:133
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(outputPin->pinName);
    3e44:	6804      	ldr	r4, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:135
    uint32_t pin = GPIO_EXTRACT_PIN(outputPin->pinName);
    GPIO_Type * gpioBase = g_gpioBase[port];
    3e46:	4a18      	ldr	r2, [pc, #96]	; (3ea8 <GPIO_DRV_OutputPinInit+0x68>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:131
 * Function Name : GPIO_DRV_OutputPinInit
 * Description   : Initialize one GPIO output pin used by board.
 *
 *END*/
void GPIO_DRV_OutputPinInit(const gpio_output_pin_user_config_t *outputPin)
{
    3e48:	4605      	mov	r5, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:133
     /** Get actual port and pin number.*/
    uint32_t port = GPIO_EXTRACT_PORT(outputPin->pinName);
    3e4a:	f3c4 2007 	ubfx	r0, r4, #8, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:134
    uint32_t pin = GPIO_EXTRACT_PIN(outputPin->pinName);
    3e4e:	b2e4      	uxtb	r4, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:135
    GPIO_Type * gpioBase = g_gpioBase[port];
    3e50:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:136
    PORT_Type * portBase = g_portBase[port];
    3e54:	4a15      	ldr	r2, [pc, #84]	; (3eac <GPIO_DRV_OutputPinInit+0x6c>)
    3e56:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:139

     /** Un-gate port clock*/
    CLOCK_SYS_EnablePortClock(port);
    3e5a:	f7fe f8b9 	bl	1fd0 <CLOCK_SYS_EnablePortClock>
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:255
 */
static inline void PORT_HAL_SetMuxMode(PORT_Type * base,
                                       uint32_t pin,
                                       port_mux_t mux)
{
    assert(pin < 32U);
    3e5e:	2c1f      	cmp	r4, #31
    3e60:	d901      	bls.n	3e66 <GPIO_DRV_OutputPinInit+0x26>
    3e62:	f7ff ff6d 	bl	3d40 <PORT_HAL_SetMuxMode.part.0>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:256
    PORT_BWR_PCR_MUX(base, pin, mux);
    3e66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    3e6a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    3e6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    3e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3e76:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
GPIO_DRV_OutputPinInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:145

     /** Set current pin as gpio.*/
    PORT_HAL_SetMuxMode(portBase, pin, kPortMuxAsGpio);

     /** Set current pin as digital output.*/
    GPIO_HAL_SetPinDir(gpioBase, pin, kGpioDigitalOutput);
    3e7a:	4638      	mov	r0, r7
    3e7c:	4621      	mov	r1, r4
    3e7e:	2201      	movs	r2, #1
    3e80:	f7fe fd9a 	bl	29b8 <GPIO_HAL_SetPinDir>
    3e84:	eb06 0884 	add.w	r8, r6, r4, lsl #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:148

     /** Configure GPIO output features. */
    GPIO_HAL_WritePinOutput(gpioBase, pin, outputPin->config.outputLogic);
    3e88:	686a      	ldr	r2, [r5, #4]
    3e8a:	4638      	mov	r0, r7
    3e8c:	4621      	mov	r1, r4
    3e8e:	f7fe fdb1 	bl	29f4 <GPIO_HAL_WritePinOutput>
PORT_HAL_SetSlewRateMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:176
static inline void PORT_HAL_SetSlewRateMode(PORT_Type * base,
                                            uint32_t pin,
                                            port_slew_rate_t rateSelect)
{
    assert(pin < 32U);
    PORT_BWR_PCR_SRE(base, pin, rateSelect);
    3e92:	f108 7304 	add.w	r3, r8, #34603008	; 0x2100000
    3e96:	015b      	lsls	r3, r3, #5
    3e98:	7a2a      	ldrb	r2, [r5, #8]
    3e9a:	609a      	str	r2, [r3, #8]
PORT_HAL_SetDriveStrengthMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:237
static inline void PORT_HAL_SetDriveStrengthMode(PORT_Type * base,
                                                 uint32_t pin,
                                                 port_drive_strength_t driveSelect)
{
    assert(pin < 32U);
    PORT_BWR_PCR_DSE(base, pin, driveSelect);
    3e9c:	7a6a      	ldrb	r2, [r5, #9]
    3e9e:	619a      	str	r2, [r3, #24]
PORT_HAL_SetOpenDrainCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:218
static inline void PORT_HAL_SetOpenDrainCmd(PORT_Type * base,
                                                 uint32_t pin,
                                                 bool isOpenDrainEnabled)
{
    assert(pin < 32U);
    PORT_BWR_PCR_ODE(base, pin, isOpenDrainEnabled);
    3ea0:	7aaa      	ldrb	r2, [r5, #10]
    3ea2:	615a      	str	r2, [r3, #20]
    3ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ea8:	00007c8c 	.word	0x00007c8c
    3eac:	00007ca0 	.word	0x00007ca0

00003eb0 <GPIO_DRV_Init>:
GPIO_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:54
 * or output pins is not needed, pass in a NULL.
 *
 *END*/
void GPIO_DRV_Init(const gpio_input_pin_user_config_t * inputPins,
                   const gpio_output_pin_user_config_t * outputPins)
{
    3eb0:	b538      	push	{r3, r4, r5, lr}
    3eb2:	460c      	mov	r4, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:55
    if (inputPins)
    3eb4:	b908      	cbnz	r0, 3eba <GPIO_DRV_Init+0xa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:64
        {
            GPIO_DRV_InputPinInit(inputPins++);
        }
    }

    if (outputPins)
    3eb6:	b94c      	cbnz	r4, 3ecc <GPIO_DRV_Init+0x1c>
    3eb8:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:58 (discriminator 1)
                   const gpio_output_pin_user_config_t * outputPins)
{
    if (inputPins)
    {
         /** Initialize input pins.*/
        while (inputPins->pinName != GPIO_PINS_OUT_OF_RANGE)
    3eba:	6803      	ldr	r3, [r0, #0]
    3ebc:	3301      	adds	r3, #1
    3ebe:	d0fa      	beq.n	3eb6 <GPIO_DRV_Init+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:60
        {
            GPIO_DRV_InputPinInit(inputPins++);
    3ec0:	f100 050c 	add.w	r5, r0, #12
    3ec4:	f7ff ff4a 	bl	3d5c <GPIO_DRV_InputPinInit>
    3ec8:	4628      	mov	r0, r5
    3eca:	e7f6      	b.n	3eba <GPIO_DRV_Init+0xa>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:67 (discriminator 1)
    }

    if (outputPins)
    {
         /** Initialize output pins.*/
        while (outputPins->pinName != GPIO_PINS_OUT_OF_RANGE)
    3ecc:	6823      	ldr	r3, [r4, #0]
    3ece:	3301      	adds	r3, #1
    3ed0:	d006      	beq.n	3ee0 <GPIO_DRV_Init+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:69
        {
            GPIO_DRV_OutputPinInit(outputPins++);
    3ed2:	4620      	mov	r0, r4
    3ed4:	f104 050c 	add.w	r5, r4, #12
    3ed8:	f7ff ffb2 	bl	3e40 <GPIO_DRV_OutputPinInit>
    3edc:	462c      	mov	r4, r5
    3ede:	e7f5      	b.n	3ecc <GPIO_DRV_Init+0x1c>
    3ee0:	bd38      	pop	{r3, r4, r5, pc}
	...

00003ee4 <GPIO_DRV_SetPinOutput>:
GPIO_DRV_SetPinOutput():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:210
 * Description   : Set output level of individual GPIO pin to logic 1.
 *
 *END*/
void GPIO_DRV_SetPinOutput(uint32_t pinName)
{
    GPIO_Type * gpioBase = g_gpioBase[GPIO_EXTRACT_PORT(pinName)];
    3ee4:	f3c0 2207 	ubfx	r2, r0, #8, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:209
 * Function Name : GPIO_DRV_SetPinOutput
 * Description   : Set output level of individual GPIO pin to logic 1.
 *
 *END*/
void GPIO_DRV_SetPinOutput(uint32_t pinName)
{
    3ee8:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:211
    GPIO_Type * gpioBase = g_gpioBase[GPIO_EXTRACT_PORT(pinName)];
    uint32_t pin = GPIO_EXTRACT_PIN(pinName);
    3eea:	b2c0      	uxtb	r0, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:210
 * Description   : Set output level of individual GPIO pin to logic 1.
 *
 *END*/
void GPIO_DRV_SetPinOutput(uint32_t pinName)
{
    GPIO_Type * gpioBase = g_gpioBase[GPIO_EXTRACT_PORT(pinName)];
    3eec:	4b07      	ldr	r3, [pc, #28]	; (3f0c <GPIO_DRV_SetPinOutput+0x28>)
GPIO_HAL_SetPinOutput():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_gpio_hal.h:179
 * @param base  GPIO base pointer(PTA, PTB, PTC, etc.)
 * @param pin  GPIO port pin number
 */
static inline void GPIO_HAL_SetPinOutput(GPIO_Type * base, uint32_t pin)
{
    assert(pin < 32);
    3eee:	281f      	cmp	r0, #31
GPIO_DRV_SetPinOutput():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:210
    3ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
GPIO_HAL_SetPinOutput():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_gpio_hal.h:179
    3ef4:	d905      	bls.n	3f02 <GPIO_DRV_SetPinOutput+0x1e>
    3ef6:	4806      	ldr	r0, [pc, #24]	; (3f10 <GPIO_DRV_SetPinOutput+0x2c>)
    3ef8:	4a06      	ldr	r2, [pc, #24]	; (3f14 <GPIO_DRV_SetPinOutput+0x30>)
    3efa:	4b07      	ldr	r3, [pc, #28]	; (3f18 <GPIO_DRV_SetPinOutput+0x34>)
    3efc:	21b3      	movs	r1, #179	; 0xb3
    3efe:	f001 ffa3 	bl	5e48 <__assert_func>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_gpio_hal.h:180
    GPIO_WR_PSOR(base, 1U << pin);
    3f02:	2201      	movs	r2, #1
    3f04:	fa02 f000 	lsl.w	r0, r2, r0
    3f08:	6058      	str	r0, [r3, #4]
    3f0a:	bd08      	pop	{r3, pc}
    3f0c:	00007c8c 	.word	0x00007c8c
    3f10:	00007d5f 	.word	0x00007d5f
    3f14:	00007dbd 	.word	0x00007dbd
    3f18:	00007390 	.word	0x00007390

00003f1c <GPIO_DRV_ClearPinOutput>:
GPIO_DRV_ClearPinOutput():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:224
 * Description   : Set output level of individual GPIO pin to logic 0.
 *
 *END*/
void GPIO_DRV_ClearPinOutput(uint32_t pinName)
{
    GPIO_Type * gpioBase = g_gpioBase[GPIO_EXTRACT_PORT(pinName)];
    3f1c:	f3c0 2207 	ubfx	r2, r0, #8, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:223
 * Function Name : GPIO_DRV_ClearPinOutput
 * Description   : Set output level of individual GPIO pin to logic 0.
 *
 *END*/
void GPIO_DRV_ClearPinOutput(uint32_t pinName)
{
    3f20:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:225
    GPIO_Type * gpioBase = g_gpioBase[GPIO_EXTRACT_PORT(pinName)];
    uint32_t pin = GPIO_EXTRACT_PIN(pinName);
    3f22:	b2c0      	uxtb	r0, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:224
 * Description   : Set output level of individual GPIO pin to logic 0.
 *
 *END*/
void GPIO_DRV_ClearPinOutput(uint32_t pinName)
{
    GPIO_Type * gpioBase = g_gpioBase[GPIO_EXTRACT_PORT(pinName)];
    3f24:	4b07      	ldr	r3, [pc, #28]	; (3f44 <GPIO_DRV_ClearPinOutput+0x28>)
GPIO_HAL_ClearPinOutput():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_gpio_hal.h:191
 * @param base  GPIO base pointer(PTA, PTB, PTC, etc.)
 * @param pin  GPIO port pin number
 */
static inline void GPIO_HAL_ClearPinOutput(GPIO_Type * base, uint32_t pin)
{
    assert(pin < 32);
    3f26:	281f      	cmp	r0, #31
GPIO_DRV_ClearPinOutput():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/gpio/fsl_gpio_driver.c:224
    3f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
GPIO_HAL_ClearPinOutput():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_gpio_hal.h:191
    3f2c:	d905      	bls.n	3f3a <GPIO_DRV_ClearPinOutput+0x1e>
    3f2e:	4806      	ldr	r0, [pc, #24]	; (3f48 <GPIO_DRV_ClearPinOutput+0x2c>)
    3f30:	4a06      	ldr	r2, [pc, #24]	; (3f4c <GPIO_DRV_ClearPinOutput+0x30>)
    3f32:	4b07      	ldr	r3, [pc, #28]	; (3f50 <GPIO_DRV_ClearPinOutput+0x34>)
    3f34:	21bf      	movs	r1, #191	; 0xbf
    3f36:	f001 ff87 	bl	5e48 <__assert_func>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_gpio_hal.h:192
    GPIO_WR_PCOR(base, 1U << pin);
    3f3a:	2201      	movs	r2, #1
    3f3c:	fa02 f000 	lsl.w	r0, r2, r0
    3f40:	6098      	str	r0, [r3, #8]
    3f42:	bd08      	pop	{r3, pc}
    3f44:	00007c8c 	.word	0x00007c8c
    3f48:	00007d5f 	.word	0x00007d5f
    3f4c:	00007ccb 	.word	0x00007ccb
    3f50:	00007390 	.word	0x00007390

00003f54 <INT_SYS_EnableIRQ>:
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    3f54:	2800      	cmp	r0, #0
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:91
 * the peripheral interrupt, from 0 to a maximum supported IRQ.
 *
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
    3f56:	b508      	push	{r3, lr}
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
     /** check IRQ number */
    assert(0 <= irqNumber);
    3f58:	da04      	bge.n	3f64 <INT_SYS_EnableIRQ+0x10>
    3f5a:	480b      	ldr	r0, [pc, #44]	; (3f88 <INT_SYS_EnableIRQ+0x34>)
    3f5c:	4a0b      	ldr	r2, [pc, #44]	; (3f8c <INT_SYS_EnableIRQ+0x38>)
    3f5e:	4b0c      	ldr	r3, [pc, #48]	; (3f90 <INT_SYS_EnableIRQ+0x3c>)
    3f60:	215d      	movs	r1, #93	; 0x5d
    3f62:	e005      	b.n	3f70 <INT_SYS_EnableIRQ+0x1c>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    3f64:	2855      	cmp	r0, #85	; 0x55
    3f66:	dd05      	ble.n	3f74 <INT_SYS_EnableIRQ+0x20>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94 (discriminator 1)
    3f68:	4807      	ldr	r0, [pc, #28]	; (3f88 <INT_SYS_EnableIRQ+0x34>)
    3f6a:	4a08      	ldr	r2, [pc, #32]	; (3f8c <INT_SYS_EnableIRQ+0x38>)
    3f6c:	4b09      	ldr	r3, [pc, #36]	; (3f94 <INT_SYS_EnableIRQ+0x40>)
    3f6e:	215e      	movs	r1, #94	; 0x5e
    3f70:	f001 ff6a 	bl	5e48 <__assert_func>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    3f74:	0942      	lsrs	r2, r0, #5
    3f76:	2301      	movs	r3, #1
    3f78:	f000 001f 	and.w	r0, r0, #31
    3f7c:	fa03 f000 	lsl.w	r0, r3, r0
    3f80:	4b05      	ldr	r3, [pc, #20]	; (3f98 <INT_SYS_EnableIRQ+0x44>)
    3f82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    3f86:	bd08      	pop	{r3, pc}
    3f88:	00007760 	.word	0x00007760
    3f8c:	00007ee3 	.word	0x00007ee3
    3f90:	000077ca 	.word	0x000077ca
    3f94:	000077d9 	.word	0x000077d9
    3f98:	e000e100 	.word	0xe000e100

00003f9c <EDMA_DRV_ClaimChannel>:
EDMA_DRV_ClaimChannel():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:266
 * Description   : Claim an edma channel.
 *
 *END*/
static edma_status_t EDMA_DRV_ClaimChannel(
                uint8_t channel, dma_request_source_t source, edma_chn_state_t *chn)
{
    3f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:268
    uint8_t src = (uint32_t)source & 0xFF;
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    3fa0:	0903      	lsrs	r3, r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:266
 * Description   : Claim an edma channel.
 *
 *END*/
static edma_status_t EDMA_DRV_ClaimChannel(
                uint8_t channel, dma_request_source_t source, edma_chn_state_t *chn)
{
    3fa2:	4690      	mov	r8, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:268
    uint8_t src = (uint32_t)source & 0xFF;
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    3fa4:	4a16      	ldr	r2, [pc, #88]	; (4000 <EDMA_DRV_ClaimChannel+0x64>)
    3fa6:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:270
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(channel);
    DMAMUX_Type * dmamuxRegBase = VIRTUAL_CHN_TO_DMAMUX_MODULE_REGBASE(channel);
    3faa:	4a16      	ldr	r2, [pc, #88]	; (4004 <EDMA_DRV_ClaimChannel+0x68>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:269
static edma_status_t EDMA_DRV_ClaimChannel(
                uint8_t channel, dma_request_source_t source, edma_chn_state_t *chn)
{
    uint8_t src = (uint32_t)source & 0xFF;
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(channel);
    3fac:	f000 040f 	and.w	r4, r0, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:270
    DMAMUX_Type * dmamuxRegBase = VIRTUAL_CHN_TO_DMAMUX_MODULE_REGBASE(channel);
    3fb0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:266
 * Description   : Claim an edma channel.
 *
 *END*/
static edma_status_t EDMA_DRV_ClaimChannel(
                uint8_t channel, dma_request_source_t source, edma_chn_state_t *chn)
{
    3fb4:	4606      	mov	r6, r0
    3fb6:	4689      	mov	r9, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:274
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(channel);
    DMAMUX_Type * dmamuxRegBase = VIRTUAL_CHN_TO_DMAMUX_MODULE_REGBASE(channel);
    uint32_t dmamuxChannel = VIRTUAL_CHN_TO_DMAMUX_CHN(channel);

     /** Reset the channel state structure to default value. */
    memset(chn, 0, sizeof(edma_chn_state_t));
    3fb8:	4640      	mov	r0, r8
    3fba:	2100      	movs	r1, #0
    3fbc:	2210      	movs	r2, #16
    3fbe:	f001 ffca 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:277

     /** Init the channel state structure to the allocated channel number. */
    chn->channel = channel;
    3fc2:	f888 6000 	strb.w	r6, [r8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:280

     /** Enable error interrupt for this channel */
    EDMA_HAL_SetErrorIntCmd(edmaRegBase, true, (edma_channel_indicator_t)edmaChannel);
    3fc6:	4638      	mov	r0, r7
    3fc8:	4622      	mov	r2, r4
    3fca:	2101      	movs	r1, #1
    3fcc:	f7fe fd2a 	bl	2a24 <EDMA_HAL_SetErrorIntCmd>
DMAMUX_HAL_SetChannelCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dmamux_hal.h:90
 * @param enable Enables (true) or Disables (false) DMAMUX channel.
 */
static inline void DMAMUX_HAL_SetChannelCmd(DMAMUX_Type * base, uint32_t channel, bool enable)
{
    assert(channel < FSL_FEATURE_DMAMUX_MODULE_CHANNEL);
    DMAMUX_BWR_CHCFG_ENBL(base, channel, enable);
    3fd0:	192b      	adds	r3, r5, r4
    3fd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    3fd6:	015b      	lsls	r3, r3, #5
    3fd8:	2600      	movs	r6, #0
    3fda:	771e      	strb	r6, [r3, #28]
DMAMUX_HAL_SetTriggerSource():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dmamux_hal.h:121
 * @param source DMA request source.
 */
static inline void DMAMUX_HAL_SetTriggerSource(DMAMUX_Type * base, uint32_t channel, uint8_t source)
{
    assert(channel < FSL_FEATURE_DMAMUX_MODULE_CHANNEL);
    DMAMUX_BWR_CHCFG_SOURCE(base, channel, source);
    3fdc:	5d2a      	ldrb	r2, [r5, r4]
    3fde:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    3fe2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3fe6:	ea42 0909 	orr.w	r9, r2, r9
DMAMUX_HAL_SetChannelCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dmamux_hal.h:90
 * @param enable Enables (true) or Disables (false) DMAMUX channel.
 */
static inline void DMAMUX_HAL_SetChannelCmd(DMAMUX_Type * base, uint32_t channel, bool enable)
{
    assert(channel < FSL_FEATURE_DMAMUX_MODULE_CHANNEL);
    DMAMUX_BWR_CHCFG_ENBL(base, channel, enable);
    3fea:	2201      	movs	r2, #1
DMAMUX_HAL_SetTriggerSource():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dmamux_hal.h:121
 * @param source DMA request source.
 */
static inline void DMAMUX_HAL_SetTriggerSource(DMAMUX_Type * base, uint32_t channel, uint8_t source)
{
    assert(channel < FSL_FEATURE_DMAMUX_MODULE_CHANNEL);
    DMAMUX_BWR_CHCFG_SOURCE(base, channel, source);
    3fec:	f805 9004 	strb.w	r9, [r5, r4]
EDMA_DRV_ClaimChannel():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:288
    DMAMUX_HAL_SetChannelCmd(dmamuxRegBase, dmamuxChannel, false);
    DMAMUX_HAL_SetTriggerSource(dmamuxRegBase, dmamuxChannel, src%(uint8_t)kDmamuxDmaRequestSource);
    DMAMUX_HAL_SetChannelCmd(dmamuxRegBase, dmamuxChannel, true);

     /** Clear the TCD registers for this channel */
    EDMA_HAL_HTCDClearReg(edmaRegBase, edmaChannel);
    3ff0:	4638      	mov	r0, r7
DMAMUX_HAL_SetChannelCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dmamux_hal.h:90
 * @param enable Enables (true) or Disables (false) DMAMUX channel.
 */
static inline void DMAMUX_HAL_SetChannelCmd(DMAMUX_Type * base, uint32_t channel, bool enable)
{
    assert(channel < FSL_FEATURE_DMAMUX_MODULE_CHANNEL);
    DMAMUX_BWR_CHCFG_ENBL(base, channel, enable);
    3ff2:	771a      	strb	r2, [r3, #28]
EDMA_DRV_ClaimChannel():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:288
    3ff4:	4621      	mov	r1, r4
    3ff6:	f7fe fd1f 	bl	2a38 <EDMA_HAL_HTCDClearReg>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:291

    return kStatus_EDMA_Success;
}
    3ffa:	4630      	mov	r0, r6
    3ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4000:	00007dd8 	.word	0x00007dd8
    4004:	00007dd4 	.word	0x00007dd4

00004008 <EDMA_DRV_Init>:
EDMA_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:70
 * Function Name : EDMA_DRV_Init
 * Description   : Initializes all eDMA modules in SOC.
 *
 *END*/
edma_status_t EDMA_DRV_Init(edma_state_t *edmaState, const edma_user_config_t *userConfig)
{
    4008:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:76
    uint32_t i, j;
    DMA_Type * edmaRegBase;
    DMAMUX_Type * dmamuxRegBase;
    IRQn_Type irqNumber;

    if (g_edma)
    400a:	4d19      	ldr	r5, [pc, #100]	; (4070 <EDMA_DRV_Init+0x68>)
    400c:	682c      	ldr	r4, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:70
 * Function Name : EDMA_DRV_Init
 * Description   : Initializes all eDMA modules in SOC.
 *
 *END*/
edma_status_t EDMA_DRV_Init(edma_state_t *edmaState, const edma_user_config_t *userConfig)
{
    400e:	460e      	mov	r6, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:76
    uint32_t i, j;
    DMA_Type * edmaRegBase;
    DMAMUX_Type * dmamuxRegBase;
    IRQn_Type irqNumber;

    if (g_edma)
    4010:	bb5c      	cbnz	r4, 406a <EDMA_DRV_Init+0x62>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:82
    {
        return kStatus_EDMA_Success;
    }

    g_edma = edmaState;
    memset(g_edma, 0, sizeof(edma_state_t));
    4012:	4621      	mov	r1, r4
    4014:	2244      	movs	r2, #68	; 0x44
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:81
    if (g_edma)
    {
        return kStatus_EDMA_Success;
    }

    g_edma = edmaState;
    4016:	6028      	str	r0, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:82
    memset(g_edma, 0, sizeof(edma_state_t));
    4018:	f001 ff9d 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:85
#if (USE_RTOS)
     /** Init mutex object for the access control of edma data structure. */
    OSA_MutexCreate(&g_edma->lock);
    401c:	6828      	ldr	r0, [r5, #0]
    401e:	f7fe f8bb 	bl	2198 <OSA_MutexCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:90
#endif

    for (i = 0; i < DMA_INSTANCE_COUNT; i++)
    {
        edmaRegBase = g_edmaBase[i];
    4022:	4b14      	ldr	r3, [pc, #80]	; (4074 <EDMA_DRV_Init+0x6c>)
    4024:	681d      	ldr	r5, [r3, #0]
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
 * @param base Base address for current SIM instance.
 * @param name Name of the module to enable.
 */
static inline void SIM_HAL_EnableClock(SIM_Type * base, sim_clock_gate_name_t name)
{
    SIM_BWR_SCGC_BIT(base, name, 1U);
    4026:	4b14      	ldr	r3, [pc, #80]	; (4078 <EDMA_DRV_Init+0x70>)
EDMA_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:95
         /** Enable clock gate of eDMA module. */
        CLOCK_SYS_EnableDmaClock(i);

         /** Init eDMA module in hardware level. */
        EDMA_HAL_Init(edmaRegBase);
    4028:	4628      	mov	r0, r5
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    402a:	2201      	movs	r2, #1
EDMA_HAL_SetChannelArbitrationMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:413
 * @param channelArbitration Round-Robin way for fixed priority way.
 */
static inline void EDMA_HAL_SetChannelArbitrationMode(
                DMA_Type * base, edma_channel_arbitration_t channelArbitration)
{
    DMA_BWR_CR_ERCA(base, channelArbitration);
    402c:	f105 7504 	add.w	r5, r5, #34603008	; 0x2100000
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    4030:	601a      	str	r2, [r3, #0]
EDMA_HAL_SetChannelArbitrationMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:413
    4032:	016d      	lsls	r5, r5, #5
EDMA_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:95
    4034:	f7fe fd1e 	bl	2a74 <EDMA_HAL_Init>
EDMA_HAL_SetChannelArbitrationMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:413
    4038:	7833      	ldrb	r3, [r6, #0]
    403a:	60ab      	str	r3, [r5, #8]
EDMA_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:102
        EDMA_HAL_SetChannelArbitrationMode(edmaRegBase, userConfig->chnArbitration);
#if (FSL_FEATURE_EDMA_CHANNEL_GROUP_COUNT > 0x1U)
        EDMA_HAL_SetGroupArbitrationMode(edmaRegBase, userConfig->groupArbitration);
        EDMA_HAL_SetGroupPriority(edmaRegBase, userConfig->groupPriority);
#endif
        EDMA_HAL_SetHaltOnErrorCmd(edmaRegBase, !userConfig->notHaltOnError);
    403c:	7873      	ldrb	r3, [r6, #1]
EDMA_HAL_SetHaltOnErrorCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:346
 * @param base Register base address for eDMA module.
 * @param haltOnError Halts (true) or not halt (false) eDMA module when an error occurs.
 */
static inline void EDMA_HAL_SetHaltOnErrorCmd(DMA_Type * base, bool haltOnError)
{
    DMA_BWR_CR_HOE(base, haltOnError);
    403e:	f083 0301 	eor.w	r3, r3, #1
    4042:	612b      	str	r3, [r5, #16]
EDMA_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:107

#if !defined FSL_FEATURE_EDMA_HAS_ERROR_IRQ
         /** Enable the error interrupt for eDMA module. */
        irqNumber = g_edmaErrIrqId[i];
        INT_SYS_EnableIRQ(irqNumber);
    4044:	4b0d      	ldr	r3, [pc, #52]	; (407c <EDMA_DRV_Init+0x74>)
    4046:	f993 0000 	ldrsb.w	r0, [r3]
    404a:	f7ff ff83 	bl	3f54 <INT_SYS_EnableIRQ>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:115
         /** Register all edma channl interrupt handler into vector table. */
        for (j = 0; j < FSL_FEATURE_EDMA_MODULE_CHANNEL; j++)
        {
             /** Enable channel interrupt ID. */
            irqNumber = g_edmaIrqId[i][j];
            INT_SYS_EnableIRQ(irqNumber);
    404e:	4b0c      	ldr	r3, [pc, #48]	; (4080 <EDMA_DRV_Init+0x78>)
    4050:	5718      	ldrsb	r0, [r3, r4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:111
        irqNumber = g_edmaErrIrqId[i];
        INT_SYS_EnableIRQ(irqNumber);
#endif

         /** Register all edma channl interrupt handler into vector table. */
        for (j = 0; j < FSL_FEATURE_EDMA_MODULE_CHANNEL; j++)
    4052:	3401      	adds	r4, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:115
        {
             /** Enable channel interrupt ID. */
            irqNumber = g_edmaIrqId[i][j];
            INT_SYS_EnableIRQ(irqNumber);
    4054:	f7ff ff7e 	bl	3f54 <INT_SYS_EnableIRQ>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:111
        irqNumber = g_edmaErrIrqId[i];
        INT_SYS_EnableIRQ(irqNumber);
#endif

         /** Register all edma channl interrupt handler into vector table. */
        for (j = 0; j < FSL_FEATURE_EDMA_MODULE_CHANNEL; j++)
    4058:	2c10      	cmp	r4, #16
    405a:	d1f8      	bne.n	404e <EDMA_DRV_Init+0x46>
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480 (discriminator 2)
    405c:	4b09      	ldr	r3, [pc, #36]	; (4084 <EDMA_DRV_Init+0x7c>)
    405e:	2201      	movs	r2, #1
    4060:	601a      	str	r2, [r3, #0]
EDMA_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:126 (discriminator 2)
        dmamuxRegBase = g_dmamuxBase[i];
         /** Enable dmamux clock gate */
        CLOCK_SYS_EnableDmamuxClock(i);

         /** Init dmamux module in hardware level */
        DMAMUX_HAL_Init(dmamuxRegBase);
    4062:	4b09      	ldr	r3, [pc, #36]	; (4088 <EDMA_DRV_Init+0x80>)
    4064:	6818      	ldr	r0, [r3, #0]
    4066:	f7ff f852 	bl	310e <DMAMUX_HAL_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:130
    }

    return kStatus_EDMA_Success;
}
    406a:	2000      	movs	r0, #0
    406c:	bd70      	pop	{r4, r5, r6, pc}
    406e:	bf00      	nop
    4070:	1fff0c80 	.word	0x1fff0c80
    4074:	00007dd8 	.word	0x00007dd8
    4078:	42900804 	.word	0x42900804
    407c:	00007ddc 	.word	0x00007ddc
    4080:	00007ddd 	.word	0x00007ddd
    4084:	42900784 	.word	0x42900784
    4088:	00007dd4 	.word	0x00007dd4

0000408c <EDMA_DRV_RequestChannel>:
EDMA_DRV_RequestChannel():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:212
uint8_t EDMA_DRV_RequestChannel(
                uint8_t channel, dma_request_source_t source, edma_chn_state_t *chn)
{

    /*Check if dynamically allocation is requested */
    if (channel == kEDMAAnyChannel)
    408c:	28fe      	cmp	r0, #254	; 0xfe
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:209
 * Description   : Request an eDMA channel.
 *
 *END*/
uint8_t EDMA_DRV_RequestChannel(
                uint8_t channel, dma_request_source_t source, edma_chn_state_t *chn)
{
    408e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4092:	4604      	mov	r4, r0
    4094:	4688      	mov	r8, r1
    4096:	4615      	mov	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:212

    /*Check if dynamically allocation is requested */
    if (channel == kEDMAAnyChannel)
    4098:	d12a      	bne.n	40f0 <EDMA_DRV_RequestChannel+0x64>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:216
    {
        uint32_t i = 0, j;
        uint32_t map;
        map = ((uint32_t)source >> 8);
    409a:	0a0e      	lsrs	r6, r1, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:214
{

    /*Check if dynamically allocation is requested */
    if (channel == kEDMAAnyChannel)
    {
        uint32_t i = 0, j;
    409c:	2700      	movs	r7, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:218 (discriminator 1)
        uint32_t map;
        map = ((uint32_t)source >> 8);

        while (map != 0)
    409e:	2e00      	cmp	r6, #0
    40a0:	d03c      	beq.n	411c <EDMA_DRV_RequestChannel+0x90>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:220
        {
            if (map & (1U << i))
    40a2:	f04f 0901 	mov.w	r9, #1
    40a6:	fa09 f907 	lsl.w	r9, r9, r7
    40aa:	ea19 0f06 	tst.w	r9, r6
    40ae:	d01b      	beq.n	40e8 <EDMA_DRV_RequestChannel+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:222
            {
                for (j = i * FSL_FEATURE_DMAMUX_MODULE_CHANNEL; j < (i + 1) * FSL_FEATURE_DMAMUX_MODULE_CHANNEL; j++)
    40b0:	013c      	lsls	r4, r7, #4
    40b2:	f104 0a10 	add.w	sl, r4, #16
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:222 (discriminator 1)
    40b6:	4554      	cmp	r4, sl
    40b8:	d216      	bcs.n	40e8 <EDMA_DRV_RequestChannel+0x5c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:224
                {
                    EDMA_DRV_LOCK();
    40ba:	f8df b068 	ldr.w	fp, [pc, #104]	; 4124 <EDMA_DRV_RequestChannel+0x98>
    40be:	f04f 31ff 	mov.w	r1, #4294967295
    40c2:	f8db 0000 	ldr.w	r0, [fp]
    40c6:	f7fe f87f 	bl	21c8 <OSA_MutexLock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:225
                    if (!g_edma->chn[j])
    40ca:	f8db 0000 	ldr.w	r0, [fp]
    40ce:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    40d2:	685a      	ldr	r2, [r3, #4]
    40d4:	b922      	cbnz	r2, 40e0 <EDMA_DRV_RequestChannel+0x54>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:227
                    {
                        g_edma->chn[j] = chn;
    40d6:	605d      	str	r5, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:228
                        EDMA_DRV_UNLOCK();
    40d8:	f7fe f8a6 	bl	2228 <OSA_MutexUnlock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:229
                        EDMA_DRV_ClaimChannel(j, source, chn);
    40dc:	b2e4      	uxtb	r4, r4
    40de:	e015      	b.n	410c <EDMA_DRV_RequestChannel+0x80>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:232
                        return j;
                    }
                    EDMA_DRV_UNLOCK();
    40e0:	f7fe f8a2 	bl	2228 <OSA_MutexUnlock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:222

        while (map != 0)
        {
            if (map & (1U << i))
            {
                for (j = i * FSL_FEATURE_DMAMUX_MODULE_CHANNEL; j < (i + 1) * FSL_FEATURE_DMAMUX_MODULE_CHANNEL; j++)
    40e4:	3401      	adds	r4, #1
    40e6:	e7e6      	b.n	40b6 <EDMA_DRV_RequestChannel+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:236
                    }
                    EDMA_DRV_UNLOCK();
                }

            }
            map &= ~(0x1U << i);
    40e8:	ea26 0609 	bic.w	r6, r6, r9
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:237
            i++;
    40ec:	3701      	adds	r7, #1
    40ee:	e7d6      	b.n	409e <EDMA_DRV_RequestChannel+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:245
         /** No available channel. */
        return kEDMAInvalidChannel;
    }

     /** static allocation */
    EDMA_DRV_LOCK();
    40f0:	4e0c      	ldr	r6, [pc, #48]	; (4124 <EDMA_DRV_RequestChannel+0x98>)
    40f2:	f04f 31ff 	mov.w	r1, #4294967295
    40f6:	6830      	ldr	r0, [r6, #0]
    40f8:	f7fe f866 	bl	21c8 <OSA_MutexLock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:246
    if (!g_edma->chn[channel])
    40fc:	6830      	ldr	r0, [r6, #0]
    40fe:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    4102:	685a      	ldr	r2, [r3, #4]
    4104:	b942      	cbnz	r2, 4118 <EDMA_DRV_RequestChannel+0x8c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:248
    {
        g_edma->chn[channel] = chn;
    4106:	605d      	str	r5, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:249
        EDMA_DRV_UNLOCK();
    4108:	f7fe f88e 	bl	2228 <OSA_MutexUnlock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:250
        EDMA_DRV_ClaimChannel(channel, source, chn);
    410c:	4620      	mov	r0, r4
    410e:	4641      	mov	r1, r8
    4110:	462a      	mov	r2, r5
    4112:	f7ff ff43 	bl	3f9c <EDMA_DRV_ClaimChannel>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:251
        return channel;
    4116:	e002      	b.n	411e <EDMA_DRV_RequestChannel+0x92>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:253
    }
    EDMA_DRV_UNLOCK();
    4118:	f7fe f886 	bl	2228 <OSA_MutexUnlock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:255

    return kEDMAInvalidChannel;
    411c:	24ff      	movs	r4, #255	; 0xff
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:256
}
    411e:	4620      	mov	r0, r4
    4120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4124:	1fff0c80 	.word	0x1fff0c80

00004128 <EDMA_DRV_IRQHandler>:
EDMA_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:344
 * Function Name : EDMA_IRQ_HANDLER
 * Description   : EDMA IRQ handler.
 *
 *END*/
void EDMA_DRV_IRQHandler(uint8_t channel)
{
    4128:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:345
    edma_chn_state_t *chn = g_edma->chn[channel];
    412a:	4b0a      	ldr	r3, [pc, #40]	; (4154 <EDMA_DRV_IRQHandler+0x2c>)
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4132:	685b      	ldr	r3, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:347

    if (!chn)
    4134:	b163      	cbz	r3, 4150 <EDMA_DRV_IRQHandler+0x28>
EDMA_DRV_ClearIntStatus():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:329
 * Description   : Clear done and interrupt status.
 *
 *END*/
static void EDMA_DRV_ClearIntStatus(uint8_t channel)
{
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    4136:	0901      	lsrs	r1, r0, #4
    4138:	4a07      	ldr	r2, [pc, #28]	; (4158 <EDMA_DRV_IRQHandler+0x30>)
    413a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:330
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(channel);
    413e:	f000 000f 	and.w	r0, r0, #15
EDMA_HAL_ClearDoneStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:554
 * @param channel Channel indicator. If kEDMAAllChannel is selected, all channels' done status will
 * be cleared.
 */
static inline void EDMA_HAL_ClearDoneStatusFlag(DMA_Type * base, edma_channel_indicator_t channel)
{
    DMA_WR_CDNE(base, channel);
    4142:	7710      	strb	r0, [r2, #28]
EDMA_HAL_ClearIntStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:593
 * status will be cleared.
 */
static inline void EDMA_HAL_ClearIntStatusFlag(
                DMA_Type * base, edma_channel_indicator_t channel)
{
    DMA_WR_CINT(base, channel);
    4144:	77d0      	strb	r0, [r2, #31]
EDMA_DRV_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:354
        return;
    }

    EDMA_DRV_ClearIntStatus(channel);

    if (chn->callback)
    4146:	685a      	ldr	r2, [r3, #4]
    4148:	b112      	cbz	r2, 4150 <EDMA_DRV_IRQHandler+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:356
    {
        chn->callback(chn->parameter, chn->status);
    414a:	7b19      	ldrb	r1, [r3, #12]
    414c:	6898      	ldr	r0, [r3, #8]
    414e:	4790      	blx	r2
    4150:	bd08      	pop	{r3, pc}
    4152:	bf00      	nop
    4154:	1fff0c80 	.word	0x1fff0c80
    4158:	00007dd8 	.word	0x00007dd8

0000415c <EDMA_DRV_PushDescriptorToReg>:
EDMA_DRV_PushDescriptorToReg():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:685
 * Function Name : EDMA_DRV_PushDescriptorToReg
 * Description   : Copy the software TCD configuration to the hardware TCD.
 *
 *END*/
edma_status_t EDMA_DRV_PushDescriptorToReg(edma_chn_state_t *chn, edma_software_tcd_t *stcd)
{
    415c:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:686
    uint32_t channel = chn->channel;
    415e:	7804      	ldrb	r4, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:687
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    4160:	4b08      	ldr	r3, [pc, #32]	; (4184 <EDMA_DRV_PushDescriptorToReg+0x28>)
    4162:	0922      	lsrs	r2, r4, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:688
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(channel);
    4164:	f004 040f 	and.w	r4, r4, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:687
 *
 *END*/
edma_status_t EDMA_DRV_PushDescriptorToReg(edma_chn_state_t *chn, edma_software_tcd_t *stcd)
{
    uint32_t channel = chn->channel;
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    4168:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:685
 * Function Name : EDMA_DRV_PushDescriptorToReg
 * Description   : Copy the software TCD configuration to the hardware TCD.
 *
 *END*/
edma_status_t EDMA_DRV_PushDescriptorToReg(edma_chn_state_t *chn, edma_software_tcd_t *stcd)
{
    416c:	460e      	mov	r6, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:690
    uint32_t channel = chn->channel;
    DMA_Type * edmaRegBase = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(channel);
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(channel);

    EDMA_HAL_HTCDClearReg(edmaRegBase, edmaChannel);
    416e:	4628      	mov	r0, r5
    4170:	4621      	mov	r1, r4
    4172:	f7fe fc61 	bl	2a38 <EDMA_HAL_HTCDClearReg>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:691
    EDMA_HAL_PushSTCDToHTCD(edmaRegBase, edmaChannel, stcd);
    4176:	4628      	mov	r0, r5
    4178:	4621      	mov	r1, r4
    417a:	4632      	mov	r2, r6
    417c:	f7fe fdea 	bl	2d54 <EDMA_HAL_PushSTCDToHTCD>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/edma/fsl_edma_driver.c:694

    return kStatus_EDMA_Success;
}
    4180:	2000      	movs	r0, #0
    4182:	bd70      	pop	{r4, r5, r6, pc}
    4184:	00007dd8 	.word	0x00007dd8

00004188 <DSPI_DRV_EdmaMasterCompleteTransfer>:
DSPI_DRV_EdmaMasterCompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1279
 * is disabled. This is not a public API as it is called from other driver functions.
 */
static void DSPI_DRV_EdmaMasterCompleteTransfer(uint32_t instance)
{
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    4188:	4b14      	ldr	r3, [pc, #80]	; (41dc <DSPI_DRV_EdmaMasterCompleteTransfer+0x54>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1277
 * @brief Finish up a transfer.
 * Cleans up after a transfer is complete. Interrupts are disabled, and the DSPI module
 * is disabled. This is not a public API as it is called from other driver functions.
 */
static void DSPI_DRV_EdmaMasterCompleteTransfer(uint32_t instance)
{
    418a:	b570      	push	{r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1279
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    418c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1280
    SPI_Type *base = g_dspiBase[instance];
    4190:	4b13      	ldr	r3, [pc, #76]	; (41e0 <DSPI_DRV_EdmaMasterCompleteTransfer+0x58>)
    4192:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1286

     /** If an odd transfer count was provided when bits/frame > 8, then there will be an extra byte
     * received. Get this byte now and put it into the receive buffer if a receive buffer was
     * provided.
     */
    if ((dspiEdmaState->extraByte) && (dspiEdmaState->rxBuffer))
    4196:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    419a:	b123      	cbz	r3, 41a6 <DSPI_DRV_EdmaMasterCompleteTransfer+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1286 (discriminator 1)
    419c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    419e:	b113      	cbz	r3, 41a6 <DSPI_DRV_EdmaMasterCompleteTransfer+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1289
    {
         /** copy the final byte from the DSPI data register to the receive buffer */
        dspiEdmaState->rxBuffer[dspiEdmaState->rxTransferByteCnt] = DSPI_HAL_ReadData(base);
    41a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
DSPI_HAL_ReadData():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:718
 * @param base Module base pointer of type SPI_Type.
 * @return The data from the read data buffer
 */
static inline uint32_t DSPI_HAL_ReadData(SPI_Type * base)
{
    return SPI_RD_POPR(base);
    41a2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
DSPI_DRV_EdmaMasterCompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1289
    41a4:	5499      	strb	r1, [r3, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1293
    }

     /** The transfer is complete.*/
    dspiEdmaState->isTransferInProgress = false;
    41a6:	2500      	movs	r5, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1296

     /** Disable the Receive FIFO Drain DMA Request */
    DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateDmaReq, false);
    41a8:	4630      	mov	r0, r6
    41aa:	2101      	movs	r1, #1
    41ac:	462a      	mov	r2, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1293
         /** copy the final byte from the DSPI data register to the receive buffer */
        dspiEdmaState->rxBuffer[dspiEdmaState->rxTransferByteCnt] = DSPI_HAL_ReadData(base);
    }

     /** The transfer is complete.*/
    dspiEdmaState->isTransferInProgress = false;
    41ae:	7425      	strb	r5, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1296

     /** Disable the Receive FIFO Drain DMA Request */
    DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateDmaReq, false);
    41b0:	f7fe ff8d 	bl	30ce <DSPI_HAL_SetRxFifoDrainDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1299

     /** Disable TFFF DMA request */
    DSPI_HAL_SetTxFifoFillDmaIntMode(base, kDspiGenerateDmaReq, false);
    41b4:	4630      	mov	r0, r6
    41b6:	2101      	movs	r1, #1
    41b8:	462a      	mov	r2, r5
    41ba:	f7fe ff81 	bl	30c0 <DSPI_HAL_SetTxFifoFillDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1302

     /** Disable End of Queue request */
    DSPI_HAL_SetIntMode(base, kDspiEndOfQueue, false);
    41be:	4630      	mov	r0, r6
    41c0:	211c      	movs	r1, #28
    41c2:	462a      	mov	r2, r5
    41c4:	f7fe ff8a 	bl	30dc <DSPI_HAL_SetIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1304

    if (dspiEdmaState->isTransferBlocking)
    41c8:	7c63      	ldrb	r3, [r4, #17]
    41ca:	b12b      	cbz	r3, 41d8 <DSPI_DRV_EdmaMasterCompleteTransfer+0x50>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1307
    {
         /** Signal the synchronous completion object */
        OSA_SemaPost(&dspiEdmaState->irqSync);
    41cc:	f104 0014 	add.w	r0, r4, #20
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1309
    }
}
    41d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1307
    DSPI_HAL_SetIntMode(base, kDspiEndOfQueue, false);

    if (dspiEdmaState->isTransferBlocking)
    {
         /** Signal the synchronous completion object */
        OSA_SemaPost(&dspiEdmaState->irqSync);
    41d4:	f7fd bfb0 	b.w	2138 <OSA_SemaPost>
    41d8:	bd70      	pop	{r4, r5, r6, pc}
    41da:	bf00      	nop
    41dc:	1fff0c84 	.word	0x1fff0c84
    41e0:	00007ef8 	.word	0x00007ef8

000041e4 <EDMA_HAL_HTCDSetChannelMajorLink>:
EDMA_HAL_HTCDSetChannelMajorLink():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:827
 * @param enable Enables (true) or Disables (false) channel major link.
 */
static inline void EDMA_HAL_HTCDSetChannelMajorLink(
                DMA_Type * base, uint32_t channel, uint32_t majorChannel, bool enable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    41e4:	290f      	cmp	r1, #15
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:826
 * @param majorChannel channel number for major link
 * @param enable Enables (true) or Disables (false) channel major link.
 */
static inline void EDMA_HAL_HTCDSetChannelMajorLink(
                DMA_Type * base, uint32_t channel, uint32_t majorChannel, bool enable)
{
    41e6:	b538      	push	{r3, r4, r5, lr}
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:827
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    41e8:	d906      	bls.n	41f8 <EDMA_HAL_HTCDSetChannelMajorLink+0x14>
    41ea:	480d      	ldr	r0, [pc, #52]	; (4220 <EDMA_HAL_HTCDSetChannelMajorLink+0x3c>)
    41ec:	4a0d      	ldr	r2, [pc, #52]	; (4224 <EDMA_HAL_HTCDSetChannelMajorLink+0x40>)
    41ee:	4b0e      	ldr	r3, [pc, #56]	; (4228 <EDMA_HAL_HTCDSetChannelMajorLink+0x44>)
    41f0:	f240 313b 	movw	r1, #827	; 0x33b
    41f4:	f001 fe28 	bl	5e48 <__assert_func>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:828
    DMA_BWR_CSR_MAJORLINKCH(base, channel, majorChannel);
    41f8:	0149      	lsls	r1, r1, #5
    41fa:	1844      	adds	r4, r0, r1
    41fc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    4200:	0212      	lsls	r2, r2, #8
    4202:	8ba5      	ldrh	r5, [r4, #28]
    4204:	b2ad      	uxth	r5, r5
    4206:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    420a:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
    420e:	432a      	orrs	r2, r5
    4210:	83a2      	strh	r2, [r4, #28]
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:829
    DMA_BWR_CSR_MAJORELINK(base, channel, enable);
    4212:	4a06      	ldr	r2, [pc, #24]	; (422c <EDMA_HAL_HTCDSetChannelMajorLink+0x48>)
    4214:	4401      	add	r1, r0
    4216:	440a      	add	r2, r1
    4218:	0152      	lsls	r2, r2, #5
    421a:	8293      	strh	r3, [r2, #20]
    421c:	bd38      	pop	{r3, r4, r5, pc}
    421e:	bf00      	nop
    4220:	00007f57 	.word	0x00007f57
    4224:	00007f36 	.word	0x00007f36
    4228:	00007450 	.word	0x00007450
    422c:	0210101c 	.word	0x0210101c

00004230 <DSPI_DRV_EdmaMasterInit>:
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:104
 *END*/
dspi_status_t DSPI_DRV_EdmaMasterInit(uint32_t instance,
                                      dspi_edma_master_state_t * dspiEdmaState,
                                      const dspi_edma_master_user_config_t * userConfig,
                                      edma_software_tcd_t * stcdSrc2CmdDataLast)
{
    4230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4234:	469a      	mov	sl, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:106
    uint32_t dspiSourceClock;
    SPI_Type *base = g_dspiBase[instance];
    4236:	4b52      	ldr	r3, [pc, #328]	; (4380 <DSPI_DRV_EdmaMasterInit+0x150>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:104
 *END*/
dspi_status_t DSPI_DRV_EdmaMasterInit(uint32_t instance,
                                      dspi_edma_master_state_t * dspiEdmaState,
                                      const dspi_edma_master_user_config_t * userConfig,
                                      edma_software_tcd_t * stcdSrc2CmdDataLast)
{
    4238:	4606      	mov	r6, r0
    423a:	4615      	mov	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:106
    uint32_t dspiSourceClock;
    SPI_Type *base = g_dspiBase[instance];
    423c:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:109

     /** Check parameter pointers to make sure there are not NULL */
    if ((dspiEdmaState == NULL) || (userConfig == NULL) || (stcdSrc2CmdDataLast == NULL))
    4240:	460c      	mov	r4, r1
    4242:	2900      	cmp	r1, #0
    4244:	f000 8093 	beq.w	436e <DSPI_DRV_EdmaMasterInit+0x13e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:109 (discriminator 1)
    4248:	2a00      	cmp	r2, #0
    424a:	f000 8090 	beq.w	436e <DSPI_DRV_EdmaMasterInit+0x13e>
    424e:	f1ba 0f00 	cmp.w	sl, #0
    4252:	f000 808c 	beq.w	436e <DSPI_DRV_EdmaMasterInit+0x13e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:115
    {
        return kStatus_DSPI_InvalidParameter;
    }

     /** Check to see if stcdSrc2CmdDataLast is aligned to a 32-byte boundary */
    if ((uint32_t)stcdSrc2CmdDataLast & 0x1FU)
    4256:	f01a 071f 	ands.w	r7, sl, #31
    425a:	f040 808a 	bne.w	4372 <DSPI_DRV_EdmaMasterInit+0x142>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:121
    {
        return kStatus_DSPI_EdmaStcdUnaligned32Error;
    }

     /** Clear the run-time state struct for this instance.*/
    memset(dspiEdmaState, 0, sizeof(* dspiEdmaState));
    425e:	2258      	movs	r2, #88	; 0x58
    4260:	4608      	mov	r0, r1
    4262:	4639      	mov	r1, r7
    4264:	f001 fe77 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:126

     /** Note, remember to first enable clocks to the DSPI module before making any register accesses
     * Enable clock for DSPI
     */
    CLOCK_SYS_EnableSpiClock(instance);
    4268:	4630      	mov	r0, r6
    426a:	f7fd fee1 	bl	2030 <CLOCK_SYS_EnableSpiClock>
CLOCK_SYS_GetSpiFreq():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\src\clock\mk64f12/fsl_clock_mk64f12.h:763
 * @param instance module device instance
 * @return freq    clock frequency for this module
 */
static inline uint32_t CLOCK_SYS_GetSpiFreq(uint32_t instance)
{
    return CLOCK_SYS_GetBusClockFreq();
    426e:	f7fd fe4b 	bl	1f08 <CLOCK_SYS_GetBusClockFreq>
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:134

     /** Configure the run-time state struct with the DSPI source clock */
    dspiEdmaState->dspiSourceClock = dspiSourceClock;

     /** Configure the run-time state struct with the data command parameters*/
    dspiEdmaState->whichCtar = userConfig->whichCtar;   /** set the dspiEdmaState struct CTAR*/
    4272:	782b      	ldrb	r3, [r5, #0]
    4274:	7023      	strb	r3, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:135
    dspiEdmaState->whichPcs = userConfig->whichPcs;   /** set the dspiEdmaState struct whichPcs*/
    4276:	78eb      	ldrb	r3, [r5, #3]
    4278:	7223      	strb	r3, [r4, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:136
    dspiEdmaState->isChipSelectContinuous = userConfig->isChipSelectContinuous;  /** continuous PCS*/
    427a:	78ab      	ldrb	r3, [r5, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:131
    CLOCK_SYS_EnableSpiClock(instance);
     /** Get module clock freq*/
    dspiSourceClock = CLOCK_SYS_GetSpiFreq(instance);

     /** Configure the run-time state struct with the DSPI source clock */
    dspiEdmaState->dspiSourceClock = dspiSourceClock;
    427c:	60e0      	str	r0, [r4, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:136

     /** Configure the run-time state struct with the data command parameters*/
    dspiEdmaState->whichCtar = userConfig->whichCtar;   /** set the dspiEdmaState struct CTAR*/
    dspiEdmaState->whichPcs = userConfig->whichPcs;   /** set the dspiEdmaState struct whichPcs*/
    dspiEdmaState->isChipSelectContinuous = userConfig->isChipSelectContinuous;  /** continuous PCS*/
    427e:	7263      	strb	r3, [r4, #9]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:139

     /** Initialize the DSPI module registers to default value, which disables the module */
    DSPI_HAL_Init(base);
    4280:	4640      	mov	r0, r8
    4282:	f7fe fdeb 	bl	2e5c <DSPI_HAL_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:142

     /** Init the interrupt sync object.*/
    if (OSA_SemaCreate(&dspiEdmaState->irqSync, 0) != kStatus_OSA_Success)
    4286:	f104 0014 	add.w	r0, r4, #20
    428a:	4639      	mov	r1, r7
    428c:	f7fd ff18 	bl	20c0 <OSA_SemaCreate>
    4290:	4683      	mov	fp, r0
    4292:	2800      	cmp	r0, #0
    4294:	d16f      	bne.n	4376 <DSPI_DRV_EdmaMasterInit+0x146>
DSPI_HAL_SetMasterSlaveMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:302
 * @param base Module base pointer of type SPI_Type.
 * @param mode Mode setting (master or slave) of type dspi_master_slave_mode_t
 */
static inline void DSPI_HAL_SetMasterSlaveMode(SPI_Type * base, dspi_master_slave_mode_t mode)
{
    SPI_BWR_MCR_MSTR(base, (uint32_t)mode);
    4296:	f108 7904 	add.w	r9, r8, #34603008	; 0x2100000
    429a:	ea4f 1949 	mov.w	r9, r9, lsl #5
    429e:	2701      	movs	r7, #1
DSPI_HAL_SetContinuousSckCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:324
 * @param base Module base pointer of type SPI_Type.
 * @param enable Enables (true) or disables(false) continuous SCK operation.
 */
static inline void DSPI_HAL_SetContinuousSckCmd(SPI_Type * base, bool enable)
{
    SPI_BWR_MCR_CONT_SCKE(base, (enable == true));
    42a0:	786b      	ldrb	r3, [r5, #1]
DSPI_HAL_SetMasterSlaveMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:302
 * @param base Module base pointer of type SPI_Type.
 * @param mode Mode setting (master or slave) of type dspi_master_slave_mode_t
 */
static inline void DSPI_HAL_SetMasterSlaveMode(SPI_Type * base, dspi_master_slave_mode_t mode)
{
    SPI_BWR_MCR_MSTR(base, (uint32_t)mode);
    42a2:	f8c9 707c 	str.w	r7, [r9, #124]	; 0x7c
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:156

     /** Configure for continuous SCK operation*/
    DSPI_HAL_SetContinuousSckCmd(base, userConfig->isSckContinuous);

     /** Configure for peripheral chip select polarity*/
    DSPI_HAL_SetPcsPolarityMode(base, userConfig->whichPcs, userConfig->pcsPolarity);
    42a6:	4640      	mov	r0, r8
DSPI_HAL_SetContinuousSckCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:324
 * @param base Module base pointer of type SPI_Type.
 * @param enable Enables (true) or disables(false) continuous SCK operation.
 */
static inline void DSPI_HAL_SetContinuousSckCmd(SPI_Type * base, bool enable)
{
    SPI_BWR_MCR_CONT_SCKE(base, (enable == true));
    42a8:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:156
    42ac:	78e9      	ldrb	r1, [r5, #3]
    42ae:	792a      	ldrb	r2, [r5, #4]
    42b0:	f7fe fe5c 	bl	2f6c <DSPI_HAL_SetPcsPolarityMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:159

     /** Enable fifo operation (regardless of FIFO depth) */
    DSPI_HAL_SetFifoCmd(base, true, true);
    42b4:	4640      	mov	r0, r8
    42b6:	4639      	mov	r1, r7
    42b8:	463a      	mov	r2, r7
    42ba:	f7fe fe67 	bl	2f8c <DSPI_HAL_SetFifoCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:162

     /** Initialize the configurable delays: PCS-to-SCK, prescaler = 0, scaler = 1 */
    DSPI_HAL_SetDelay(base, userConfig->whichCtar, 0, 1, kDspiPcsToSck);
    42be:	465a      	mov	r2, fp
    42c0:	463b      	mov	r3, r7
    42c2:	7829      	ldrb	r1, [r5, #0]
    42c4:	9700      	str	r7, [sp, #0]
    42c6:	4640      	mov	r0, r8
    42c8:	f7fe febb 	bl	3042 <DSPI_HAL_SetDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:165

     /** Save runtime structure pointers to irq handler can point to the correct state structure*/
    g_dspiStatePtr[instance] = dspiEdmaState;
    42cc:	4b2d      	ldr	r3, [pc, #180]	; (4384 <DSPI_DRV_EdmaMasterInit+0x154>)
    42ce:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:168

     /** enable the interrupt*/
    INT_SYS_EnableIRQ(g_dspiIrqId[instance]);
    42d2:	4b2d      	ldr	r3, [pc, #180]	; (4388 <DSPI_DRV_EdmaMasterInit+0x158>)
    42d4:	5d9a      	ldrb	r2, [r3, r6]
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    42d6:	b253      	sxtb	r3, r2
    42d8:	2b00      	cmp	r3, #0
    42da:	da04      	bge.n	42e6 <DSPI_DRV_EdmaMasterInit+0xb6>
    42dc:	482b      	ldr	r0, [pc, #172]	; (438c <DSPI_DRV_EdmaMasterInit+0x15c>)
    42de:	4a2c      	ldr	r2, [pc, #176]	; (4390 <DSPI_DRV_EdmaMasterInit+0x160>)
    42e0:	4b2c      	ldr	r3, [pc, #176]	; (4394 <DSPI_DRV_EdmaMasterInit+0x164>)
    42e2:	215d      	movs	r1, #93	; 0x5d
    42e4:	e005      	b.n	42f2 <DSPI_DRV_EdmaMasterInit+0xc2>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    42e6:	2b55      	cmp	r3, #85	; 0x55
    42e8:	dd05      	ble.n	42f6 <DSPI_DRV_EdmaMasterInit+0xc6>
    42ea:	4828      	ldr	r0, [pc, #160]	; (438c <DSPI_DRV_EdmaMasterInit+0x15c>)
    42ec:	4a28      	ldr	r2, [pc, #160]	; (4390 <DSPI_DRV_EdmaMasterInit+0x160>)
    42ee:	4b2a      	ldr	r3, [pc, #168]	; (4398 <DSPI_DRV_EdmaMasterInit+0x168>)
    42f0:	215e      	movs	r1, #94	; 0x5e
    42f2:	f001 fda9 	bl	5e48 <__assert_func>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    42f6:	f002 021f 	and.w	r2, r2, #31
    42fa:	095b      	lsrs	r3, r3, #5
    42fc:	4927      	ldr	r1, [pc, #156]	; (439c <DSPI_DRV_EdmaMasterInit+0x16c>)
    42fe:	4097      	lsls	r7, r2
    4300:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    4304:	f104 0238 	add.w	r2, r4, #56	; 0x38
DSPI_HAL_Enable():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:248
 *
 * @param base Module base pointer of type SPI_Type.
 */
static inline void DSPI_HAL_Enable(SPI_Type * base)
{
    SPI_BWR_MCR_MDIS(base, 0);
    4308:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:186
     */
    if (instance == 0)
    {
         /** Set up channels for separate RX/TX DMA requests */
         /** This channel transfers data from RX FIFO to receiveBuffer */
        if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    430c:	20fe      	movs	r0, #254	; 0xfe
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:182
     * requests for all other instances. Therefore, use the DSPI feature file to distinguish
     * how to request DMA channels between the various MCU DSPI instances.
     * For DSPI instances with shared RX/TX DMA requests, we'll use the RX DMA request to
     * trigger ongoing transfers and will link to the TX DMA channel from the RX DMA channel.
     */
    if (instance == 0)
    430e:	b95e      	cbnz	r6, 4328 <DSPI_DRV_EdmaMasterInit+0xf8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:186
    {
         /** Set up channels for separate RX/TX DMA requests */
         /** This channel transfers data from RX FIFO to receiveBuffer */
        if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    4310:	f44f 7187 	mov.w	r1, #270	; 0x10e
    4314:	f7ff feba 	bl	408c <EDMA_DRV_RequestChannel>
    4318:	28ff      	cmp	r0, #255	; 0xff
    431a:	d101      	bne.n	4320 <DSPI_DRV_EdmaMasterInit+0xf0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:190
                                kDmaRequestMux0SPI0Rx,
                                &dspiEdmaState->dmaFifo2Receive) == kEDMAInvalidChannel)
        {
            return kStatus_DSPI_DMAChannelInvalid;
    431c:	200c      	movs	r0, #12
    431e:	e02b      	b.n	4378 <DSPI_DRV_EdmaMasterInit+0x148>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:194
        }

         /** Intermediate command/data to TX FIFO (PUSHR). */
        if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    4320:	20fe      	movs	r0, #254	; 0xfe
    4322:	f240 110f 	movw	r1, #271	; 0x10f
    4326:	e00d      	b.n	4344 <DSPI_DRV_EdmaMasterInit+0x114>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:202
        {
            return kStatus_DSPI_DMAChannelInvalid;
        }
    }

    else if (instance == 1)
    4328:	2e01      	cmp	r6, #1
    432a:	d102      	bne.n	4332 <DSPI_DRV_EdmaMasterInit+0x102>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:227
            }
        }
#else  /** Set up channels for shared RX/TX DMA request */
        {
             /** This channel transfers data from RX FIFO to receiveBuffer */
            if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    432c:	f44f 7188 	mov.w	r1, #272	; 0x110
    4330:	e001      	b.n	4336 <DSPI_DRV_EdmaMasterInit+0x106>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:276
            }
        }
#else  /** Set up channels for shared RX/TX DMA request */
        {
             /** This channel transfers data from RX FIFO to receiveBuffer */
            if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    4332:	f240 1111 	movw	r1, #273	; 0x111
    4336:	f7ff fea9 	bl	408c <EDMA_DRV_RequestChannel>
    433a:	28ff      	cmp	r0, #255	; 0xff
    433c:	d0ee      	beq.n	431c <DSPI_DRV_EdmaMasterInit+0xec>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:237
            }

             /** Intermediate command/data to TX FIFO (PUSHR) linked from RX channel.
             * This channel is not activated by dma request, but by channel link from RX.
             */
            if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    433e:	20fe      	movs	r0, #254	; 0xfe
    4340:	f44f 7180 	mov.w	r1, #256	; 0x100
    4344:	f104 0218 	add.w	r2, r4, #24
    4348:	f7ff fea0 	bl	408c <EDMA_DRV_RequestChannel>
    434c:	28ff      	cmp	r0, #255	; 0xff
    434e:	d0e5      	beq.n	431c <DSPI_DRV_EdmaMasterInit+0xec>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:303
    }

     /** Source buffer to intermediate command/data
     * This channel is not activated by dma request, but by channel link.
     */
    if (EDMA_DRV_RequestChannel(kEDMAAnyChannel,
    4350:	20fe      	movs	r0, #254	; 0xfe
    4352:	f44f 7180 	mov.w	r1, #256	; 0x100
    4356:	f104 0228 	add.w	r2, r4, #40	; 0x28
    435a:	f7ff fe97 	bl	408c <EDMA_DRV_RequestChannel>
    435e:	28ff      	cmp	r0, #255	; 0xff
    4360:	d0dc      	beq.n	431c <DSPI_DRV_EdmaMasterInit+0xec>
DSPI_HAL_StartTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:429
 *
 * @param base Module base pointer of type SPI_Type.
 */
static inline void DSPI_HAL_StartTransfer(SPI_Type * base)
{
    SPI_BWR_MCR_HALT(base, 0);
    4362:	2000      	movs	r0, #0
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:313
    }

    /**
     * Update run-time state struct with the pointer to Software Transfer Control Descriptor
     */
    dspiEdmaState->stcdSrc2CmdDataLast = stcdSrc2CmdDataLast;
    4364:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
DSPI_HAL_StartTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:429
    4368:	f8c9 0000 	str.w	r0, [r9]
    436c:	e004      	b.n	4378 <DSPI_DRV_EdmaMasterInit+0x148>
DSPI_DRV_EdmaMasterInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:111
    SPI_Type *base = g_dspiBase[instance];

     /** Check parameter pointers to make sure there are not NULL */
    if ((dspiEdmaState == NULL) || (userConfig == NULL) || (stcdSrc2CmdDataLast == NULL))
    {
        return kStatus_DSPI_InvalidParameter;
    436e:	2009      	movs	r0, #9
    4370:	e002      	b.n	4378 <DSPI_DRV_EdmaMasterInit+0x148>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:117
    }

     /** Check to see if stcdSrc2CmdDataLast is aligned to a 32-byte boundary */
    if ((uint32_t)stcdSrc2CmdDataLast & 0x1FU)
    {
        return kStatus_DSPI_EdmaStcdUnaligned32Error;
    4372:	200e      	movs	r0, #14
    4374:	e000      	b.n	4378 <DSPI_DRV_EdmaMasterInit+0x148>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:144
    DSPI_HAL_Init(base);

     /** Init the interrupt sync object.*/
    if (OSA_SemaCreate(&dspiEdmaState->irqSync, 0) != kStatus_OSA_Success)
    {
        return kStatus_DSPI_Error;
    4376:	200d      	movs	r0, #13
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:319

     /** Start the transfer process in the hardware */
    DSPI_HAL_StartTransfer(base);

    return kStatus_DSPI_Success;
}
    4378:	b003      	add	sp, #12
    437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    437e:	bf00      	nop
    4380:	00007ef8 	.word	0x00007ef8
    4384:	1fff0c84 	.word	0x1fff0c84
    4388:	00007ef5 	.word	0x00007ef5
    438c:	00007760 	.word	0x00007760
    4390:	00007f24 	.word	0x00007f24
    4394:	000077ca 	.word	0x000077ca
    4398:	000077d9 	.word	0x000077d9
    439c:	e000e100 	.word	0xe000e100

000043a0 <DSPI_DRV_EdmaMasterConfigureBus>:
DSPI_DRV_EdmaMasterConfigureBus():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:446
 *
 *END*/
dspi_status_t DSPI_DRV_EdmaMasterConfigureBus(uint32_t instance,
                                              const dspi_edma_device_t * device,
                                              uint32_t * calculatedBaudRate)
{
    43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43a4:	4690      	mov	r8, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:447
    assert(device);
    43a6:	460d      	mov	r5, r1
    43a8:	b931      	cbnz	r1, 43b8 <DSPI_DRV_EdmaMasterConfigureBus+0x18>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:447 (discriminator 1)
    43aa:	4811      	ldr	r0, [pc, #68]	; (43f0 <DSPI_DRV_EdmaMasterConfigureBus+0x50>)
    43ac:	4a11      	ldr	r2, [pc, #68]	; (43f4 <DSPI_DRV_EdmaMasterConfigureBus+0x54>)
    43ae:	4b12      	ldr	r3, [pc, #72]	; (43f8 <DSPI_DRV_EdmaMasterConfigureBus+0x58>)
    43b0:	f240 11bf 	movw	r1, #447	; 0x1bf
    43b4:	f001 fd48 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:449
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    43b8:	4b10      	ldr	r3, [pc, #64]	; (43fc <DSPI_DRV_EdmaMasterConfigureBus+0x5c>)
    43ba:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:450
    SPI_Type *base = g_dspiBase[instance];
    43be:	4b10      	ldr	r3, [pc, #64]	; (4400 <DSPI_DRV_EdmaMasterConfigureBus+0x60>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:455

    dspi_status_t errorCode = kStatus_DSPI_Success;

     /** Configure the bus to access the provided device.*/
    *calculatedBaudRate = DSPI_HAL_SetBaudRate(base, dspiEdmaState->whichCtar,
    43c0:	7821      	ldrb	r1, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:450
                                              uint32_t * calculatedBaudRate)
{
    assert(device);
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    SPI_Type *base = g_dspiBase[instance];
    43c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:455

    dspi_status_t errorCode = kStatus_DSPI_Success;

     /** Configure the bus to access the provided device.*/
    *calculatedBaudRate = DSPI_HAL_SetBaudRate(base, dspiEdmaState->whichCtar,
    43c6:	68e3      	ldr	r3, [r4, #12]
    43c8:	462e      	mov	r6, r5
    43ca:	4638      	mov	r0, r7
    43cc:	f856 2b04 	ldr.w	r2, [r6], #4
    43d0:	f7fe fd5e 	bl	2e90 <DSPI_HAL_SetBaudRate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:458
                                               device->bitsPerSec, dspiEdmaState->dspiSourceClock);

    errorCode = DSPI_HAL_SetDataFormat(base, dspiEdmaState->whichCtar, &device->dataBusConfig);
    43d4:	7821      	ldrb	r1, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:455
    SPI_Type *base = g_dspiBase[instance];

    dspi_status_t errorCode = kStatus_DSPI_Success;

     /** Configure the bus to access the provided device.*/
    *calculatedBaudRate = DSPI_HAL_SetBaudRate(base, dspiEdmaState->whichCtar,
    43d6:	f8c8 0000 	str.w	r0, [r8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:458
                                               device->bitsPerSec, dspiEdmaState->dspiSourceClock);

    errorCode = DSPI_HAL_SetDataFormat(base, dspiEdmaState->whichCtar, &device->dataBusConfig);
    43da:	4632      	mov	r2, r6
    43dc:	4638      	mov	r0, r7
    43de:	f7fe fdf0 	bl	2fc2 <DSPI_HAL_SetDataFormat>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:461

     /** Check bits/frame number */
    if (device->dataBusConfig.bitsPerFrame > 16)
    43e2:	686b      	ldr	r3, [r5, #4]
    43e4:	2b10      	cmp	r3, #16
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:467
    {
        errorCode = kStatus_DSPI_OutOfRange;
    }
    else
    {
        dspiEdmaState->bitsPerFrame = device->dataBusConfig.bitsPerFrame;  /** update bits/frame */
    43e6:	bf94      	ite	ls
    43e8:	6063      	strls	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:463
    errorCode = DSPI_HAL_SetDataFormat(base, dspiEdmaState->whichCtar, &device->dataBusConfig);

     /** Check bits/frame number */
    if (device->dataBusConfig.bitsPerFrame > 16)
    {
        errorCode = kStatus_DSPI_OutOfRange;
    43ea:	2008      	movhi	r0, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:471
    {
        dspiEdmaState->bitsPerFrame = device->dataBusConfig.bitsPerFrame;  /** update bits/frame */
    }

    return errorCode;
}
    43ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43f0:	00007fb5 	.word	0x00007fb5
    43f4:	00007f04 	.word	0x00007f04
    43f8:	00007b5c 	.word	0x00007b5c
    43fc:	1fff0c84 	.word	0x1fff0c84
    4400:	00007ef8 	.word	0x00007ef8

00004404 <DSPI_DRV_EdmaMasterStartTransfer>:
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:682
static dspi_status_t DSPI_DRV_EdmaMasterStartTransfer(uint32_t instance,
                                                      const dspi_edma_device_t * device,
                                                      const uint8_t * sendBuffer,
                                                      uint8_t * receiveBuffer,
                                                      size_t transferByteCount)
{
    4404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4408:	b093      	sub	sp, #76	; 0x4c
    440a:	4616      	mov	r6, r2
    440c:	9305      	str	r3, [sp, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:684
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    440e:	4bb5      	ldr	r3, [pc, #724]	; (46e4 <DSPI_DRV_EdmaMasterStartTransfer+0x2e0>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:682
static dspi_status_t DSPI_DRV_EdmaMasterStartTransfer(uint32_t instance,
                                                      const dspi_edma_device_t * device,
                                                      const uint8_t * sendBuffer,
                                                      uint8_t * receiveBuffer,
                                                      size_t transferByteCount)
{
    4410:	9004      	str	r0, [sp, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:684
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    4412:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:690
     /** For temporarily storing DMA instance and channel */
    DMA_Type * dmaBaseAddr;
    uint32_t dmaChannel;
    uint32_t calculatedBaudRate;
    dspi_command_config_t command;   /** create an instance of the data command struct*/
    SPI_Type *base = g_dspiBase[instance];
    4416:	4bb4      	ldr	r3, [pc, #720]	; (46e8 <DSPI_DRV_EdmaMasterStartTransfer+0x2e4>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:682
static dspi_status_t DSPI_DRV_EdmaMasterStartTransfer(uint32_t instance,
                                                      const dspi_edma_device_t * device,
                                                      const uint8_t * sendBuffer,
                                                      uint8_t * receiveBuffer,
                                                      size_t transferByteCount)
{
    4418:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:690
     /** For temporarily storing DMA instance and channel */
    DMA_Type * dmaBaseAddr;
    uint32_t dmaChannel;
    uint32_t calculatedBaudRate;
    dspi_command_config_t command;   /** create an instance of the data command struct*/
    SPI_Type *base = g_dspiBase[instance];
    441c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:696
    edma_transfer_config_t config;
    uint32_t txTransferByteCnt = 0;
    uint32_t rxTransferByteCnt = 0;

     /** Initialize s_wordToSend */
    s_wordToSend = 0;
    4420:	4bb2      	ldr	r3, [pc, #712]	; (46ec <DSPI_DRV_EdmaMasterStartTransfer+0x2e8>)
    4422:	2200      	movs	r2, #0
    4424:	801a      	strh	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:699

     /** Check that we're not busy.*/
    if (dspiEdmaState->isTransferInProgress)
    4426:	7c22      	ldrb	r2, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:682
static dspi_status_t DSPI_DRV_EdmaMasterStartTransfer(uint32_t instance,
                                                      const dspi_edma_device_t * device,
                                                      const uint8_t * sendBuffer,
                                                      uint8_t * receiveBuffer,
                                                      size_t transferByteCount)
{
    4428:	460f      	mov	r7, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:699

     /** Initialize s_wordToSend */
    s_wordToSend = 0;

     /** Check that we're not busy.*/
    if (dspiEdmaState->isTransferInProgress)
    442a:	2a00      	cmp	r2, #0
    442c:	f040 8271 	bne.w	4912 <DSPI_DRV_EdmaMasterStartTransfer+0x50e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:709
     /** Configure bus for this device. If NULL is passed, we assume the caller has
     * preconfigured the bus using DSPI_DRV_EdmaMasterConfigureBus().
     * Do nothing for calculatedBaudRate. If the user wants to know the calculatedBaudRate
     * then they can call this function separately.
     */
    if (device)
    4430:	b121      	cbz	r1, 443c <DSPI_DRV_EdmaMasterStartTransfer+0x38>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:711
    {
        DSPI_DRV_EdmaMasterConfigureBus(instance, device, &calculatedBaudRate);
    4432:	aa06      	add	r2, sp, #24
    4434:	f7ff ffb4 	bl	43a0 <DSPI_DRV_EdmaMasterConfigureBus>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:712
        dspiEdmaState->bitsPerFrame = device->dataBusConfig.bitsPerFrame; /*update bits/frame*/
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	6063      	str	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:722
     * by one and assert a flag to indicate to the send functions that it will
     * need to handle an extra byte.
     * For receive, we actually round down the transfer count to the next lowest even number.
     * Then in the interrupt handler, we take care of geting this last byte.
     */
    if ((dspiEdmaState->bitsPerFrame > 8) && (transferByteCount & 1UL))
    443c:	6863      	ldr	r3, [r4, #4]
    443e:	2b08      	cmp	r3, #8
    4440:	d909      	bls.n	4456 <DSPI_DRV_EdmaMasterStartTransfer+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:722 (discriminator 1)
    4442:	f019 0f01 	tst.w	r9, #1
    4446:	d006      	beq.n	4456 <DSPI_DRV_EdmaMasterStartTransfer+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:724
    {
        dspiEdmaState->extraByte = true;
    4448:	2301      	movs	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:726
        txTransferByteCnt = transferByteCount + 1U;   /** Increment to next even byte count */
        rxTransferByteCnt = transferByteCount & ~1U;   /** Decrement to next even byte count */
    444a:	f029 0a01 	bic.w	sl, r9, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:724
     * For receive, we actually round down the transfer count to the next lowest even number.
     * Then in the interrupt handler, we take care of geting this last byte.
     */
    if ((dspiEdmaState->bitsPerFrame > 8) && (transferByteCount & 1UL))
    {
        dspiEdmaState->extraByte = true;
    444e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:725
        txTransferByteCnt = transferByteCount + 1U;   /** Increment to next even byte count */
    4452:	4499      	add	r9, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:726
        rxTransferByteCnt = transferByteCount & ~1U;   /** Decrement to next even byte count */
    4454:	e003      	b.n	445e <DSPI_DRV_EdmaMasterStartTransfer+0x5a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:730
    }
    else
    {
        dspiEdmaState->extraByte = false;
    4456:	2300      	movs	r3, #0
    4458:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    445c:	46ca      	mov	sl, r9
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:741
     */
    dspiEdmaState->rxBuffer = (uint8_t *)receiveBuffer;
    dspiEdmaState->rxTransferByteCnt = rxTransferByteCnt;

     /** Save information about the transfer for use by the ISR.*/
    dspiEdmaState->isTransferInProgress = true;
    445e:	f04f 0b01 	mov.w	fp, #1
    4462:	f884 b010 	strb.w	fp, [r4, #16]
DSPI_HAL_PresetTransferCount():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:879
 * @param base Module base pointer of type SPI_Type.
 * @param presetValue The desired pre-set value for the transfer counter
 */
static inline void DSPI_HAL_PresetTransferCount(SPI_Type * base, uint16_t presetValue)
{
    SPI_BWR_TCR_SPI_TCNT(base, presetValue);
    4466:	68ab      	ldr	r3, [r5, #8]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:737
        rxTransferByteCnt = transferByteCount;
    }
     /** Store the receiveBuffer pointer and receive byte count to the run-time state struct
     * for later use in the interrupt handler.
     */
    dspiEdmaState->rxBuffer = (uint8_t *)receiveBuffer;
    4468:	9f05      	ldr	r7, [sp, #20]
    446a:	6527      	str	r7, [r4, #80]	; 0x50
DSPI_HAL_PresetTransferCount():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:879
    446c:	b29b      	uxth	r3, r3
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:738
    dspiEdmaState->rxTransferByteCnt = rxTransferByteCnt;
    446e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:750
     * first word is transferred.
     */
    DSPI_HAL_PresetTransferCount(base, 0);

     /** flush the fifos*/
    DSPI_HAL_SetFlushFifoCmd(base, true, true);
    4472:	4628      	mov	r0, r5
DSPI_HAL_PresetTransferCount():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:879
    4474:	60ab      	str	r3, [r5, #8]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:750
    4476:	4659      	mov	r1, fp
    4478:	465a      	mov	r2, fp
    447a:	f7fe fd9c 	bl	2fb6 <DSPI_HAL_SetFlushFifoCmd>
DSPI_HAL_ClearStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:700
 * @param statusFlag The status flag, of type dspi_status_and_interrupt_request_t
 */
static inline void DSPI_HAL_ClearStatusFlag(SPI_Type * base,
                                              dspi_status_and_interrupt_request_t statusFlag)
{
    SPI_WR_SR(base, (0x1U << statusFlag));
    447e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    4482:	62eb      	str	r3, [r5, #44]	; 0x2c
    4484:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4488:	62eb      	str	r3, [r5, #44]	; 0x2c
    448a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    448e:	62eb      	str	r3, [r5, #44]	; 0x2c
    4490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    4494:	62eb      	str	r3, [r5, #44]	; 0x2c
    4496:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    449a:	62eb      	str	r3, [r5, #44]	; 0x2c
    449c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:763
    DSPI_HAL_ClearStatusFlag(base, kDspiRxFifoDrainRequest);

     /** Enable the End Of Queue interrupt, which will set when DSPI sees EOQ bit set in the
     * last data word being sent. The ISR should clear this flag.
     */
    DSPI_HAL_SetIntMode(base, kDspiEndOfQueue, true);
    44a0:	465a      	mov	r2, fp
DSPI_HAL_ClearStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:700
    44a2:	62eb      	str	r3, [r5, #44]	; 0x2c
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:763
    44a4:	4628      	mov	r0, r5
    44a6:	211c      	movs	r1, #28
    44a8:	f7fe fe18 	bl	30dc <DSPI_HAL_SetIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:770
     /** Each DMA channel's CSR[DONE] bit may be set if a previous transfer occurred.  The DONE
     * bit, as the name implies, sets when the channel is finished (completed it's MAJOR
     * LOOP). The DONE needs to be cleared before programming the channel's TCDs for the next
     * transfer.
     */
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    44ac:	7e21      	ldrb	r1, [r4, #24]
    44ae:	4f90      	ldr	r7, [pc, #576]	; (46f0 <DSPI_DRV_EdmaMasterStartTransfer+0x2ec>)
    44b0:	090b      	lsrs	r3, r1, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:771
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);
    44b2:	f001 010f 	and.w	r1, r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:770
     /** Each DMA channel's CSR[DONE] bit may be set if a previous transfer occurred.  The DONE
     * bit, as the name implies, sets when the channel is finished (completed it's MAJOR
     * LOOP). The DONE needs to be cleared before programming the channel's TCDs for the next
     * transfer.
     */
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    44b6:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
EDMA_HAL_ClearDoneStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:554
 * @param channel Channel indicator. If kEDMAAllChannel is selected, all channels' done status will
 * be cleared.
 */
static inline void EDMA_HAL_ClearDoneStatusFlag(DMA_Type * base, edma_channel_indicator_t channel)
{
    DMA_WR_CDNE(base, channel);
    44ba:	7701      	strb	r1, [r0, #28]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:773
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);
    EDMA_HAL_ClearDoneStatusFlag(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    EDMA_HAL_HTCDClearReg(dmaBaseAddr, dmaChannel);
    44bc:	f7fe fabc 	bl	2a38 <EDMA_HAL_HTCDClearReg>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:775

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaSrc2CmdData.channel);
    44c0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    44c4:	090b      	lsrs	r3, r1, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:776
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaSrc2CmdData.channel);
    44c6:	f001 010f 	and.w	r1, r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:775
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);
    EDMA_HAL_ClearDoneStatusFlag(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    EDMA_HAL_HTCDClearReg(dmaBaseAddr, dmaChannel);

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaSrc2CmdData.channel);
    44ca:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
EDMA_HAL_ClearDoneStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:554
    44ce:	7701      	strb	r1, [r0, #28]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:778
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaSrc2CmdData.channel);
    EDMA_HAL_ClearDoneStatusFlag(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    EDMA_HAL_HTCDClearReg(dmaBaseAddr, dmaChannel);
    44d0:	f7fe fab2 	bl	2a38 <EDMA_HAL_HTCDClearReg>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:780

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaFifo2Receive.channel);
    44d4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    44d8:	090b      	lsrs	r3, r1, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:781
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaFifo2Receive.channel);
    44da:	f001 010f 	and.w	r1, r1, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:780
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaSrc2CmdData.channel);
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaSrc2CmdData.channel);
    EDMA_HAL_ClearDoneStatusFlag(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    EDMA_HAL_HTCDClearReg(dmaBaseAddr, dmaChannel);

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaFifo2Receive.channel);
    44de:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
EDMA_HAL_ClearDoneStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:554
    44e2:	7701      	strb	r1, [r0, #28]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:783
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaFifo2Receive.channel);
    EDMA_HAL_ClearDoneStatusFlag(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    EDMA_HAL_HTCDClearReg(dmaBaseAddr, dmaChannel);
    44e4:	f7fe faa8 	bl	2a38 <EDMA_HAL_HTCDClearReg>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:793
     * Note, if there is no remaining receive count, then bypass RX DMA set up.
     * This means we only have one byte to read of a 16-bit data word and will read this
     * in the complete transfer function.
     */
     /** If a receive buffer is used and if rxTransferByteCnt > 0 */
    if (rxTransferByteCnt)
    44e8:	f1ba 0f00 	cmp.w	sl, #0
    44ec:	f000 8084 	beq.w	45f8 <DSPI_DRV_EdmaMasterStartTransfer+0x1f4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:798
    {
         /** For each transfer control descriptor set up, save off DMA instance and channel number
         * to simplified variable names to make code cleaner
         */
        dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaFifo2Receive.channel);
    44f0:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
    44f4:	ea4f 1318 	mov.w	r3, r8, lsr #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:799
        dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaFifo2Receive.channel);
    44f8:	f008 080f 	and.w	r8, r8, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:798
    if (rxTransferByteCnt)
    {
         /** For each transfer control descriptor set up, save off DMA instance and channel number
         * to simplified variable names to make code cleaner
         */
        dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaFifo2Receive.channel);
    44fc:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
    4500:	eb07 1348 	add.w	r3, r7, r8, lsl #5
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
 * @param address The pointer to the source memory address.
 */
static inline void EDMA_HAL_HTCDSetSrcAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SADDR(base, channel, address);
    4504:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
DSPI_HAL_GetPoprRegAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:560
 * @param base Module base pointer of type SPI_Type.
 * @return The DSPI POPR data register address.
 */
static inline uint32_t DSPI_HAL_GetPoprRegAddr(SPI_Type * base)
{
    return (uint32_t)(&SPI_POPR_REG(base));
    4508:	f105 0138 	add.w	r1, r5, #56	; 0x38
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
    450c:	6011      	str	r1, [r2, #0]
EDMA_HAL_HTCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:648
 * @param offset signed-offset for source address.
 */
static inline void EDMA_HAL_HTCDSetSrcOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SOFF(base, channel, offset);
    450e:	f241 0104 	movw	r1, #4100	; 0x1004
    4512:	2200      	movs	r2, #0
    4514:	525a      	strh	r2, [r3, r1]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:808

         /** Source addr offset is 0 as source addr never increments */
        EDMA_HAL_HTCDSetSrcOffset(dmaBaseAddr, dmaChannel, 0);

         /** The source and destination attributes (bit size) depends on bits/frame setting */
        if (dspiEdmaState->bitsPerFrame <= 8)
    4516:	6863      	ldr	r3, [r4, #4]
    4518:	2b08      	cmp	r3, #8
    451a:	d80f      	bhi.n	453c <DSPI_DRV_EdmaMasterStartTransfer+0x138>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:811
        {
             /** Source size is one byte, destination size is one byte */
            EDMA_HAL_HTCDSetAttribute(
    451c:	4613      	mov	r3, r2
    451e:	9200      	str	r2, [sp, #0]
    4520:	9201      	str	r2, [sp, #4]
    4522:	4638      	mov	r0, r7
    4524:	4641      	mov	r1, r8
    4526:	f7fe fabb 	bl	2aa0 <EDMA_HAL_HTCDSetAttribute>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:817
                dmaBaseAddr, dmaChannel,
                kEDMAModuloDisable, kEDMAModuloDisable,
                kEDMATransferSize_1Bytes,kEDMATransferSize_1Bytes);

             /** Transfer 1 byte from RX FIFO to receive buffer */
            EDMA_HAL_HTCDSetNbytes(dmaBaseAddr, dmaChannel, 1);
    452a:	4638      	mov	r0, r7
    452c:	4641      	mov	r1, r8
    452e:	465a      	mov	r2, fp
    4530:	f7fe fada 	bl	2ae8 <EDMA_HAL_HTCDSetNbytes>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:822

             /** Set MAJOR count to remaining receive byte count. Configure both the
             * CITER and BITER fields.
             */
            EDMA_HAL_HTCDSetMajorCount(dmaBaseAddr, dmaChannel, (uint32_t)rxTransferByteCnt);
    4534:	4638      	mov	r0, r7
    4536:	4641      	mov	r1, r8
    4538:	4652      	mov	r2, sl
    453a:	e010      	b.n	455e <DSPI_DRV_EdmaMasterStartTransfer+0x15a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:827
        }
        else  /** For 16-bit words, but the receive buffer is still an 8-bit buffer */
        {
             /** Source size is 2 byte, destination size is one byte */
            EDMA_HAL_HTCDSetAttribute(
    453c:	4613      	mov	r3, r2
    453e:	9201      	str	r2, [sp, #4]
    4540:	4638      	mov	r0, r7
    4542:	4641      	mov	r1, r8
    4544:	f8cd b000 	str.w	fp, [sp]
    4548:	f7fe faaa 	bl	2aa0 <EDMA_HAL_HTCDSetAttribute>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:833
                dmaBaseAddr, dmaChannel,
                kEDMAModuloDisable, kEDMAModuloDisable,
                kEDMATransferSize_2Bytes,kEDMATransferSize_1Bytes);

             /** Transfer 2 bytes from RX FIFO to receive buffer */
            EDMA_HAL_HTCDSetNbytes(dmaBaseAddr, dmaChannel, 2);
    454c:	4638      	mov	r0, r7
    454e:	4641      	mov	r1, r8
    4550:	2202      	movs	r2, #2
    4552:	f7fe fac9 	bl	2ae8 <EDMA_HAL_HTCDSetNbytes>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:838

             /** Set MAJOR count to remaining receive byte count. Configure both the
             * CITER and BITER fields.  Divide by 2 to account for minor loop of 2 bytes
             */
            EDMA_HAL_HTCDSetMajorCount(dmaBaseAddr, dmaChannel, (uint32_t)rxTransferByteCnt/2);
    4556:	4638      	mov	r0, r7
    4558:	4641      	mov	r1, r8
    455a:	ea4f 025a 	mov.w	r2, sl, lsr #1
EDMA_HAL_HTCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:726
 * @param size adjustment value
 */
static inline void EDMA_HAL_HTCDSetSrcLastAdjust(DMA_Type * base, uint32_t channel, int32_t size)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SLAST(base, channel, size);
    455e:	ea4f 1a48 	mov.w	sl, r8, lsl #5
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:838
    4562:	f7fe fb55 	bl	2c10 <EDMA_HAL_HTCDSetMajorCount>
EDMA_HAL_HTCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:726
    4566:	eb07 020a 	add.w	r2, r7, sl
    456a:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    456e:	2100      	movs	r1, #0
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:847
        EDMA_HAL_HTCDSetSrcLastAdjust(dmaBaseAddr, dmaChannel, 0);

         /** If no receive buffer then disable incrementing the destination and set the destination
         * to a temporary location. Always handle rx operations to avoid rx overrun.
         */
        if (!receiveBuffer)
    4570:	9805      	ldr	r0, [sp, #20]
EDMA_HAL_HTCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:726
    4572:	60d9      	str	r1, [r3, #12]
    4574:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    4578:	f241 0110 	movw	r1, #4112	; 0x1010
    457c:	3310      	adds	r3, #16
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:847
    457e:	b918      	cbnz	r0, 4588 <DSPI_DRV_EdmaMasterStartTransfer+0x184>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:850
        {
             /** Destination is the "throw away" receive buffer */
            EDMA_HAL_HTCDSetDestAddr(dmaBaseAddr, dmaChannel, (uint32_t)(&s_rxBuffIfNull));
    4580:	485c      	ldr	r0, [pc, #368]	; (46f4 <DSPI_DRV_EdmaMasterStartTransfer+0x2f0>)
EDMA_HAL_HTCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:739
 * @param address The pointer to the destination address.
 */
static inline void EDMA_HAL_HTCDSetDestAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DADDR(base, channel, address);
    4582:	5050      	str	r0, [r2, r1]
EDMA_HAL_HTCDSetDestOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:755
 * @param offset signed-offset
 */
static inline void EDMA_HAL_HTCDSetDestOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DOFF(base, channel, offset);
    4584:	9a05      	ldr	r2, [sp, #20]
    4586:	e002      	b.n	458e <DSPI_DRV_EdmaMasterStartTransfer+0x18a>
EDMA_HAL_HTCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:739
 * @param address The pointer to the destination address.
 */
static inline void EDMA_HAL_HTCDSetDestAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DADDR(base, channel, address);
    4588:	9805      	ldr	r0, [sp, #20]
    458a:	5050      	str	r0, [r2, r1]
EDMA_HAL_HTCDSetDestOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:755
 * @param offset signed-offset
 */
static inline void EDMA_HAL_HTCDSetDestOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DOFF(base, channel, offset);
    458c:	2201      	movs	r2, #1
    458e:	809a      	strh	r2, [r3, #4]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:865
        }

         /** For DSPI instances with shared RX/TX DMA requests, we'll use the RX DMA request to
         * trigger ongoing transfers and will link to the TX DMA channel from the RX DMA channel.
         */
        if (FSL_FEATURE_DSPI_HAS_SEPARATE_DMA_RX_TX_REQn(instance))
    4590:	9a04      	ldr	r2, [sp, #16]
    4592:	1e53      	subs	r3, r2, #1
    4594:	2b01      	cmp	r3, #1
    4596:	d906      	bls.n	45a6 <DSPI_DRV_EdmaMasterStartTransfer+0x1a2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:868
        {
             /** Disable channel linking since we have separate RX and TX DMA requests */
            EDMA_HAL_HTCDSetChannelMinorLink(dmaBaseAddr, dmaChannel, 0, false);
    4598:	2200      	movs	r2, #0
    459a:	4638      	mov	r0, r7
    459c:	4641      	mov	r1, r8
    459e:	4613      	mov	r3, r2
    45a0:	f7fe faf8 	bl	2b94 <EDMA_HAL_HTCDSetChannelMinorLink>
    45a4:	e00f      	b.n	45c6 <DSPI_DRV_EdmaMasterStartTransfer+0x1c2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:873
        }
        else  /** For shared RX/TX DMA Requests */
        {
             /** Enable channel linking to TX channel (at the end of each minor loop) */
            EDMA_HAL_HTCDSetChannelMinorLink(
    45a6:	7e22      	ldrb	r2, [r4, #24]
    45a8:	4638      	mov	r0, r7
    45aa:	4641      	mov	r1, r8
    45ac:	f002 020f 	and.w	r2, r2, #15
    45b0:	2301      	movs	r3, #1
    45b2:	f7fe faef 	bl	2b94 <EDMA_HAL_HTCDSetChannelMinorLink>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:881
                                    VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel),
                                    true);
             /** Enable MAJOR link and link to TX DMA channel. This is needed to perform one more
             * channel link when the major loop is exhausted.
             */
            EDMA_HAL_HTCDSetChannelMajorLink(
    45b6:	7e22      	ldrb	r2, [r4, #24]
    45b8:	4638      	mov	r0, r7
    45ba:	4641      	mov	r1, r8
    45bc:	f002 020f 	and.w	r2, r2, #15
    45c0:	2301      	movs	r3, #1
    45c2:	f7ff fe0f 	bl	41e4 <EDMA_HAL_HTCDSetChannelMajorLink>
EDMA_HAL_HTCDSetDestLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:773
 */
static inline void EDMA_HAL_HTCDSetDestLastAdjust(
                DMA_Type * base, uint32_t channel, uint32_t adjust)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DLAST_SGA(base, channel, adjust);
    45c6:	eb07 020a 	add.w	r2, r7, sl
    45ca:	f241 0318 	movw	r3, #4120	; 0x1018
    45ce:	2100      	movs	r1, #0
    45d0:	50d1      	str	r1, [r2, r3]
EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:860
 */
static inline void EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd(
                DMA_Type * base, uint32_t channel, bool disable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_BWR_CSR_DREQ(base, channel, disable);
    45d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    45d6:	3304      	adds	r3, #4
    45d8:	4413      	add	r3, r2
    45da:	015b      	lsls	r3, r3, #5
    45dc:	f04f 0a01 	mov.w	sl, #1
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:895

         /** Disable ERQ request at end of major count so that we don't keep servicing requests */
        EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd(dmaBaseAddr, dmaChannel, true);

         /** Now that TCD was set up, enable the DSPI Peripheral Hardware request for the RX FIFO */
        EDMA_HAL_SetDmaRequestCmd(dmaBaseAddr,(edma_channel_indicator_t)dmaChannel, true);
    45e0:	4638      	mov	r0, r7
    45e2:	4641      	mov	r1, r8
    45e4:	4652      	mov	r2, sl
EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:860
    45e6:	f8a3 a00c 	strh.w	sl, [r3, #12]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:895
    45ea:	f7fe fa20 	bl	2a2e <EDMA_HAL_SetDmaRequestCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:898

         /** Enable the Receive FIFO Drain Request as a DMA request */
        DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateDmaReq, true);
    45ee:	4628      	mov	r0, r5
    45f0:	4651      	mov	r1, sl
    45f2:	4652      	mov	r2, sl
    45f4:	f7fe fd6b 	bl	30ce <DSPI_HAL_SetRxFifoDrainDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:908
     */
     /** Before sending the data, we first need to initialize the data command struct
     * Configure the data command attributes for the desired PCS, CTAR, and continuous PCS
     * which are derived from the run-time state struct
     */
    command.whichPcs = dspiEdmaState->whichPcs;
    45f8:	7a23      	ldrb	r3, [r4, #8]
    45fa:	f88d 301e 	strb.w	r3, [sp, #30]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:910
    command.whichCtar = dspiEdmaState->whichCtar;
    command.clearTransferCount = false;  /** don't clear the transfer count */
    45fe:	2700      	movs	r7, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:909
     /** Before sending the data, we first need to initialize the data command struct
     * Configure the data command attributes for the desired PCS, CTAR, and continuous PCS
     * which are derived from the run-time state struct
     */
    command.whichPcs = dspiEdmaState->whichPcs;
    command.whichCtar = dspiEdmaState->whichCtar;
    4600:	7823      	ldrb	r3, [r4, #0]
    4602:	f88d 301d 	strb.w	r3, [sp, #29]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:910
    command.clearTransferCount = false;  /** don't clear the transfer count */
    4606:	f88d 7020 	strb.w	r7, [sp, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:927
    uint32_t lastWord = 0;

     /** If a send buffer was provided, the word comes from there. Otherwise we just send
     * a zero (initialized above).
     */
    if (sendBuffer)
    460a:	b18e      	cbz	r6, 4630 <DSPI_DRV_EdmaMasterStartTransfer+0x22c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:930
    {
         /** Store the last byte from the send buffer */
        if (dspiEdmaState->bitsPerFrame <= 8)
    460c:	6863      	ldr	r3, [r4, #4]
    460e:	2b08      	cmp	r3, #8
    4610:	eb06 0309 	add.w	r3, r6, r9
    4614:	d802      	bhi.n	461c <DSPI_DRV_EdmaMasterStartTransfer+0x218>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:932
        {
            lastWord = sendBuffer[txTransferByteCnt-1];  /** Last byte */
    4616:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    461a:	e00a      	b.n	4632 <DSPI_DRV_EdmaMasterStartTransfer+0x22e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:940
        else
        {
             /** If 16-bit transfers and odd transfer byte count then an extra byte was added
             * to the transfer byte count, but we cannot access more of the send buffer
             */
            if(!dspiEdmaState->extraByte)
    461c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
    4620:	b912      	cbnz	r2, 4628 <DSPI_DRV_EdmaMasterStartTransfer+0x224>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:942
            {
                lastWord = sendBuffer[txTransferByteCnt-1] ;  /** Save off the last byte */
    4622:	f813 7c01 	ldrb.w	r7, [r3, #-1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:943
                lastWord = lastWord << 8U;  /** Shift to MSB (separate step due to MISHA) */
    4626:	023f      	lsls	r7, r7, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:945
            }
            lastWord |= sendBuffer[txTransferByteCnt-2];  /** OR with next to last byte */
    4628:	f813 3c02 	ldrb.w	r3, [r3, #-2]
    462c:	431f      	orrs	r7, r3
    462e:	e000      	b.n	4632 <DSPI_DRV_EdmaMasterStartTransfer+0x22e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:922
     * This 32-bit word will also be initialized with the final data byte/word
     * from the send source buffer and then the entire 32-bit word will be
     * transferred to the DSPI PUSHR.
     */
     /** Declare a variable for storing the last send data (either 8- or 16-bit) */
    uint32_t lastWord = 0;
    4630:	4637      	mov	r7, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:951
        }
    }

     /** Now, build the last command/data word intermediate buffer */
    command.isChipSelectContinuous = false;  /** Always clear CONT for last data word */
    command.isEndOfQueue = true;  /** Set EOQ for last data word */
    4632:	2301      	movs	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:950
            lastWord |= sendBuffer[txTransferByteCnt-2];  /** OR with next to last byte */
        }
    }

     /** Now, build the last command/data word intermediate buffer */
    command.isChipSelectContinuous = false;  /** Always clear CONT for last data word */
    4634:	f04f 0a00 	mov.w	sl, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:952
    command.isEndOfQueue = true;  /** Set EOQ for last data word */
    s_lastCmdData = DSPI_HAL_GetFormattedCommand(base, &command) | lastWord;
    4638:	a907      	add	r1, sp, #28
    463a:	4628      	mov	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:951
        }
    }

     /** Now, build the last command/data word intermediate buffer */
    command.isChipSelectContinuous = false;  /** Always clear CONT for last data word */
    command.isEndOfQueue = true;  /** Set EOQ for last data word */
    463c:	f88d 301f 	strb.w	r3, [sp, #31]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:950
            lastWord |= sendBuffer[txTransferByteCnt-2];  /** OR with next to last byte */
        }
    }

     /** Now, build the last command/data word intermediate buffer */
    command.isChipSelectContinuous = false;  /** Always clear CONT for last data word */
    4640:	f88d a01c 	strb.w	sl, [sp, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:952
    command.isEndOfQueue = true;  /** Set EOQ for last data word */
    s_lastCmdData = DSPI_HAL_GetFormattedCommand(base, &command) | lastWord;
    4644:	f7fe fd54 	bl	30f0 <DSPI_HAL_GetFormattedCommand>
    4648:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4700 <DSPI_DRV_EdmaMasterStartTransfer+0x2fc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:972
     * the send source buffer will be transferred here and then the entire
     * 32-bit word will be transferred to the DSPI PUSHR.
     * This buffer will be preloaded with the next data word in the send buffer
     */
     /** restore the isChipSelectContinuous setting to the original value as it was cleared above */
    command.isChipSelectContinuous = dspiEdmaState->isChipSelectContinuous;
    464c:	7a63      	ldrb	r3, [r4, #9]
    464e:	f88d 301c 	strb.w	r3, [sp, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:952
    }

     /** Now, build the last command/data word intermediate buffer */
    command.isChipSelectContinuous = false;  /** Always clear CONT for last data word */
    command.isEndOfQueue = true;  /** Set EOQ for last data word */
    s_lastCmdData = DSPI_HAL_GetFormattedCommand(base, &command) | lastWord;
    4652:	4338      	orrs	r0, r7
    4654:	f8c8 0000 	str.w	r0, [r8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:974
     * This buffer will be preloaded with the next data word in the send buffer
     */
     /** restore the isChipSelectContinuous setting to the original value as it was cleared above */
    command.isChipSelectContinuous = dspiEdmaState->isChipSelectContinuous;
    command.isEndOfQueue = 0;  /** Clear End of Queue (previously set for last cmd/data word)*/
    s_cmdData = DSPI_HAL_GetFormattedCommand(base, &command);
    4658:	a907      	add	r1, sp, #28
    465a:	4628      	mov	r0, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:973
     * 32-bit word will be transferred to the DSPI PUSHR.
     * This buffer will be preloaded with the next data word in the send buffer
     */
     /** restore the isChipSelectContinuous setting to the original value as it was cleared above */
    command.isChipSelectContinuous = dspiEdmaState->isChipSelectContinuous;
    command.isEndOfQueue = 0;  /** Clear End of Queue (previously set for last cmd/data word)*/
    465c:	f88d a01f 	strb.w	sl, [sp, #31]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:974
    s_cmdData = DSPI_HAL_GetFormattedCommand(base, &command);
    4660:	f7fe fd46 	bl	30f0 <DSPI_HAL_GetFormattedCommand>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:979

     /** Place the next data from the send buffer into the intermediate buffer (preload it)
     * based on whether it is one byte or two.
     */
    if (dspiEdmaState->bitsPerFrame <= 8)
    4664:	6862      	ldr	r2, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:974
     * This buffer will be preloaded with the next data word in the send buffer
     */
     /** restore the isChipSelectContinuous setting to the original value as it was cleared above */
    command.isChipSelectContinuous = dspiEdmaState->isChipSelectContinuous;
    command.isEndOfQueue = 0;  /** Clear End of Queue (previously set for last cmd/data word)*/
    s_cmdData = DSPI_HAL_GetFormattedCommand(base, &command);
    4666:	4b24      	ldr	r3, [pc, #144]	; (46f8 <DSPI_DRV_EdmaMasterStartTransfer+0x2f4>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:979

     /** Place the next data from the send buffer into the intermediate buffer (preload it)
     * based on whether it is one byte or two.
     */
    if (dspiEdmaState->bitsPerFrame <= 8)
    4668:	2a08      	cmp	r2, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:974
     * This buffer will be preloaded with the next data word in the send buffer
     */
     /** restore the isChipSelectContinuous setting to the original value as it was cleared above */
    command.isChipSelectContinuous = dspiEdmaState->isChipSelectContinuous;
    command.isEndOfQueue = 0;  /** Clear End of Queue (previously set for last cmd/data word)*/
    s_cmdData = DSPI_HAL_GetFormattedCommand(base, &command);
    466a:	6018      	str	r0, [r3, #0]
    466c:	4642      	mov	r2, r8
    466e:	4619      	mov	r1, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:979

     /** Place the next data from the send buffer into the intermediate buffer (preload it)
     * based on whether it is one byte or two.
     */
    if (dspiEdmaState->bitsPerFrame <= 8)
    4670:	d807      	bhi.n	4682 <DSPI_DRV_EdmaMasterStartTransfer+0x27e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:984
    {
         /** If a send buffer was provided, the word comes from there. Otherwise we just send
         * a zero (initialized above).
         */
        if (sendBuffer)
    4672:	b11e      	cbz	r6, 467c <DSPI_DRV_EdmaMasterStartTransfer+0x278>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:986
        {
            s_wordToSend = *sendBuffer;   /** queue up the next data */
    4674:	4f1d      	ldr	r7, [pc, #116]	; (46ec <DSPI_DRV_EdmaMasterStartTransfer+0x2e8>)
    4676:	f816 3b01 	ldrb.w	r3, [r6], #1
    467a:	803b      	strh	r3, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:989
            ++sendBuffer;  /** increment to next data word*/
        }
        --txTransferByteCnt;  /** decrement txTransferByteCnt*/
    467c:	f109 39ff 	add.w	r9, r9, #4294967295
    4680:	e00b      	b.n	469a <DSPI_DRV_EdmaMasterStartTransfer+0x296>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:996
    else
    {
         /** If a send buffer was provided, the word comes from there. Otherwise we just send
         * a zero (initialized above).
         */
        if (sendBuffer)
    4682:	b146      	cbz	r6, 4696 <DSPI_DRV_EdmaMasterStartTransfer+0x292>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:998
        {
            s_wordToSend = *sendBuffer;
    4684:	4f19      	ldr	r7, [pc, #100]	; (46ec <DSPI_DRV_EdmaMasterStartTransfer+0x2e8>)
    4686:	7833      	ldrb	r3, [r6, #0]
    4688:	803b      	strh	r3, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1005

             /** Note, if the extraByte flag is set and we're down to the last two bytes we can still
             * do this even though we're going past the sendBuffer size. We're just reading data we
             * don't care about anyways since it is dummy data to make up for the last byte.
             */
            s_wordToSend |= (unsigned)(*sendBuffer) << 8U;
    468a:	7877      	ldrb	r7, [r6, #1]
    468c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    4690:	4f16      	ldr	r7, [pc, #88]	; (46ec <DSPI_DRV_EdmaMasterStartTransfer+0x2e8>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1006
            ++sendBuffer;  /** increment to next data byte */
    4692:	3602      	adds	r6, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1005

             /** Note, if the extraByte flag is set and we're down to the last two bytes we can still
             * do this even though we're going past the sendBuffer size. We're just reading data we
             * don't care about anyways since it is dummy data to make up for the last byte.
             */
            s_wordToSend |= (unsigned)(*sendBuffer) << 8U;
    4694:	803b      	strh	r3, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1009
            ++sendBuffer;  /** increment to next data byte */

        }
        txTransferByteCnt -= 2;   /** decrement txTransferByteCnt by 2 bytes */
    4696:	f1a9 0902 	sub.w	r9, r9, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1012
    }

    s_cmdData |= s_wordToSend;  /** write s_wordToSend to intermediate buffer */
    469a:	4f14      	ldr	r7, [pc, #80]	; (46ec <DSPI_DRV_EdmaMasterStartTransfer+0x2e8>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1030
     * on the MAJOR loop completion using MAJORLINK channel linking.
     */
     /** For each transfer control descriptor set up, save off DMA instance and channel number
     * to simplified variable names to make code cleaner
     */
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    469c:	f894 a018 	ldrb.w	sl, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1012

        }
        txTransferByteCnt -= 2;   /** decrement txTransferByteCnt by 2 bytes */
    }

    s_cmdData |= s_wordToSend;  /** write s_wordToSend to intermediate buffer */
    46a0:	883b      	ldrh	r3, [r7, #0]
    46a2:	4318      	orrs	r0, r3
    46a4:	6008      	str	r0, [r1, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1030
     * on the MAJOR loop completion using MAJORLINK channel linking.
     */
     /** For each transfer control descriptor set up, save off DMA instance and channel number
     * to simplified variable names to make code cleaner
     */
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    46a6:	4b12      	ldr	r3, [pc, #72]	; (46f0 <DSPI_DRV_EdmaMasterStartTransfer+0x2ec>)
    46a8:	ea4f 111a 	mov.w	r1, sl, lsr #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1031
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);
    46ac:	f00a 0a0f 	and.w	sl, sl, #15
    46b0:	f10a 0780 	add.w	r7, sl, #128	; 0x80
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1030
     * on the MAJOR loop completion using MAJORLINK channel linking.
     */
     /** For each transfer control descriptor set up, save off DMA instance and channel number
     * to simplified variable names to make code cleaner
     */
    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    46b4:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
    46b8:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
 * @param address The pointer to the source memory address.
 */
static inline void EDMA_HAL_HTCDSetSrcAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SADDR(base, channel, address);
    46bc:	017b      	lsls	r3, r7, #5
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1036
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);

     /** If txTransferByteCnt is 0, then send last command/data since this is the
     * last data word to send
     */
    if (txTransferByteCnt == 0)
    46be:	f1b9 0f00 	cmp.w	r9, #0
    46c2:	d11f      	bne.n	4704 <DSPI_DRV_EdmaMasterStartTransfer+0x300>
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
    46c4:	f848 2003 	str.w	r2, [r8, r3]
EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:860
 */
static inline void EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd(
                DMA_Type * base, uint32_t channel, bool disable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_BWR_CSR_DREQ(base, channel, disable);
    46c8:	4b0c      	ldr	r3, [pc, #48]	; (46fc <DSPI_DRV_EdmaMasterStartTransfer+0x2f8>)
    46ca:	44c3      	add	fp, r8
    46cc:	445b      	add	r3, fp
    46ce:	015b      	lsls	r3, r3, #5
    46d0:	2201      	movs	r2, #1
    46d2:	819a      	strh	r2, [r3, #12]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1045

         /** Disable ERQ request at end of major count */
        EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd(dmaBaseAddr, dmaChannel, true);

         /** Disable majorlink request */
        EDMA_HAL_HTCDSetChannelMajorLink(dmaBaseAddr, dmaChannel, 0, false);
    46d4:	4640      	mov	r0, r8
    46d6:	4651      	mov	r1, sl
    46d8:	464a      	mov	r2, r9
    46da:	464b      	mov	r3, r9
    46dc:	f7ff fd82 	bl	41e4 <EDMA_HAL_HTCDSetChannelMajorLink>
    46e0:	e022      	b.n	4728 <DSPI_DRV_EdmaMasterStartTransfer+0x324>
    46e2:	bf00      	nop
    46e4:	1fff0c84 	.word	0x1fff0c84
    46e8:	00007ef8 	.word	0x00007ef8
    46ec:	1fff0c94 	.word	0x1fff0c94
    46f0:	00007dd8 	.word	0x00007dd8
    46f4:	1fff0c9c 	.word	0x1fff0c9c
    46f8:	1fff0c90 	.word	0x1fff0c90
    46fc:	0210101c 	.word	0x0210101c
    4700:	1fff0c98 	.word	0x1fff0c98
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
 * @param address The pointer to the source memory address.
 */
static inline void EDMA_HAL_HTCDSetSrcAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SADDR(base, channel, address);
    4704:	4a85      	ldr	r2, [pc, #532]	; (491c <DSPI_DRV_EdmaMasterStartTransfer+0x518>)
    4706:	f848 2003 	str.w	r2, [r8, r3]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1056
        EDMA_HAL_HTCDSetSrcAddr(dmaBaseAddr, dmaChannel,(uint32_t)(&s_cmdData));

         /** Set the MAJOR link channel to link to the next channel that will pull data from
         * the source buffer into the intermediate command/data buffer and enable MAJOR link
         */
        EDMA_HAL_HTCDSetChannelMajorLink(dmaBaseAddr, dmaChannel,
    470a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    470e:	2301      	movs	r3, #1
    4710:	f002 020f 	and.w	r2, r2, #15
    4714:	4640      	mov	r0, r8
    4716:	4651      	mov	r1, sl
    4718:	f7ff fd64 	bl	41e4 <EDMA_HAL_HTCDSetChannelMajorLink>
EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:860
 */
static inline void EDMA_HAL_HTCDSetDisableDmaRequestAfterTCDDoneCmd(
                DMA_Type * base, uint32_t channel, bool disable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_BWR_CSR_DREQ(base, channel, disable);
    471c:	4b80      	ldr	r3, [pc, #512]	; (4920 <DSPI_DRV_EdmaMasterStartTransfer+0x51c>)
    471e:	44c3      	add	fp, r8
    4720:	445b      	add	r3, fp
    4722:	015b      	lsls	r3, r3, #5
    4724:	2200      	movs	r2, #0
    4726:	819a      	strh	r2, [r3, #12]
EDMA_HAL_HTCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:648
 * @param offset signed-offset for source address.
 */
static inline void EDMA_HAL_HTCDSetSrcOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SOFF(base, channel, offset);
    4728:	eb08 1347 	add.w	r3, r8, r7, lsl #5
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1069
    EDMA_HAL_HTCDSetSrcOffset(dmaBaseAddr, dmaChannel, 0);

     /** source size 32-bits */
     /** destination size 32bits*/
     /** Clear the SMOD and DMOD fields */
    EDMA_HAL_HTCDSetAttribute(dmaBaseAddr, dmaChannel,
    472c:	f04f 0b02 	mov.w	fp, #2
EDMA_HAL_HTCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:648
    4730:	2700      	movs	r7, #0
    4732:	809f      	strh	r7, [r3, #4]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1069
    4734:	4640      	mov	r0, r8
    4736:	463b      	mov	r3, r7
    4738:	4651      	mov	r1, sl
    473a:	463a      	mov	r2, r7
    473c:	f8cd b000 	str.w	fp, [sp]
    4740:	f8cd b004 	str.w	fp, [sp, #4]
    4744:	f7fe f9ac 	bl	2aa0 <EDMA_HAL_HTCDSetAttribute>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1074
                              kEDMAModuloDisable, kEDMAModuloDisable,
                              kEDMATransferSize_4Bytes, kEDMATransferSize_4Bytes);

     /** Transfer 4 bytes or one word */
    EDMA_HAL_HTCDSetNbytes(dmaBaseAddr, dmaChannel, 4);
    4748:	4640      	mov	r0, r8
    474a:	4651      	mov	r1, sl
    474c:	2204      	movs	r2, #4
    474e:	f7fe f9cb 	bl	2ae8 <EDMA_HAL_HTCDSetNbytes>
EDMA_HAL_HTCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:726
 * @param size adjustment value
 */
static inline void EDMA_HAL_HTCDSetSrcLastAdjust(DMA_Type * base, uint32_t channel, int32_t size)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SLAST(base, channel, size);
    4752:	ea4f 1c4a 	mov.w	ip, sl, lsl #5
    4756:	eb08 020c 	add.w	r2, r8, ip
    475a:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
EDMA_HAL_HTCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:739
 * @param address The pointer to the destination address.
 */
static inline void EDMA_HAL_HTCDSetDestAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DADDR(base, channel, address);
    475e:	f241 0110 	movw	r1, #4112	; 0x1010
EDMA_HAL_HTCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:726
 * @param size adjustment value
 */
static inline void EDMA_HAL_HTCDSetSrcLastAdjust(DMA_Type * base, uint32_t channel, int32_t size)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SLAST(base, channel, size);
    4762:	60df      	str	r7, [r3, #12]
EDMA_HAL_HTCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:739
 * @param address The pointer to the destination address.
 */
static inline void EDMA_HAL_HTCDSetDestAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DADDR(base, channel, address);
    4764:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
DSPI_HAL_GetMasterPushrRegAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:532
 * @param base Module base pointer of type SPI_Type.
 * @return The DSPI master PUSHR data register address.
 */
static inline uint32_t DSPI_HAL_GetMasterPushrRegAddr(SPI_Type * base)
{
    return (uint32_t)(&SPI_PUSHR_REG(base));
    4768:	f105 0034 	add.w	r0, r5, #52	; 0x34
EDMA_HAL_HTCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:739
    476c:	5050      	str	r0, [r2, r1]
EDMA_HAL_HTCDSetDestOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:755
 * @param offset signed-offset
 */
static inline void EDMA_HAL_HTCDSetDestOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DOFF(base, channel, offset);
    476e:	829f      	strh	r7, [r3, #20]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1088
    EDMA_HAL_HTCDSetDestOffset(dmaBaseAddr, dmaChannel, 0);

     /** We are only sending one 32-bit word, so MAJOR count is "1". Do not use "ELINK"
     * to link channels, use MAJORLINK in CSR, therefore disable minor link (ELINK=0)
     */
    EDMA_HAL_HTCDSetChannelMinorLink(dmaBaseAddr, dmaChannel, 0, false);
    4770:	4640      	mov	r0, r8
    4772:	463b      	mov	r3, r7
    4774:	4651      	mov	r1, sl
    4776:	463a      	mov	r2, r7
    4778:	f8cd c00c 	str.w	ip, [sp, #12]
    477c:	f7fe fa0a 	bl	2b94 <EDMA_HAL_HTCDSetChannelMinorLink>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1089
    EDMA_HAL_HTCDSetMajorCount(dmaBaseAddr, dmaChannel, 1);
    4780:	4640      	mov	r0, r8
    4782:	4651      	mov	r1, sl
    4784:	2201      	movs	r2, #1
    4786:	f7fe fa43 	bl	2c10 <EDMA_HAL_HTCDSetMajorCount>
EDMA_HAL_HTCDSetScatterGatherCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:843
 */
static inline void EDMA_HAL_HTCDSetScatterGatherCmd(
                DMA_Type * base, uint32_t channel, bool enable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_BWR_CSR_ESG(base, channel, enable);
    478a:	f8dd c00c 	ldr.w	ip, [sp, #12]
    478e:	4b64      	ldr	r3, [pc, #400]	; (4920 <DSPI_DRV_EdmaMasterStartTransfer+0x51c>)
    4790:	44e0      	add	r8, ip
    4792:	4443      	add	r3, r8
    4794:	015b      	lsls	r3, r3, #5
    4796:	f8df 8194 	ldr.w	r8, [pc, #404]	; 492c <DSPI_DRV_EdmaMasterStartTransfer+0x528>
    479a:	821f      	strh	r7, [r3, #16]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1097
    EDMA_HAL_HTCDSetScatterGatherCmd(dmaBaseAddr, dmaChannel, false);

     /** Implement the following DMA channel set up only if we still have data yet to send
     * Otherwise, bypass this and enable the DSPI Transmit DMA request.
     */
    if (txTransferByteCnt != 0)
    479c:	f1b9 0f00 	cmp.w	r9, #0
    47a0:	f000 8097 	beq.w	48d2 <DSPI_DRV_EdmaMasterStartTransfer+0x4ce>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1110
         *
         * IMPORTANT: Per eDMA spec, the pointer address for this STCD structure needs to be
         *            aligned on 32-byte boundaries.
         */
         /** This channel should use scatter gather method, first configure the last STCD */
        memset(&config, 0, sizeof(edma_transfer_config_t));
    47a4:	4639      	mov	r1, r7
    47a6:	2224      	movs	r2, #36	; 0x24
    47a8:	a809      	add	r0, sp, #36	; 0x24
    47aa:	f001 fbd4 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1111
        memset(dspiEdmaState->stcdSrc2CmdDataLast, 0, sizeof(edma_software_tcd_t));
    47ae:	4639      	mov	r1, r7
    47b0:	2220      	movs	r2, #32
    47b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1120
         */
        config.srcAddr = (uint32_t)(&s_lastCmdData);  /** Source addr is last data + last command */
        config.srcOffset = 0;
        config.srcTransferSize = kEDMATransferSize_4Bytes;
        config.destTransferSize = kEDMATransferSize_4Bytes;
        config.destAddr = (uint32_t)(&s_cmdData);  /** Destination is the command/data buffer */
    47b4:	f8df a164 	ldr.w	sl, [pc, #356]	; 491c <DSPI_DRV_EdmaMasterStartTransfer+0x518>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1111
         * IMPORTANT: Per eDMA spec, the pointer address for this STCD structure needs to be
         *            aligned on 32-byte boundaries.
         */
         /** This channel should use scatter gather method, first configure the last STCD */
        memset(&config, 0, sizeof(edma_transfer_config_t));
        memset(dspiEdmaState->stcdSrc2CmdDataLast, 0, sizeof(edma_software_tcd_t));
    47b8:	f001 fbcd 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1127
        config.destLastAddrAdjust = 0;
        config.srcLastAddrAdjust = 0;
        config.destModulo = kEDMAModuloDisable;
        config.srcModulo = kEDMAModuloDisable;
        config.majorLoopCount = 1;  /** We are only sending one 32-bit word, so MAJOR count is "1" */
        config.minorLoopCount = 4;  /** Transfer 4 bytes or one word */
    47bc:	2204      	movs	r2, #4
    47be:	9210      	str	r2, [sp, #64]	; 0x40
EDMA_DRV_PrepareDescriptorTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\drivers\inc/fsl_edma_driver.h:349
                                edma_transfer_config_t *config,
                                bool enableInt, bool disableDmaRequest)

{
    EDMA_HAL_STCDSetBasicTransfer(
            VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(chn->channel), stcd, config, enableInt, disableDmaRequest);
    47c0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1116
        memset(dspiEdmaState->stcdSrc2CmdDataLast, 0, sizeof(edma_software_tcd_t));

         /** Fill out members of the EDMA transfer config structure and then use this structure to
         * prepare the software transfer control descriptor stcdSrc2CmdDataLast
         */
        config.srcAddr = (uint32_t)(&s_lastCmdData);  /** Source addr is last data + last command */
    47c4:	4b57      	ldr	r3, [pc, #348]	; (4924 <DSPI_DRV_EdmaMasterStartTransfer+0x520>)
    47c6:	9309      	str	r3, [sp, #36]	; 0x24
EDMA_DRV_PrepareDescriptorTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\drivers\inc/fsl_edma_driver.h:349
    47c8:	0912      	lsrs	r2, r2, #4
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1126
        config.destOffset = 0;
        config.destLastAddrAdjust = 0;
        config.srcLastAddrAdjust = 0;
        config.destModulo = kEDMAModuloDisable;
        config.srcModulo = kEDMAModuloDisable;
        config.majorLoopCount = 1;  /** We are only sending one 32-bit word, so MAJOR count is "1" */
    47ca:	2301      	movs	r3, #1
EDMA_DRV_PrepareDescriptorTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\drivers\inc/fsl_edma_driver.h:348
                                edma_chn_state_t *chn, edma_software_tcd_t *stcd,
                                edma_transfer_config_t *config,
                                bool enableInt, bool disableDmaRequest)

{
    EDMA_HAL_STCDSetBasicTransfer(
    47cc:	9300      	str	r3, [sp, #0]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1126
    47ce:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
EDMA_DRV_PrepareDescriptorTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\drivers\inc/fsl_edma_driver.h:348
    47d2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
    47d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1117

         /** Fill out members of the EDMA transfer config structure and then use this structure to
         * prepare the software transfer control descriptor stcdSrc2CmdDataLast
         */
        config.srcAddr = (uint32_t)(&s_lastCmdData);  /** Source addr is last data + last command */
        config.srcOffset = 0;
    47d8:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
EDMA_DRV_PrepareDescriptorTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\drivers\inc/fsl_edma_driver.h:348
    47dc:	463b      	mov	r3, r7
    47de:	aa09      	add	r2, sp, #36	; 0x24
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1118
        config.srcTransferSize = kEDMATransferSize_4Bytes;
    47e0:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1119
        config.destTransferSize = kEDMATransferSize_4Bytes;
    47e4:	f88d b02d 	strb.w	fp, [sp, #45]	; 0x2d
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1120
        config.destAddr = (uint32_t)(&s_cmdData);  /** Destination is the command/data buffer */
    47e8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1121
        config.destOffset = 0;
    47ec:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1122
        config.destLastAddrAdjust = 0;
    47f0:	970e      	str	r7, [sp, #56]	; 0x38
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1123
        config.srcLastAddrAdjust = 0;
    47f2:	970d      	str	r7, [sp, #52]	; 0x34
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1124
        config.destModulo = kEDMAModuloDisable;
    47f4:	f88d 703d 	strb.w	r7, [sp, #61]	; 0x3d
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1125
        config.srcModulo = kEDMAModuloDisable;
    47f8:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
EDMA_DRV_PrepareDescriptorTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\drivers\inc/fsl_edma_driver.h:348
    47fc:	f7fe faee 	bl	2ddc <EDMA_HAL_STCDSetBasicTransfer>
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1136
         /** If at this point we are left with only sending one more data byte/word, then this
         * is the last command/data to send.  So the transfer control descriptor should move the
         * last command/data word into the intermediate buffer and this will get transferred to the
         * DSPI when the FIFO is ready for this.
         */
        if (((dspiEdmaState->bitsPerFrame <= 8) && ((txTransferByteCnt-1) == 0)) ||
    4800:	6863      	ldr	r3, [r4, #4]
    4802:	2b08      	cmp	r3, #8
    4804:	d802      	bhi.n	480c <DSPI_DRV_EdmaMasterStartTransfer+0x408>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1136 (discriminator 1)
    4806:	f1b9 0f01 	cmp.w	r9, #1
    480a:	e001      	b.n	4810 <DSPI_DRV_EdmaMasterStartTransfer+0x40c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1137
            ((dspiEdmaState->bitsPerFrame > 8) && ((txTransferByteCnt-2) == 0)))
    480c:	f1b9 0f02 	cmp.w	r9, #2
    4810:	d105      	bne.n	481e <DSPI_DRV_EdmaMasterStartTransfer+0x41a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1140
        {
             /** push the contents of the SW TCD to the HW TCD registers */
            EDMA_DRV_PushDescriptorToReg(&dspiEdmaState->dmaSrc2CmdData,
    4812:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4816:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    4818:	f7ff fca0 	bl	415c <EDMA_DRV_PushDescriptorToReg>
    481c:	e059      	b.n	48d2 <DSPI_DRV_EdmaMasterStartTransfer+0x4ce>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1159
             * the send source buffer to the intermediate command/data word. When the source
             * buffer transfers the word before the last data word, the MAJOR loop completes
             * and triggers the scatter/gather (ESG = 1) and loads the STCD that is set up to
             * transfer the last command/data word to the PUSHR.
             */
            dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaSrc2CmdData.channel);
    481e:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
    4822:	ea4f 131b 	mov.w	r3, fp, lsr #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1160
            dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaSrc2CmdData.channel);
    4826:	f00b 0b0f 	and.w	fp, fp, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1159
             * the send source buffer to the intermediate command/data word. When the source
             * buffer transfers the word before the last data word, the MAJOR loop completes
             * and triggers the scatter/gather (ESG = 1) and loads the STCD that is set up to
             * transfer the last command/data word to the PUSHR.
             */
            dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaSrc2CmdData.channel);
    482a:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
    482e:	fa0f f38b 	sxth.w	r3, fp
    4832:	eb07 1343 	add.w	r3, r7, r3, lsl #5
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
 * @param address The pointer to the source memory address.
 */
static inline void EDMA_HAL_HTCDSetSrcAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SADDR(base, channel, address);
    4836:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1165
            dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaSrc2CmdData.channel);

             /** If a send buffer was provided, the word comes from there. Otherwise we set
             * the source address to point to the s_wordToSend variable that was set to 0.
             */
            if (sendBuffer)
    483a:	b12e      	cbz	r6, 4848 <DSPI_DRV_EdmaMasterStartTransfer+0x444>
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
    483c:	6016      	str	r6, [r2, #0]
EDMA_HAL_HTCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:648
 * @param offset signed-offset for source address.
 */
static inline void EDMA_HAL_HTCDSetSrcOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SOFF(base, channel, offset);
    483e:	f241 0204 	movw	r2, #4100	; 0x1004
    4842:	2101      	movs	r1, #1
    4844:	5299      	strh	r1, [r3, r2]
    4846:	e004      	b.n	4852 <DSPI_DRV_EdmaMasterStartTransfer+0x44e>
EDMA_HAL_HTCDSetSrcAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:632
 * @param address The pointer to the source memory address.
 */
static inline void EDMA_HAL_HTCDSetSrcAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SADDR(base, channel, address);
    4848:	4937      	ldr	r1, [pc, #220]	; (4928 <DSPI_DRV_EdmaMasterStartTransfer+0x524>)
    484a:	6011      	str	r1, [r2, #0]
EDMA_HAL_HTCDSetSrcOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:648
 * @param offset signed-offset for source address.
 */
static inline void EDMA_HAL_HTCDSetSrcOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SOFF(base, channel, offset);
    484c:	f241 0204 	movw	r2, #4100	; 0x1004
    4850:	529e      	strh	r6, [r3, r2]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1181
                                        (uint32_t)(&s_wordToSend));
                 /** Don't increment the source address  */
                EDMA_HAL_HTCDSetSrcOffset(dmaBaseAddr, dmaChannel, 0);
            }

            if (dspiEdmaState->bitsPerFrame <= 8)
    4852:	6863      	ldr	r3, [r4, #4]
    4854:	2200      	movs	r2, #0
    4856:	2b08      	cmp	r3, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1184
            {
                 /** Source and destination size: byte */
                EDMA_HAL_HTCDSetAttribute(dmaBaseAddr, dmaChannel,
    4858:	9200      	str	r2, [sp, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1181
                                        (uint32_t)(&s_wordToSend));
                 /** Don't increment the source address  */
                EDMA_HAL_HTCDSetSrcOffset(dmaBaseAddr, dmaChannel, 0);
            }

            if (dspiEdmaState->bitsPerFrame <= 8)
    485a:	d80f      	bhi.n	487c <DSPI_DRV_EdmaMasterStartTransfer+0x478>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1184
            {
                 /** Source and destination size: byte */
                EDMA_HAL_HTCDSetAttribute(dmaBaseAddr, dmaChannel,
    485c:	4613      	mov	r3, r2
    485e:	9201      	str	r2, [sp, #4]
    4860:	4638      	mov	r0, r7
    4862:	4659      	mov	r1, fp
    4864:	f7fe f91c 	bl	2aa0 <EDMA_HAL_HTCDSetAttribute>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1189
                            kEDMAModuloDisable, kEDMAModuloDisable,
                            kEDMATransferSize_1Bytes, kEDMATransferSize_1Bytes);

                 /** minor byte transfer: 1 byte (8-bit word) */
                EDMA_HAL_HTCDSetNbytes(dmaBaseAddr, dmaChannel, 1);
    4868:	4638      	mov	r0, r7
    486a:	4659      	mov	r1, fp
    486c:	2201      	movs	r2, #1
    486e:	f7fe f93b 	bl	2ae8 <EDMA_HAL_HTCDSetNbytes>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1195

                 /** Major loop count is equal to remaining number of bytes to send minus 1.
                 * That is because the last data byte/word is written to the last command/data
                 * intermediate buffer.
                 */
                EDMA_HAL_HTCDSetMajorCount(dmaBaseAddr, dmaChannel, (txTransferByteCnt-1));
    4872:	4638      	mov	r0, r7
    4874:	4659      	mov	r1, fp
    4876:	f109 32ff 	add.w	r2, r9, #4294967295
    487a:	e010      	b.n	489e <DSPI_DRV_EdmaMasterStartTransfer+0x49a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1200
            }
            else
            {
                 /** Source size: byte and destination size: halfword */
                EDMA_HAL_HTCDSetAttribute(dmaBaseAddr, dmaChannel,
    487c:	2301      	movs	r3, #1
    487e:	9301      	str	r3, [sp, #4]
    4880:	4638      	mov	r0, r7
    4882:	4613      	mov	r3, r2
    4884:	4659      	mov	r1, fp
    4886:	f7fe f90b 	bl	2aa0 <EDMA_HAL_HTCDSetAttribute>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1205
                            kEDMAModuloDisable, kEDMAModuloDisable,
                            kEDMATransferSize_1Bytes, kEDMATransferSize_2Bytes);

                 /** minor byte transfer: 2 bytes (16-bit word) */
                EDMA_HAL_HTCDSetNbytes(dmaBaseAddr, dmaChannel, 2);
    488a:	4638      	mov	r0, r7
    488c:	4659      	mov	r1, fp
    488e:	2202      	movs	r2, #2
    4890:	f7fe f92a 	bl	2ae8 <EDMA_HAL_HTCDSetNbytes>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1210

                 /** Major loop count is equal to remaining number of 16-bit words to send
                 * hence need to convert remainingSendByteCount from byte to 16-bit word
                 */
                EDMA_HAL_HTCDSetMajorCount(dmaBaseAddr, dmaChannel, (txTransferByteCnt-2)/2);
    4894:	f1a9 0202 	sub.w	r2, r9, #2
    4898:	4638      	mov	r0, r7
    489a:	4659      	mov	r1, fp
    489c:	0852      	lsrs	r2, r2, #1
    489e:	f7fe f9b7 	bl	2c10 <EDMA_HAL_HTCDSetMajorCount>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1214
            }

             /** Diable minor loop linking */
            EDMA_HAL_HTCDSetChannelMinorLink(dmaBaseAddr, dmaChannel, 0, false);
    48a2:	2200      	movs	r2, #0
    48a4:	4613      	mov	r3, r2
    48a6:	4638      	mov	r0, r7
    48a8:	4659      	mov	r1, fp
    48aa:	f7fe f973 	bl	2b94 <EDMA_HAL_HTCDSetChannelMinorLink>
EDMA_HAL_HTCDSetSrcLastAdjust():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:726
 * @param size adjustment value
 */
static inline void EDMA_HAL_HTCDSetSrcLastAdjust(DMA_Type * base, uint32_t channel, int32_t size)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_SLAST(base, channel, size);
    48ae:	eb07 124b 	add.w	r2, r7, fp, lsl #5
    48b2:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    48b6:	2100      	movs	r1, #0
    48b8:	60d9      	str	r1, [r3, #12]
EDMA_HAL_HTCDSetDestAddr():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:739
 * @param address The pointer to the destination address.
 */
static inline void EDMA_HAL_HTCDSetDestAddr(DMA_Type * base, uint32_t channel, uint32_t address)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DADDR(base, channel, address);
    48ba:	f241 0010 	movw	r0, #4112	; 0x1010
    48be:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    48c2:	f842 a000 	str.w	sl, [r2, r0]
EDMA_HAL_HTCDSetDestOffset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:755
 * @param offset signed-offset
 */
static inline void EDMA_HAL_HTCDSetDestOffset(DMA_Type * base, uint32_t channel, int16_t offset)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    DMA_WR_DOFF(base, channel, offset);
    48c6:	8299      	strh	r1, [r3, #20]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1229

             /** Place the address of the scatter/gather in order to reload STCD for the final
             * last command/data word to be loaded to the intermediate buffer.
             * IMPORTANT: This address needs to be 32-byte aligned.
             */
            EDMA_HAL_HTCDSetScatterGatherLink(dmaBaseAddr, dmaChannel,
    48c8:	4638      	mov	r0, r7
    48ca:	4659      	mov	r1, fp
    48cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    48ce:	f7fe f943 	bl	2b58 <EDMA_HAL_HTCDSetScatterGatherLink>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1234
                                    (edma_software_tcd_t *)(dspiEdmaState->stcdSrc2CmdDataLast));
        }
    }

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    48d2:	7e26      	ldrb	r6, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1240
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);

     /** For DSPI instances with separate RX/TX DMA requests, we'll use the TX DMA request to
     * trigger the TX DMA channel hence we'll enable the TX channel DMA request.
     */
    if (FSL_FEATURE_DSPI_HAS_SEPARATE_DMA_RX_TX_REQn(instance))
    48d4:	9f04      	ldr	r7, [sp, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1234
            EDMA_HAL_HTCDSetScatterGatherLink(dmaBaseAddr, dmaChannel,
                                    (edma_software_tcd_t *)(dspiEdmaState->stcdSrc2CmdDataLast));
        }
    }

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    48d6:	0933      	lsrs	r3, r6, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1235
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);
    48d8:	f006 060f 	and.w	r6, r6, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1234
            EDMA_HAL_HTCDSetScatterGatherLink(dmaBaseAddr, dmaChannel,
                                    (edma_software_tcd_t *)(dspiEdmaState->stcdSrc2CmdDataLast));
        }
    }

    dmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiEdmaState->dmaCmdData2Fifo.channel);
    48dc:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1240
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);

     /** For DSPI instances with separate RX/TX DMA requests, we'll use the TX DMA request to
     * trigger the TX DMA channel hence we'll enable the TX channel DMA request.
     */
    if (FSL_FEATURE_DSPI_HAS_SEPARATE_DMA_RX_TX_REQn(instance))
    48e0:	1e7b      	subs	r3, r7, #1
    48e2:	2b01      	cmp	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1245
    {
         /** Now that the TCD was set up for each channel, enable the DSPI peripheral hardware request
         * for the first TX DMA channel.
         */
        EDMA_HAL_SetDmaRequestCmd(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel, true);
    48e4:	4620      	mov	r0, r4
    48e6:	4631      	mov	r1, r6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1240
    dmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiEdmaState->dmaCmdData2Fifo.channel);

     /** For DSPI instances with separate RX/TX DMA requests, we'll use the TX DMA request to
     * trigger the TX DMA channel hence we'll enable the TX channel DMA request.
     */
    if (FSL_FEATURE_DSPI_HAS_SEPARATE_DMA_RX_TX_REQn(instance))
    48e8:	d908      	bls.n	48fc <DSPI_DRV_EdmaMasterStartTransfer+0x4f8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1245
    {
         /** Now that the TCD was set up for each channel, enable the DSPI peripheral hardware request
         * for the first TX DMA channel.
         */
        EDMA_HAL_SetDmaRequestCmd(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel, true);
    48ea:	2201      	movs	r2, #1
    48ec:	f7fe f89f 	bl	2a2e <EDMA_HAL_SetDmaRequestCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1248

         /** Enable TFFF request in the DSPI module */
        DSPI_HAL_SetTxFifoFillDmaIntMode(base, kDspiGenerateDmaReq, true);
    48f0:	2101      	movs	r1, #1
    48f2:	4628      	mov	r0, r5
    48f4:	460a      	mov	r2, r1
    48f6:	f7fe fbe3 	bl	30c0 <DSPI_HAL_SetTxFifoFillDmaIntMode>
    48fa:	e008      	b.n	490e <DSPI_DRV_EdmaMasterStartTransfer+0x50a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1259
     * of the ongoing transfers from there.
     */
    else  /** For shared RX/TX DMA requests */
    {
         /** Disable the DSPI TX peripheral hardware request*/
        EDMA_HAL_SetDmaRequestCmd(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel, false);
    48fc:	2200      	movs	r2, #0
    48fe:	f7fe f896 	bl	2a2e <EDMA_HAL_SetDmaRequestCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1262

         /** Disable TFFF request in the DSPI module */
        DSPI_HAL_SetTxFifoFillDmaIntMode(base, kDspiGenerateDmaReq, false);
    4902:	4628      	mov	r0, r5
    4904:	2101      	movs	r1, #1
    4906:	2200      	movs	r2, #0
    4908:	f7fe fbda 	bl	30c0 <DSPI_HAL_SetTxFifoFillDmaIntMode>
EDMA_HAL_TriggerChannelStart():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:565
 * @param base Register base address for eDMA module.
 * @param channel Channel indicator. If kEDMAAllChannel is selected, all channels are tirggere.
 */
static inline void EDMA_HAL_TriggerChannelStart(DMA_Type * base, edma_channel_indicator_t channel)
{
    DMA_WR_SSRT(base, channel);
    490c:	7766      	strb	r6, [r4, #29]
DSPI_DRV_EdmaMasterStartTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1268

         /** Manually start the TX DMA channel to get the process going */
        EDMA_HAL_TriggerChannelStart(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    }

    return kStatus_DSPI_Success;
    490e:	2000      	movs	r0, #0
    4910:	e000      	b.n	4914 <DSPI_DRV_EdmaMasterStartTransfer+0x510>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:701
    s_wordToSend = 0;

     /** Check that we're not busy.*/
    if (dspiEdmaState->isTransferInProgress)
    {
        return kStatus_DSPI_Busy;
    4912:	2004      	movs	r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1269
         /** Manually start the TX DMA channel to get the process going */
        EDMA_HAL_TriggerChannelStart(dmaBaseAddr, (edma_channel_indicator_t)dmaChannel);
    }

    return kStatus_DSPI_Success;
}
    4914:	b013      	add	sp, #76	; 0x4c
    4916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    491a:	bf00      	nop
    491c:	1fff0c90 	.word	0x1fff0c90
    4920:	0210101c 	.word	0x0210101c
    4924:	1fff0c98 	.word	0x1fff0c98
    4928:	1fff0c94 	.word	0x1fff0c94
    492c:	00007dd8 	.word	0x00007dd8

00004930 <DSPI_DRV_EdmaMasterTransferBlocking>:
DSPI_DRV_EdmaMasterTransferBlocking():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:488
                                                  const dspi_edma_device_t * device,
                                                  const uint8_t * sendBuffer,
                                                  uint8_t * receiveBuffer,
                                                  size_t transferByteCount,
                                                  uint32_t timeout)
{
    4930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:490
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    4932:	4c21      	ldr	r4, [pc, #132]	; (49b8 <DSPI_DRV_EdmaMasterTransferBlocking+0x88>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:491
    SPI_Type *base = g_dspiBase[instance];
    4934:	4f21      	ldr	r7, [pc, #132]	; (49bc <DSPI_DRV_EdmaMasterTransferBlocking+0x8c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:490
                                                  uint8_t * receiveBuffer,
                                                  size_t transferByteCount,
                                                  uint32_t timeout)
{
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    4936:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:488
                                                  const dspi_edma_device_t * device,
                                                  const uint8_t * sendBuffer,
                                                  uint8_t * receiveBuffer,
                                                  size_t transferByteCount,
                                                  uint32_t timeout)
{
    493a:	9e08      	ldr	r6, [sp, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:491
     /** instantiate local variable of type dspi_edma_master_state_t and point to global state */
    dspi_edma_master_state_t * dspiEdmaState = (dspi_edma_master_state_t *)g_dspiStatePtr[instance];
    SPI_Type *base = g_dspiBase[instance];
    493c:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:494
    dspi_status_t error = kStatus_DSPI_Success;

    dspiEdmaState->isTransferBlocking = true;  /** Indicates this is a blocking transfer */
    4940:	f04f 0c01 	mov.w	ip, #1
    4944:	f884 c011 	strb.w	ip, [r4, #17]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:497

     /** If the transfer count is zero, then return immediately.*/
    if (transferByteCount == 0)
    4948:	b90e      	cbnz	r6, 494e <DSPI_DRV_EdmaMasterTransferBlocking+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:499
    {
        return error;
    494a:	2000      	movs	r0, #0
    494c:	e031      	b.n	49b2 <DSPI_DRV_EdmaMasterTransferBlocking+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:505
    }

     /** If using a shared RX/TX DMA request, then this limits the amount of data we can transfer
     * due to the linked channel. The max bytes is 511 if 8-bit/frame or 1022 if 16-bit/frame
     */
    if (!FSL_FEATURE_DSPI_HAS_SEPARATE_DMA_RX_TX_REQn(instance))
    494e:	f100 3cff 	add.w	ip, r0, #4294967295
    4952:	f1bc 0f01 	cmp.w	ip, #1
    4956:	d80a      	bhi.n	496e <DSPI_DRV_EdmaMasterTransferBlocking+0x3e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:507
    {
        if (dspiEdmaState->bitsPerFrame > 8)
    4958:	6865      	ldr	r5, [r4, #4]
    495a:	2d08      	cmp	r5, #8
    495c:	d904      	bls.n	4968 <DSPI_DRV_EdmaMasterTransferBlocking+0x38>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:509
        {
            if (transferByteCount > 1022)
    495e:	f240 3cfe 	movw	ip, #1022	; 0x3fe
    4962:	4566      	cmp	r6, ip
    4964:	d824      	bhi.n	49b0 <DSPI_DRV_EdmaMasterTransferBlocking+0x80>
    4966:	e002      	b.n	496e <DSPI_DRV_EdmaMasterTransferBlocking+0x3e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:516
                return kStatus_DSPI_OutOfRange;
            }
        }
        else
        {
            if (transferByteCount > 511)
    4968:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    496c:	d220      	bcs.n	49b0 <DSPI_DRV_EdmaMasterTransferBlocking+0x80>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:526
    }

     /** As this is a synchronous transfer, set up the sync status variable*/
    osa_status_t syncStatus;

    if (DSPI_DRV_EdmaMasterStartTransfer(instance, device, sendBuffer, receiveBuffer,
    496e:	9600      	str	r6, [sp, #0]
    4970:	f7ff fd48 	bl	4404 <DSPI_DRV_EdmaMasterStartTransfer>
    4974:	2804      	cmp	r0, #4
    4976:	d01c      	beq.n	49b2 <DSPI_DRV_EdmaMasterTransferBlocking+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:535
    }

     /** As this is a synchronous transfer, wait until the transfer is complete.*/
    do
    {
        syncStatus = OSA_SemaWait(&dspiEdmaState->irqSync, timeout);
    4978:	f104 0014 	add.w	r0, r4, #20
    497c:	9909      	ldr	r1, [sp, #36]	; 0x24
    497e:	f7fd fbb7 	bl	20f0 <OSA_SemaWait>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:536
    }while(syncStatus == kStatus_OSA_Idle);
    4982:	2803      	cmp	r0, #3
    4984:	d0f8      	beq.n	4978 <DSPI_DRV_EdmaMasterTransferBlocking+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:541

     /** If a timeout occurs, stop the transfer by setting the isTransferInProgress to false and
     * disabling DMA requests and interrupts, then return the timeout error status.
     */
    if (syncStatus != kStatus_OSA_Success)
    4986:	2800      	cmp	r0, #0
    4988:	d0df      	beq.n	494a <DSPI_DRV_EdmaMasterTransferBlocking+0x1a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:544
    {
         /** The transfer is complete.*/
        dspiEdmaState->isTransferInProgress = false;
    498a:	2500      	movs	r5, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:547

         /** Disable the Receive FIFO Drain DMA Request */
        DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateDmaReq, false);
    498c:	4638      	mov	r0, r7
    498e:	2101      	movs	r1, #1
    4990:	462a      	mov	r2, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:544
     * disabling DMA requests and interrupts, then return the timeout error status.
     */
    if (syncStatus != kStatus_OSA_Success)
    {
         /** The transfer is complete.*/
        dspiEdmaState->isTransferInProgress = false;
    4992:	7425      	strb	r5, [r4, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:547

         /** Disable the Receive FIFO Drain DMA Request */
        DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateDmaReq, false);
    4994:	f7fe fb9b 	bl	30ce <DSPI_HAL_SetRxFifoDrainDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:550

         /** Disable TFFF DMA request */
        DSPI_HAL_SetTxFifoFillDmaIntMode(base, kDspiGenerateDmaReq, false);
    4998:	4638      	mov	r0, r7
    499a:	2101      	movs	r1, #1
    499c:	462a      	mov	r2, r5
    499e:	f7fe fb8f 	bl	30c0 <DSPI_HAL_SetTxFifoFillDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:553

         /** Disable End of Queue request */
        DSPI_HAL_SetIntMode(base, kDspiEndOfQueue, false);
    49a2:	4638      	mov	r0, r7
    49a4:	211c      	movs	r1, #28
    49a6:	462a      	mov	r2, r5
    49a8:	f7fe fb98 	bl	30dc <DSPI_HAL_SetIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:555

        error = kStatus_DSPI_Timeout;
    49ac:	2003      	movs	r0, #3
    49ae:	e000      	b.n	49b2 <DSPI_DRV_EdmaMasterTransferBlocking+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:511
    {
        if (dspiEdmaState->bitsPerFrame > 8)
        {
            if (transferByteCount > 1022)
            {
                return kStatus_DSPI_OutOfRange;
    49b0:	2008      	movs	r0, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:559

        error = kStatus_DSPI_Timeout;
    }

    return error;
}
    49b2:	b003      	add	sp, #12
    49b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49b6:	bf00      	nop
    49b8:	1fff0c84 	.word	0x1fff0c84
    49bc:	00007ef8 	.word	0x00007ef8

000049c0 <DSPI_DRV_EdmaMasterIRQHandler>:
DSPI_DRV_EdmaMasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1320
 * This handler uses the buffers stored in the dspi_master_state_t structs to transfer data.
 *
 *END*/
void DSPI_DRV_EdmaMasterIRQHandler(uint32_t instance)
{
    SPI_Type *base = g_dspiBase[instance];
    49c0:	4b04      	ldr	r3, [pc, #16]	; (49d4 <DSPI_DRV_EdmaMasterIRQHandler+0x14>)
    49c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
DSPI_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:680
 * @return State of the status flag: asserted (true) or not-asserted (false)
 */
static inline bool DSPI_HAL_GetStatusFlag(SPI_Type * base,
                                        dspi_status_and_interrupt_request_t statusFlag)
{
    return ((SPI_RD_SR(base) >> statusFlag) & 0x1);
    49c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
DSPI_DRV_EdmaMasterIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1326

     /** If the interrupt is due to an end-of-queue, then complete. This interrupt is
     * is used during DMA operations and we want to handle this interrupt only
     * when DMA is being used.
     */
    if (DSPI_HAL_GetStatusFlag(base, kDspiEndOfQueue))
    49c8:	00db      	lsls	r3, r3, #3
    49ca:	d501      	bpl.n	49d0 <DSPI_DRV_EdmaMasterIRQHandler+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_master_driver.c:1331
    {
         /** Complete the transfer. This disables the interrupts, so we don't wind up in
         * the ISR again.
         */
        DSPI_DRV_EdmaMasterCompleteTransfer(instance);
    49cc:	f7ff bbdc 	b.w	4188 <DSPI_DRV_EdmaMasterCompleteTransfer>
    49d0:	4770      	bx	lr
    49d2:	bf00      	nop
    49d4:	00007ef8 	.word	0x00007ef8

000049d8 <DSPI_DRV_EdmaIRQHandler>:
DSPI_DRV_EdmaIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:60
 * actually be a program error, because it means the master/slave config for the IRQ
 * was set incorrectly.
 */
void DSPI_DRV_EdmaIRQHandler(uint32_t instance)
{
    assert(instance < SPI_INSTANCE_COUNT);
    49d8:	2802      	cmp	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:59
 * not present in the link (because the IRQ handlers are marked as weak). This would
 * actually be a program error, because it means the master/slave config for the IRQ
 * was set incorrectly.
 */
void DSPI_DRV_EdmaIRQHandler(uint32_t instance)
{
    49da:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:60
    assert(instance < SPI_INSTANCE_COUNT);
    49dc:	d905      	bls.n	49ea <DSPI_DRV_EdmaIRQHandler+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:60 (discriminator 1)
    49de:	480a      	ldr	r0, [pc, #40]	; (4a08 <DSPI_DRV_EdmaIRQHandler+0x30>)
    49e0:	4a0a      	ldr	r2, [pc, #40]	; (4a0c <DSPI_DRV_EdmaIRQHandler+0x34>)
    49e2:	4b0b      	ldr	r3, [pc, #44]	; (4a10 <DSPI_DRV_EdmaIRQHandler+0x38>)
    49e4:	213c      	movs	r1, #60	; 0x3c
    49e6:	f001 fa2f 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:61
    SPI_Type *base = g_dspiBase[instance];
    49ea:	4a0a      	ldr	r2, [pc, #40]	; (4a14 <DSPI_DRV_EdmaIRQHandler+0x3c>)
    49ec:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
DSPI_HAL_IsMaster():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:313
 * @param base Module base pointer of type SPI_Type.
 * @return Returns true if the module is in master mode or false if the module is in slave mode.
 */
static inline bool DSPI_HAL_IsMaster(SPI_Type * base)
{
    return (bool)SPI_RD_MCR_MSTR(base);
    49f0:	681b      	ldr	r3, [r3, #0]
DSPI_DRV_EdmaIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:63

    if (DSPI_HAL_IsMaster(base))
    49f2:	2b00      	cmp	r3, #0
    49f4:	da03      	bge.n	49fe <DSPI_DRV_EdmaIRQHandler+0x26>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:73
    else
    {
         /** Slave mode.*/
        DSPI_DRV_EdmaSlaveIRQHandler(instance);
    }
}
    49f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:66
    SPI_Type *base = g_dspiBase[instance];

    if (DSPI_HAL_IsMaster(base))
    {
         /** Master mode.*/
        DSPI_DRV_EdmaMasterIRQHandler(instance);
    49fa:	f7ff bfe1 	b.w	49c0 <DSPI_DRV_EdmaMasterIRQHandler>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:73
    else
    {
         /** Slave mode.*/
        DSPI_DRV_EdmaSlaveIRQHandler(instance);
    }
}
    49fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_shared_function.c:71
        DSPI_DRV_EdmaMasterIRQHandler(instance);
    }
    else
    {
         /** Slave mode.*/
        DSPI_DRV_EdmaSlaveIRQHandler(instance);
    4a02:	f000 b889 	b.w	4b18 <DSPI_DRV_EdmaSlaveIRQHandler>
    4a06:	bf00      	nop
    4a08:	00008043 	.word	0x00008043
    4a0c:	0000802b 	.word	0x0000802b
    4a10:	000080bb 	.word	0x000080bb
    4a14:	00007ef8 	.word	0x00007ef8

00004a18 <EDMA_HAL_HTCDSetIntCmd>:
EDMA_HAL_HTCDSetIntCmd():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:896
 * @param enable Enable (true) /Disable (false) interrupt after TCD done.
 */
static inline void EDMA_HAL_HTCDSetIntCmd(
                DMA_Type * base, uint32_t channel, bool enable)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    4a18:	290f      	cmp	r1, #15
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:895
 * @param channel eDMA channel number.
 * @param enable Enable (true) /Disable (false) interrupt after TCD done.
 */
static inline void EDMA_HAL_HTCDSetIntCmd(
                DMA_Type * base, uint32_t channel, bool enable)
{
    4a1a:	b508      	push	{r3, lr}
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:896
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    4a1c:	d906      	bls.n	4a2c <EDMA_HAL_HTCDSetIntCmd+0x14>
    4a1e:	4807      	ldr	r0, [pc, #28]	; (4a3c <EDMA_HAL_HTCDSetIntCmd+0x24>)
    4a20:	4a07      	ldr	r2, [pc, #28]	; (4a40 <EDMA_HAL_HTCDSetIntCmd+0x28>)
    4a22:	4b08      	ldr	r3, [pc, #32]	; (4a44 <EDMA_HAL_HTCDSetIntCmd+0x2c>)
    4a24:	f44f 7160 	mov.w	r1, #896	; 0x380
    4a28:	f001 fa0e 	bl	5e48 <__assert_func>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_edma_hal.h:897
    DMA_BWR_CSR_INTMAJOR(base, channel, enable);
    4a2c:	4b06      	ldr	r3, [pc, #24]	; (4a48 <EDMA_HAL_HTCDSetIntCmd+0x30>)
    4a2e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    4a32:	440b      	add	r3, r1
    4a34:	015b      	lsls	r3, r3, #5
    4a36:	809a      	strh	r2, [r3, #4]
    4a38:	bd08      	pop	{r3, pc}
    4a3a:	bf00      	nop
    4a3c:	00007f57 	.word	0x00007f57
    4a40:	000080d9 	.word	0x000080d9
    4a44:	00007450 	.word	0x00007450
    4a48:	0210101c 	.word	0x0210101c

00004a4c <DSPI_DRV_EdmaCompleteTransfer>:
DSPI_DRV_EdmaCompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:768
 * Description   : Finish the transfer
 * Called when transfer is finished
 *
 *END*/
static void DSPI_DRV_EdmaCompleteTransfer(uint32_t instance)
{
    4a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:769
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    4a50:	4b2e      	ldr	r3, [pc, #184]	; (4b0c <DSPI_DRV_EdmaCompleteTransfer+0xc0>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:771
    SPI_Type *base = g_dspiBase[instance];
    DMA_Type * edmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiState->edmaRxChannel.channel);
    4a52:	4f2f      	ldr	r7, [pc, #188]	; (4b10 <DSPI_DRV_EdmaCompleteTransfer+0xc4>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:769
 * Called when transfer is finished
 *
 *END*/
static void DSPI_DRV_EdmaCompleteTransfer(uint32_t instance)
{
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    4a54:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:770
    SPI_Type *base = g_dspiBase[instance];
    4a58:	4b2e      	ldr	r3, [pc, #184]	; (4b14 <DSPI_DRV_EdmaCompleteTransfer+0xc8>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:771
    DMA_Type * edmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiState->edmaRxChannel.channel);
    4a5a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:770
 *
 *END*/
static void DSPI_DRV_EdmaCompleteTransfer(uint32_t instance)
{
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    SPI_Type *base = g_dspiBase[instance];
    4a5e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:771
    DMA_Type * edmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiState->edmaRxChannel.channel);
    4a62:	0933      	lsrs	r3, r6, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:772
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiState->edmaRxChannel.channel);
    4a64:	f006 060f 	and.w	r6, r6, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:771
 *END*/
static void DSPI_DRV_EdmaCompleteTransfer(uint32_t instance)
{
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    SPI_Type *base = g_dspiBase[instance];
    DMA_Type * edmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiState->edmaRxChannel.channel);
    4a68:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:776
    uint32_t edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiState->edmaRxChannel.channel);
    uint32_t readData;

     /** Disable Rx DMA major loop interrupt */
    EDMA_HAL_HTCDSetIntCmd(edmaBaseAddr, edmaChannel, false);
    4a6c:	4631      	mov	r1, r6
    4a6e:	4640      	mov	r0, r8
    4a70:	2200      	movs	r2, #0
    4a72:	f7ff ffd1 	bl	4a18 <EDMA_HAL_HTCDSetIntCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:779

     /** Stop Rx DMA channel. */
    EDMA_HAL_SetDmaRequestCmd(edmaBaseAddr, (edma_channel_indicator_t)edmaChannel, false);
    4a76:	4631      	mov	r1, r6
    4a78:	4640      	mov	r0, r8
    4a7a:	2200      	movs	r2, #0
    4a7c:	f7fd ffd7 	bl	2a2e <EDMA_HAL_SetDmaRequestCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:781

    edmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiState->edmaTxChannel.channel);
    4a80:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
    4a84:	0933      	lsrs	r3, r6, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:782
    edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiState->edmaTxChannel.channel);
    4a86:	f006 060f 	and.w	r6, r6, #15
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:781
    EDMA_HAL_HTCDSetIntCmd(edmaBaseAddr, edmaChannel, false);

     /** Stop Rx DMA channel. */
    EDMA_HAL_SetDmaRequestCmd(edmaBaseAddr, (edma_channel_indicator_t)edmaChannel, false);

    edmaBaseAddr = VIRTUAL_CHN_TO_EDMA_MODULE_REGBASE(dspiState->edmaTxChannel.channel);
    4a8a:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:785
    edmaChannel = VIRTUAL_CHN_TO_EDMA_CHN(dspiState->edmaTxChannel.channel);

     /** Disable Tx DMA major loop interrupt */
    EDMA_HAL_HTCDSetIntCmd(edmaBaseAddr, edmaChannel, false);
    4a8e:	4631      	mov	r1, r6
    4a90:	4638      	mov	r0, r7
    4a92:	2200      	movs	r2, #0
    4a94:	f7ff ffc0 	bl	4a18 <EDMA_HAL_HTCDSetIntCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:788

     /** Stop Tx DMA channel. */
    EDMA_HAL_SetDmaRequestCmd(edmaBaseAddr, (edma_channel_indicator_t)edmaChannel, false);
    4a98:	4631      	mov	r1, r6
    4a9a:	4638      	mov	r0, r7
    4a9c:	2200      	movs	r2, #0
    4a9e:	f7fd ffc6 	bl	2a2e <EDMA_HAL_SetDmaRequestCmd>
DSPI_HAL_StopTransfer():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:441
 *
 * @param base Module base pointer of type SPI_Type.
 */
static inline void DSPI_HAL_StopTransfer(SPI_Type * base)
{
    SPI_BWR_MCR_HALT(base, 1);
    4aa2:	f105 7304 	add.w	r3, r5, #34603008	; 0x2100000
    4aa6:	015b      	lsls	r3, r3, #5
    4aa8:	2601      	movs	r6, #1
    4aaa:	601e      	str	r6, [r3, #0]
DSPI_DRV_EdmaCompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:794

     /** Stop transfer */
    DSPI_HAL_StopTransfer(base);

     /** Disable the transmit FIFO fill request */
    DSPI_HAL_SetTxFifoFillDmaIntMode(base, kDspiGenerateDmaReq, false);
    4aac:	4628      	mov	r0, r5
    4aae:	4631      	mov	r1, r6
    4ab0:	2200      	movs	r2, #0
    4ab2:	f7fe fb05 	bl	30c0 <DSPI_HAL_SetTxFifoFillDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:796
     /** Disable the Receive FIFO Drain Request */
    DSPI_HAL_SetRxFifoDrainDmaIntMode(base, kDspiGenerateDmaReq, false);
    4ab6:	4628      	mov	r0, r5
    4ab8:	4631      	mov	r1, r6
    4aba:	2200      	movs	r2, #0
    4abc:	f7fe fb07 	bl	30ce <DSPI_HAL_SetRxFifoDrainDmaIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:798
     /** Disable transmit complete interrupt request */
    DSPI_HAL_SetIntMode(base, kDspiTxComplete, false);
    4ac0:	4628      	mov	r0, r5
    4ac2:	211f      	movs	r1, #31
    4ac4:	2200      	movs	r2, #0
    4ac6:	f7fe fb09 	bl	30dc <DSPI_HAL_SetIntMode>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:801

     /** Update extra receive bytes */
    if((dspiState->extraReceiveByte > 0) && (dspiState->receiveBuffer))
    4aca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4ace:	b18b      	cbz	r3, 4af4 <DSPI_DRV_EdmaCompleteTransfer+0xa8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:801 (discriminator 1)
    4ad0:	6a22      	ldr	r2, [r4, #32]
    4ad2:	b17a      	cbz	r2, 4af4 <DSPI_DRV_EdmaCompleteTransfer+0xa8>
DSPI_HAL_ReadData():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:718
 * @param base Module base pointer of type SPI_Type.
 * @return The data from the read data buffer
 */
static inline uint32_t DSPI_HAL_ReadData(SPI_Type * base)
{
    return SPI_RD_POPR(base);
    4ad4:	6bab      	ldr	r3, [r5, #56]	; 0x38
DSPI_DRV_EdmaCompleteTransfer():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:807
    {
         /** Read data from FIFO and clear flag */
        readData = DSPI_HAL_ReadData(base);

         /** First byte */
        dspiState->receiveBuffer[dspiState->remainingReceiveByteCount] = (uint8_t)readData;
    4ad6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4ad8:	5453      	strb	r3, [r2, r1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:808
        if ((dspiState->extraReceiveByte > 0) &&(--dspiState->extraReceiveByte > 0))
    4ada:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    4ade:	b14a      	cbz	r2, 4af4 <DSPI_DRV_EdmaCompleteTransfer+0xa8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:808 (discriminator 1)
    4ae0:	3a01      	subs	r2, #1
    4ae2:	b2d2      	uxtb	r2, r2
    4ae4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
    4ae8:	b122      	cbz	r2, 4af4 <DSPI_DRV_EdmaCompleteTransfer+0xa8>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:811
        {
             /** Second byte if available */
            dspiState->receiveBuffer[dspiState->remainingReceiveByteCount + 1] = (uint8_t)(readData >> 8);
    4aea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4aec:	6a22      	ldr	r2, [r4, #32]
    4aee:	440a      	add	r2, r1
    4af0:	0a1b      	lsrs	r3, r3, #8
    4af2:	7053      	strb	r3, [r2, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:816
        }
    }

     /** Update status */
    dspiState->status = kStatus_DSPI_Success;
    4af4:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:822
    dspiState->isTransferInProgress = false;
    dspiState->sendBuffer = NULL;
    dspiState->receiveBuffer = NULL;
    dspiState->remainingSendByteCount = 0;
    dspiState->remainingReceiveByteCount = 0;
    dspiState->extraReceiveByte = 0;
    4af6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:817
        }
    }

     /** Update status */
    dspiState->status = kStatus_DSPI_Success;
    dspiState->isTransferInProgress = false;
    4afa:	7623      	strb	r3, [r4, #24]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:816
            dspiState->receiveBuffer[dspiState->remainingReceiveByteCount + 1] = (uint8_t)(readData >> 8);
        }
    }

     /** Update status */
    dspiState->status = kStatus_DSPI_Success;
    4afc:	7123      	strb	r3, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:820
    dspiState->isTransferInProgress = false;
    dspiState->sendBuffer = NULL;
    dspiState->receiveBuffer = NULL;
    dspiState->remainingSendByteCount = 0;
    4afe:	6263      	str	r3, [r4, #36]	; 0x24
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:818
    }

     /** Update status */
    dspiState->status = kStatus_DSPI_Success;
    dspiState->isTransferInProgress = false;
    dspiState->sendBuffer = NULL;
    4b00:	61e3      	str	r3, [r4, #28]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:819
    dspiState->receiveBuffer = NULL;
    4b02:	6223      	str	r3, [r4, #32]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:821
    dspiState->remainingSendByteCount = 0;
    dspiState->remainingReceiveByteCount = 0;
    4b04:	62a3      	str	r3, [r4, #40]	; 0x28
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:822
    dspiState->extraReceiveByte = 0;
    4b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b0a:	bf00      	nop
    4b0c:	1fff0c84 	.word	0x1fff0c84
    4b10:	00007dd8 	.word	0x00007dd8
    4b14:	00007ef8 	.word	0x00007ef8

00004b18 <DSPI_DRV_EdmaSlaveIRQHandler>:
DSPI_DRV_EdmaSlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1123
 *
 *END*/
void DSPI_DRV_EdmaSlaveIRQHandler(uint32_t instance)
{
    SPI_Type *base = g_dspiBase[instance];
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    4b18:	4a14      	ldr	r2, [pc, #80]	; (4b6c <DSPI_DRV_EdmaSlaveIRQHandler+0x54>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1122
 *          four FIFO will be transmitted.
 *
 *END*/
void DSPI_DRV_EdmaSlaveIRQHandler(uint32_t instance)
{
    SPI_Type *base = g_dspiBase[instance];
    4b1a:	4b15      	ldr	r3, [pc, #84]	; (4b70 <DSPI_DRV_EdmaSlaveIRQHandler+0x58>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1121
 *          this interrupt to do it. This interrupt only be enabled when the last
 *          four FIFO will be transmitted.
 *
 *END*/
void DSPI_DRV_EdmaSlaveIRQHandler(uint32_t instance)
{
    4b1c:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1123
    SPI_Type *base = g_dspiBase[instance];
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    4b1e:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1122
 *          four FIFO will be transmitted.
 *
 *END*/
void DSPI_DRV_EdmaSlaveIRQHandler(uint32_t instance)
{
    SPI_Type *base = g_dspiBase[instance];
    4b22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1126
    dspi_edma_slave_state_t * dspiState = (dspi_edma_slave_state_t *)g_dspiStatePtr[instance];
    uint8_t nBytes;

    nBytes = dspiState->bitsPerFrame / 8;
    4b26:	6821      	ldr	r1, [r4, #0]
    4b28:	f3c1 02c7 	ubfx	r2, r1, #3, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1127
    if (dspiState->bitsPerFrame % 8 != 0)
    4b2c:	0749      	lsls	r1, r1, #29
DSPI_HAL_GetIntMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:652
 * @return Configuration of interrupt request: enable (true) or disable (false).
 */
static inline bool DSPI_HAL_GetIntMode(SPI_Type * base,
                                             dspi_status_and_interrupt_request_t interruptSrc)
{
    return ((SPI_RD_RSER(base) >> interruptSrc) & 0x1);
    4b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
DSPI_DRV_EdmaSlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1129
    {
        nBytes += 1;
    4b30:	bf1c      	itt	ne
    4b32:	3201      	addne	r2, #1
    4b34:	b2d2      	uxtbne	r2, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1133
    }

     /** Catch Tx complete interrupt */
    if ((DSPI_HAL_GetIntMode(base, kDspiTxComplete)) &&
    4b36:	2900      	cmp	r1, #0
    4b38:	da17      	bge.n	4b6a <DSPI_DRV_EdmaSlaveIRQHandler+0x52>
DSPI_HAL_GetStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:680
 * @return State of the status flag: asserted (true) or not-asserted (false)
 */
static inline bool DSPI_HAL_GetStatusFlag(SPI_Type * base,
                                        dspi_status_and_interrupt_request_t statusFlag)
{
    return ((SPI_RD_SR(base) >> statusFlag) & 0x1);
    4b3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
DSPI_DRV_EdmaSlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1133
    4b3c:	2900      	cmp	r1, #0
    4b3e:	da14      	bge.n	4b6a <DSPI_DRV_EdmaSlaveIRQHandler+0x52>
DSPI_HAL_ClearStatusFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:700
 * @param statusFlag The status flag, of type dspi_status_and_interrupt_request_t
 */
static inline void DSPI_HAL_ClearStatusFlag(SPI_Type * base,
                                              dspi_status_and_interrupt_request_t statusFlag)
{
    SPI_WR_SR(base, (0x1U << statusFlag));
    4b40:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4b44:	62d9      	str	r1, [r3, #44]	; 0x2c
DSPI_DRV_EdmaSlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1140
    {
         /** Clear this flag first */
        DSPI_HAL_ClearStatusFlag(base, kDspiTxComplete);

         /** Check if number of transfered bytes is greater or equals user request */
        if(dspiState->remainingSendByteCount <= (DSPI_HAL_GetTransferCount(base) * nBytes))
    4b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
DSPI_HAL_GetTransferCount():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_dspi_hal.h:865
 * @param base Module base pointer of type SPI_Type.
 * @return The current transfer count
 */
static inline uint32_t DSPI_HAL_GetTransferCount(SPI_Type * base)
{
    return SPI_RD_TCR_SPI_TCNT(base);
    4b48:	689b      	ldr	r3, [r3, #8]
    4b4a:	0c1b      	lsrs	r3, r3, #16
DSPI_DRV_EdmaSlaveIRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1140
    4b4c:	435a      	muls	r2, r3
    4b4e:	4291      	cmp	r1, r2
    4b50:	d80b      	bhi.n	4b6a <DSPI_DRV_EdmaSlaveIRQHandler+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1143
        {
             /** Complete the transfer */
            DSPI_DRV_EdmaCompleteTransfer(instance);
    4b52:	f7ff ff7b 	bl	4a4c <DSPI_DRV_EdmaCompleteTransfer>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1145
             /** Notify to wait task */
            if(dspiState->isSync)
    4b56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    4b5a:	b133      	cbz	r3, 4b6a <DSPI_DRV_EdmaSlaveIRQHandler+0x52>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1147
            {
                OSA_EventSet(&dspiState->event, kDspiEdmaTransferDone);
    4b5c:	f104 0008 	add.w	r0, r4, #8
    4b60:	2101      	movs	r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1151
            }
        }
    }
}
    4b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/dspi/fsl_dspi_edma_slave_driver.c:1147
             /** Complete the transfer */
            DSPI_DRV_EdmaCompleteTransfer(instance);
             /** Notify to wait task */
            if(dspiState->isSync)
            {
                OSA_EventSet(&dspiState->event, kDspiEdmaTransferDone);
    4b66:	f7fd bbc9 	b.w	22fc <OSA_EventSet>
    4b6a:	bd10      	pop	{r4, pc}
    4b6c:	1fff0c84 	.word	0x1fff0c84
    4b70:	00007ef8 	.word	0x00007ef8

00004b74 <ADC16_DRV_Init>:
ADC16_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:166
 * feature, responding APIs would be called after this function.
 *
 *END*/
adc16_status_t ADC16_DRV_Init(uint32_t instance, const adc16_converter_config_t *userConfigPtr)
{
    assert(instance < ADC_INSTANCE_COUNT);
    4b74:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:165
 * these initial configure are mainly for the comparator itself. For advanced
 * feature, responding APIs would be called after this function.
 *
 *END*/
adc16_status_t ADC16_DRV_Init(uint32_t instance, const adc16_converter_config_t *userConfigPtr)
{
    4b76:	b570      	push	{r4, r5, r6, lr}
    4b78:	4604      	mov	r4, r0
    4b7a:	460e      	mov	r6, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:166
    assert(instance < ADC_INSTANCE_COUNT);
    4b7c:	d904      	bls.n	4b88 <ADC16_DRV_Init+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:166 (discriminator 1)
    4b7e:	4818      	ldr	r0, [pc, #96]	; (4be0 <ADC16_DRV_Init+0x6c>)
    4b80:	4a18      	ldr	r2, [pc, #96]	; (4be4 <ADC16_DRV_Init+0x70>)
    4b82:	4b19      	ldr	r3, [pc, #100]	; (4be8 <ADC16_DRV_Init+0x74>)
    4b84:	21a6      	movs	r1, #166	; 0xa6
    4b86:	e015      	b.n	4bb4 <ADC16_DRV_Init+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:167
    ADC_Type * base = g_adcBase[instance];
    4b88:	4b18      	ldr	r3, [pc, #96]	; (4bec <ADC16_DRV_Init+0x78>)
    4b8a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:169

    if (!userConfigPtr)
    4b8e:	b329      	cbz	r1, 4bdc <ADC16_DRV_Init+0x68>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:174
    {
        return kStatus_ADC16_InvalidArgument;
    }
     /** Enable clock for ADC. */
    CLOCK_SYS_EnableAdcClock(instance);
    4b90:	f7fd fa36 	bl	2000 <CLOCK_SYS_EnableAdcClock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:177

     /** Reset all the register to a known state. */
    ADC16_HAL_Init(base);
    4b94:	4628      	mov	r0, r5
    4b96:	f7fe fac9 	bl	312c <ADC16_HAL_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:178
    ADC16_HAL_ConfigConverter(base, userConfigPtr);
    4b9a:	4628      	mov	r0, r5
    4b9c:	4631      	mov	r1, r6
    4b9e:	f7fe faed 	bl	317c <ADC16_HAL_ConfigConverter>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:181

     /** Enable ADC interrupt in NVIC level.*/
    INT_SYS_EnableIRQ(g_adcIrqId[instance] );
    4ba2:	4b13      	ldr	r3, [pc, #76]	; (4bf0 <ADC16_DRV_Init+0x7c>)
    4ba4:	5d1a      	ldrb	r2, [r3, r4]
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:93
 * @param irqNumber IRQ number
 */
static inline void INT_SYS_EnableIRQ(IRQn_Type irqNumber)
{
     /** check IRQ number */
    assert(0 <= irqNumber);
    4ba6:	b253      	sxtb	r3, r2
    4ba8:	2b00      	cmp	r3, #0
    4baa:	da05      	bge.n	4bb8 <ADC16_DRV_Init+0x44>
    4bac:	4811      	ldr	r0, [pc, #68]	; (4bf4 <ADC16_DRV_Init+0x80>)
    4bae:	4a12      	ldr	r2, [pc, #72]	; (4bf8 <ADC16_DRV_Init+0x84>)
    4bb0:	4b12      	ldr	r3, [pc, #72]	; (4bfc <ADC16_DRV_Init+0x88>)
    4bb2:	215d      	movs	r1, #93	; 0x5d
    4bb4:	f001 f948 	bl	5e48 <__assert_func>
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\system\inc/fsl_interrupt_manager.h:94
    assert(irqNumber <= FSL_FEATURE_INTERRUPT_IRQ_MAX);
    4bb8:	2b55      	cmp	r3, #85	; 0x55
    4bba:	dd04      	ble.n	4bc6 <ADC16_DRV_Init+0x52>
    4bbc:	480d      	ldr	r0, [pc, #52]	; (4bf4 <ADC16_DRV_Init+0x80>)
    4bbe:	4a0e      	ldr	r2, [pc, #56]	; (4bf8 <ADC16_DRV_Init+0x84>)
    4bc0:	4b0f      	ldr	r3, [pc, #60]	; (4c00 <ADC16_DRV_Init+0x8c>)
    4bc2:	215e      	movs	r1, #94	; 0x5e
    4bc4:	e7f6      	b.n	4bb4 <ADC16_DRV_Init+0x40>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    4bc6:	2101      	movs	r1, #1
    4bc8:	f002 021f 	and.w	r2, r2, #31
    4bcc:	fa01 f202 	lsl.w	r2, r1, r2
    4bd0:	095b      	lsrs	r3, r3, #5
    4bd2:	490c      	ldr	r1, [pc, #48]	; (4c04 <ADC16_DRV_Init+0x90>)
ADC16_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:183

    return kStatus_ADC16_Success;
    4bd4:	2000      	movs	r0, #0
INT_SYS_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    4bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    4bda:	bd70      	pop	{r4, r5, r6, pc}
ADC16_DRV_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:171
    assert(instance < ADC_INSTANCE_COUNT);
    ADC_Type * base = g_adcBase[instance];

    if (!userConfigPtr)
    {
        return kStatus_ADC16_InvalidArgument;
    4bdc:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:184

     /** Enable ADC interrupt in NVIC level.*/
    INT_SYS_EnableIRQ(g_adcIrqId[instance] );

    return kStatus_ADC16_Success;
}
    4bde:	bd70      	pop	{r4, r5, r6, pc}
    4be0:	000081f6 	.word	0x000081f6
    4be4:	00008188 	.word	0x00008188
    4be8:	00008262 	.word	0x00008262
    4bec:	00008168 	.word	0x00008168
    4bf0:	00008165 	.word	0x00008165
    4bf4:	00007760 	.word	0x00007760
    4bf8:	00008280 	.word	0x00008280
    4bfc:	000077ca 	.word	0x000077ca
    4c00:	000077d9 	.word	0x000077d9
    4c04:	e000e100 	.word	0xe000e100

00004c08 <ADC16_DRV_ConfigConvChn>:
ADC16_DRV_ConfigConvChn():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:314
 *
 *END*/
adc16_status_t ADC16_DRV_ConfigConvChn(uint32_t instance,
    uint32_t chnGroup, const adc16_chn_config_t *configPtr)
{
    assert(instance < ADC_INSTANCE_COUNT);
    4c08:	2801      	cmp	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:313
 * calling this API will trigger the conversion.
 *
 *END*/
adc16_status_t ADC16_DRV_ConfigConvChn(uint32_t instance,
    uint32_t chnGroup, const adc16_chn_config_t *configPtr)
{
    4c0a:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:314
    assert(instance < ADC_INSTANCE_COUNT);
    4c0c:	d906      	bls.n	4c1c <ADC16_DRV_ConfigConvChn+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:314 (discriminator 1)
    4c0e:	4808      	ldr	r0, [pc, #32]	; (4c30 <ADC16_DRV_ConfigConvChn+0x28>)
    4c10:	4a08      	ldr	r2, [pc, #32]	; (4c34 <ADC16_DRV_ConfigConvChn+0x2c>)
    4c12:	4b09      	ldr	r3, [pc, #36]	; (4c38 <ADC16_DRV_ConfigConvChn+0x30>)
    4c14:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4c18:	f001 f916 	bl	5e48 <__assert_func>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:315
    ADC_Type * base = g_adcBase[instance];
    4c1c:	4c07      	ldr	r4, [pc, #28]	; (4c3c <ADC16_DRV_ConfigConvChn+0x34>)
    4c1e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:317

    if (!configPtr)
    4c22:	b11a      	cbz	r2, 4c2c <ADC16_DRV_ConfigConvChn+0x24>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:322
    {
        return kStatus_ADC16_InvalidArgument;
    }

    ADC16_HAL_ConfigChn(base, chnGroup, configPtr);
    4c24:	f7fe fa8a 	bl	313c <ADC16_HAL_ConfigChn>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:324

    return kStatus_ADC16_Success;
    4c28:	2000      	movs	r0, #0
    4c2a:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:319
    assert(instance < ADC_INSTANCE_COUNT);
    ADC_Type * base = g_adcBase[instance];

    if (!configPtr)
    {
        return kStatus_ADC16_InvalidArgument;
    4c2c:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/drivers/src/adc16/fsl_adc16_driver.c:325
    }

    ADC16_HAL_ConfigChn(base, chnGroup, configPtr);

    return kStatus_ADC16_Success;
}
    4c2e:	bd10      	pop	{r4, pc}
    4c30:	000081f6 	.word	0x000081f6
    4c34:	00008170 	.word	0x00008170
    4c38:	00008262 	.word	0x00008262
    4c3c:	00008168 	.word	0x00008168

00004c40 <SystemInit>:
SystemInit():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:118
   -- SystemInit()
   ---------------------------------------------------------------------------- */

void SystemInit (void) {
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));     /** set CP10, CP11 Full Access */
    4c40:	4b4f      	ldr	r3, [pc, #316]	; (4d80 <SystemInit+0x140>)
    4c42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4c46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    4c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:122
#endif /* ((__FPU_PRESENT == 1) && (__FPU_USED == 1)) */
#if (DISABLE_WDOG)
   /** WDOG->UNLOCK: WDOGUNLOCK=0xC520 */
  WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xC520);  /** Key 1 */
    4c4e:	4b4d      	ldr	r3, [pc, #308]	; (4d84 <SystemInit+0x144>)
    4c50:	f24c 5220 	movw	r2, #50464	; 0xc520
    4c54:	81da      	strh	r2, [r3, #14]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:124
   /** WDOG->UNLOCK: WDOGUNLOCK=0xD928 */
  WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xD928);  /** Key 2 */
    4c56:	f64d 1228 	movw	r2, #55592	; 0xd928
    4c5a:	81da      	strh	r2, [r3, #14]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:126
   /** WDOG->STCTRLH: ?=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,?=0,?=1,WAITEN=1,STOPEN=1,DBGEN=0,ALLOWUPDATE=1,WINEN=0,IRQRSTEN=0,CLKSRC=1,WDOGEN=0 */
  WDOG->STCTRLH = WDOG_STCTRLH_BYTESEL(0x00) |
    4c5c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    4c60:	801a      	strh	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:134
                 WDOG_STCTRLH_ALLOWUPDATE_MASK |
                 WDOG_STCTRLH_CLKSRC_MASK |
                 0x0100U;
#endif /* (DISABLE_WDOG) */
#ifdef CLOCK_SETUP
  if((RCM->SRS0 & RCM_SRS0_WAKEUP_MASK) != 0x00U)
    4c62:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	07d8      	lsls	r0, r3, #31
    4c6a:	d508      	bpl.n	4c7e <SystemInit+0x3e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:136
  {
    if((PMC->REGSC & PMC_REGSC_ACKISO_MASK) != 0x00U)
    4c6c:	4b46      	ldr	r3, [pc, #280]	; (4d88 <SystemInit+0x148>)
    4c6e:	789a      	ldrb	r2, [r3, #2]
    4c70:	0711      	lsls	r1, r2, #28
    4c72:	d51d      	bpl.n	4cb0 <SystemInit+0x70>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:138
    {
       PMC->REGSC |= PMC_REGSC_ACKISO_MASK;  /** Release hold with ACKISO:  Only has an effect if recovering from VLLSx.*/
    4c74:	789a      	ldrb	r2, [r3, #2]
    4c76:	f042 0208 	orr.w	r2, r2, #8
    4c7a:	709a      	strb	r2, [r3, #2]
    4c7c:	e018      	b.n	4cb0 <SystemInit+0x70>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:142
    }
  } else {
#ifdef SYSTEM_RTC_CR_VALUE
    SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
    4c7e:	4a43      	ldr	r2, [pc, #268]	; (4d8c <SystemInit+0x14c>)
    4c80:	f241 033c 	movw	r3, #4156	; 0x103c
    4c84:	58d1      	ldr	r1, [r2, r3]
    4c86:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    4c8a:	50d1      	str	r1, [r2, r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:143
    if ((RTC_CR & RTC_CR_OSCE_MASK) == 0x00U) {  /** Only if the OSCILLATOR is not already enabled */
    4c8c:	4b40      	ldr	r3, [pc, #256]	; (4d90 <SystemInit+0x150>)
    4c8e:	691a      	ldr	r2, [r3, #16]
    4c90:	05d2      	lsls	r2, r2, #23
    4c92:	d40d      	bmi.n	4cb0 <SystemInit+0x70>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:144
      RTC_CR = (uint32_t)((RTC_CR & (uint32_t)~(uint32_t)(RTC_CR_SC2P_MASK | RTC_CR_SC4P_MASK | RTC_CR_SC8P_MASK | RTC_CR_SC16P_MASK)) | (uint32_t)SYSTEM_RTC_CR_VALUE);
    4c94:	691a      	ldr	r2, [r3, #16]
    4c96:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    4c9a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    4c9e:	611a      	str	r2, [r3, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:145
      RTC_CR |= (uint32_t)RTC_CR_OSCE_MASK;
    4ca0:	691a      	ldr	r2, [r3, #16]
    4ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    4ca6:	611a      	str	r2, [r3, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:146
      RTC_CR &= (uint32_t)~(uint32_t)RTC_CR_CLKO_MASK;
    4ca8:	691a      	ldr	r2, [r3, #16]
    4caa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    4cae:	611a      	str	r2, [r3, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:153
#endif
  }

   /** Power mode protection initialization */
#ifdef SYSTEM_SMC_PMPROT_VALUE
  SMC->PMPROT = SYSTEM_SMC_PMPROT_VALUE;
    4cb0:	4b38      	ldr	r3, [pc, #224]	; (4d94 <SystemInit+0x154>)
    4cb2:	222a      	movs	r2, #42	; 0x2a
    4cb4:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:176
#if defined(SLOW_TRIM_ADDRESS)
  }
  #endif  /** defined(SLOW_TRIM_ADDRESS) */

   /** Set system prescalers and clock sources */
  SIM->CLKDIV1 = SYSTEM_SIM_CLKDIV1_VALUE;  /** Set system prescalers */
    4cb6:	f5a3 335c 	sub.w	r3, r3, #225280	; 0x37000
    4cba:	f241 0244 	movw	r2, #4164	; 0x1044
    4cbe:	f04f 71a2 	mov.w	r1, #21233664	; 0x1440000
    4cc2:	5099      	str	r1, [r3, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:177
  SIM->SOPT1 = ((SIM->SOPT1) & (uint32_t)(~(SIM_SOPT1_OSC32KSEL_MASK))) | ((SYSTEM_SIM_SOPT1_VALUE) & (SIM_SOPT1_OSC32KSEL_MASK));  /** Set 32 kHz clock source (ERCLK32K) */
    4cc4:	681a      	ldr	r2, [r3, #0]
    4cc6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    4cca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    4cce:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:178
  SIM->SOPT2 = ((SIM->SOPT2) & (uint32_t)(~(SIM_SOPT2_PLLFLLSEL_MASK))) | ((SYSTEM_SIM_SOPT2_VALUE) & (SIM_SOPT2_PLLFLLSEL_MASK));  /** Selects the high frequency clock for various peripheral clocking options. */
    4cd0:	f241 0204 	movw	r2, #4100	; 0x1004
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:224
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
  }
#endif
  MCG->SC = SYSTEM_MCG_SC_VALUE;        /** Set SC (fast clock internal reference divider) */
  MCG->C2 = (MCG->C2 & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (SYSTEM_MCG_C2_VALUE & (uint8_t)(~(MCG_C2_LP_MASK)));  /** Set C2 (freq. range, ext. and int. reference selection etc. excluding trim bits; low power bit is set later) */
  OSC->CR = SYSTEM_OSC_CR_VALUE;        /** Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */
    4cd4:	2080      	movs	r0, #128	; 0x80
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:178
  #endif  /** defined(SLOW_TRIM_ADDRESS) */

   /** Set system prescalers and clock sources */
  SIM->CLKDIV1 = SYSTEM_SIM_CLKDIV1_VALUE;  /** Set system prescalers */
  SIM->SOPT1 = ((SIM->SOPT1) & (uint32_t)(~(SIM_SOPT1_OSC32KSEL_MASK))) | ((SYSTEM_SIM_SOPT1_VALUE) & (SIM_SOPT1_OSC32KSEL_MASK));  /** Set 32 kHz clock source (ERCLK32K) */
  SIM->SOPT2 = ((SIM->SOPT2) & (uint32_t)(~(SIM_SOPT2_PLLFLLSEL_MASK))) | ((SYSTEM_SIM_SOPT2_VALUE) & (SIM_SOPT2_PLLFLLSEL_MASK));  /** Selects the high frequency clock for various peripheral clocking options. */
    4cd6:	5899      	ldr	r1, [r3, r2]
    4cd8:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    4cdc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    4ce0:	5099      	str	r1, [r3, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:214

#else  /** MCG_MODE */
   /** Set MCG and OSC */
#if  (((SYSTEM_OSC_CR_VALUE) & OSC_CR_ERCLKEN_MASK) != 0x00U) || (((SYSTEM_MCG_C7_VALUE) & MCG_C7_OSCSEL_MASK) == 0x00U)
   /** SIM_SCGC5: PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
    4ce2:	f241 0238 	movw	r2, #4152	; 0x1038
    4ce6:	5899      	ldr	r1, [r3, r2]
    4ce8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    4cec:	5099      	str	r1, [r3, r2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:216
   /** PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4cee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    4cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4cf4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    4cf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    4cfc:	649a      	str	r2, [r3, #72]	; 0x48
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:219
  if (((SYSTEM_MCG_C2_VALUE) & MCG_C2_EREFS_MASK) != 0x00U) {
   /** PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
    4cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4d00:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    4d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    4d08:	64da      	str	r2, [r3, #76]	; 0x4c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:222
  }
#endif
  MCG->SC = SYSTEM_MCG_SC_VALUE;        /** Set SC (fast clock internal reference divider) */
    4d0a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    4d0e:	2200      	movs	r2, #0
    4d10:	721a      	strb	r2, [r3, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:223
  MCG->C2 = (MCG->C2 & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (SYSTEM_MCG_C2_VALUE & (uint8_t)(~(MCG_C2_LP_MASK)));  /** Set C2 (freq. range, ext. and int. reference selection etc. excluding trim bits; low power bit is set later) */
    4d12:	7859      	ldrb	r1, [r3, #1]
    4d14:	f001 019b 	and.w	r1, r1, #155	; 0x9b
    4d18:	f041 0124 	orr.w	r1, r1, #36	; 0x24
    4d1c:	7059      	strb	r1, [r3, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:224
  OSC->CR = SYSTEM_OSC_CR_VALUE;        /** Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */
    4d1e:	491e      	ldr	r1, [pc, #120]	; (4d98 <SystemInit+0x158>)
    4d20:	7008      	strb	r0, [r1, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:225
  MCG->C7 = SYSTEM_MCG_C7_VALUE;        /** Set C7 (OSC Clock Select) */
    4d22:	731a      	strb	r2, [r3, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:227
  #if (MCG_MODE == MCG_MODE_PEE)
  MCG->C1 = (SYSTEM_MCG_C1_VALUE) | MCG_C1_CLKS(0x02);  /** Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) - PBE mode*/
    4d24:	22a2      	movs	r2, #162	; 0xa2
    4d26:	701a      	strb	r2, [r3, #0]
    4d28:	461a      	mov	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:232 (discriminator 1)
  #else
  MCG->C1 = SYSTEM_MCG_C1_VALUE;        /** Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
  #endif
  if ((((SYSTEM_MCG_C2_VALUE) & MCG_C2_EREFS_MASK) != 0x00U) && (((SYSTEM_MCG_C7_VALUE) & MCG_C7_OSCSEL_MASK) == 0x00U)) {
    while((MCG->S & MCG_S_OSCINIT0_MASK) == 0x00U) {  /** Check that the oscillator is running */
    4d2a:	7993      	ldrb	r3, [r2, #6]
    4d2c:	0798      	lsls	r0, r3, #30
    4d2e:	d5fc      	bpl.n	4d2a <SystemInit+0xea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:240
   /** Check that the source of the FLL reference clock is the requested one. */
  if (((SYSTEM_MCG_C1_VALUE) & MCG_C1_IREFS_MASK) != 0x00U) {
    while((MCG->S & MCG_S_IREFST_MASK) == 0x00U) {
    }
  } else {
    while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) {
    4d30:	7991      	ldrb	r1, [r2, #6]
    4d32:	4b1a      	ldr	r3, [pc, #104]	; (4d9c <SystemInit+0x15c>)
    4d34:	06c9      	lsls	r1, r1, #27
    4d36:	d4fb      	bmi.n	4d30 <SystemInit+0xf0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:243
    }
  }
  MCG->C4 = ((SYSTEM_MCG_C4_VALUE)  & (uint8_t)(~(MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK))) | (MCG->C4 & (MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK));  /** Set C4 (FLL output; trim values not changed) */
    4d38:	78da      	ldrb	r2, [r3, #3]
    4d3a:	f002 021f 	and.w	r2, r2, #31
    4d3e:	70da      	strb	r2, [r3, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:249
#endif  /** MCG_MODE */

   /** Common for all MCG modes */

   /** PLL clock can be used to generate clock for some devices regardless of clock generator (MCGOUTCLK) mode. */
  MCG->C5 = (SYSTEM_MCG_C5_VALUE) & (uint8_t)(~(MCG_C5_PLLCLKEN0_MASK));  /** Set C5 (PLL settings, PLL reference divider etc.) */
    4d40:	2202      	movs	r2, #2
    4d42:	711a      	strb	r2, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:250
  MCG->C6 = (SYSTEM_MCG_C6_VALUE) & (uint8_t)~(MCG_C6_PLLS_MASK);  /** Set C6 (PLL select, VCO divider etc.) */
    4d44:	2206      	movs	r2, #6
    4d46:	715a      	strb	r2, [r3, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:259
   /** BLPE, PEE and PBE MCG mode specific */

#if (MCG_MODE == MCG_MODE_BLPE)
  MCG->C2 |= (MCG_C2_LP_MASK);          /** Disable FLL and PLL in bypass mode */
#elif ((MCG_MODE == MCG_MODE_PBE) || (MCG_MODE == MCG_MODE_PEE))
  MCG->C6 |= (MCG_C6_PLLS_MASK);        /** Set C6 (PLL select, VCO divider etc.) */
    4d48:	795a      	ldrb	r2, [r3, #5]
    4d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4d4e:	715a      	strb	r2, [r3, #5]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:260 (discriminator 1)
  while((MCG->S & MCG_S_LOCK0_MASK) == 0x00U) {  /** Wait until PLL is locked*/
    4d50:	4b12      	ldr	r3, [pc, #72]	; (4d9c <SystemInit+0x15c>)
    4d52:	799a      	ldrb	r2, [r3, #6]
    4d54:	0652      	lsls	r2, r2, #25
    4d56:	d5fb      	bpl.n	4d50 <SystemInit+0x110>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:263
  }
  #if (MCG_MODE == MCG_MODE_PEE)
  MCG->C1 &= (uint8_t)~(MCG_C1_CLKS_MASK);
    4d58:	781a      	ldrb	r2, [r3, #0]
    4d5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    4d5e:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:286 (discriminator 1)
  }
#elif ((MCG_MODE == MCG_MODE_FBE) || (MCG_MODE == MCG_MODE_PBE) || (MCG_MODE == MCG_MODE_BLPE))
  while((MCG->S & MCG_S_CLKST_MASK) != 0x08U) {  /** Wait until external reference clock is selected as MCG output */
  }
#elif (MCG_MODE == MCG_MODE_PEE)
  while((MCG->S & MCG_S_CLKST_MASK) != 0x0CU) {  /** Wait until output of the PLL is selected */
    4d60:	799a      	ldrb	r2, [r3, #6]
    4d62:	f002 020c 	and.w	r2, r2, #12
    4d66:	2a0c      	cmp	r2, #12
    4d68:	d1fa      	bne.n	4d60 <SystemInit+0x120>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/MK64F12/startup/system_MK64F12.c:296
  while(SMC->PMSTAT != 0x04U) {         /** Wait until the system is in VLPR mode */
  }
#endif

#if defined(SYSTEM_SIM_CLKDIV2_VALUE)
  SIM->CLKDIV2 = ((SIM->CLKDIV2) & (uint32_t)(~(SIM_CLKDIV2_USBFRAC_MASK | SIM_CLKDIV2_USBDIV_MASK))) | ((SYSTEM_SIM_CLKDIV2_VALUE) & (SIM_CLKDIV2_USBFRAC_MASK | SIM_CLKDIV2_USBDIV_MASK));  /** Selects the USB clock divider. */
    4d6a:	4a08      	ldr	r2, [pc, #32]	; (4d8c <SystemInit+0x14c>)
    4d6c:	f241 0348 	movw	r3, #4168	; 0x1048
    4d70:	58d1      	ldr	r1, [r2, r3]
    4d72:	f021 010f 	bic.w	r1, r1, #15
    4d76:	f041 0109 	orr.w	r1, r1, #9
    4d7a:	50d1      	str	r1, [r2, r3]
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	e000ed00 	.word	0xe000ed00
    4d84:	40052000 	.word	0x40052000
    4d88:	4007d000 	.word	0x4007d000
    4d8c:	40047000 	.word	0x40047000
    4d90:	4003d000 	.word	0x4003d000
    4d94:	4007e000 	.word	0x4007e000
    4d98:	40065000 	.word	0x40065000
    4d9c:	40064000 	.word	0x40064000

00004da0 <init_data_bss>:
init_data_bss():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:82
    extern uint32_t __VECTOR_RAM[];
    extern uint32_t __RAM_VECTOR_TABLE_SIZE_BYTES[];
    uint32_t __RAM_VECTOR_TABLE_SIZE = (uint32_t)(__RAM_VECTOR_TABLE_SIZE_BYTES);
#endif

    if (__VECTOR_RAM != __VECTOR_TABLE)
    4da0:	4b15      	ldr	r3, [pc, #84]	; (4df8 <init_data_bss+0x58>)
    4da2:	4916      	ldr	r1, [pc, #88]	; (4dfc <init_data_bss+0x5c>)
    4da4:	428b      	cmp	r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:59
 *   __CC_ARM   : KEIL
 *   __ICCARM__ : IAR
 *
 *END*/
void init_data_bss(void)
{
    4da6:	b510      	push	{r4, lr}
    4da8:	461a      	mov	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:82
    extern uint32_t __VECTOR_RAM[];
    extern uint32_t __RAM_VECTOR_TABLE_SIZE_BYTES[];
    uint32_t __RAM_VECTOR_TABLE_SIZE = (uint32_t)(__RAM_VECTOR_TABLE_SIZE_BYTES);
#endif

    if (__VECTOR_RAM != __VECTOR_TABLE)
    4daa:	d00d      	beq.n	4dc8 <init_data_bss+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:85
    {
         /** Copy the vector table from ROM to RAM */
        for (n = 0; n < ((uint32_t)__RAM_VECTOR_TABLE_SIZE)/sizeof(uint32_t); n++)
    4dac:	4c14      	ldr	r4, [pc, #80]	; (4e00 <init_data_bss+0x60>)
    4dae:	2300      	movs	r3, #0
    4db0:	08a4      	lsrs	r4, r4, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:85 (discriminator 1)
    4db2:	42a3      	cmp	r3, r4
    4db4:	d005      	beq.n	4dc2 <init_data_bss+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:87 (discriminator 2)
        {
            __VECTOR_RAM[n] = __VECTOR_TABLE[n];
    4db6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    4dba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:85 (discriminator 2)
#endif

    if (__VECTOR_RAM != __VECTOR_TABLE)
    {
         /** Copy the vector table from ROM to RAM */
        for (n = 0; n < ((uint32_t)__RAM_VECTOR_TABLE_SIZE)/sizeof(uint32_t); n++)
    4dbe:	3301      	adds	r3, #1
    4dc0:	e7f7      	b.n	4db2 <init_data_bss+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:90
        {
            __VECTOR_RAM[n] = __VECTOR_TABLE[n];
        }
         /** Point the VTOR to the position of vector table */
        SCB->VTOR = (uint32_t)__VECTOR_RAM;
    4dc2:	4b10      	ldr	r3, [pc, #64]	; (4e04 <init_data_bss+0x64>)
    4dc4:	609a      	str	r2, [r3, #8]
    4dc6:	e001      	b.n	4dcc <init_data_bss+0x2c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:95
    }
    else
    {
         /** Point the VTOR to the position of vector table */
        SCB->VTOR = (uint32_t)__VECTOR_TABLE;
    4dc8:	4a0e      	ldr	r2, [pc, #56]	; (4e04 <init_data_bss+0x64>)
    4dca:	6093      	str	r3, [r2, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:113
    extern uint32_t __DATA_RAM[];
    extern char __DATA_END[];
    data_ram = (uint8_t *)__DATA_RAM;
    data_rom = (uint8_t *)__DATA_ROM;
    data_rom_end  = (uint8_t *)__DATA_END;
    n = data_rom_end - data_rom;
    4dcc:	4a0e      	ldr	r2, [pc, #56]	; (4e08 <init_data_bss+0x68>)
    4dce:	490f      	ldr	r1, [pc, #60]	; (4e0c <init_data_bss+0x6c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:117
#endif

     /** Copy initialized data from ROM to RAM */
    while (n--)
    4dd0:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:113
    extern uint32_t __DATA_RAM[];
    extern char __DATA_END[];
    data_ram = (uint8_t *)__DATA_RAM;
    data_rom = (uint8_t *)__DATA_ROM;
    data_rom_end  = (uint8_t *)__DATA_END;
    n = data_rom_end - data_rom;
    4dd2:	1a89      	subs	r1, r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:117 (discriminator 1)
#endif

     /** Copy initialized data from ROM to RAM */
    while (n--)
    4dd4:	428b      	cmp	r3, r1
    4dd6:	d004      	beq.n	4de2 <init_data_bss+0x42>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:119
    {
        *data_ram++ = *data_rom++;
    4dd8:	480d      	ldr	r0, [pc, #52]	; (4e10 <init_data_bss+0x70>)
    4dda:	5cd4      	ldrb	r4, [r2, r3]
    4ddc:	541c      	strb	r4, [r3, r0]
    4dde:	3301      	adds	r3, #1
    4de0:	e7f8      	b.n	4dd4 <init_data_bss+0x34>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:131
    bss_start = (uint8_t *)__START_BSS;
    bss_end = (uint8_t *)__END_BSS;
#endif

     /** Clear the zero-initialized data section */
    n = bss_end - bss_start;
    4de2:	4a0c      	ldr	r2, [pc, #48]	; (4e14 <init_data_bss+0x74>)
    4de4:	490c      	ldr	r1, [pc, #48]	; (4e18 <init_data_bss+0x78>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:132
    while(n--)
    4de6:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:131
    bss_start = (uint8_t *)__START_BSS;
    bss_end = (uint8_t *)__END_BSS;
#endif

     /** Clear the zero-initialized data section */
    n = bss_end - bss_start;
    4de8:	1a89      	subs	r1, r1, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:132 (discriminator 1)
    while(n--)
    4dea:	428b      	cmp	r3, r1
    4dec:	d003      	beq.n	4df6 <init_data_bss+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:134
    {
        *bss_start++ = 0;
    4dee:	2000      	movs	r0, #0
    4df0:	54d0      	strb	r0, [r2, r3]
    4df2:	3301      	adds	r3, #1
    4df4:	e7f9      	b.n	4dea <init_data_bss+0x4a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/SDK/platform/devices/startup.c:137
    }
#endif /* !__CC_ARM && !__ICCARM__*/
}
    4df6:	bd10      	pop	{r4, pc}
    4df8:	1fff0000 	.word	0x1fff0000
    4dfc:	00000000 	.word	0x00000000
    4e00:	00000400 	.word	0x00000400
    4e04:	e000ed00 	.word	0xe000ed00
    4e08:	00008be8 	.word	0x00008be8
    4e0c:	00008d0c 	.word	0x00008d0c
    4e10:	1fff0400 	.word	0x1fff0400
    4e14:	1fff0540 	.word	0x1fff0540
    4e18:	1fff9f58 	.word	0x1fff9f58

00004e1c <Components_Init>:
Components_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:56
 * Initialization of components (with exception for Peripheral
 * Initialization Components which are initialized in
 * Peripherals_Init() method).
 */
void Components_Init()
{
    4e1c:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:58
  /*! DMA_controller Auto initialization start */
  EDMA_DRV_Init(&DMA_controller_State,&DMA_controller_InitConfig0);
    4e1e:	4927      	ldr	r1, [pc, #156]	; (4ebc <Components_Init+0xa0>)
    4e20:	4827      	ldr	r0, [pc, #156]	; (4ec0 <Components_Init+0xa4>)
    4e22:	f7ff f8f1 	bl	4008 <EDMA_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:62
  /*! DMA_controller Auto initialization end */

  /*! OLED_SPI Auto initialization start */
  DSPI_DRV_EdmaMasterInit(FSL_OLED_SPI, &OLED_SPI_MasterState, &OLED_SPI_MasterConfig, &OLED_SPI_dmaTcd);
    4e26:	4b27      	ldr	r3, [pc, #156]	; (4ec4 <Components_Init+0xa8>)
    4e28:	4927      	ldr	r1, [pc, #156]	; (4ec8 <Components_Init+0xac>)
    4e2a:	4a28      	ldr	r2, [pc, #160]	; (4ecc <Components_Init+0xb0>)
    4e2c:	2002      	movs	r0, #2
    4e2e:	f7ff f9ff 	bl	4230 <DSPI_DRV_EdmaMasterInit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:63
  DSPI_DRV_EdmaMasterConfigureBus(FSL_OLED_SPI, &OLED_SPI_BusConfig, &OLED_SPI_calculatedBaudRate);
    4e32:	4927      	ldr	r1, [pc, #156]	; (4ed0 <Components_Init+0xb4>)
    4e34:	4a27      	ldr	r2, [pc, #156]	; (4ed4 <Components_Init+0xb8>)
    4e36:	2002      	movs	r0, #2
    4e38:	f7ff fab2 	bl	43a0 <DSPI_DRV_EdmaMasterConfigureBus>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:67
  /*! OLED_SPI Auto initialization end */

  /*! FLASH_SPI Auto initialization start */
  DSPI_DRV_EdmaMasterInit(FSL_FLASH_SPI, &FLASH_SPI_MasterState, &FLASH_SPI_MasterConfig, &FLASH_SPI_dmaTcd);
    4e3c:	4b26      	ldr	r3, [pc, #152]	; (4ed8 <Components_Init+0xbc>)
    4e3e:	4927      	ldr	r1, [pc, #156]	; (4edc <Components_Init+0xc0>)
    4e40:	4a27      	ldr	r2, [pc, #156]	; (4ee0 <Components_Init+0xc4>)
    4e42:	2001      	movs	r0, #1
    4e44:	f7ff f9f4 	bl	4230 <DSPI_DRV_EdmaMasterInit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:68
  DSPI_DRV_EdmaMasterConfigureBus(FSL_FLASH_SPI, &FLASH_SPI_BusConfig, &FLASH_SPI_calculatedBaudRate);
    4e48:	4a26      	ldr	r2, [pc, #152]	; (4ee4 <Components_Init+0xc8>)
    4e4a:	4927      	ldr	r1, [pc, #156]	; (4ee8 <Components_Init+0xcc>)
    4e4c:	2001      	movs	r0, #1
    4e4e:	f7ff faa7 	bl	43a0 <DSPI_DRV_EdmaMasterConfigureBus>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:72
  /*! FLASH_SPI Auto initialization end */

  /*! GPIO Auto initialization start */
  GPIO_DRV_Init(NULL,NULL);
    4e52:	2000      	movs	r0, #0
    4e54:	4601      	mov	r1, r0
    4e56:	f7ff f82b 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:76
  /*! GPIO Auto initialization end */

  /*! KW40_UART Auto initialization start */
  UART_DRV_Init(FSL_KW40_UART,&KW40_UART_State,&KW40_UART_InitConfig0);
    4e5a:	4924      	ldr	r1, [pc, #144]	; (4eec <Components_Init+0xd0>)
    4e5c:	4a24      	ldr	r2, [pc, #144]	; (4ef0 <Components_Init+0xd4>)
    4e5e:	2004      	movs	r0, #4
    4e60:	f7fe fa5c 	bl	331c <UART_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:79
  /*! KW40_UART Auto initialization end */
  /*! DEBUG_UART Auto initialization start */
  UART_DRV_Init(FSL_DEBUG_UART,&DEBUG_UART_State,&DEBUG_UART_InitConfig0);
    4e64:	4a23      	ldr	r2, [pc, #140]	; (4ef4 <Components_Init+0xd8>)
    4e66:	4924      	ldr	r1, [pc, #144]	; (4ef8 <Components_Init+0xdc>)
    4e68:	2003      	movs	r0, #3
    4e6a:	f7fe fa57 	bl	331c <UART_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:82
  /*! DEBUG_UART Auto initialization end */
  /*! FS_I2C Auto initialization start */
  I2C_DRV_MasterInit(FSL_FS_I2C, &FS_I2C_MasterState);
    4e6e:	4923      	ldr	r1, [pc, #140]	; (4efc <Components_Init+0xe0>)
    4e70:	2001      	movs	r0, #1
    4e72:	f7fe fd57 	bl	3924 <I2C_DRV_MasterInit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:83
  I2C_DRV_MasterSetBaudRate(FSL_FS_I2C, &FS_I2C_MasterConfig);
    4e76:	2001      	movs	r0, #1
    4e78:	4921      	ldr	r1, [pc, #132]	; (4f00 <Components_Init+0xe4>)
    4e7a:	f7fe fdbf 	bl	39fc <I2C_DRV_MasterSetBaudRate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:87
  /*! FS_I2C Auto initialization end */

  /*! NFS_I2C Auto initialization start */
  I2C_DRV_MasterInit(FSL_NFS_I2C, &NFS_I2C_MasterState);
    4e7e:	4921      	ldr	r1, [pc, #132]	; (4f04 <Components_Init+0xe8>)
    4e80:	2000      	movs	r0, #0
    4e82:	f7fe fd4f 	bl	3924 <I2C_DRV_MasterInit>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:88
  I2C_DRV_MasterSetBaudRate(FSL_NFS_I2C, &NFS_I2C_MasterConfig);
    4e86:	4920      	ldr	r1, [pc, #128]	; (4f08 <Components_Init+0xec>)
    4e88:	2000      	movs	r0, #0
    4e8a:	f7fe fdb7 	bl	39fc <I2C_DRV_MasterSetBaudRate>
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
    4e8e:	4b1f      	ldr	r3, [pc, #124]	; (4f0c <Components_Init+0xf0>)
    4e90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4e94:	601a      	str	r2, [r3, #0]
Components_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:96
  /*! PWR_Manager Auto initialization start */
//  POWER_SYS_Init(powerConfigsArr, 2U, NULL , 0U);
  INT_SYS_EnableIRQ(LLWU_IRQn);
  /*! PWR_Manager Auto initialization end */
  /*! CLOCK Auto initialization start */
  RTC_DRV_Init(FSL_CLOCK);
    4e96:	2000      	movs	r0, #0
    4e98:	f7fe fbe8 	bl	366c <RTC_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:100
  /*! CLOCK Auto initialization end */

  /*! BATTERY_ADC Auto initialization start */
  ADC16_DRV_Init(FSL_BATTERY_ADC, &BATTERY_ADC_InitConfig);
    4e9c:	491c      	ldr	r1, [pc, #112]	; (4f10 <Components_Init+0xf4>)
    4e9e:	2000      	movs	r0, #0
    4ea0:	f7ff fe68 	bl	4b74 <ADC16_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:101
  ADC16_DRV_ConfigConvChn(FSL_BATTERY_ADC, 0U, &BATTERY_ADC_ChnConfig);
    4ea4:	2000      	movs	r0, #0
    4ea6:	4601      	mov	r1, r0
    4ea8:	4a1a      	ldr	r2, [pc, #104]	; (4f14 <Components_Init+0xf8>)
    4eaa:	f7ff fead 	bl	4c08 <ADC16_DRV_ConfigConvChn>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:105
  /*! BATTERY_ADC Auto initialization end */

  /*! sensor_timer Auto initialization start */
  LPTMR_DRV_Init(FSL_SENSOR_TIMER,&sensor_timer_State,&sensor_timer_cfg);
    4eae:	2000      	movs	r0, #0
    4eb0:	4919      	ldr	r1, [pc, #100]	; (4f18 <Components_Init+0xfc>)
    4eb2:	4a1a      	ldr	r2, [pc, #104]	; (4f1c <Components_Init+0x100>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:107
  /*! sensor_timer Auto initialization end */
}
    4eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/Cpu.c:105
  ADC16_DRV_Init(FSL_BATTERY_ADC, &BATTERY_ADC_InitConfig);
  ADC16_DRV_ConfigConvChn(FSL_BATTERY_ADC, 0U, &BATTERY_ADC_ChnConfig);
  /*! BATTERY_ADC Auto initialization end */

  /*! sensor_timer Auto initialization start */
  LPTMR_DRV_Init(FSL_SENSOR_TIMER,&sensor_timer_State,&sensor_timer_cfg);
    4eb8:	f7fe bc34 	b.w	3724 <LPTMR_DRV_Init>
    4ebc:	000082ac 	.word	0x000082ac
    4ec0:	1fff0cd0 	.word	0x1fff0cd0
    4ec4:	1fff0e80 	.word	0x1fff0e80
    4ec8:	1fff0e10 	.word	0x1fff0e10
    4ecc:	0000841c 	.word	0x0000841c
    4ed0:	00008410 	.word	0x00008410
    4ed4:	1fff0e0c 	.word	0x1fff0e0c
    4ed8:	1fff0d80 	.word	0x1fff0d80
    4edc:	1fff0d14 	.word	0x1fff0d14
    4ee0:	000082ae 	.word	0x000082ae
    4ee4:	1fff0da0 	.word	0x1fff0da0
    4ee8:	000082b4 	.word	0x000082b4
    4eec:	1fff0dc0 	.word	0x1fff0dc0
    4ef0:	00008400 	.word	0x00008400
    4ef4:	000082a4 	.word	0x000082a4
    4ef8:	1fff0ca0 	.word	0x1fff0ca0
    4efc:	1fff0da4 	.word	0x1fff0da4
    4f00:	000082c0 	.word	0x000082c0
    4f04:	1fff0df0 	.word	0x1fff0df0
    4f08:	00008408 	.word	0x00008408
    4f0c:	e000e100 	.word	0xe000e100
    4f10:	00008292 	.word	0x00008292
    4f14:	0000829e 	.word	0x0000829e
    4f18:	1fff0ea0 	.word	0x1fff0ea0
    4f1c:	00008421 	.word	0x00008421

00004f20 <UART3_RX_TX_IRQHandler>:
UART3_RX_TX_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DEBUG_UART.c:76

 /** Implementation of UART3 handler named in startup code. */
extern void UART_DRV_IRQHandler(uint32_t instance);
void UART3_RX_TX_IRQHandler(void)
{
  UART_DRV_IRQHandler(FSL_DEBUG_UART);
    4f20:	2003      	movs	r0, #3
    4f22:	f7fe bb15 	b.w	3550 <UART_DRV_IRQHandler>

00004f26 <DMA0_IRQHandler>:
DMA0_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:66
};


/*! @brief Dma channel 0 ISR */
void DMA0_IRQHandler(void){
   EDMA_DRV_IRQHandler(0U);
    4f26:	2000      	movs	r0, #0
    4f28:	f7ff b8fe 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f2c <DMA1_IRQHandler>:
DMA1_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:70
}
/*! @brief Dma channel 1 ISR */
void DMA1_IRQHandler(void){
   EDMA_DRV_IRQHandler(1U);
    4f2c:	2001      	movs	r0, #1
    4f2e:	f7ff b8fb 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f32 <DMA2_IRQHandler>:
DMA2_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:74
}
/*! @brief Dma channel 2 ISR */
void DMA2_IRQHandler(void){
   EDMA_DRV_IRQHandler(2U);
    4f32:	2002      	movs	r0, #2
    4f34:	f7ff b8f8 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f38 <DMA3_IRQHandler>:
DMA3_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:78
}
/*! @brief Dma channel 3 ISR */
void DMA3_IRQHandler(void){
   EDMA_DRV_IRQHandler(3U);
    4f38:	2003      	movs	r0, #3
    4f3a:	f7ff b8f5 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f3e <DMA4_IRQHandler>:
DMA4_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:82
}
/*! @brief Dma channel 4 ISR */
void DMA4_IRQHandler(void){
   EDMA_DRV_IRQHandler(4U);
    4f3e:	2004      	movs	r0, #4
    4f40:	f7ff b8f2 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f44 <DMA5_IRQHandler>:
DMA5_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:86
}
/*! @brief Dma channel 5 ISR */
void DMA5_IRQHandler(void){
   EDMA_DRV_IRQHandler(5U);
    4f44:	2005      	movs	r0, #5
    4f46:	f7ff b8ef 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f4a <DMA6_IRQHandler>:
DMA6_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:90
}
/*! @brief Dma channel 6 ISR */
void DMA6_IRQHandler(void){
   EDMA_DRV_IRQHandler(6U);
    4f4a:	2006      	movs	r0, #6
    4f4c:	f7ff b8ec 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f50 <DMA7_IRQHandler>:
DMA7_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:94
}
/*! @brief Dma channel 7 ISR */
void DMA7_IRQHandler(void){
   EDMA_DRV_IRQHandler(7U);
    4f50:	2007      	movs	r0, #7
    4f52:	f7ff b8e9 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f56 <DMA8_IRQHandler>:
DMA8_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:98
}
/*! @brief Dma channel 8 ISR */
void DMA8_IRQHandler(void){
   EDMA_DRV_IRQHandler(8U);
    4f56:	2008      	movs	r0, #8
    4f58:	f7ff b8e6 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f5c <DMA9_IRQHandler>:
DMA9_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:102
}
/*! @brief Dma channel 9 ISR */
void DMA9_IRQHandler(void){
   EDMA_DRV_IRQHandler(9U);
    4f5c:	2009      	movs	r0, #9
    4f5e:	f7ff b8e3 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f62 <DMA10_IRQHandler>:
DMA10_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:106
}
/*! @brief Dma channel 10 ISR */
void DMA10_IRQHandler(void){
   EDMA_DRV_IRQHandler(10U);
    4f62:	200a      	movs	r0, #10
    4f64:	f7ff b8e0 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f68 <DMA11_IRQHandler>:
DMA11_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:110
}
/*! @brief Dma channel 11 ISR */
void DMA11_IRQHandler(void){
   EDMA_DRV_IRQHandler(11U);
    4f68:	200b      	movs	r0, #11
    4f6a:	f7ff b8dd 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f6e <DMA12_IRQHandler>:
DMA12_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:114
}
/*! @brief Dma channel 12 ISR */
void DMA12_IRQHandler(void){
   EDMA_DRV_IRQHandler(12U);
    4f6e:	200c      	movs	r0, #12
    4f70:	f7ff b8da 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f74 <DMA13_IRQHandler>:
DMA13_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:118
}
/*! @brief Dma channel 13 ISR */
void DMA13_IRQHandler(void){
   EDMA_DRV_IRQHandler(13U);
    4f74:	200d      	movs	r0, #13
    4f76:	f7ff b8d7 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f7a <DMA14_IRQHandler>:
DMA14_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:122
}
/*! @brief Dma channel 14 ISR */
void DMA14_IRQHandler(void){
   EDMA_DRV_IRQHandler(14U);
    4f7a:	200e      	movs	r0, #14
    4f7c:	f7ff b8d4 	b.w	4128 <EDMA_DRV_IRQHandler>

00004f80 <DMA15_IRQHandler>:
DMA15_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/DMA_controller.c:126
}
/*! @brief Dma channel 15 ISR */
void DMA15_IRQHandler(void){
   EDMA_DRV_IRQHandler(15U);
    4f80:	200f      	movs	r0, #15
    4f82:	f7ff b8d1 	b.w	4128 <EDMA_DRV_IRQHandler>
	...

00004f88 <UART4_RX_TX_IRQHandler>:
UART4_RX_TX_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/KW40_UART.c:76

 /** Implementation of UART4 handler named in startup code. */
extern void UART_DRV_IRQHandler(uint32_t instance);
void UART4_RX_TX_IRQHandler(void)
{
    if ( (UART_BRD_C2_RIE( UART4_BASE_PTR )) && (UART_BRD_S2_RXEDGIF( UART4_BASE_PTR )) )
    4f88:	4b05      	ldr	r3, [pc, #20]	; (4fa0 <UART4_RX_TX_IRQHandler+0x18>)
    4f8a:	781b      	ldrb	r3, [r3, #0]
    4f8c:	b123      	cbz	r3, 4f98 <UART4_RX_TX_IRQHandler+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/KW40_UART.c:76 (discriminator 1)
    4f8e:	4b05      	ldr	r3, [pc, #20]	; (4fa4 <UART4_RX_TX_IRQHandler+0x1c>)
    4f90:	781a      	ldrb	r2, [r3, #0]
    4f92:	b10a      	cbz	r2, 4f98 <UART4_RX_TX_IRQHandler+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/KW40_UART.c:79
    {
        // clear the active edge interrupt flag
        UART_BWR_S2_RXEDGIF( UART4_BASE_PTR , 1 );
    4f94:	2201      	movs	r2, #1
    4f96:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/KW40_UART.c:82
    }

    UART_DRV_IRQHandler(FSL_KW40_UART);
    4f98:	2004      	movs	r0, #4
    4f9a:	f7fe bad9 	b.w	3550 <UART_DRV_IRQHandler>
    4f9e:	bf00      	nop
    4fa0:	43d40074 	.word	0x43d40074
    4fa4:	43d400b8 	.word	0x43d400b8

00004fa8 <hardware_init>:
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    4fa8:	4b1d      	ldr	r3, [pc, #116]	; (5020 <hardware_init+0x78>)
hardware_init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1634
  SIM_HAL_EnableClock(SIM,kSimClockGatePortC);
  SIM_HAL_EnableClock(SIM,kSimClockGatePortD);
  SIM_HAL_EnableClock(SIM,kSimClockGatePortE);

   /** Setup board clock source. */
  g_xtal0ClkFreq = 12000000U;            /** Value of the external crystal or oscillator clock frequency of the system oscillator (OSC) in Hz */
    4faa:	4a1e      	ldr	r2, [pc, #120]	; (5024 <hardware_init+0x7c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1624
#include "fsl_device_registers.h"
#include "board.h"
#include "fsl_sim_hal.h"
#include "fsl_mcg_hal.h"

void hardware_init(void) {
    4fac:	b510      	push	{r4, lr}
SIM_HAL_EnableClock():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\src\sim\mk64f12/fsl_sim_hal_mk64f12.h:480
    4fae:	2401      	movs	r4, #1
    4fb0:	601c      	str	r4, [r3, #0]
    4fb2:	605c      	str	r4, [r3, #4]
    4fb4:	609c      	str	r4, [r3, #8]
    4fb6:	60dc      	str	r4, [r3, #12]
    4fb8:	611c      	str	r4, [r3, #16]
hardware_init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1634
  SIM_HAL_EnableClock(SIM,kSimClockGatePortC);
  SIM_HAL_EnableClock(SIM,kSimClockGatePortD);
  SIM_HAL_EnableClock(SIM,kSimClockGatePortE);

   /** Setup board clock source. */
  g_xtal0ClkFreq = 12000000U;            /** Value of the external crystal or oscillator clock frequency of the system oscillator (OSC) in Hz */
    4fba:	4b1b      	ldr	r3, [pc, #108]	; (5028 <hardware_init+0x80>)
    4fbc:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1635
  g_xtalRtcClkFreq = 32768U;             /** Value of the external 32k crystal or oscillator clock frequency of the RTC in Hz */
    4fbe:	4b1b      	ldr	r3, [pc, #108]	; (502c <hardware_init+0x84>)
    4fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1637

  init_gpio_pins(PORTA_IDX);
    4fc4:	2000      	movs	r0, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1635
  SIM_HAL_EnableClock(SIM,kSimClockGatePortD);
  SIM_HAL_EnableClock(SIM,kSimClockGatePortE);

   /** Setup board clock source. */
  g_xtal0ClkFreq = 12000000U;            /** Value of the external crystal or oscillator clock frequency of the system oscillator (OSC) in Hz */
  g_xtalRtcClkFreq = 32768U;             /** Value of the external 32k crystal or oscillator clock frequency of the RTC in Hz */
    4fc6:	601a      	str	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1637

  init_gpio_pins(PORTA_IDX);
    4fc8:	f000 f832 	bl	5030 <init_gpio_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1638
  init_gpio_pins(PORTB_IDX);
    4fcc:	4620      	mov	r0, r4
    4fce:	f000 f82f 	bl	5030 <init_gpio_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1639
  init_gpio_pins(PORTC_IDX);
    4fd2:	2002      	movs	r0, #2
    4fd4:	f000 f82c 	bl	5030 <init_gpio_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1640
  init_gpio_pins(PORTD_IDX);
    4fd8:	2003      	movs	r0, #3
    4fda:	f000 f829 	bl	5030 <init_gpio_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1641
  init_gpio_pins(PORTE_IDX);
    4fde:	2004      	movs	r0, #4
    4fe0:	f000 f826 	bl	5030 <init_gpio_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1642
  init_i2c_pins(I2C0_IDX);
    4fe4:	2000      	movs	r0, #0
    4fe6:	f000 f8c7 	bl	5178 <init_i2c_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1643
  init_i2c_pins(I2C1_IDX);
    4fea:	4620      	mov	r0, r4
    4fec:	f000 f8c4 	bl	5178 <init_i2c_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1644
  init_jtag_pins(JTAG_IDX);
    4ff0:	2000      	movs	r0, #0
    4ff2:	f000 f8ed 	bl	51d0 <init_jtag_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1645
  init_llwu_pins(LLWU_IDX);
    4ff6:	2000      	movs	r0, #0
    4ff8:	f000 f90e 	bl	5218 <init_llwu_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1646
  init_spi_pins(SPI1_IDX);
    4ffc:	4620      	mov	r0, r4
    4ffe:	f000 f92b 	bl	5258 <init_spi_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1647
  init_spi_pins(SPI2_IDX);
    5002:	2002      	movs	r0, #2
    5004:	f000 f928 	bl	5258 <init_spi_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1648
  init_tpiu_pins(TPIU_IDX);
    5008:	2000      	movs	r0, #0
    500a:	f000 f95b 	bl	52c4 <init_tpiu_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1649
  init_uart_pins(UART3_IDX);
    500e:	2003      	movs	r0, #3
    5010:	f000 f964 	bl	52dc <init_uart_pins>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1650
  init_uart_pins(UART4_IDX);
    5014:	2004      	movs	r0, #4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1651
}
    5016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/hardware_init.c:1650
  init_llwu_pins(LLWU_IDX);
  init_spi_pins(SPI1_IDX);
  init_spi_pins(SPI2_IDX);
  init_tpiu_pins(TPIU_IDX);
  init_uart_pins(UART3_IDX);
  init_uart_pins(UART4_IDX);
    501a:	f000 b95f 	b.w	52dc <init_uart_pins>
    501e:	bf00      	nop
    5020:	42900724 	.word	0x42900724
    5024:	00b71b00 	.word	0x00b71b00
    5028:	1fff0c50 	.word	0x1fff0c50
    502c:	1fff0c54 	.word	0x1fff0c54

00005030 <init_gpio_pins>:
init_gpio_pins():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/pin_mux.c:1635
* Description   : GPIO method sets registers according routing settings.
* Call this method code to route desired pins.
*END*/
void init_gpio_pins(uint32_t instance)
{
  switch(instance) {
    5030:	2804      	cmp	r0, #4
    5032:	f200 8096 	bhi.w	5162 <init_gpio_pins+0x132>
    5036:	e8df f000 	tbb	[pc, r0]
    503a:	0d03      	.short	0x0d03
    503c:	612f      	.short	0x612f
    503e:	83          	.byte	0x83
    503f:	00          	.byte	0x00
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:256
static inline void PORT_HAL_SetMuxMode(PORT_Type * base,
                                       uint32_t pin,
                                       port_mux_t mux)
{
    assert(pin < 32U);
    PORT_BWR_PCR_MUX(base, pin, mux);
    5040:	4a48      	ldr	r2, [pc, #288]	; (5164 <init_gpio_pins+0x134>)
    5042:	6f53      	ldr	r3, [r2, #116]	; 0x74
    5044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    5048:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    504c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5050:	6753      	str	r3, [r2, #116]	; 0x74
    5052:	4770      	bx	lr
    5054:	4b44      	ldr	r3, [pc, #272]	; (5168 <init_gpio_pins+0x138>)
    5056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5058:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    505c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5064:	631a      	str	r2, [r3, #48]	; 0x30
    5066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5068:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    506c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5074:	641a      	str	r2, [r3, #64]	; 0x40
    5076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    5078:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    507c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5084:	651a      	str	r2, [r3, #80]	; 0x50
    5086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5088:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    508c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5094:	65da      	str	r2, [r3, #92]	; 0x5c
    5096:	4770      	bx	lr
    5098:	4b34      	ldr	r3, [pc, #208]	; (516c <init_gpio_pins+0x13c>)
    509a:	685a      	ldr	r2, [r3, #4]
    509c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    50a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    50a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    50a8:	605a      	str	r2, [r3, #4]
    50aa:	6a1a      	ldr	r2, [r3, #32]
    50ac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    50b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    50b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    50b8:	621a      	str	r2, [r3, #32]
    50ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    50bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    50c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    50c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    50c8:	625a      	str	r2, [r3, #36]	; 0x24
    50ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    50cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    50d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    50d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    50d8:	631a      	str	r2, [r3, #48]	; 0x30
    50da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    50dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    50e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    50e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    50e8:	635a      	str	r2, [r3, #52]	; 0x34
    50ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    50ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    50f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    50f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    50f8:	639a      	str	r2, [r3, #56]	; 0x38
    50fa:	4770      	bx	lr
    50fc:	4b1c      	ldr	r3, [pc, #112]	; (5170 <init_gpio_pins+0x140>)
    50fe:	681a      	ldr	r2, [r3, #0]
    5100:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5104:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    510c:	601a      	str	r2, [r3, #0]
    510e:	691a      	ldr	r2, [r3, #16]
    5110:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5114:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    511c:	611a      	str	r2, [r3, #16]
    511e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5120:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5124:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    512c:	639a      	str	r2, [r3, #56]	; 0x38
    512e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    5130:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    513c:	63da      	str	r2, [r3, #60]	; 0x3c
    513e:	4770      	bx	lr
    5140:	4b0c      	ldr	r3, [pc, #48]	; (5174 <init_gpio_pins+0x144>)
    5142:	699a      	ldr	r2, [r3, #24]
    5144:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5148:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    514c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5150:	619a      	str	r2, [r3, #24]
    5152:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    5154:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5158:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    515c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5160:	669a      	str	r2, [r3, #104]	; 0x68
    5162:	4770      	bx	lr
    5164:	40049000 	.word	0x40049000
    5168:	4004a000 	.word	0x4004a000
    516c:	4004b000 	.word	0x4004b000
    5170:	4004c000 	.word	0x4004c000
    5174:	4004d000 	.word	0x4004d000

00005178 <init_i2c_pins>:
init_i2c_pins():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/pin_mux.c:1732
* Description   : I2C method sets registers according routing settings.
* Call this method code to route desired pins.
*END*/
void init_i2c_pins(uint32_t instance)
{
  switch(instance) {
    5178:	b110      	cbz	r0, 5180 <init_i2c_pins+0x8>
    517a:	2801      	cmp	r0, #1
    517c:	d012      	beq.n	51a4 <init_i2c_pins+0x2c>
    517e:	4770      	bx	lr
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:256
    5180:	4b11      	ldr	r3, [pc, #68]	; (51c8 <init_i2c_pins+0x50>)
    5182:	681a      	ldr	r2, [r3, #0]
    5184:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5190:	601a      	str	r2, [r3, #0]
    5192:	685a      	ldr	r2, [r3, #4]
    5194:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    51a0:	605a      	str	r2, [r3, #4]
    51a2:	4770      	bx	lr
    51a4:	4b09      	ldr	r3, [pc, #36]	; (51cc <init_i2c_pins+0x54>)
    51a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    51a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    51ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    51b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    51b4:	629a      	str	r2, [r3, #40]	; 0x28
    51b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    51bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    51c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    51c4:	62da      	str	r2, [r3, #44]	; 0x2c
    51c6:	4770      	bx	lr
    51c8:	4004a000 	.word	0x4004a000
    51cc:	4004b000 	.word	0x4004b000

000051d0 <init_jtag_pins>:
    51d0:	4b10      	ldr	r3, [pc, #64]	; (5214 <init_jtag_pins+0x44>)
    51d2:	681a      	ldr	r2, [r3, #0]
    51d4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    51d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    51dc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    51e0:	601a      	str	r2, [r3, #0]
    51e2:	685a      	ldr	r2, [r3, #4]
    51e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    51e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    51ec:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    51f0:	605a      	str	r2, [r3, #4]
    51f2:	689a      	ldr	r2, [r3, #8]
    51f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    51f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    51fc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    5200:	609a      	str	r2, [r3, #8]
    5202:	68da      	ldr	r2, [r3, #12]
    5204:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5208:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    520c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    5210:	60da      	str	r2, [r3, #12]
    5212:	4770      	bx	lr
    5214:	40049000 	.word	0x40049000

00005218 <init_llwu_pins>:
    5218:	4a0d      	ldr	r2, [pc, #52]	; (5250 <init_llwu_pins+0x38>)
    521a:	6853      	ldr	r3, [r2, #4]
    521c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    5220:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5228:	6053      	str	r3, [r2, #4]
    522a:	4b0a      	ldr	r3, [pc, #40]	; (5254 <init_llwu_pins+0x3c>)
    522c:	681a      	ldr	r2, [r3, #0]
    522e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5232:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    523a:	601a      	str	r2, [r3, #0]
    523c:	691a      	ldr	r2, [r3, #16]
    523e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    524a:	611a      	str	r2, [r3, #16]
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	4004b000 	.word	0x4004b000
    5254:	4004c000 	.word	0x4004c000

00005258 <init_spi_pins>:
init_spi_pins():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/pin_mux.c:1837
* Description   : SPI method sets registers according routing settings.
* Call this method code to route desired pins.
*END*/
void init_spi_pins(uint32_t instance)
{
  switch(instance) {
    5258:	2801      	cmp	r0, #1
    525a:	d002      	beq.n	5262 <init_spi_pins+0xa>
    525c:	2802      	cmp	r0, #2
    525e:	d01a      	beq.n	5296 <init_spi_pins+0x3e>
    5260:	4770      	bx	lr
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:256
    5262:	4b16      	ldr	r3, [pc, #88]	; (52bc <init_spi_pins+0x64>)
    5264:	69da      	ldr	r2, [r3, #28]
    5266:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    526a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    526e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    5272:	61da      	str	r2, [r3, #28]
    5274:	695a      	ldr	r2, [r3, #20]
    5276:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    527a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    527e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    5282:	615a      	str	r2, [r3, #20]
    5284:	699a      	ldr	r2, [r3, #24]
    5286:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    528a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    528e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    5292:	619a      	str	r2, [r3, #24]
    5294:	4770      	bx	lr
    5296:	4b0a      	ldr	r3, [pc, #40]	; (52c0 <init_spi_pins+0x68>)
    5298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    529a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    529e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    52a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    52a6:	655a      	str	r2, [r3, #84]	; 0x54
    52a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    52aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    52ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    52b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    52b6:	659a      	str	r2, [r3, #88]	; 0x58
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop
    52bc:	4004c000 	.word	0x4004c000
    52c0:	4004a000 	.word	0x4004a000

000052c4 <init_tpiu_pins>:
    52c4:	4a04      	ldr	r2, [pc, #16]	; (52d8 <init_tpiu_pins+0x14>)
    52c6:	6893      	ldr	r3, [r2, #8]
    52c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    52cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    52d0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    52d4:	6093      	str	r3, [r2, #8]
    52d6:	4770      	bx	lr
    52d8:	40049000 	.word	0x40049000

000052dc <init_uart_pins>:
init_uart_pins():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/pin_mux.c:1908
* Description   : UART method sets registers according routing settings.
* Call this method code to route desired pins.
*END*/
void init_uart_pins(uint32_t instance)
{
  switch(instance) {
    52dc:	2803      	cmp	r0, #3
    52de:	d002      	beq.n	52e6 <init_uart_pins+0xa>
    52e0:	2804      	cmp	r0, #4
    52e2:	d012      	beq.n	530a <init_uart_pins+0x2e>
    52e4:	4770      	bx	lr
PORT_HAL_SetMuxMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:256
    52e6:	4b12      	ldr	r3, [pc, #72]	; (5330 <init_uart_pins+0x54>)
    52e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    52ea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    52ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    52f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    52f6:	641a      	str	r2, [r3, #64]	; 0x40
    52f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    52fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    52fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5302:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    5306:	645a      	str	r2, [r3, #68]	; 0x44
    5308:	4770      	bx	lr
    530a:	4b0a      	ldr	r3, [pc, #40]	; (5334 <init_uart_pins+0x58>)
    530c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    530e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5316:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    531a:	665a      	str	r2, [r3, #100]	; 0x64
    531c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    531e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    5322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    5326:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    532a:	661a      	str	r2, [r3, #96]	; 0x60
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	4004b000 	.word	0x4004b000
    5334:	4004d000 	.word	0x4004d000

00005338 <UART0_RX_TX_IRQHandler>:
UART0_RX_TX_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PEx/src/test_uart.c:77

 /** Implementation of UART0 handler named in startup code. */
extern void UART_DRV_IRQHandler(uint32_t instance);
void UART0_RX_TX_IRQHandler(void)
{
  UART_DRV_IRQHandler(FSL_TEST_UART);
    5338:	2000      	movs	r0, #0
    533a:	f7fe b909 	b.w	3550 <UART_DRV_IRQHandler>
	...

00005340 <SendViaSPI>:
SendViaSPI():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1792
 */
static oled_status_t SendViaSPI (
                                    const uint8_t* bufPtr,
                                          uint32_t txSize
                                )
{
    5340:	b530      	push	{r4, r5, lr}
    5342:	b09f      	sub	sp, #124	; 0x7c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1797
	oled_status_t
		status = OLED_STATUS_SUCCESS;

	genericSpiHandle_t
		spiProtocol = self.protocol;
    5344:	226c      	movs	r2, #108	; 0x6c
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1792
 */
static oled_status_t SendViaSPI (
                                    const uint8_t* bufPtr,
                                          uint32_t txSize
                                )
{
    5346:	4605      	mov	r5, r0
    5348:	460c      	mov	r4, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1797
	oled_status_t
		status = OLED_STATUS_SUCCESS;

	genericSpiHandle_t
		spiProtocol = self.protocol;
    534a:	a803      	add	r0, sp, #12
    534c:	4911      	ldr	r1, [pc, #68]	; (5394 <SendViaSPI+0x54>)
    534e:	f000 fdf9 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1800

    osa_status_t
        mutexStatus = OSA_MutexLock( &spiAccessMutex, OSA_WAIT_FOREVER );
    5352:	f04f 31ff 	mov.w	r1, #4294967295
    5356:	4810      	ldr	r0, [pc, #64]	; (5398 <SendViaSPI+0x58>)
    5358:	f7fc ff36 	bl	21c8 <OSA_MutexLock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1802

    if ( kStatus_OSA_Success == mutexStatus )
    535c:	4601      	mov	r1, r0
    535e:	b968      	cbnz	r0, 537c <SendViaSPI+0x3c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1805
    {
        dspi_status_t
            spiStatus = DSPI_DRV_EdmaMasterTransferBlocking (
    5360:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5362:	9301      	str	r3, [sp, #4]
    5364:	9400      	str	r4, [sp, #0]
    5366:	9803      	ldr	r0, [sp, #12]
    5368:	462a      	mov	r2, r5
    536a:	460b      	mov	r3, r1
    536c:	f7ff fae0 	bl	4930 <DSPI_DRV_EdmaMasterTransferBlocking>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1817
                                                                txSize,

                                                                spiProtocol.timeout
                                                            );

        if ( kStatus_DSPI_Success != spiStatus )
    5370:	b148      	cbz	r0, 5386 <SendViaSPI+0x46>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1819
        {
        	catch( CATCH_OLED );
    5372:	200b      	movs	r0, #11
    5374:	f7fb fa6a 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1820
            status = OLED_STATUS_PROTOCOL_ERROR;
    5378:	2402      	movs	r4, #2
    537a:	e005      	b.n	5388 <SendViaSPI+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1830
        }
    }

    else
    {
    	catch( CATCH_MUTEX );
    537c:	2011      	movs	r0, #17
    537e:	f7fb fa65 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1831
    	status = OLED_STATUS_INIT_ERROR;
    5382:	2403      	movs	r4, #3
    5384:	e000      	b.n	5388 <SendViaSPI+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1824
        	catch( CATCH_OLED );
            status = OLED_STATUS_PROTOCOL_ERROR;
        }
        else
        {
        	status = OLED_STATUS_SUCCESS;
    5386:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1835
    	catch( CATCH_MUTEX );
    	status = OLED_STATUS_INIT_ERROR;

    }

    OSA_MutexUnlock( &spiAccessMutex );
    5388:	4803      	ldr	r0, [pc, #12]	; (5398 <SendViaSPI+0x58>)
    538a:	f7fc ff4d 	bl	2228 <OSA_MutexUnlock>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1837
    return status;
}
    538e:	4620      	mov	r0, r4
    5390:	b01f      	add	sp, #124	; 0x7c
    5392:	bd30      	pop	{r4, r5, pc}
    5394:	1fff56b4 	.word	0x1fff56b4
    5398:	1fff0ea8 	.word	0x1fff0ea8

0000539c <AllocateDynamicArea>:
AllocateDynamicArea():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1745
/**
 * allocate memory for the desired image/character
 * @param area desired area dimensions
 */
static void* AllocateDynamicArea( uint32_t area )
{
    539c:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1747
  void*
  	  ptr = OSA_MemAlloc( area * OLED_BYTES_PER_PIXEL );
    539e:	0040      	lsls	r0, r0, #1
    53a0:	f7fd f829 	bl	23f6 <OSA_MemAlloc>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1749

  if ( NULL == ptr )
    53a4:	4604      	mov	r4, r0
    53a6:	b910      	cbnz	r0, 53ae <AllocateDynamicArea+0x12>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1751
  {
	  catch( CATCH_MEM_ALLOC );
    53a8:	2010      	movs	r0, #16
    53aa:	f7fb fa4f 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1756
	  return NULL;
  }

  return ptr;
}
    53ae:	4620      	mov	r0, r4
    53b0:	bd10      	pop	{r4, pc}

000053b2 <DestroyDynamicArea>:
DestroyDynamicArea():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1764
/**
 * deallocate current area
 * @param area pointer to current area
 */
static oled_status_t DestroyDynamicArea( void* ptr )
{
    53b2:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1765
  if ( NULL == ptr )
    53b4:	b920      	cbnz	r0, 53c0 <DestroyDynamicArea+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1767
  {
	  catch ( CATCH_MEM_ALLOC );
    53b6:	2010      	movs	r0, #16
    53b8:	f7fb fa48 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1768
	  return OLED_STATUS_INIT_ERROR;
    53bc:	2003      	movs	r0, #3
    53be:	bd08      	pop	{r3, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1771
  }

  if( kStatus_OSA_Success != OSA_MemFree(ptr) )
    53c0:	f7fd f81b 	bl	23fa <OSA_MemFree>
    53c4:	b118      	cbz	r0, 53ce <DestroyDynamicArea+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1773
  {
	  catch( CATCH_MEM_ALLOC );
    53c6:	2010      	movs	r0, #16
    53c8:	f7fb fa40 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1774
	  return OLED_STATUS_ERROR;
    53cc:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1780
  }
  else
  {
	  return OLED_STATUS_SUCCESS;
  }
}
    53ce:	bd08      	pop	{r3, pc}

000053d0 <OLED_SendCmd>:
OLED_SendCmd():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:391
 */
oled_status_t OLED_SendCmd(
                            uint32_t cmd,
                             uint8_t isFirst
                          )
{
    53d0:	b530      	push	{r4, r5, lr}
    53d2:	b085      	sub	sp, #20
    53d4:	4c13      	ldr	r4, [pc, #76]	; (5424 <OLED_SendCmd+0x54>)
    53d6:	9001      	str	r0, [sp, #4]
    53d8:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:402
    spiProtocol = self.protocol;

  dspi_status_t
    status;

  memcpy( (void*)txBuf, (void*)&cmd, txSize );
    53da:	a803      	add	r0, sp, #12
    53dc:	a901      	add	r1, sp, #4
    53de:	2201      	movs	r2, #1
    53e0:	f000 fdb0 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:406

  if ( isFirst )
  {
    GPIO_DRV_ClearPinOutput( settings.DCpin );
    53e4:	6820      	ldr	r0, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:404
  dspi_status_t
    status;

  memcpy( (void*)txBuf, (void*)&cmd, txSize );

  if ( isFirst )
    53e6:	b115      	cbz	r5, 53ee <OLED_SendCmd+0x1e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:406
  {
    GPIO_DRV_ClearPinOutput( settings.DCpin );
    53e8:	f7fe fd98 	bl	3f1c <GPIO_DRV_ClearPinOutput>
    53ec:	e001      	b.n	53f2 <OLED_SendCmd+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:410
  }
  else
  {
    GPIO_DRV_SetPinOutput( settings.DCpin );
    53ee:	f7fe fd79 	bl	3ee4 <GPIO_DRV_SetPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:413
  }

	  GPIO_DRV_ClearPinOutput( settings.CSpin );
    53f2:	6860      	ldr	r0, [r4, #4]
    53f4:	4d0b      	ldr	r5, [pc, #44]	; (5424 <OLED_SendCmd+0x54>)
    53f6:	f7fe fd91 	bl	3f1c <GPIO_DRV_ClearPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:415
	  oled_status_t
	  	  spiStatus = SendViaSPI( txBuf, txSize );
    53fa:	a803      	add	r0, sp, #12
    53fc:	2101      	movs	r1, #1
    53fe:	f7ff ff9f 	bl	5340 <SendViaSPI>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:417

	if ( OLED_STATUS_SUCCESS == spiStatus )
    5402:	4604      	mov	r4, r0
    5404:	b920      	cbnz	r0, 5410 <OLED_SendCmd+0x40>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:419
    {
      GPIO_DRV_SetPinOutput( settings.CSpin );
    5406:	6868      	ldr	r0, [r5, #4]
    5408:	f7fe fd6c 	bl	3ee4 <GPIO_DRV_SetPinOutput>
    540c:	4620      	mov	r0, r4
    540e:	e006      	b.n	541e <OLED_SendCmd+0x4e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:425
      return OLED_STATUS_SUCCESS;
    }

    else
    {
      catch( CATCH_OLED );
    5410:	200b      	movs	r0, #11
    5412:	f7fb fa1b 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:426
      GPIO_DRV_SetPinOutput( settings.CSpin );
    5416:	6868      	ldr	r0, [r5, #4]
    5418:	f7fe fd64 	bl	3ee4 <GPIO_DRV_SetPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:427
      return OLED_STATUS_PROTOCOL_ERROR;
    541c:	2002      	movs	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:429
    }
}
    541e:	b005      	add	sp, #20
    5420:	bd30      	pop	{r4, r5, pc}
    5422:	bf00      	nop
    5424:	1fff9f28 	.word	0x1fff9f28

00005428 <OLED_Init>:
OLED_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:150
 */
oled_status_t OLED_Init(
                          handleOLED_t* oledHandle,
                        settingsOLED_t* oledSettings
                      )
{
    5428:	b538      	push	{r3, r4, r5, lr}
    542a:	4604      	mov	r4, r0
    542c:	460d      	mov	r5, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:152
  statusSPI_t
    status = SPI_Init( &(oledHandle->protocol) );
    542e:	f7fb f85d 	bl	4ec <SPI_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:154

  if ( STATUS_SPI_SUCCESS != status )
    5432:	b118      	cbz	r0, 543c <OLED_Init+0x14>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:156
  {
    catch( CATCH_INIT );
    5434:	2000      	movs	r0, #0
    5436:	f7fb fa09 	bl	84c <catch>
    543a:	e036      	b.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:167
    /**
     * initialize intern OLED structures,
     * which will be used from now on
     */

    memcpy( (void*)&self,     (void*)oledHandle,   sizeof(self) );
    543c:	4621      	mov	r1, r4
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:168
    memcpy( (void*)&settings, (void*)oledSettings, sizeof(settings) );
    543e:	4c95      	ldr	r4, [pc, #596]	; (5694 <OLED_Init+0x26c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:167
    /**
     * initialize intern OLED structures,
     * which will be used from now on
     */

    memcpy( (void*)&self,     (void*)oledHandle,   sizeof(self) );
    5440:	4895      	ldr	r0, [pc, #596]	; (5698 <OLED_Init+0x270>)
    5442:	226c      	movs	r2, #108	; 0x6c
    5444:	f000 fd7e 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:168
    memcpy( (void*)&settings, (void*)oledSettings, sizeof(settings) );
    5448:	4629      	mov	r1, r5
    544a:	2210      	movs	r2, #16
    544c:	4620      	mov	r0, r4
    544e:	f000 fd79 	bl	5f44 <memcpy>
NVIC_SetPriority():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1706
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5452:	4b92      	ldr	r3, [pc, #584]	; (569c <OLED_Init+0x274>)
OLED_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:180
    NVIC_SetPriority( HEXIWEAR_OLED_DMA_RX_IRQn, HEXIWEAR_OLED_DMA_RX_IRQ_PRIO );
    NVIC_SetPriority( HEXIWEAR_OLED_DMA_TX_IRQn, HEXIWEAR_OLED_DMA_TX_IRQ_PRIO );

	  // create mutex for using the spi comm
    osa_status_t
        spiStatus = OSA_MutexCreate( &spiAccessMutex );
    5454:	4892      	ldr	r0, [pc, #584]	; (56a0 <OLED_Init+0x278>)
NVIC_SetPriority():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1706
    5456:	2240      	movs	r2, #64	; 0x40
    5458:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
    545c:	2250      	movs	r2, #80	; 0x50
    545e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    5462:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
OLED_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:180
    5466:	f7fc fe97 	bl	2198 <OSA_MutexCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:184

    /** power sequence */

    PWR_OLED_TurnOFF();
    546a:	f240 200d 	movw	r0, #525	; 0x20d
    546e:	f7fe fd55 	bl	3f1c <GPIO_DRV_ClearPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:185
    OSA_TimeDelay(1);
    5472:	2001      	movs	r0, #1
    5474:	f7fc ffc6 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:186
    GPIO_DRV_ClearPinOutput( settings.RSTpin );
    5478:	68a0      	ldr	r0, [r4, #8]
    547a:	f7fe fd4f 	bl	3f1c <GPIO_DRV_ClearPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:187
    OSA_TimeDelay(1);
    547e:	2001      	movs	r0, #1
    5480:	f7fc ffc0 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:188
    GPIO_DRV_SetPinOutput( settings.RSTpin );
    5484:	68a0      	ldr	r0, [r4, #8]
    5486:	f7fe fd2d 	bl	3ee4 <GPIO_DRV_SetPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:189
    OSA_TimeDelay(1);
    548a:	2001      	movs	r0, #1
    548c:	f7fc ffba 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:190
    PWR_OLED_TurnON();
    5490:	f240 200d 	movw	r0, #525	; 0x20d
    5494:	f7fe fd26 	bl	3ee4 <GPIO_DRV_SetPinOutput>
    5498:	2032      	movs	r0, #50	; 0x32
    549a:	f7fc ffb3 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:192

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_CMD_LOCK, FIRST_BYTE ) )
    549e:	2101      	movs	r1, #1
    54a0:	20fd      	movs	r0, #253	; 0xfd
    54a2:	f7ff ff95 	bl	53d0 <OLED_SendCmd>
    54a6:	4601      	mov	r1, r0
    54a8:	b108      	cbz	r0, 54ae <OLED_Init+0x86>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:194
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    54aa:	2002      	movs	r0, #2
    54ac:	bd38      	pop	{r3, r4, r5, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:196
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_UNLOCK, OTHER_BYTE ) )
    54ae:	2012      	movs	r0, #18
    54b0:	f7ff ff8e 	bl	53d0 <OLED_SendCmd>
    54b4:	2800      	cmp	r0, #0
    54b6:	d1f8      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:201
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_CMD_LOCK, FIRST_BYTE ) )
    54b8:	2101      	movs	r1, #1
    54ba:	20fd      	movs	r0, #253	; 0xfd
    54bc:	f7ff ff88 	bl	53d0 <OLED_SendCmd>
    54c0:	4601      	mov	r1, r0
    54c2:	2800      	cmp	r0, #0
    54c4:	d1f1      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:205
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_ACC_TO_CMD_YES, OTHER_BYTE ) )
    54c6:	20b1      	movs	r0, #177	; 0xb1
    54c8:	f7ff ff82 	bl	53d0 <OLED_SendCmd>
    54cc:	2800      	cmp	r0, #0
    54ce:	d1ec      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:210
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_DISPLAYOFF, FIRST_BYTE ) )
    54d0:	20ae      	movs	r0, #174	; 0xae
    54d2:	2101      	movs	r1, #1
    54d4:	f7ff ff7c 	bl	53d0 <OLED_SendCmd>
    54d8:	2800      	cmp	r0, #0
    54da:	d1e6      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:215
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_OSC_FREQ_AND_CLOCKDIV, FIRST_BYTE ) )
    54dc:	2101      	movs	r1, #1
    54de:	20b3      	movs	r0, #179	; 0xb3
    54e0:	f7ff ff76 	bl	53d0 <OLED_SendCmd>
    54e4:	4601      	mov	r1, r0
    54e6:	2800      	cmp	r0, #0
    54e8:	d1df      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:219
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xF1, OTHER_BYTE ) )
    54ea:	20f1      	movs	r0, #241	; 0xf1
    54ec:	f7ff ff70 	bl	53d0 <OLED_SendCmd>
    54f0:	2800      	cmp	r0, #0
    54f2:	d1da      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:224
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_MUX_RATIO, FIRST_BYTE ) )
    54f4:	2101      	movs	r1, #1
    54f6:	20ca      	movs	r0, #202	; 0xca
    54f8:	f7ff ff6a 	bl	53d0 <OLED_SendCmd>
    54fc:	4601      	mov	r1, r0
    54fe:	2800      	cmp	r0, #0
    5500:	d1d3      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:228
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x5F, OTHER_BYTE ) )
    5502:	205f      	movs	r0, #95	; 0x5f
    5504:	f7ff ff64 	bl	53d0 <OLED_SendCmd>
    5508:	2800      	cmp	r0, #0
    550a:	d1ce      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:233
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_REMAP, FIRST_BYTE ) )
    550c:	2101      	movs	r1, #1
    550e:	20a0      	movs	r0, #160	; 0xa0
    5510:	f7ff ff5e 	bl	53d0 <OLED_SendCmd>
    5514:	4601      	mov	r1, r0
    5516:	2800      	cmp	r0, #0
    5518:	d1c7      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:237
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_REMAP_SETTINGS, OTHER_BYTE ) )
    551a:	2060      	movs	r0, #96	; 0x60
    551c:	f7ff ff58 	bl	53d0 <OLED_SendCmd>
    5520:	2800      	cmp	r0, #0
    5522:	d1c2      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:242
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_COLUMN, FIRST_BYTE ) )
    5524:	2101      	movs	r1, #1
    5526:	2015      	movs	r0, #21
    5528:	f7ff ff52 	bl	53d0 <OLED_SendCmd>
    552c:	4601      	mov	r1, r0
    552e:	2800      	cmp	r0, #0
    5530:	d1bb      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:246
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x00, OTHER_BYTE ) )
    5532:	f7ff ff4d 	bl	53d0 <OLED_SendCmd>
    5536:	4601      	mov	r1, r0
    5538:	2800      	cmp	r0, #0
    553a:	d1b6      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:250
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x5F, OTHER_BYTE ) )
    553c:	205f      	movs	r0, #95	; 0x5f
    553e:	f7ff ff47 	bl	53d0 <OLED_SendCmd>
    5542:	2800      	cmp	r0, #0
    5544:	d1b1      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:255
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SET_ROW, FIRST_BYTE ) )
    5546:	2101      	movs	r1, #1
    5548:	2075      	movs	r0, #117	; 0x75
    554a:	f7ff ff41 	bl	53d0 <OLED_SendCmd>
    554e:	4601      	mov	r1, r0
    5550:	2800      	cmp	r0, #0
    5552:	d1aa      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:259
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x00, OTHER_BYTE ) )
    5554:	f7ff ff3c 	bl	53d0 <OLED_SendCmd>
    5558:	4601      	mov	r1, r0
    555a:	2800      	cmp	r0, #0
    555c:	d1a5      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:263
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x5F, OTHER_BYTE ) )
    555e:	205f      	movs	r0, #95	; 0x5f
    5560:	f7ff ff36 	bl	53d0 <OLED_SendCmd>
    5564:	2800      	cmp	r0, #0
    5566:	d1a0      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:268
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_STARTLINE, FIRST_BYTE ) )
    5568:	2101      	movs	r1, #1
    556a:	20a1      	movs	r0, #161	; 0xa1
    556c:	f7ff ff30 	bl	53d0 <OLED_SendCmd>
    5570:	4601      	mov	r1, r0
    5572:	2800      	cmp	r0, #0
    5574:	d199      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:272
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x80, OTHER_BYTE ) )
    5576:	2080      	movs	r0, #128	; 0x80
    5578:	f7ff ff2a 	bl	53d0 <OLED_SendCmd>
    557c:	2800      	cmp	r0, #0
    557e:	d194      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:277
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_DISPLAYOFFSET, FIRST_BYTE ) )
    5580:	2101      	movs	r1, #1
    5582:	20a2      	movs	r0, #162	; 0xa2
    5584:	f7ff ff24 	bl	53d0 <OLED_SendCmd>
    5588:	4601      	mov	r1, r0
    558a:	2800      	cmp	r0, #0
    558c:	d18d      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:281
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x60, OTHER_BYTE ) )
    558e:	2060      	movs	r0, #96	; 0x60
    5590:	f7ff ff1e 	bl	53d0 <OLED_SendCmd>
    5594:	2800      	cmp	r0, #0
    5596:	d188      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:286
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_PRECHARGE, FIRST_BYTE ) )
    5598:	20b1      	movs	r0, #177	; 0xb1
    559a:	2101      	movs	r1, #1
    559c:	f7ff ff18 	bl	53d0 <OLED_SendCmd>
    55a0:	2800      	cmp	r0, #0
    55a2:	d182      	bne.n	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:290
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x32, FIRST_BYTE ) )
    55a4:	2032      	movs	r0, #50	; 0x32
    55a6:	2101      	movs	r1, #1
    55a8:	f7ff ff12 	bl	53d0 <OLED_SendCmd>
    55ac:	2800      	cmp	r0, #0
    55ae:	f47f af7c 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:295
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_VCOMH, FIRST_BYTE ) )
    55b2:	20be      	movs	r0, #190	; 0xbe
    55b4:	2101      	movs	r1, #1
    55b6:	f7ff ff0b 	bl	53d0 <OLED_SendCmd>
    55ba:	2800      	cmp	r0, #0
    55bc:	f47f af75 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:299
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x05, FIRST_BYTE ) )
    55c0:	2005      	movs	r0, #5
    55c2:	2101      	movs	r1, #1
    55c4:	f7ff ff04 	bl	53d0 <OLED_SendCmd>
    55c8:	2800      	cmp	r0, #0
    55ca:	f47f af6e 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:304
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_NORMALDISPLAY, FIRST_BYTE ) )
    55ce:	20a6      	movs	r0, #166	; 0xa6
    55d0:	2101      	movs	r1, #1
    55d2:	f7ff fefd 	bl	53d0 <OLED_SendCmd>
    55d6:	2800      	cmp	r0, #0
    55d8:	f47f af67 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:309
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_CONTRASTABC, FIRST_BYTE ) )
    55dc:	2101      	movs	r1, #1
    55de:	20c1      	movs	r0, #193	; 0xc1
    55e0:	f7ff fef6 	bl	53d0 <OLED_SendCmd>
    55e4:	4601      	mov	r1, r0
    55e6:	2800      	cmp	r0, #0
    55e8:	f47f af5f 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:313
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x8A, OTHER_BYTE ) )
    55ec:	208a      	movs	r0, #138	; 0x8a
    55ee:	f7ff feef 	bl	53d0 <OLED_SendCmd>
    55f2:	4601      	mov	r1, r0
    55f4:	2800      	cmp	r0, #0
    55f6:	f47f af58 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:317
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x51, OTHER_BYTE ) )
    55fa:	2051      	movs	r0, #81	; 0x51
    55fc:	f7ff fee8 	bl	53d0 <OLED_SendCmd>
    5600:	2800      	cmp	r0, #0
    5602:	f47f af52 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:321
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x8A, OTHER_BYTE ) )
    5606:	208a      	movs	r0, #138	; 0x8a
    5608:	2100      	movs	r1, #0
    560a:	f7ff fee1 	bl	53d0 <OLED_SendCmd>
    560e:	2800      	cmp	r0, #0
    5610:	f47f af4b 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:326
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_CONTRASTMASTER, FIRST_BYTE ) )
    5614:	2101      	movs	r1, #1
    5616:	20c7      	movs	r0, #199	; 0xc7
    5618:	f7ff feda 	bl	53d0 <OLED_SendCmd>
    561c:	4601      	mov	r1, r0
    561e:	2800      	cmp	r0, #0
    5620:	f47f af43 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:330
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xCF, OTHER_BYTE ) )
    5624:	20cf      	movs	r0, #207	; 0xcf
    5626:	f7ff fed3 	bl	53d0 <OLED_SendCmd>
    562a:	2800      	cmp	r0, #0
    562c:	f47f af3d 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:335
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_SETVSL, FIRST_BYTE ) )
    5630:	2101      	movs	r1, #1
    5632:	20b4      	movs	r0, #180	; 0xb4
    5634:	f7ff fecc 	bl	53d0 <OLED_SendCmd>
    5638:	4601      	mov	r1, r0
    563a:	2800      	cmp	r0, #0
    563c:	f47f af35 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:339
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xA0, OTHER_BYTE ) )
    5640:	20a0      	movs	r0, #160	; 0xa0
    5642:	f7ff fec5 	bl	53d0 <OLED_SendCmd>
    5646:	4601      	mov	r1, r0
    5648:	2800      	cmp	r0, #0
    564a:	f47f af2e 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:343
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0xB5, OTHER_BYTE ) )
    564e:	20b5      	movs	r0, #181	; 0xb5
    5650:	f7ff febe 	bl	53d0 <OLED_SendCmd>
    5654:	4601      	mov	r1, r0
    5656:	2800      	cmp	r0, #0
    5658:	f47f af27 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:347
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x55, OTHER_BYTE ) )
    565c:	2055      	movs	r0, #85	; 0x55
    565e:	f7ff feb7 	bl	53d0 <OLED_SendCmd>
    5662:	2800      	cmp	r0, #0
    5664:	f47f af21 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:352
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_PRECHARGE2, FIRST_BYTE ) )
    5668:	2101      	movs	r1, #1
    566a:	20b6      	movs	r0, #182	; 0xb6
    566c:	f7ff feb0 	bl	53d0 <OLED_SendCmd>
    5670:	4601      	mov	r1, r0
    5672:	2800      	cmp	r0, #0
    5674:	f47f af19 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:356
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }
    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( 0x01, OTHER_BYTE ) )
    5678:	2001      	movs	r0, #1
    567a:	f7ff fea9 	bl	53d0 <OLED_SendCmd>
    567e:	2800      	cmp	r0, #0
    5680:	f47f af13 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:361
    {
        return OLED_STATUS_PROTOCOL_ERROR;
    }

    if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_DISPLAYON, FIRST_BYTE ) )
    5684:	20af      	movs	r0, #175	; 0xaf
    5686:	2101      	movs	r1, #1
    5688:	f7ff fea2 	bl	53d0 <OLED_SendCmd>
    568c:	2800      	cmp	r0, #0
    568e:	f47f af0c 	bne.w	54aa <OLED_Init+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:368
        return OLED_STATUS_PROTOCOL_ERROR;
    }
 }

  return OLED_STATUS_SUCCESS;
}
    5692:	bd38      	pop	{r3, r4, r5, pc}
    5694:	1fff9f28 	.word	0x1fff9f28
    5698:	1fff56b4 	.word	0x1fff56b4
    569c:	e000e100 	.word	0xe000e100
    56a0:	1fff0ea8 	.word	0x1fff0ea8

000056a4 <SetBorders>:
SetBorders():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1123
                        uint8_t width,
                        uint8_t height
                      )
{
  // adjust for the offset
  OLED_AdjustColumnOffset(xCrd);
    56a4:	3010      	adds	r0, #16
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1121
                        uint8_t xCrd,
                        uint8_t yCrd,
                        uint8_t width,
                        uint8_t height
                      )
{
    56a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56aa:	460c      	mov	r4, r1
    56ac:	4617      	mov	r7, r2
    56ae:	461e      	mov	r6, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1123
  // adjust for the offset
  OLED_AdjustColumnOffset(xCrd);
    56b0:	b2c5      	uxtb	r5, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1133

  while (1)
  {
    oledStatus = OLED_STATUS_SUCCESS;

    oledStatus |= OLED_SendCmd( OLED_CMD_SET_COLUMN, FIRST_BYTE );
    56b2:	2101      	movs	r1, #1
    56b4:	2015      	movs	r0, #21
    56b6:	f7ff fe8b 	bl	53d0 <OLED_SendCmd>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1134
    oledStatus |= OLED_SendCmd( xCrd, OTHER_BYTE );
    56ba:	2100      	movs	r1, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1133

  while (1)
  {
    oledStatus = OLED_STATUS_SUCCESS;

    oledStatus |= OLED_SendCmd( OLED_CMD_SET_COLUMN, FIRST_BYTE );
    56bc:	4680      	mov	r8, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1134
    oledStatus |= OLED_SendCmd( xCrd, OTHER_BYTE );
    56be:	4628      	mov	r0, r5
    56c0:	f7ff fe86 	bl	53d0 <OLED_SendCmd>
    56c4:	ea40 0008 	orr.w	r0, r0, r8
    56c8:	fa5f f880 	uxtb.w	r8, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1135
    oledStatus |= OLED_SendCmd( xCrd + (width-1), OTHER_BYTE );
    56cc:	1e78      	subs	r0, r7, #1
    56ce:	2100      	movs	r1, #0
    56d0:	4428      	add	r0, r5
    56d2:	f7ff fe7d 	bl	53d0 <OLED_SendCmd>
    56d6:	ea48 0000 	orr.w	r0, r8, r0
    56da:	fa5f f880 	uxtb.w	r8, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1136
    oledStatus |= OLED_SendCmd( OLED_CMD_SET_ROW, FIRST_BYTE );
    56de:	2101      	movs	r1, #1
    56e0:	2075      	movs	r0, #117	; 0x75
    56e2:	f7ff fe75 	bl	53d0 <OLED_SendCmd>
    56e6:	ea48 0000 	orr.w	r0, r8, r0
    56ea:	fa5f f880 	uxtb.w	r8, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1137
    oledStatus |= OLED_SendCmd( yCrd, OTHER_BYTE );
    56ee:	2100      	movs	r1, #0
    56f0:	4620      	mov	r0, r4
    56f2:	f7ff fe6d 	bl	53d0 <OLED_SendCmd>
    56f6:	ea48 0000 	orr.w	r0, r8, r0
    56fa:	fa5f f880 	uxtb.w	r8, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1138
    oledStatus |= OLED_SendCmd( yCrd + (height-1), OTHER_BYTE );
    56fe:	1e70      	subs	r0, r6, #1
    5700:	4420      	add	r0, r4
    5702:	2100      	movs	r1, #0
    5704:	f7ff fe64 	bl	53d0 <OLED_SendCmd>
    5708:	ea48 0000 	orr.w	r0, r8, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1140

    if ( OLED_STATUS_SUCCESS == oledStatus)
    570c:	f010 0fff 	tst.w	r0, #255	; 0xff
    5710:	d1cf      	bne.n	56b2 <SetBorders+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1145
    {
      break;
    }
  }
}
    5712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00005718 <OLED_SendData>:
OLED_SendData():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:442
oled_status_t OLED_SendData (
                              const uint8_t* dataToSend,
                                    uint32_t dataSize
								                     // bool shouldApplyBlend
                            )
{
    5718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    571c:	4604      	mov	r4, r0
    571e:	460f      	mov	r7, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:460
	  {
		  arrayPtr[i] &= colorMask;
	  }
  }

  if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_WRITERAM, FIRST_BYTE ) )
    5720:	205c      	movs	r0, #92	; 0x5c
    5722:	2101      	movs	r1, #1
    5724:	f7ff fe54 	bl	53d0 <OLED_SendCmd>
    5728:	4605      	mov	r5, r0
    572a:	2800      	cmp	r0, #0
    572c:	d135      	bne.n	579a <OLED_SendData+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:466
  {
      return OLED_STATUS_PROTOCOL_ERROR;
  }

  // sending data -> set DC pin
  GPIO_DRV_SetPinOutput( settings.DCpin );
    572e:	4e1d      	ldr	r6, [pc, #116]	; (57a4 <OLED_SendData+0x8c>)
    5730:	6830      	ldr	r0, [r6, #0]
    5732:	f7fe fbd7 	bl	3ee4 <GPIO_DRV_SetPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:467
  GPIO_DRV_ClearPinOutput( settings.CSpin );
    5736:	6870      	ldr	r0, [r6, #4]
    5738:	f7fe fbf0 	bl	3f1c <GPIO_DRV_ClearPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:475
    // traversing pointer
    bufPtr = dataToSend;

  uint16_t
    // determine the number of chunks and the last chunk size to send
    numChunks      = dataSize / OLED_SPI_CHUNK,
    573c:	f240 13ff 	movw	r3, #511	; 0x1ff
    5740:	fbb7 f3f3 	udiv	r3, r7, r3
    5744:	b29a      	uxth	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:476
    lastChunkSize  = dataSize % OLED_SPI_CHUNK;
    5746:	ebc3 2343 	rsb	r3, r3, r3, lsl #9
    574a:	1aff      	subs	r7, r7, r3
    574c:	fa1f f887 	uxth.w	r8, r7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:478

  if ( numChunks > 0 )
    5750:	b182      	cbz	r2, 5774 <OLED_SendData+0x5c>
    5752:	1e53      	subs	r3, r2, #1
    5754:	b29b      	uxth	r3, r3
    5756:	3301      	adds	r3, #1
    5758:	ebc3 2343 	rsb	r3, r3, r3, lsl #9
    575c:	eb04 0903 	add.w	r9, r4, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:482
  {
    for ( uint16_t i = 0; i < numChunks; i++)
    {
		spiStatus = SendViaSPI( bufPtr, OLED_SPI_CHUNK );
    5760:	4620      	mov	r0, r4
    5762:	f240 11ff 	movw	r1, #511	; 0x1ff
    5766:	f7ff fdeb 	bl	5340 <SendViaSPI>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:484

			if ( OLED_STATUS_SUCCESS == spiStatus )
    576a:	b958      	cbnz	r0, 5784 <OLED_SendData+0x6c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:486
			{
			  bufPtr += OLED_SPI_CHUNK;
    576c:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:480
    numChunks      = dataSize / OLED_SPI_CHUNK,
    lastChunkSize  = dataSize % OLED_SPI_CHUNK;

  if ( numChunks > 0 )
  {
    for ( uint16_t i = 0; i < numChunks; i++)
    5770:	454c      	cmp	r4, r9
    5772:	d1f5      	bne.n	5760 <OLED_SendData+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:498
			  return OLED_STATUS_PROTOCOL_ERROR;
			}
    }
  }

  if ( lastChunkSize > 0 )
    5774:	f1b8 0f00 	cmp.w	r8, #0
    5778:	d00b      	beq.n	5792 <OLED_SendData+0x7a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:500
  {
	  spiStatus = SendViaSPI( bufPtr, lastChunkSize );
    577a:	4620      	mov	r0, r4
    577c:	4639      	mov	r1, r7
    577e:	f7ff fddf 	bl	5340 <SendViaSPI>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:502

		if ( OLED_STATUS_SUCCESS != spiStatus )
    5782:	b130      	cbz	r0, 5792 <OLED_SendData+0x7a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:504
		{
		  catch( CATCH_OLED );
    5784:	200b      	movs	r0, #11
    5786:	f7fb f861 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:505
		  GPIO_DRV_SetPinOutput( settings.CSpin );
    578a:	6870      	ldr	r0, [r6, #4]
    578c:	f7fe fbaa 	bl	3ee4 <GPIO_DRV_SetPinOutput>
    5790:	e003      	b.n	579a <OLED_SendData+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:510
		  return OLED_STATUS_PROTOCOL_ERROR;
		}
  }

  GPIO_DRV_SetPinOutput( settings.CSpin );
    5792:	6870      	ldr	r0, [r6, #4]
    5794:	f7fe fba6 	bl	3ee4 <GPIO_DRV_SetPinOutput>
    5798:	e000      	b.n	579c <OLED_SendData+0x84>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:462
	  }
  }

  if ( OLED_STATUS_SUCCESS != OLED_SendCmd( OLED_CMD_WRITERAM, FIRST_BYTE ) )
  {
      return OLED_STATUS_PROTOCOL_ERROR;
    579a:	2502      	movs	r5, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:512
		}
  }

  GPIO_DRV_SetPinOutput( settings.CSpin );
  return OLED_STATUS_SUCCESS;
}
    579c:	4628      	mov	r0, r5
    579e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    57a2:	bf00      	nop
    57a4:	1fff9f28 	.word	0x1fff9f28

000057a8 <OLED_FillScreen>:
OLED_FillScreen():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:624
 * fill the entire screen
 * @param  color color to fill with
 * @return status flag
 */
oled_status_t OLED_FillScreen( uint16_t color )
{
    57a8:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:628
  /** fill the screen buffer with color */
  for ( uint16_t i = 0; i < ( OLED_SCREEN_WIDTH * OLED_SCREEN_HEIGHT ); i++ )
  {
    screenBuf[ 2*i ]     = color >> 8;
    57aa:	0a02      	lsrs	r2, r0, #8
    57ac:	2400      	movs	r4, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:628 (discriminator 2)
    57ae:	4d0b      	ldr	r5, [pc, #44]	; (57dc <OLED_FillScreen+0x34>)
    57b0:	5562      	strb	r2, [r4, r5]
    57b2:	192b      	adds	r3, r5, r4
    57b4:	3402      	adds	r4, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:626 (discriminator 2)
 * @return status flag
 */
oled_status_t OLED_FillScreen( uint16_t color )
{
  /** fill the screen buffer with color */
  for ( uint16_t i = 0; i < ( OLED_SCREEN_WIDTH * OLED_SCREEN_HEIGHT ); i++ )
    57b6:	f5b4 4f90 	cmp.w	r4, #18432	; 0x4800
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:629 (discriminator 2)
  {
    screenBuf[ 2*i ]     = color >> 8;
    screenBuf[ 2*i + 1 ] = color;
    57ba:	7058      	strb	r0, [r3, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:626 (discriminator 2)
 * @return status flag
 */
oled_status_t OLED_FillScreen( uint16_t color )
{
  /** fill the screen buffer with color */
  for ( uint16_t i = 0; i < ( OLED_SCREEN_WIDTH * OLED_SCREEN_HEIGHT ); i++ )
    57bc:	d1f7      	bne.n	57ae <OLED_FillScreen+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:633
    screenBuf[ 2*i ]     = color >> 8;
    screenBuf[ 2*i + 1 ] = color;
  }

  /** set the locations */
  SetBorders( 0, 0, OLED_SCREEN_WIDTH, OLED_SCREEN_HEIGHT );
    57be:	2260      	movs	r2, #96	; 0x60
    57c0:	2000      	movs	r0, #0
    57c2:	4601      	mov	r1, r0
    57c4:	4613      	mov	r3, r2
    57c6:	f7ff ff6d 	bl	56a4 <SetBorders>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:636

  /** fill GRAM */
  if ( OLED_STATUS_SUCCESS != OLED_SendData( (uint8_t*)screenBuf, OLED_SCREEN_WIDTH * OLED_SCREEN_HEIGHT * OLED_BYTES_PER_PIXEL ) )
    57ca:	4628      	mov	r0, r5
    57cc:	4621      	mov	r1, r4
    57ce:	f7ff ffa3 	bl	5718 <OLED_SendData>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:641
  {
      return OLED_STATUS_PROTOCOL_ERROR;
  }
  return OLED_STATUS_SUCCESS;
}
    57d2:	2800      	cmp	r0, #0
    57d4:	bf14      	ite	ne
    57d6:	2002      	movne	r0, #2
    57d8:	2000      	moveq	r0, #0
    57da:	bd38      	pop	{r3, r4, r5, pc}
    57dc:	1fff5720 	.word	0x1fff5720

000057e0 <OLED_SetFont>:
OLED_SetFont():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:762
                                  uint16_t newColor
                          )
{
  /** save the new values in intern variables */

  selectedFont           = newFont;
    57e0:	4b0c      	ldr	r3, [pc, #48]	; (5814 <OLED_SetFont+0x34>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:764
  // selectedFont_firstChar = newFont[2] + (newFont[3] << 8);
  selectedFont_firstChar = newFont[2] | ( (uint16_t)newFont[3] << 8 );
    57e2:	78c2      	ldrb	r2, [r0, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:762
                                  uint16_t newColor
                          )
{
  /** save the new values in intern variables */

  selectedFont           = newFont;
    57e4:	6018      	str	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:764
  // selectedFont_firstChar = newFont[2] + (newFont[3] << 8);
  selectedFont_firstChar = newFont[2] | ( (uint16_t)newFont[3] << 8 );
    57e6:	7883      	ldrb	r3, [r0, #2]
    57e8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    57ec:	4b0a      	ldr	r3, [pc, #40]	; (5818 <OLED_SetFont+0x38>)
    57ee:	801a      	strh	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:766
  // selectedFont_lastChar  = newFont[4] + (newFont[5] << 8);
  selectedFont_lastChar  = newFont[4] | ( (uint16_t)newFont[5] << 8 );
    57f0:	7903      	ldrb	r3, [r0, #4]
    57f2:	7942      	ldrb	r2, [r0, #5]
    57f4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    57f8:	4b08      	ldr	r3, [pc, #32]	; (581c <OLED_SetFont+0x3c>)
    57fa:	801a      	strh	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:767
  selectedFont_height    = newFont[6];
    57fc:	4b08      	ldr	r3, [pc, #32]	; (5820 <OLED_SetFont+0x40>)
    57fe:	7982      	ldrb	r2, [r0, #6]
    5800:	801a      	strh	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:770
  selectedFont_color     = newColor;

  OLED_SwapMe( selectedFont_color );
    5802:	4b08      	ldr	r3, [pc, #32]	; (5824 <OLED_SetFont+0x44>)
    5804:	ba49      	rev16	r1, r1
    5806:	8019      	strh	r1, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:772

  isFontInitialized = 1;
    5808:	4b07      	ldr	r3, [pc, #28]	; (5828 <OLED_SetFont+0x48>)
    580a:	2201      	movs	r2, #1
    580c:	701a      	strb	r2, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:774
  return OLED_STATUS_SUCCESS;
}
    580e:	2000      	movs	r0, #0
    5810:	4770      	bx	lr
    5812:	bf00      	nop
    5814:	1fff9f24 	.word	0x1fff9f24
    5818:	1fff9f20 	.word	0x1fff9f20
    581c:	1fff9f38 	.word	0x1fff9f38
    5820:	1fff56ae 	.word	0x1fff56ae
    5824:	1fff56b0 	.word	0x1fff56b0
    5828:	1fff9f44 	.word	0x1fff9f44

0000582c <OLED_DestroyDynamicArea>:
OLED_DestroyDynamicArea():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:806

/**
 * destroy current OLED dynamic area
 */
void OLED_DestroyDynamicArea()
{
    582c:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:807
	if ( NULL != oled_dynamic_area.areaBuffer )
    582e:	4c04      	ldr	r4, [pc, #16]	; (5840 <OLED_DestroyDynamicArea+0x14>)
    5830:	6860      	ldr	r0, [r4, #4]
    5832:	b118      	cbz	r0, 583c <OLED_DestroyDynamicArea+0x10>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:809
	{
		DestroyDynamicArea( oled_dynamic_area.areaBuffer );
    5834:	f7ff fdbd 	bl	53b2 <DestroyDynamicArea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:810
		oled_dynamic_area.areaBuffer = NULL;
    5838:	2300      	movs	r3, #0
    583a:	6063      	str	r3, [r4, #4]
    583c:	bd10      	pop	{r4, pc}
    583e:	bf00      	nop
    5840:	1fff9f3c 	.word	0x1fff9f3c

00005844 <OLED_SetDynamicArea>:
OLED_SetDynamicArea():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:781
/**
 * set OLED dynamic area
 * @param dynamic_area data-structure with desired values
 */
void OLED_SetDynamicArea(oled_dynamic_area_t *dynamic_area)
{
    5844:	b538      	push	{r3, r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:783

  if( NULL == oled_dynamic_area.areaBuffer )
    5846:	4d0c      	ldr	r5, [pc, #48]	; (5878 <OLED_SetDynamicArea+0x34>)
    5848:	686b      	ldr	r3, [r5, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:781
/**
 * set OLED dynamic area
 * @param dynamic_area data-structure with desired values
 */
void OLED_SetDynamicArea(oled_dynamic_area_t *dynamic_area)
{
    584a:	4604      	mov	r4, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:783

  if( NULL == oled_dynamic_area.areaBuffer )
    584c:	b12b      	cbz	r3, 585a <OLED_SetDynamicArea+0x16>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:787
  {
	  oled_dynamic_area.areaBuffer = (oled_pixel_t)AllocateDynamicArea( dynamic_area->width * dynamic_area->height );
  }
  else if(
    584e:	8842      	ldrh	r2, [r0, #2]
    5850:	886b      	ldrh	r3, [r5, #2]
    5852:	429a      	cmp	r2, r3
    5854:	d007      	beq.n	5866 <OLED_SetDynamicArea+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:792
          ( dynamic_area->height != oled_dynamic_area.height ) ||
          ( dynamic_area->width != oled_dynamic_area.width )
         )
  {
    OLED_DestroyDynamicArea();
    5856:	f7ff ffe9 	bl	582c <OLED_DestroyDynamicArea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:793
    oled_dynamic_area.areaBuffer = (oled_pixel_t)AllocateDynamicArea( dynamic_area->width * dynamic_area->height );
    585a:	78a0      	ldrb	r0, [r4, #2]
    585c:	78e3      	ldrb	r3, [r4, #3]
    585e:	4358      	muls	r0, r3
    5860:	f7ff fd9c 	bl	539c <AllocateDynamicArea>
    5864:	6068      	str	r0, [r5, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:796
  }

  oled_dynamic_area.xCrd   = dynamic_area->xCrd;
    5866:	7823      	ldrb	r3, [r4, #0]
    5868:	702b      	strb	r3, [r5, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:797
  oled_dynamic_area.yCrd   = dynamic_area->yCrd;
    586a:	7863      	ldrb	r3, [r4, #1]
    586c:	706b      	strb	r3, [r5, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:798
  oled_dynamic_area.width  = dynamic_area->width;
    586e:	78a3      	ldrb	r3, [r4, #2]
    5870:	70ab      	strb	r3, [r5, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:799
  oled_dynamic_area.height = dynamic_area->height;
    5872:	78e3      	ldrb	r3, [r4, #3]
    5874:	70eb      	strb	r3, [r5, #3]
    5876:	bd38      	pop	{r3, r4, r5, pc}
    5878:	1fff9f3c 	.word	0x1fff9f3c

0000587c <OLED_SetTextProperties>:
OLED_SetTextProperties():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:819
/**
 * set OLED text properties
 * @param textProperties data-structure with desired properties
 */
void OLED_SetTextProperties(oled_text_properties_t *textProperties)
{
    587c:	b510      	push	{r4, lr}
    587e:	4602      	mov	r2, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:820
  oled_text_properties.font       = textProperties->font;
    5880:	4b06      	ldr	r3, [pc, #24]	; (589c <OLED_SetTextProperties+0x20>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:822
  oled_text_properties.fontColor  = textProperties->fontColor;
  oled_text_properties.alignParam = textProperties->alignParam;
    5882:	7994      	ldrb	r4, [r2, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:821
 * @param textProperties data-structure with desired properties
 */
void OLED_SetTextProperties(oled_text_properties_t *textProperties)
{
  oled_text_properties.font       = textProperties->font;
  oled_text_properties.fontColor  = textProperties->fontColor;
    5884:	8891      	ldrh	r1, [r2, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:820
 * set OLED text properties
 * @param textProperties data-structure with desired properties
 */
void OLED_SetTextProperties(oled_text_properties_t *textProperties)
{
  oled_text_properties.font       = textProperties->font;
    5886:	6800      	ldr	r0, [r0, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:822
  oled_text_properties.fontColor  = textProperties->fontColor;
  oled_text_properties.alignParam = textProperties->alignParam;
    5888:	719c      	strb	r4, [r3, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:823
  oled_text_properties.background = textProperties->background;
    588a:	6892      	ldr	r2, [r2, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:820
 * set OLED text properties
 * @param textProperties data-structure with desired properties
 */
void OLED_SetTextProperties(oled_text_properties_t *textProperties)
{
  oled_text_properties.font       = textProperties->font;
    588c:	6018      	str	r0, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:826
  oled_text_properties.fontColor  = textProperties->fontColor;
  oled_text_properties.alignParam = textProperties->alignParam;
  oled_text_properties.background = textProperties->background;

  OLED_SetFont( oled_text_properties.font, oled_text_properties.fontColor );
}
    588e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:821
 * @param textProperties data-structure with desired properties
 */
void OLED_SetTextProperties(oled_text_properties_t *textProperties)
{
  oled_text_properties.font       = textProperties->font;
  oled_text_properties.fontColor  = textProperties->fontColor;
    5892:	8099      	strh	r1, [r3, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:823
  oled_text_properties.alignParam = textProperties->alignParam;
  oled_text_properties.background = textProperties->background;
    5894:	609a      	str	r2, [r3, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:825

  OLED_SetFont( oled_text_properties.font, oled_text_properties.fontColor );
    5896:	f7ff bfa3 	b.w	57e0 <OLED_SetFont>
    589a:	bf00      	nop
    589c:	1fff04b0 	.word	0x1fff04b0

000058a0 <OLED_GetTextWidth>:
OLED_GetTextWidth():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:840
	uint8_t chrCnt = 0;
	uint8_t text_width  = 0;

	while ( 0 != text[chrCnt] )
	{
		text_width += *( selectedFont + 8 + (uint16_t)( ( text[chrCnt++] - selectedFont_firstChar ) << 2 ) );
    58a0:	4b0b      	ldr	r3, [pc, #44]	; (58d0 <OLED_GetTextWidth+0x30>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:834
 * return the width in [px] required for the given string to be displayed
 * @param  text desired string
 * @return      required text width in [px]
 */
uint8_t OLED_GetTextWidth(const uint8_t* text)
{
    58a2:	b530      	push	{r4, r5, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:840
	uint8_t chrCnt = 0;
	uint8_t text_width  = 0;

	while ( 0 != text[chrCnt] )
	{
		text_width += *( selectedFont + 8 + (uint16_t)( ( text[chrCnt++] - selectedFont_firstChar ) << 2 ) );
    58a4:	681c      	ldr	r4, [r3, #0]
    58a6:	4b0b      	ldr	r3, [pc, #44]	; (58d4 <OLED_GetTextWidth+0x34>)
    58a8:	881d      	ldrh	r5, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:838
uint8_t OLED_GetTextWidth(const uint8_t* text)
{
	uint8_t chrCnt = 0;
	uint8_t text_width  = 0;

	while ( 0 != text[chrCnt] )
    58aa:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:836
 * @return      required text width in [px]
 */
uint8_t OLED_GetTextWidth(const uint8_t* text)
{
	uint8_t chrCnt = 0;
	uint8_t text_width  = 0;
    58ac:	461a      	mov	r2, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:838 (discriminator 1)

	while ( 0 != text[chrCnt] )
    58ae:	b2d9      	uxtb	r1, r3
    58b0:	3301      	adds	r3, #1
    58b2:	5c41      	ldrb	r1, [r0, r1]
    58b4:	b149      	cbz	r1, 58ca <OLED_GetTextWidth+0x2a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:840
	{
		text_width += *( selectedFont + 8 + (uint16_t)( ( text[chrCnt++] - selectedFont_firstChar ) << 2 ) );
    58b6:	1b49      	subs	r1, r1, r5
    58b8:	0089      	lsls	r1, r1, #2
    58ba:	b289      	uxth	r1, r1
    58bc:	4421      	add	r1, r4
    58be:	7a09      	ldrb	r1, [r1, #8]
    58c0:	3101      	adds	r1, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:842
		// make 1px space between chars
		text_width++;
    58c2:	fa52 f281 	uxtab	r2, r2, r1
    58c6:	b2d2      	uxtb	r2, r2
    58c8:	e7f1      	b.n	58ae <OLED_GetTextWidth+0xe>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:845
	}
	// remove the final space
	text_width--;
    58ca:	1e50      	subs	r0, r2, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:848

	return text_width;
}
    58cc:	b2c0      	uxtb	r0, r0
    58ce:	bd30      	pop	{r4, r5, pc}
    58d0:	1fff9f24 	.word	0x1fff9f24
    58d4:	1fff9f20 	.word	0x1fff9f20

000058d8 <OLED_Swap>:
OLED_Swap():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1638
void OLED_Swap(
                    oled_pixel_t imgDst,
                  const uint8_t* imgSrc,
                        uint16_t imgSize
                )
{
    58d8:	b530      	push	{r4, r5, lr}
    58da:	0052      	lsls	r2, r2, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1639
  for ( int var = 0; var < imgSize; var++ )
    58dc:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1639 (discriminator 1)
    58de:	4293      	cmp	r3, r2
    58e0:	d008      	beq.n	58f4 <OLED_Swap+0x1c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1641 (discriminator 2)
  {
    *imgDst = *imgSrc << 8;
    58e2:	5ccc      	ldrb	r4, [r1, r3]
    58e4:	0224      	lsls	r4, r4, #8
    58e6:	52c4      	strh	r4, [r0, r3]
    58e8:	18cd      	adds	r5, r1, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1643 (discriminator 2)
    imgSrc++;
    *imgDst |= *imgSrc;
    58ea:	786d      	ldrb	r5, [r5, #1]
    58ec:	432c      	orrs	r4, r5
    58ee:	52c4      	strh	r4, [r0, r3]
    58f0:	3302      	adds	r3, #2
    58f2:	e7f4      	b.n	58de <OLED_Swap+0x6>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1647
    imgDst++;
    imgSrc++;
  }
}
    58f4:	bd30      	pop	{r4, r5, pc}
	...

000058f8 <OLED_AddText>:
OLED_AddText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:887
 * add text to the main screen buffer
 * @param  text text to add
 * @return      status flag
 */
oled_status_t OLED_AddText( const uint8_t* text )
{
    58f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58fc:	b089      	sub	sp, #36	; 0x24
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:910
	 */

	text_height = selectedFont_height;

	if	(
				( oled_dynamic_area.width  < text_width )
    58fe:	4c98      	ldr	r4, [pc, #608]	; (5b60 <OLED_AddText+0x268>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:887
 * add text to the main screen buffer
 * @param  text text to add
 * @return      status flag
 */
oled_status_t OLED_AddText( const uint8_t* text )
{
    5900:	9005      	str	r0, [sp, #20]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:901

	uint8_t
		text_height = 0,
		text_width  = 0;

	text_width = OLED_GetTextWidth(text);
    5902:	f7ff ffcd 	bl	58a0 <OLED_GetTextWidth>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:909
	 * set default values, if necessary
	 */

	text_height = selectedFont_height;

	if	(
    5906:	78a2      	ldrb	r2, [r4, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:907

	/**
	 * set default values, if necessary
	 */

	text_height = selectedFont_height;
    5908:	4b96      	ldr	r3, [pc, #600]	; (5b64 <OLED_AddText+0x26c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:909

	if	(
    590a:	4282      	cmp	r2, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:901

	uint8_t
		text_height = 0,
		text_width  = 0;

	text_width = OLED_GetTextWidth(text);
    590c:	4605      	mov	r5, r0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:907

	/**
	 * set default values, if necessary
	 */

	text_height = selectedFont_height;
    590e:	f893 9000 	ldrb.w	r9, [r3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:909

	if	(
    5912:	d302      	bcc.n	591a <OLED_AddText+0x22>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:911
				( oled_dynamic_area.width  < text_width )
			||  ( oled_dynamic_area.height < text_height )
    5914:	78e3      	ldrb	r3, [r4, #3]
    5916:	454b      	cmp	r3, r9
    5918:	d206      	bcs.n	5928 <OLED_AddText+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:919
		oled_dynamic_area_t
		  textArea;

		textArea.width  = text_width;
		textArea.height = text_height;
		OLED_SetDynamicArea( &textArea );
    591a:	a806      	add	r0, sp, #24
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:917
		)
	{
		oled_dynamic_area_t
		  textArea;

		textArea.width  = text_width;
    591c:	f88d 501a 	strb.w	r5, [sp, #26]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:918
		textArea.height = text_height;
    5920:	f88d 901b 	strb.w	r9, [sp, #27]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:919
		OLED_SetDynamicArea( &textArea );
    5924:	f7ff ff8e 	bl	5844 <OLED_SetDynamicArea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:935
		//   return OLED_STATUS_INIT_ERROR;
		// }

	currentChar_y = ( oled_dynamic_area.height - text_height ) >> 1;

	switch ( oled_text_properties.alignParam & OLED_TEXT_HALIGN_MASK )
    5928:	498f      	ldr	r1, [pc, #572]	; (5b68 <OLED_AddText+0x270>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:933
		// if ( NULL == oled_dynamic_area.areaBuffer )
		// {
		//   return OLED_STATUS_INIT_ERROR;
		// }

	currentChar_y = ( oled_dynamic_area.height - text_height ) >> 1;
    592a:	4b8d      	ldr	r3, [pc, #564]	; (5b60 <OLED_AddText+0x268>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:935

	switch ( oled_text_properties.alignParam & OLED_TEXT_HALIGN_MASK )
    592c:	798a      	ldrb	r2, [r1, #6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:933
		// if ( NULL == oled_dynamic_area.areaBuffer )
		// {
		//   return OLED_STATUS_INIT_ERROR;
		// }

	currentChar_y = ( oled_dynamic_area.height - text_height ) >> 1;
    592e:	78e7      	ldrb	r7, [r4, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:935

	switch ( oled_text_properties.alignParam & OLED_TEXT_HALIGN_MASK )
    5930:	f002 0203 	and.w	r2, r2, #3
    5934:	2a02      	cmp	r2, #2
    5936:	d006      	beq.n	5946 <OLED_AddText+0x4e>
    5938:	2a03      	cmp	r2, #3
    593a:	d108      	bne.n	594e <OLED_AddText+0x56>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:951
			break;
		}

		case OLED_TEXT_ALIGN_CENTER:
		{
			currentChar_x += ( oled_dynamic_area.width - text_width ) >> 1 ;
    593c:	789b      	ldrb	r3, [r3, #2]
    593e:	1b5d      	subs	r5, r3, r5
    5940:	f3c5 0547 	ubfx	r5, r5, #1, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:952
			break;
    5944:	e004      	b.n	5950 <OLED_AddText+0x58>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:945
			break;
		}

		case OLED_TEXT_ALIGN_RIGHT:
		{
			currentChar_x = ( oled_dynamic_area.width - text_width );
    5946:	789b      	ldrb	r3, [r3, #2]
    5948:	1b5d      	subs	r5, r3, r5
    594a:	b2ed      	uxtb	r5, r5
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:946
			break;
    594c:	e000      	b.n	5950 <OLED_AddText+0x58>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:894
		chrCnt = 0;
	oled_pixel_t
		chrBuf = NULL;

	uint8_t
		currentChar_x = 0,
    594e:	2500      	movs	r5, #0
CreateTextBackground():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1663
    yCrd   = oled_dynamic_area.yCrd,
    width  = oled_dynamic_area.width,
    height = oled_dynamic_area.height;

  oled_pixel_t
    imgBuf = oled_dynamic_area.areaBuffer,
    5950:	6866      	ldr	r6, [r4, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1657
 * @return status flag
 */
static oled_status_t CreateTextBackground()
{
  uint8_t
    xCrd   = oled_dynamic_area.xCrd,
    5952:	7822      	ldrb	r2, [r4, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1658
    yCrd   = oled_dynamic_area.yCrd,
    5954:	7860      	ldrb	r0, [r4, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1659
    width  = oled_dynamic_area.width,
    5956:	f894 a002 	ldrb.w	sl, [r4, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1667
  oled_pixel_t
    imgBuf = oled_dynamic_area.areaBuffer,
    copyAddr;

  const uint8_t*
    background = oled_text_properties.background;
    595a:	6889      	ldr	r1, [r1, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1671

  /** copy data */

  if  (
    595c:	2e00      	cmp	r6, #0
    595e:	d043      	beq.n	59e8 <OLED_AddText+0xf0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1673
            ( NULL == imgBuf )
        ||  ( ( xCrd + width )  > OLED_SCREEN_WIDTH )
    5960:	eb02 030a 	add.w	r3, r2, sl
    5964:	2b60      	cmp	r3, #96	; 0x60
    5966:	dc3f      	bgt.n	59e8 <OLED_AddText+0xf0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1674
        ||  ( ( yCrd + height ) > OLED_SCREEN_HEIGHT )
    5968:	19c3      	adds	r3, r0, r7
    596a:	2b60      	cmp	r3, #96	; 0x60
    596c:	dc3c      	bgt.n	59e8 <OLED_AddText+0xf0>
    596e:	fa0f f38a 	sxth.w	r3, sl
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1680
      )
  {
    return OLED_STATUS_INIT_ERROR;
  }

  if ( NULL == background )
    5972:	b979      	cbnz	r1, 5994 <OLED_AddText+0x9c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1684
  {
    for ( uint8_t i = 0; i < height; i++ )
    {
      memset( (void*)imgBuf, 0, width*OLED_BYTES_PER_PIXEL );
    5974:	ea4f 0a43 	mov.w	sl, r3, lsl #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1685
      imgBuf   += width;
    5978:	4688      	mov	r8, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1682
    return OLED_STATUS_INIT_ERROR;
  }

  if ( NULL == background )
  {
    for ( uint8_t i = 0; i < height; i++ )
    597a:	fa5f f388 	uxtb.w	r3, r8
    597e:	42bb      	cmp	r3, r7
    5980:	d234      	bcs.n	59ec <OLED_AddText+0xf4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1684
    {
      memset( (void*)imgBuf, 0, width*OLED_BYTES_PER_PIXEL );
    5982:	4630      	mov	r0, r6
    5984:	2100      	movs	r1, #0
    5986:	4652      	mov	r2, sl
    5988:	f000 fae5 	bl	5f56 <memset>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1685
      imgBuf   += width;
    598c:	4456      	add	r6, sl
    598e:	f108 0801 	add.w	r8, r8, #1
    5992:	e7f2      	b.n	597a <OLED_AddText+0x82>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1691
    }
  }

  else
  {
    copyAddr = (oled_pixel_t)( GuiDriver_SkipHeader( background ) ) + ( yCrd*OLED_SCREEN_WIDTH + xCrd );
    5994:	f04f 0860 	mov.w	r8, #96	; 0x60
    5998:	fb18 2800 	smlabb	r8, r8, r0, r2
    599c:	f108 0803 	add.w	r8, r8, #3
    59a0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
    59a4:	eb07 0b47 	add.w	fp, r7, r7, lsl #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1695
    for ( uint8_t i = 0; i < height; i++ )
    {
      OLED_Swap( (oled_pixel_t)imgBuf, (const uint8_t*)copyAddr, width );
      imgBuf   += width;
    59a8:	005b      	lsls	r3, r3, #1
    59aa:	eb08 1b8b 	add.w	fp, r8, fp, lsl #6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1692
  }

  else
  {
    copyAddr = (oled_pixel_t)( GuiDriver_SkipHeader( background ) ) + ( yCrd*OLED_SCREEN_WIDTH + xCrd );
    for ( uint8_t i = 0; i < height; i++ )
    59ae:	45d8      	cmp	r8, fp
    59b0:	d01c      	beq.n	59ec <OLED_AddText+0xf4>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1694
    {
      OLED_Swap( (oled_pixel_t)imgBuf, (const uint8_t*)copyAddr, width );
    59b2:	4630      	mov	r0, r6
    59b4:	4641      	mov	r1, r8
    59b6:	4652      	mov	r2, sl
    59b8:	9300      	str	r3, [sp, #0]
    59ba:	f7ff ff8d 	bl	58d8 <OLED_Swap>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1695
      imgBuf   += width;
    59be:	9b00      	ldr	r3, [sp, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1696
      copyAddr += OLED_SCREEN_WIDTH;
    59c0:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1695
  {
    copyAddr = (oled_pixel_t)( GuiDriver_SkipHeader( background ) ) + ( yCrd*OLED_SCREEN_WIDTH + xCrd );
    for ( uint8_t i = 0; i < height; i++ )
    {
      OLED_Swap( (oled_pixel_t)imgBuf, (const uint8_t*)copyAddr, width );
      imgBuf   += width;
    59c4:	441e      	add	r6, r3
    59c6:	e7f2      	b.n	59ae <OLED_AddText+0xb6>
OLED_AddText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:985
		}

		else
		{
		  if  (
						( ( currentChar_x + currentChar_width )  > oled_dynamic_area.width )
    59c8:	4b68      	ldr	r3, [pc, #416]	; (5b6c <OLED_AddText+0x274>)
    59ca:	781a      	ldrb	r2, [r3, #0]
    59cc:	4b64      	ldr	r3, [pc, #400]	; (5b60 <OLED_AddText+0x268>)
    59ce:	f893 8002 	ldrb.w	r8, [r3, #2]
    59d2:	18a9      	adds	r1, r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:984
		  return OLED_STATUS_INIT_ERROR;
		}

		else
		{
		  if  (
    59d4:	4541      	cmp	r1, r8
    59d6:	dc05      	bgt.n	59e4 <OLED_AddText+0xec>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:986
						( ( currentChar_x + currentChar_width )  > oled_dynamic_area.width )
					||  ( ( currentChar_y + currentChar_height ) > oled_dynamic_area.height )
    59d8:	9e02      	ldr	r6, [sp, #8]
    59da:	78d9      	ldrb	r1, [r3, #3]
    59dc:	443e      	add	r6, r7
    59de:	428e      	cmp	r6, r1
    59e0:	f340 808e 	ble.w	5b00 <OLED_AddText+0x208>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:989
			  )
		  {
			DestroyDynamicArea( chrBuf );
    59e4:	f7ff fce5 	bl	53b2 <DestroyDynamicArea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:965
		default: {}
	}

	if ( CreateTextBackground() != OLED_STATUS_SUCCESS )
	{
		return OLED_STATUS_ERROR;
    59e8:	2001      	movs	r0, #1
    59ea:	e0b5      	b.n	5b58 <OLED_AddText+0x260>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:933
		// if ( NULL == oled_dynamic_area.areaBuffer )
		// {
		//   return OLED_STATUS_INIT_ERROR;
		// }

	currentChar_y = ( oled_dynamic_area.height - text_height ) >> 1;
    59ec:	ebc9 0707 	rsb	r7, r9, r7
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:986

		else
		{
		  if  (
						( ( currentChar_x + currentChar_width )  > oled_dynamic_area.width )
					||  ( ( currentChar_y + currentChar_height ) > oled_dynamic_area.height )
    59f0:	f3c7 0747 	ubfx	r7, r7, #1, #8
    59f4:	9702      	str	r7, [sp, #8]
    59f6:	f04f 0b00 	mov.w	fp, #0
    59fa:	f8cd b004 	str.w	fp, [sp, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:973
	/**
	* write the characters into designated space, one by one
	*/

	chrCnt = 0;
	while ( 0 != text[chrCnt] )
    59fe:	9a01      	ldr	r2, [sp, #4]
    5a00:	9e05      	ldr	r6, [sp, #20]
    5a02:	b293      	uxth	r3, r2
    5a04:	5cf2      	ldrb	r2, [r6, r3]
    5a06:	2a00      	cmp	r2, #0
    5a08:	d05c      	beq.n	5ac4 <OLED_AddText+0x1cc>
WriteCharToBuf():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1186
  uint8_t
    foo = 0,
    mask;

  const uint8_t*
    pChTable = selectedFont + 8 + (uint16_t)( ( charToWrite - selectedFont_firstChar ) << 2 );
    5a0a:	4959      	ldr	r1, [pc, #356]	; (5b70 <OLED_AddText+0x278>)
    5a0c:	4b59      	ldr	r3, [pc, #356]	; (5b74 <OLED_AddText+0x27c>)
    5a0e:	8809      	ldrh	r1, [r1, #0]
    5a10:	681b      	ldr	r3, [r3, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1188

  currentChar_width  = *pChTable,
    5a12:	f8df 8158 	ldr.w	r8, [pc, #344]	; 5b6c <OLED_AddText+0x274>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1189
  currentChar_height = selectedFont_height;
    5a16:	4f58      	ldr	r7, [pc, #352]	; (5b78 <OLED_AddText+0x280>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1186
  uint8_t
    foo = 0,
    mask;

  const uint8_t*
    pChTable = selectedFont + 8 + (uint16_t)( ( charToWrite - selectedFont_firstChar ) << 2 );
    5a18:	1a51      	subs	r1, r2, r1
    5a1a:	0089      	lsls	r1, r1, #2
    5a1c:	b289      	uxth	r1, r1
    5a1e:	3108      	adds	r1, #8
    5a20:	185a      	adds	r2, r3, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1188

  currentChar_width  = *pChTable,
    5a22:	f813 9001 	ldrb.w	r9, [r3, r1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1189
  currentChar_height = selectedFont_height;
    5a26:	494f      	ldr	r1, [pc, #316]	; (5b64 <OLED_AddText+0x26c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1194

  uint32_t
    offset =      (uint32_t)pChTable[1]
              | ( (uint32_t)pChTable[2] << 8 )
              | ( (uint32_t)pChTable[3] << 16 );
    5a28:	78d6      	ldrb	r6, [r2, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1189

  const uint8_t*
    pChTable = selectedFont + 8 + (uint16_t)( ( charToWrite - selectedFont_firstChar ) << 2 );

  currentChar_width  = *pChTable,
  currentChar_height = selectedFont_height;
    5a2a:	f891 a000 	ldrb.w	sl, [r1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1193

  uint32_t
    offset =      (uint32_t)pChTable[1]
              | ( (uint32_t)pChTable[2] << 8 )
    5a2e:	7891      	ldrb	r1, [r2, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1192

  currentChar_width  = *pChTable,
  currentChar_height = selectedFont_height;

  uint32_t
    offset =      (uint32_t)pChTable[1]
    5a30:	7852      	ldrb	r2, [r2, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1188
    mask;

  const uint8_t*
    pChTable = selectedFont + 8 + (uint16_t)( ( charToWrite - selectedFont_firstChar ) << 2 );

  currentChar_width  = *pChTable,
    5a32:	f888 9000 	strb.w	r9, [r8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1194
  currentChar_height = selectedFont_height;

  uint32_t
    offset =      (uint32_t)pChTable[1]
              | ( (uint32_t)pChTable[2] << 8 )
              | ( (uint32_t)pChTable[3] << 16 );
    5a36:	0436      	lsls	r6, r6, #16
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1193
  currentChar_width  = *pChTable,
  currentChar_height = selectedFont_height;

  uint32_t
    offset =      (uint32_t)pChTable[1]
              | ( (uint32_t)pChTable[2] << 8 )
    5a38:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1192

  currentChar_width  = *pChTable,
  currentChar_height = selectedFont_height;

  uint32_t
    offset =      (uint32_t)pChTable[1]
    5a3c:	4316      	orrs	r6, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1197
              | ( (uint32_t)pChTable[2] << 8 )
              | ( (uint32_t)pChTable[3] << 16 );

  const uint8_t*
    pChBitMap = selectedFont + offset;
    5a3e:	441e      	add	r6, r3
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1199

  if ( 0 == isFontInitialized )
    5a40:	4b4e      	ldr	r3, [pc, #312]	; (5b7c <OLED_AddText+0x284>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1189

  const uint8_t*
    pChTable = selectedFont + 8 + (uint16_t)( ( charToWrite - selectedFont_firstChar ) << 2 );

  currentChar_width  = *pChTable,
  currentChar_height = selectedFont_height;
    5a42:	f887 a000 	strb.w	sl, [r7]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1199
              | ( (uint32_t)pChTable[3] << 16 );

  const uint8_t*
    pChBitMap = selectedFont + offset;

  if ( 0 == isFontInitialized )
    5a46:	781b      	ldrb	r3, [r3, #0]
    5a48:	b923      	cbnz	r3, 5a54 <OLED_AddText+0x15c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1202
  {
    // default font
    OLED_SetFont( guiFont_Tahoma_8_Regular, 0xFFFF );
    5a4a:	484d      	ldr	r0, [pc, #308]	; (5b80 <OLED_AddText+0x288>)
    5a4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a50:	f7ff fec6 	bl	57e0 <OLED_SetFont>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1206
  }

  // allocate space for char image
  *chrBuf = (oled_pixel_t)AllocateDynamicArea( currentChar_height * currentChar_width );
    5a54:	fb0a f009 	mul.w	r0, sl, r9
    5a58:	f7ff fca0 	bl	539c <AllocateDynamicArea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1208

  if ( NULL == *chrBuf )
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d04d      	beq.n	5afc <OLED_AddText+0x204>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1217

  for ( uint8_t yCnt = 0; yCnt < currentChar_height; yCnt++ )
  {
    mask = 0;

    for ( uint8_t xCnt = 0; xCnt < currentChar_width; xCnt++ )
    5a60:	f898 c000 	ldrb.w	ip, [r8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1227
        foo  = *pChBitMap++;
      }

      if ( 0 != ( foo & mask ) )
      {
        *( *chrBuf + yCnt*currentChar_width + xCnt ) = selectedFont_color;
    5a64:	4b47      	ldr	r3, [pc, #284]	; (5b84 <OLED_AddText+0x28c>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1213
  if ( NULL == *chrBuf )
  {
    return;
  }

  for ( uint8_t yCnt = 0; yCnt < currentChar_height; yCnt++ )
    5a66:	783f      	ldrb	r7, [r7, #0]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1227
        foo  = *pChBitMap++;
      }

      if ( 0 != ( foo & mask ) )
      {
        *( *chrBuf + yCnt*currentChar_width + xCnt ) = selectedFont_color;
    5a68:	881b      	ldrh	r3, [r3, #0]
    5a6a:	9303      	str	r3, [sp, #12]
    5a6c:	f04f 0a02 	mov.w	sl, #2
    5a70:	fb1c f20a 	smulbb	r2, ip, sl
    5a74:	2100      	movs	r1, #0
    5a76:	4680      	mov	r8, r0
    5a78:	9204      	str	r2, [sp, #16]
    5a7a:	4681      	mov	r9, r0
    5a7c:	468e      	mov	lr, r1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1213
  if ( NULL == *chrBuf )
  {
    return;
  }

  for ( uint8_t yCnt = 0; yCnt < currentChar_height; yCnt++ )
    5a7e:	b2cb      	uxtb	r3, r1
    5a80:	42bb      	cmp	r3, r7
    5a82:	d2a1      	bcs.n	59c8 <OLED_AddText+0xd0>
    5a84:	2200      	movs	r2, #0
    5a86:	4613      	mov	r3, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1217
  {
    mask = 0;

    for ( uint8_t xCnt = 0; xCnt < currentChar_width; xCnt++ )
    5a88:	fa5f fb82 	uxtb.w	fp, r2
    5a8c:	45e3      	cmp	fp, ip
    5a8e:	d213      	bcs.n	5ab8 <OLED_AddText+0x1c0>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1219
    {
      if ( 0 == mask )
    5a90:	b91b      	cbnz	r3, 5a9a <OLED_AddText+0x1a2>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1222
      {
        mask = 1;
        foo  = *pChBitMap++;
    5a92:	f896 e000 	ldrb.w	lr, [r6]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1221

    for ( uint8_t xCnt = 0; xCnt < currentChar_width; xCnt++ )
    {
      if ( 0 == mask )
      {
        mask = 1;
    5a96:	2301      	movs	r3, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1222
        foo  = *pChBitMap++;
    5a98:	3601      	adds	r6, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1225
      }

      if ( 0 != ( foo & mask ) )
    5a9a:	ea13 0b0e 	ands.w	fp, r3, lr
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1227
      {
        *( *chrBuf + yCnt*currentChar_width + xCnt ) = selectedFont_color;
    5a9e:	bf1c      	itt	ne
    5aa0:	f8dd b00c 	ldrne.w	fp, [sp, #12]
    5aa4:	f828 b012 	strhne.w	fp, [r8, r2, lsl #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1235
       else
       {
           *( *chrBuf + yCnt*currentChar_width + xCnt ) = 0;
       }

      mask <<= 1;
    5aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1232
        *( *chrBuf + yCnt*currentChar_width + xCnt ) = selectedFont_color;
      }

       else
       {
           *( *chrBuf + yCnt*currentChar_width + xCnt ) = 0;
    5aac:	bf08      	it	eq
    5aae:	f829 b012 	strheq.w	fp, [r9, r2, lsl #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1235
       }

      mask <<= 1;
    5ab2:	b2db      	uxtb	r3, r3
    5ab4:	3201      	adds	r2, #1
    5ab6:	e7e7      	b.n	5a88 <OLED_AddText+0x190>
    5ab8:	9a04      	ldr	r2, [sp, #16]
    5aba:	3101      	adds	r1, #1
    5abc:	fb1a 880c 	smlabb	r8, sl, ip, r8
    5ac0:	4491      	add	r9, r2
    5ac2:	e7dc      	b.n	5a7e <OLED_AddText+0x186>
OLED_AddText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1007
		  DestroyDynamicArea( chrBuf );
		  chrBuf = NULL;
		}
	}

	OLED_UpdateScreen(
    5ac4:	7823      	ldrb	r3, [r4, #0]
    5ac6:	7862      	ldrb	r2, [r4, #1]
OLED_UpdateScreen():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1859
  oled_pixel_t
    copyAddr = (oled_pixel_t)guiDriver_display.image + ( yCrd*OLED_SCREEN_WIDTH + xCrd );

  for ( uint8_t i = 0; i < height; i++ )
  {
    memcpy( (void*)copyAddr, (void*)image, width*OLED_BYTES_PER_PIXEL );
    5ac8:	78a7      	ldrb	r7, [r4, #2]
OLED_AddText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1012
	OLED_UpdateScreen(
              		   oled_dynamic_area.xCrd,
              		   oled_dynamic_area.yCrd,
              		   oled_dynamic_area.width,
              		   oled_dynamic_area.height,
              		   (const uint8_t*)oled_dynamic_area.areaBuffer
    5aca:	6866      	ldr	r6, [r4, #4]
OLED_UpdateScreen():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1855
                                const uint8_t* image
                              )
{
  // copy data
  oled_pixel_t
    copyAddr = (oled_pixel_t)guiDriver_display.image + ( yCrd*OLED_SCREEN_WIDTH + xCrd );
    5acc:	2560      	movs	r5, #96	; 0x60
    5ace:	fb15 3502 	smlabb	r5, r5, r2, r3
    5ad2:	4b2d      	ldr	r3, [pc, #180]	; (5b88 <OLED_AddText+0x290>)
    5ad4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    5ad8:	78e3      	ldrb	r3, [r4, #3]
    5ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1859

  for ( uint8_t i = 0; i < height; i++ )
  {
    memcpy( (void*)copyAddr, (void*)image, width*OLED_BYTES_PER_PIXEL );
    5ade:	007f      	lsls	r7, r7, #1
    5ae0:	eb05 1483 	add.w	r4, r5, r3, lsl #6
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1857
{
  // copy data
  oled_pixel_t
    copyAddr = (oled_pixel_t)guiDriver_display.image + ( yCrd*OLED_SCREEN_WIDTH + xCrd );

  for ( uint8_t i = 0; i < height; i++ )
    5ae4:	42a5      	cmp	r5, r4
    5ae6:	d007      	beq.n	5af8 <OLED_AddText+0x200>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1859
  {
    memcpy( (void*)copyAddr, (void*)image, width*OLED_BYTES_PER_PIXEL );
    5ae8:	4628      	mov	r0, r5
    5aea:	4631      	mov	r1, r6
    5aec:	463a      	mov	r2, r7
    5aee:	f000 fa29 	bl	5f44 <memcpy>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1860
    copyAddr += OLED_SCREEN_WIDTH;
    5af2:	35c0      	adds	r5, #192	; 0xc0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1861
    image    += width*OLED_BYTES_PER_PIXEL;
    5af4:	443e      	add	r6, r7
    5af6:	e7f5      	b.n	5ae4 <OLED_AddText+0x1ec>
OLED_AddText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1015
              		   oled_dynamic_area.width,
              		   oled_dynamic_area.height,
              		   (const uint8_t*)oled_dynamic_area.areaBuffer
            		 );

	return OLED_STATUS_SUCCESS;
    5af8:	2000      	movs	r0, #0
    5afa:	e02d      	b.n	5b58 <OLED_AddText+0x260>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:979
	{
		WriteCharToBuf( text[chrCnt++], &chrBuf );

		if ( NULL == chrBuf )
		{
		  return OLED_STATUS_INIT_ERROR;
    5afc:	2003      	movs	r0, #3
    5afe:	e02b      	b.n	5b58 <OLED_AddText+0x260>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:996
			return OLED_STATUS_ERROR;
		  }

		  // copy data
		  oled_pixel_t
			  copyAddr = oled_dynamic_area.areaBuffer + ( currentChar_y * oled_dynamic_area.width + currentChar_x );
    5b00:	9e02      	ldr	r6, [sp, #8]
    5b02:	685b      	ldr	r3, [r3, #4]
    5b04:	fb08 5106 	mla	r1, r8, r6, r5
AddCharToTextArea():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1720

                                        oled_pixel_t copyAddr,
                                             uint8_t imgWidth
                                      )
{
  if ( NULL == copyAddr )
    5b08:	eb13 0141 	adds.w	r1, r3, r1, lsl #1
    5b0c:	d01a      	beq.n	5b44 <OLED_AddText+0x24c>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1734
      if ( 0 != chrPtr[j] )
      {
          copyAddr[j] = chrPtr[j];
      }
    }
    copyAddr += imgWidth;
    5b0e:	ea4f 0848 	mov.w	r8, r8, lsl #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1735
    chrPtr   += chrWidth;
    5b12:	ea4f 0942 	mov.w	r9, r2, lsl #1
    5b16:	4686      	mov	lr, r0
    5b18:	2600      	movs	r6, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1725
  if ( NULL == copyAddr )
  {
    return OLED_STATUS_INIT_ERROR;
  }

  for ( uint8_t i = 0; i < chrHeight; i++ )
    5b1a:	b2f3      	uxtb	r3, r6
    5b1c:	42bb      	cmp	r3, r7
    5b1e:	d211      	bcs.n	5b44 <OLED_AddText+0x24c>
    5b20:	2300      	movs	r3, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1727
  {
    for ( uint8_t j = 0; j < chrWidth; j++ )
    5b22:	fa5f fc83 	uxtb.w	ip, r3
    5b26:	4594      	cmp	ip, r2
    5b28:	d208      	bcs.n	5b3c <OLED_AddText+0x244>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1729
    {
      if ( 0 != chrPtr[j] )
    5b2a:	f83e c013 	ldrh.w	ip, [lr, r3, lsl #1]
    5b2e:	f1bc 0f00 	cmp.w	ip, #0
    5b32:	d001      	beq.n	5b38 <OLED_AddText+0x240>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1731
      {
          copyAddr[j] = chrPtr[j];
    5b34:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
    5b38:	3301      	adds	r3, #1
    5b3a:	e7f2      	b.n	5b22 <OLED_AddText+0x22a>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1734
      }
    }
    copyAddr += imgWidth;
    5b3c:	4441      	add	r1, r8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1735
    chrPtr   += chrWidth;
    5b3e:	44ce      	add	lr, r9
    5b40:	3601      	adds	r6, #1
    5b42:	e7ea      	b.n	5b1a <OLED_AddText+0x222>
OLED_AddText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:999
		  // copy data
		  oled_pixel_t
			  copyAddr = oled_dynamic_area.areaBuffer + ( currentChar_y * oled_dynamic_area.width + currentChar_x );
		  AddCharToTextArea( chrBuf, currentChar_width, currentChar_height, copyAddr, oled_dynamic_area.width );

		  currentChar_x += ( currentChar_width+1 );
    5b44:	3201      	adds	r2, #1
    5b46:	4415      	add	r5, r2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1002
		  currentChar_y += 0;

		  DestroyDynamicArea( chrBuf );
    5b48:	f7ff fc33 	bl	53b2 <DestroyDynamicArea>
    5b4c:	f8dd b004 	ldr.w	fp, [sp, #4]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:999
		  // copy data
		  oled_pixel_t
			  copyAddr = oled_dynamic_area.areaBuffer + ( currentChar_y * oled_dynamic_area.width + currentChar_x );
		  AddCharToTextArea( chrBuf, currentChar_width, currentChar_height, copyAddr, oled_dynamic_area.width );

		  currentChar_x += ( currentChar_width+1 );
    5b50:	b2ed      	uxtb	r5, r5
    5b52:	f10b 0b01 	add.w	fp, fp, #1
    5b56:	e750      	b.n	59fa <OLED_AddText+0x102>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1016
              		   oled_dynamic_area.height,
              		   (const uint8_t*)oled_dynamic_area.areaBuffer
            		 );

	return OLED_STATUS_SUCCESS;
}
    5b58:	b009      	add	sp, #36	; 0x24
    5b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b5e:	bf00      	nop
    5b60:	1fff9f3c 	.word	0x1fff9f3c
    5b64:	1fff56ae 	.word	0x1fff56ae
    5b68:	1fff04b0 	.word	0x1fff04b0
    5b6c:	1fff56ad 	.word	0x1fff56ad
    5b70:	1fff9f20 	.word	0x1fff9f20
    5b74:	1fff9f24 	.word	0x1fff9f24
    5b78:	1fff56ac 	.word	0x1fff56ac
    5b7c:	1fff9f44 	.word	0x1fff9f44
    5b80:	00008429 	.word	0x00008429
    5b84:	1fff56b0 	.word	0x1fff56b0
    5b88:	1fff0eac 	.word	0x1fff0eac

00005b8c <OLED_DrawText>:
OLED_DrawText():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1025
 * @param text desired text
 * @param x    x-coordinate for the given text
 * @param y    y-coordinate for the given text
 */
oled_status_t OLED_DrawText ( const uint8_t* text )
{
    5b8c:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1027

  if ( NULL == text )
    5b8e:	b1a8      	cbz	r0, 5bbc <OLED_DrawText+0x30>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1035
  }

  OLED_AddText( text );

  // set the locations
  SetBorders( oled_dynamic_area.xCrd, oled_dynamic_area.yCrd, oled_dynamic_area.width, oled_dynamic_area.height );
    5b90:	4c0b      	ldr	r4, [pc, #44]	; (5bc0 <OLED_DrawText+0x34>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1032
  if ( NULL == text )
  {
    return OLED_STATUS_ERROR;
  }

  OLED_AddText( text );
    5b92:	f7ff feb1 	bl	58f8 <OLED_AddText>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1035

  // set the locations
  SetBorders( oled_dynamic_area.xCrd, oled_dynamic_area.yCrd, oled_dynamic_area.width, oled_dynamic_area.height );
    5b96:	7820      	ldrb	r0, [r4, #0]
    5b98:	7861      	ldrb	r1, [r4, #1]
    5b9a:	78a2      	ldrb	r2, [r4, #2]
    5b9c:	78e3      	ldrb	r3, [r4, #3]
    5b9e:	f7ff fd81 	bl	56a4 <SetBorders>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1038

  // fill the GRAM
  if ( OLED_STATUS_SUCCESS != OLED_SendData( (const uint8_t*)oled_dynamic_area.areaBuffer, oled_dynamic_area.width * oled_dynamic_area.height * OLED_BYTES_PER_PIXEL ) )
    5ba2:	78a1      	ldrb	r1, [r4, #2]
    5ba4:	78e3      	ldrb	r3, [r4, #3]
    5ba6:	6860      	ldr	r0, [r4, #4]
    5ba8:	fb11 f103 	smulbb	r1, r1, r3
    5bac:	0049      	lsls	r1, r1, #1
    5bae:	f7ff fdb3 	bl	5718 <OLED_SendData>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1040
  {
      return OLED_STATUS_PROTOCOL_ERROR;
    5bb2:	2800      	cmp	r0, #0
    5bb4:	bf14      	ite	ne
    5bb6:	2002      	movne	r0, #2
    5bb8:	2000      	moveq	r0, #0
    5bba:	bd10      	pop	{r4, pc}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1029
oled_status_t OLED_DrawText ( const uint8_t* text )
{

  if ( NULL == text )
  {
    return OLED_STATUS_ERROR;
    5bbc:	2001      	movs	r0, #1
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/OLED/src/OLED_driver.c:1045
      return OLED_STATUS_PROTOCOL_ERROR;
  }

//  free( currentTextAreaImage );
  return OLED_STATUS_SUCCESS;
}
    5bbe:	bd10      	pop	{r4, pc}
    5bc0:	1fff9f3c 	.word	0x1fff9f3c

00005bc4 <HEXIWEAR_startup>:
HEXIWEAR_startup():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:60

static event_flags_t
	HEXIWEAR_eventFlag  = 1;

void HEXIWEAR_startup( task_param_t param )
{
    5bc4:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:66
  uint8_t
    status = 0;

  /** output GPIO configuration */

  GPIO_DRV_Init( NULL, OLED_cfg );
    5bc6:	2000      	movs	r0, #0
    5bc8:	4928      	ldr	r1, [pc, #160]	; (5c6c <HEXIWEAR_startup+0xa8>)
    5bca:	f7fe f971 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:67
  GPIO_DRV_Init( NULL, FLASH_cfg );
    5bce:	2000      	movs	r0, #0
    5bd0:	4927      	ldr	r1, [pc, #156]	; (5c70 <HEXIWEAR_startup+0xac>)
    5bd2:	f7fe f96d 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:68
  GPIO_DRV_Init( NULL, PWR_cfg );
    5bd6:	2000      	movs	r0, #0
    5bd8:	4926      	ldr	r1, [pc, #152]	; (5c74 <HEXIWEAR_startup+0xb0>)
    5bda:	f7fe f969 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:69
  GPIO_DRV_Init( NULL, VIBRO_cfg );
    5bde:	2000      	movs	r0, #0
    5be0:	4925      	ldr	r1, [pc, #148]	; (5c78 <HEXIWEAR_startup+0xb4>)
    5be2:	f7fe f965 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:70
  GPIO_DRV_Init( NULL, RGB_cfg );
    5be6:	2000      	movs	r0, #0
    5be8:	4924      	ldr	r1, [pc, #144]	; (5c7c <HEXIWEAR_startup+0xb8>)
    5bea:	f7fe f961 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:71
  GPIO_DRV_Init( NULL, KW40_GPIO_cfg );
    5bee:	2000      	movs	r0, #0
    5bf0:	4923      	ldr	r1, [pc, #140]	; (5c80 <HEXIWEAR_startup+0xbc>)
    5bf2:	f7fe f95d 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:76


  /** input GPIO configuration */

  GPIO_DRV_Init( BAT_CHG_cfg, NULL );
    5bf6:	4823      	ldr	r0, [pc, #140]	; (5c84 <HEXIWEAR_startup+0xc0>)
    5bf8:	2100      	movs	r1, #0
    5bfa:	f7fe f959 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:77
  GPIO_DRV_Init( TAP_cfg, NULL );
    5bfe:	2100      	movs	r1, #0
    5c00:	4821      	ldr	r0, [pc, #132]	; (5c88 <HEXIWEAR_startup+0xc4>)
    5c02:	f7fe f955 	bl	3eb0 <GPIO_DRV_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:84
#if defined( HEXIWEAR_DEBUG )
  GPIO_DRV_Init( NULL, DEBUG_cfg );
#endif

  // reset KW40
  GPIO_DRV_ClearPinOutput( KW40_RST );
    5c06:	f240 1017 	movw	r0, #279	; 0x117
    5c0a:	f7fe f987 	bl	3f1c <GPIO_DRV_ClearPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:85
  OSA_TimeDelay( 10 );
    5c0e:	200a      	movs	r0, #10
    5c10:	f7fc fbf8 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:86
  GPIO_DRV_SetPinOutput( KW40_RST );
    5c14:	f240 1017 	movw	r0, #279	; 0x117
    5c18:	f7fe f964 	bl	3ee4 <GPIO_DRV_SetPinOutput>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:87
  OSA_TimeDelay( 200 );
    5c1c:	20c8      	movs	r0, #200	; 0xc8
    5c1e:	f7fc fbf1 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:90

  // intern flash initialization
  INTFLASH_Init();
    5c22:	f7fa fde9 	bl	7f8 <INTFLASH_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:94


  /** create basic tasks */
  status |= HostInterface_Init();
    5c26:	f7fa fc8f 	bl	548 <HostInterface_Init>
PORT_HAL_SetPinIntMode():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:381
static inline void PORT_HAL_SetPinIntMode(PORT_Type * base,
                                          uint32_t pin,
                                          port_interrupt_config_t intConfig)
{
    assert(pin < 32U);
    PORT_BWR_PCR_IRQC(base, pin, intConfig);
    5c2a:	4b18      	ldr	r3, [pc, #96]	; (5c8c <HEXIWEAR_startup+0xc8>)
    5c2c:	685a      	ldr	r2, [r3, #4]
    5c2e:	f022 7287 	bic.w	r2, r2, #17694720	; 0x10e0000
    5c32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5c36:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    5c3a:	605a      	str	r2, [r3, #4]
    5c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5c3e:	f022 7287 	bic.w	r2, r2, #17694720	; 0x10e0000
    5c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5c46:	f442 2230 	orr.w	r2, r2, #720896	; 0xb0000
    5c4a:	631a      	str	r2, [r3, #48]	; 0x30
NVIC_SetPriority():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1706
    5c4c:	4b10      	ldr	r3, [pc, #64]	; (5c90 <HEXIWEAR_startup+0xcc>)
    5c4e:	2210      	movs	r2, #16
    5c50:	f883 233d 	strb.w	r2, [r3, #829]	; 0x33d
NVIC_EnableIRQ():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1628
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5c54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5c58:	605a      	str	r2, [r3, #4]
HEXIWEAR_startup():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:104
  /** set charging battery interrupt */
  PORT_HAL_SetPinIntMode( PORTC, 12, kPortIntEitherEdge );
  NVIC_SetPriority( PORTC_IRQn, HEXIWEAR_CHG_IRQ_PRIO );
  INT_SYS_EnableIRQ( PORTC_IRQn );

  if ( HEXIWEAR_STATUS_SUCCESS != status )
    5c5a:	b110      	cbz	r0, 5c62 <HEXIWEAR_startup+0x9e>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:106
  {
    catch( CATCH_INIT );
    5c5c:	2000      	movs	r0, #0
    5c5e:	f7fa fdf5 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:114 (discriminator 1)
//  CLOCK_SYS_Init( g_clockManConfigsArr, FSL_CLOCK_MANAGER_CONFIG_CNT, g_clockManCallbacksArr, FSL_CLOCK_MANAGER_CALLBACK_CNT );
//  POWER_SYS_Init( powerConfigsArr, 2U, powerStaticCallbacksConfigsArr, 0 );

  while (1)
  {
    OSA_TaskDestroy( NULL );
    5c62:	2000      	movs	r0, #0
    5c64:	f7fc fb8a 	bl	237c <OSA_TaskDestroy>
    5c68:	e7fb      	b.n	5c62 <HEXIWEAR_startup+0x9e>
    5c6a:	bf00      	nop
    5c6c:	0000831c 	.word	0x0000831c
    5c70:	000082e0 	.word	0x000082e0
    5c74:	000083b8 	.word	0x000083b8
    5c78:	000083a0 	.word	0x000083a0
    5c7c:	00008370 	.word	0x00008370
    5c80:	000082f8 	.word	0x000082f8
    5c84:	000082c8 	.word	0x000082c8
    5c88:	0000834c 	.word	0x0000834c
    5c8c:	4004b000 	.word	0x4004b000
    5c90:	e000e100 	.word	0xe000e100

00005c94 <HEXIWEAR_Init>:
HEXIWEAR_Init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:123
/**
 * initialize the rest of the tasks
 * @return status flag
 */
hexiwear_status_t HEXIWEAR_Init()
{
    5c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:125
  osa_status_t
    status = OSA_TaskCreate (
    5c96:	2400      	movs	r4, #0
    5c98:	2301      	movs	r3, #1
    5c9a:	e88d 0018 	stmia.w	sp, {r3, r4}
    5c9e:	4b08      	ldr	r3, [pc, #32]	; (5cc0 <HEXIWEAR_Init+0x2c>)
    5ca0:	9303      	str	r3, [sp, #12]
    5ca2:	9402      	str	r4, [sp, #8]
    5ca4:	4807      	ldr	r0, [pc, #28]	; (5cc4 <HEXIWEAR_Init+0x30>)
    5ca6:	4908      	ldr	r1, [pc, #32]	; (5cc8 <HEXIWEAR_Init+0x34>)
    5ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5cac:	4623      	mov	r3, r4
    5cae:	f7fc fb4f 	bl	2350 <OSA_TaskCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:136
                              (task_param_t)0,
                              false,
                              &hexiwear_startup_handler
                            );

  if ( kStatus_OSA_Success != status )
    5cb2:	b118      	cbz	r0, 5cbc <HEXIWEAR_Init+0x28>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:138
  {
    catch( CATCH_INIT );
    5cb4:	4620      	mov	r0, r4
    5cb6:	f7fa fdc9 	bl	84c <catch>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:139
    return HEXIWEAR_STATUS_INIT_ERROR;
    5cba:	2002      	movs	r0, #2
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:146

  else
  {
    return HEXIWEAR_STATUS_SUCCESS;
  }
}
    5cbc:	b004      	add	sp, #16
    5cbe:	bd10      	pop	{r4, pc}
    5cc0:	1fff9f48 	.word	0x1fff9f48
    5cc4:	00005bc5 	.word	0x00005bc5
    5cc8:	00008ab8 	.word	0x00008ab8

00005ccc <HEXIWEAR_ResetMCU>:
__DSB():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/cmsis_gcc.h:429
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5ccc:	f3bf 8f4f 	dsb	sy
NVIC_SystemReset():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1795
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                           /** Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5cd0:	4a05      	ldr	r2, [pc, #20]	; (5ce8 <HEXIWEAR_ResetMCU+0x1c>)
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1794
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                           /** Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5cd2:	4b06      	ldr	r3, [pc, #24]	; (5cec <HEXIWEAR_ResetMCU+0x20>)
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1795
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5cd4:	68d1      	ldr	r1, [r2, #12]
    5cd6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/core_cm4.h:1794
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                           /** Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5cda:	430b      	orrs	r3, r1
    5cdc:	60d3      	str	r3, [r2, #12]
__DSB():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/cmsis_gcc.h:429
    5cde:	f3bf 8f4f 	dsb	sy
__NOP():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\cmsis\inc/cmsis_gcc.h:375
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    5ce2:	bf00      	nop
    5ce4:	e7fd      	b.n	5ce2 <HEXIWEAR_ResetMCU+0x16>
    5ce6:	bf00      	nop
    5ce8:	e000ed00 	.word	0xe000ed00
    5cec:	05fa0004 	.word	0x05fa0004

00005cf0 <vApplicationIdleHook>:
vApplicationIdleHook():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/HEXIWEAR/src/HEXIWEAR_driver.c:199
    return HEXIWEAR_STATUS_SUCCESS;
}

void vApplicationIdleHook( void )
{
	asm("nop");
    5cf0:	bf00      	nop
    5cf2:	4770      	bx	lr

00005cf4 <LLWU_IRQHandler>:
LLWU_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:48
#endif


 /** User includes (#include below this line is not maintained by Processor Expert) */
void LLWU_IRQHandler(void)
{
    5cf4:	4770      	bx	lr

00005cf6 <I2C0_IRQHandler>:
I2C0_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:55
}

/*! NFS_I2C IRQ handler */
void I2C0_IRQHandler(void)
{
  I2C_DRV_IRQHandler(FSL_NFS_I2C);
    5cf6:	2000      	movs	r0, #0
    5cf8:	f7fd bf02 	b.w	3b00 <I2C_DRV_IRQHandler>

00005cfc <I2C1_IRQHandler>:
I2C1_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:61
}

/*! FS_I2C IRQ handler */
void I2C1_IRQHandler(void)
{
  I2C_DRV_IRQHandler(FSL_FS_I2C);
    5cfc:	2001      	movs	r0, #1
    5cfe:	f7fd beff 	b.w	3b00 <I2C_DRV_IRQHandler>

00005d02 <SPI1_IRQHandler>:
SPI1_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:68

/*! FLASH_SPI IRQ handler */
void SPI1_IRQHandler(void)
{
#if FLASH_SPI_DMA_MODE
  DSPI_DRV_EdmaIRQHandler(FSL_FLASH_SPI);
    5d02:	2001      	movs	r0, #1
    5d04:	f7fe be68 	b.w	49d8 <DSPI_DRV_EdmaIRQHandler>

00005d08 <SPI2_IRQHandler>:
SPI2_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:79

/*! OLED_SPI IRQ handler */
void SPI2_IRQHandler(void)
{
#if OLED_SPI_DMA_MODE
  DSPI_DRV_EdmaIRQHandler(FSL_OLED_SPI);
    5d08:	2002      	movs	r0, #2
    5d0a:	f7fe be65 	b.w	49d8 <DSPI_DRV_EdmaIRQHandler>

00005d0e <RTC_IRQHandler>:
RTC_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:87
#endif
   /** Write your code here ... */
}

void RTC_IRQHandler(void)
{
    5d0e:	4770      	bx	lr

00005d10 <RTC_Seconds_IRQHandler>:
RTC_Seconds_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:92
  /** Write your code here ... */
}

void RTC_Seconds_IRQHandler(void)
{
    5d10:	4770      	bx	lr

00005d12 <ADC0_IRQHandler>:
ADC0_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:98
   /** Write your code here ... */
}

/*! BATTERY_ADC IRQ handler */
void ADC0_IRQHandler(void)
{
    5d12:	4770      	bx	lr

00005d14 <LPTMR0_IRQHandler>:
LPTMR0_IRQHandler():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/Events.c:104
   /** Write your code here ... */
}

void LPTMR0_IRQHandler(void)
{
  LPTMR_DRV_IRQHandler( FSL_SENSOR_TIMER );
    5d14:	2000      	movs	r0, #0
    5d16:	f7fd bd9d 	b.w	3854 <LPTMR_DRV_IRQHandler>
	...

00005d1c <PORTC_IRQHandler>:
PORT_HAL_ClearPortIntFlag():
c:\hexiwear\hexiwear-master\sw\mk64kds\hexiwear_rtos\code\sdk\platform\hal\inc/fsl_port_hal.h:459
 *
 * @param base  port base pointer
 */
static inline void PORT_HAL_ClearPortIntFlag(PORT_Type * base)
{
    PORT_WR_ISFR(base, ~0U);
    5d1c:	4b02      	ldr	r3, [pc, #8]	; (5d28 <PORTC_IRQHandler+0xc>)
    5d1e:	f04f 32ff 	mov.w	r2, #4294967295
    5d22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5d26:	4770      	bx	lr
    5d28:	4004b000 	.word	0x4004b000

00005d2c <PORTD_IRQHandler>:
    5d2c:	4b02      	ldr	r3, [pc, #8]	; (5d38 <PORTD_IRQHandler+0xc>)
    5d2e:	f04f 32ff 	mov.w	r2, #4294967295
    5d32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5d36:	4770      	bx	lr
    5d38:	4004c000 	.word	0x4004c000

00005d3c <PORTB_IRQHandler>:
    5d3c:	4b02      	ldr	r3, [pc, #8]	; (5d48 <PORTB_IRQHandler+0xc>)
    5d3e:	f04f 32ff 	mov.w	r2, #4294967295
    5d42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5d46:	4770      	bx	lr
    5d48:	4004a000 	.word	0x4004a000

00005d4c <PE_low_level_init>:
PE_low_level_init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PE_low_level_init.c:76

/**
 * set clocks, configure pins and initialize RTOS and hardware components
 */
void PE_low_level_init()
{
    5d4c:	b508      	push	{r3, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PE_low_level_init.c:79
   /** Global routing function and crystal values initialization */
//  #if CPU_HARDWARE_INIT
  hardware_init();
    5d4e:	f7ff f92b 	bl	4fa8 <hardware_init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PE_low_level_init.c:84
//  #endif  /** CPU_HARDWARE_INIT */

   /** RTOS initialization */
//  #ifdef PEX_RTOS_INIT
  PEX_RTOS_INIT();                    /** Initialization of the selected RTOS. Macro is defined by the RTOS component. */
    5d52:	f7fc fb61 	bl	2418 <OSA_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PE_low_level_init.c:91

   /** Components initialization, when RTOS is active this method is called in rtos_main_task() (from MainTask component) */
//  #ifdef PEX_COMPONENTS_INIT
  PEX_components_init();
//  #endif
}
    5d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
PEX_components_init():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/PE_low_level_init.c:68
  Peripherals_Init();
  #endif  /** CPU_PERIPHERALS_INIT */

   /** Rest of components initialization */
//  #if CPU_COMPONENTS_INIT
  Components_Init();
    5d5a:	f7ff b85f 	b.w	4e1c <Components_Init>
	...

00005d60 <Task1>:
Task1():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:46
#include "OLED_defs.h"
#include "OLED_driver.h"
#include "OLED_resources.h"

void Task1( task_param_t param )
{
    5d60:	b510      	push	{r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:52
    oled_dynamic_area_t oled_dynamic_area;
    oled_text_properties_t oled_text_properties;

    hostInterface_packet_t command_packet;

	OLED_Init( &oledModule, &oledSettings );
    5d62:	491e      	ldr	r1, [pc, #120]	; (5ddc <Task1+0x7c>)
    5d64:	481e      	ldr	r0, [pc, #120]	; (5de0 <Task1+0x80>)
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:46
#include "OLED_defs.h"
#include "OLED_driver.h"
#include "OLED_resources.h"

void Task1( task_param_t param )
{
    5d66:	b08c      	sub	sp, #48	; 0x30
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:52
    oled_dynamic_area_t oled_dynamic_area;
    oled_text_properties_t oled_text_properties;

    hostInterface_packet_t command_packet;

	OLED_Init( &oledModule, &oledSettings );
    5d68:	f7ff fb5e 	bl	5428 <OLED_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:53
	OLED_FillScreen( GUI_COLOR_BLACK );
    5d6c:	2000      	movs	r0, #0
    5d6e:	f7ff fd1b 	bl	57a8 <OLED_FillScreen>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:55

	oled_dynamic_area.xCrd = 0;
    5d72:	2400      	movs	r4, #0
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:57
	oled_dynamic_area.yCrd = 0;
	oled_dynamic_area.width = 96;
    5d74:	2360      	movs	r3, #96	; 0x60
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:59
	oled_dynamic_area.height = 96;
	OLED_SetDynamicArea( &oled_dynamic_area );
    5d76:	4668      	mov	r0, sp
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:57
	OLED_Init( &oledModule, &oledSettings );
	OLED_FillScreen( GUI_COLOR_BLACK );

	oled_dynamic_area.xCrd = 0;
	oled_dynamic_area.yCrd = 0;
	oled_dynamic_area.width = 96;
    5d78:	f88d 3002 	strb.w	r3, [sp, #2]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:58
	oled_dynamic_area.height = 96;
    5d7c:	f88d 3003 	strb.w	r3, [sp, #3]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:55
    hostInterface_packet_t command_packet;

	OLED_Init( &oledModule, &oledSettings );
	OLED_FillScreen( GUI_COLOR_BLACK );

	oled_dynamic_area.xCrd = 0;
    5d80:	f88d 4000 	strb.w	r4, [sp]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:56
	oled_dynamic_area.yCrd = 0;
    5d84:	f88d 4001 	strb.w	r4, [sp, #1]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:59
	oled_dynamic_area.width = 96;
	oled_dynamic_area.height = 96;
	OLED_SetDynamicArea( &oled_dynamic_area );
    5d88:	f7ff fd5c 	bl	5844 <OLED_SetDynamicArea>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:61

	oled_text_properties.font = guiFont_Tahoma_8_Regular;
    5d8c:	4b15      	ldr	r3, [pc, #84]	; (5de4 <Task1+0x84>)
    5d8e:	9302      	str	r3, [sp, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:62
	oled_text_properties.fontColor = GUI_COLOR_WHITE;
    5d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5d94:	f8ad 300c 	strh.w	r3, [sp, #12]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:65
	oled_text_properties.alignParam = OLED_TEXT_ALIGN_LEFT;
	oled_text_properties.background = NULL;
	OLED_SetTextProperties( &oled_text_properties );
    5d98:	a802      	add	r0, sp, #8
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:63
	oled_dynamic_area.height = 96;
	OLED_SetDynamicArea( &oled_dynamic_area );

	oled_text_properties.font = guiFont_Tahoma_8_Regular;
	oled_text_properties.fontColor = GUI_COLOR_WHITE;
	oled_text_properties.alignParam = OLED_TEXT_ALIGN_LEFT;
    5d9a:	2301      	movs	r3, #1
    5d9c:	f88d 300e 	strb.w	r3, [sp, #14]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:64
	oled_text_properties.background = NULL;
    5da0:	9404      	str	r4, [sp, #16]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:65
	OLED_SetTextProperties( &oled_text_properties );
    5da2:	f7ff fd6b 	bl	587c <OLED_SetTextProperties>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:67

	OLED_DrawText( "Welcome" );
    5da6:	4810      	ldr	r0, [pc, #64]	; (5de8 <Task1+0x88>)
    5da8:	f7ff fef0 	bl	5b8c <OLED_DrawText>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:71

	while(1)
	{
		OSA_TimeDelay( 500 );
    5dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    5db0:	f7fc fb28 	bl	2404 <OSA_TimeDelay>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:73

		HostInterface_CmdQueueMsgGet( &command_packet );
    5db4:	a805      	add	r0, sp, #20
    5db6:	f7fa fccd 	bl	754 <HostInterface_CmdQueueMsgGet>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:75

		switch( command_packet.type )
    5dba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    5dbe:	2b03      	cmp	r3, #3
    5dc0:	d8f4      	bhi.n	5dac <Task1+0x4c>
    5dc2:	e8df f003 	tbb	[pc, r3]
    5dc6:	0402      	.short	0x0402
    5dc8:	0806      	.short	0x0806
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:81
		{

		    // buttons
		    case packetType_pressUp:
		    {
		    	OLED_DrawText( "Up" );
    5dca:	4808      	ldr	r0, [pc, #32]	; (5dec <Task1+0x8c>)
    5dcc:	e7ec      	b.n	5da8 <Task1+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:88

				break;
		    }
		    case packetType_pressDown:
		    {
		    	OLED_DrawText( "Down" );
    5dce:	4808      	ldr	r0, [pc, #32]	; (5df0 <Task1+0x90>)
    5dd0:	e7ea      	b.n	5da8 <Task1+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:95

				break;
		    }
		    case packetType_pressLeft:
		    {
		    	OLED_DrawText( "Left" );
    5dd2:	4808      	ldr	r0, [pc, #32]	; (5df4 <Task1+0x94>)
    5dd4:	e7e8      	b.n	5da8 <Task1+0x48>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:102

				break;
		    }
		    case packetType_pressRight:
		    {
		    	OLED_DrawText( "Right" );
    5dd6:	4808      	ldr	r0, [pc, #32]	; (5df8 <Task1+0x98>)
    5dd8:	e7e6      	b.n	5da8 <Task1+0x48>
    5dda:	bf00      	nop
    5ddc:	1fff0434 	.word	0x1fff0434
    5de0:	1fff0444 	.word	0x1fff0444
    5de4:	00008429 	.word	0x00008429
    5de8:	00008ac9 	.word	0x00008ac9
    5dec:	00008ad1 	.word	0x00008ad1
    5df0:	00008ad4 	.word	0x00008ad4
    5df4:	00008ad9 	.word	0x00008ad9
    5df8:	00008ade 	.word	0x00008ade

00005dfc <main>:
main():
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:114
	    }
	}
}

void main()
{
    5dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:116
  /** initialize the hardware */
  PE_low_level_init();
    5dfe:	f7ff ffa5 	bl	5d4c <PE_low_level_init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:119

  /** disable write buffering end enable ARM exceptions */
  HEXIWEAR_EnableExceptions();
    5e02:	4b0e      	ldr	r3, [pc, #56]	; (5e3c <main+0x40>)
    5e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5e06:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    5e0a:	625a      	str	r2, [r3, #36]	; 0x24
    5e0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5e10:	689a      	ldr	r2, [r3, #8]
    5e12:	f042 0202 	orr.w	r2, r2, #2
    5e16:	609a      	str	r2, [r3, #8]
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:122

  /** initialize the startup task */
  HEXIWEAR_Init();
    5e18:	f7ff ff3c 	bl	5c94 <HEXIWEAR_Init>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:124

  OSA_TaskCreate(
    5e1c:	230a      	movs	r3, #10
    5e1e:	9300      	str	r3, [sp, #0]
    5e20:	2300      	movs	r3, #0
    5e22:	9301      	str	r3, [sp, #4]
    5e24:	9302      	str	r3, [sp, #8]
    5e26:	9303      	str	r3, [sp, #12]
    5e28:	4905      	ldr	r1, [pc, #20]	; (5e40 <main+0x44>)
    5e2a:	4806      	ldr	r0, [pc, #24]	; (5e44 <main+0x48>)
    5e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5e30:	f7fc fa8e 	bl	2350 <OSA_TaskCreate>
C:/hexiwear/HEXIWEAR-master/SW/MK64KDS/HEXIWEAR_RTOS/code/main.c:136
                  false,
                  NULL
                );

  /** start RTOS scheduler */
  HEXIWEAR_Start();
    5e34:	f7fc faf2 	bl	241c <OSA_Start>
    5e38:	e7fe      	b.n	5e38 <main+0x3c>
    5e3a:	bf00      	nop
    5e3c:	e000ed00 	.word	0xe000ed00
    5e40:	00008ae4 	.word	0x00008ae4
    5e44:	00005d61 	.word	0x00005d61

00005e48 <__assert_func>:
__assert_func():
    5e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5e4a:	4606      	mov	r6, r0
    5e4c:	4808      	ldr	r0, [pc, #32]	; (5e70 <__assert_func+0x28>)
    5e4e:	6800      	ldr	r0, [r0, #0]
    5e50:	68c0      	ldr	r0, [r0, #12]
    5e52:	b112      	cbz	r2, 5e5a <__assert_func+0x12>
    5e54:	4615      	mov	r5, r2
    5e56:	4c07      	ldr	r4, [pc, #28]	; (5e74 <__assert_func+0x2c>)
    5e58:	e001      	b.n	5e5e <__assert_func+0x16>
    5e5a:	4c07      	ldr	r4, [pc, #28]	; (5e78 <__assert_func+0x30>)
    5e5c:	4625      	mov	r5, r4
    5e5e:	461a      	mov	r2, r3
    5e60:	e88d 0032 	stmia.w	sp, {r1, r4, r5}
    5e64:	4633      	mov	r3, r6
    5e66:	4905      	ldr	r1, [pc, #20]	; (5e7c <__assert_func+0x34>)
    5e68:	f000 f824 	bl	5eb4 <fiprintf>
    5e6c:	f000 fc98 	bl	67a0 <abort>
    5e70:	1fff051c 	.word	0x1fff051c
    5e74:	00008aea 	.word	0x00008aea
    5e78:	00008b25 	.word	0x00008b25
    5e7c:	00008af7 	.word	0x00008af7

00005e80 <__errno>:
__errno():
    5e80:	4b01      	ldr	r3, [pc, #4]	; (5e88 <__errno+0x8>)
    5e82:	6818      	ldr	r0, [r3, #0]
    5e84:	4770      	bx	lr
    5e86:	bf00      	nop
    5e88:	1fff051c 	.word	0x1fff051c

00005e8c <exit>:
exit():
    5e8c:	b508      	push	{r3, lr}
    5e8e:	4b07      	ldr	r3, [pc, #28]	; (5eac <exit+0x20>)
    5e90:	4604      	mov	r4, r0
    5e92:	b113      	cbz	r3, 5e9a <exit+0xe>
    5e94:	2100      	movs	r1, #0
    5e96:	f3af 8000 	nop.w
    5e9a:	4b05      	ldr	r3, [pc, #20]	; (5eb0 <exit+0x24>)
    5e9c:	6818      	ldr	r0, [r3, #0]
    5e9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5ea0:	b103      	cbz	r3, 5ea4 <exit+0x18>
    5ea2:	4798      	blx	r3
    5ea4:	4620      	mov	r0, r4
    5ea6:	f000 ff83 	bl	6db0 <_exit>
    5eaa:	bf00      	nop
    5eac:	00000000 	.word	0x00000000
    5eb0:	00008b28 	.word	0x00008b28

00005eb4 <fiprintf>:
fprintf():
    5eb4:	b40e      	push	{r1, r2, r3}
    5eb6:	b503      	push	{r0, r1, lr}
    5eb8:	4601      	mov	r1, r0
    5eba:	ab03      	add	r3, sp, #12
    5ebc:	4805      	ldr	r0, [pc, #20]	; (5ed4 <fiprintf+0x20>)
    5ebe:	f853 2b04 	ldr.w	r2, [r3], #4
    5ec2:	6800      	ldr	r0, [r0, #0]
    5ec4:	9301      	str	r3, [sp, #4]
    5ec6:	f000 f91f 	bl	6108 <_vfiprintf_r>
    5eca:	b002      	add	sp, #8
    5ecc:	f85d eb04 	ldr.w	lr, [sp], #4
    5ed0:	b003      	add	sp, #12
    5ed2:	4770      	bx	lr
    5ed4:	1fff051c 	.word	0x1fff051c

00005ed8 <__libc_init_array>:
__libc_init_array():
    5ed8:	b570      	push	{r4, r5, r6, lr}
    5eda:	4b0e      	ldr	r3, [pc, #56]	; (5f14 <__libc_init_array+0x3c>)
    5edc:	4d0e      	ldr	r5, [pc, #56]	; (5f18 <__libc_init_array+0x40>)
    5ede:	1aed      	subs	r5, r5, r3
    5ee0:	10ad      	asrs	r5, r5, #2
    5ee2:	2400      	movs	r4, #0
    5ee4:	461e      	mov	r6, r3
    5ee6:	42ac      	cmp	r4, r5
    5ee8:	d004      	beq.n	5ef4 <__libc_init_array+0x1c>
    5eea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    5eee:	4790      	blx	r2
    5ef0:	3401      	adds	r4, #1
    5ef2:	e7f8      	b.n	5ee6 <__libc_init_array+0xe>
    5ef4:	f002 fe64 	bl	8bc0 <_init>
    5ef8:	4d08      	ldr	r5, [pc, #32]	; (5f1c <__libc_init_array+0x44>)
    5efa:	4b09      	ldr	r3, [pc, #36]	; (5f20 <__libc_init_array+0x48>)
    5efc:	1aed      	subs	r5, r5, r3
    5efe:	10ad      	asrs	r5, r5, #2
    5f00:	2400      	movs	r4, #0
    5f02:	461e      	mov	r6, r3
    5f04:	42ac      	cmp	r4, r5
    5f06:	d004      	beq.n	5f12 <__libc_init_array+0x3a>
    5f08:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    5f0c:	4790      	blx	r2
    5f0e:	3401      	adds	r4, #1
    5f10:	e7f8      	b.n	5f04 <__libc_init_array+0x2c>
    5f12:	bd70      	pop	{r4, r5, r6, pc}
    5f14:	00008be0 	.word	0x00008be0
    5f18:	00008be0 	.word	0x00008be0
    5f1c:	00008be4 	.word	0x00008be4
    5f20:	00008be0 	.word	0x00008be0

00005f24 <malloc>:
malloc():
    5f24:	4b02      	ldr	r3, [pc, #8]	; (5f30 <malloc+0xc>)
    5f26:	4601      	mov	r1, r0
    5f28:	6818      	ldr	r0, [r3, #0]
    5f2a:	f000 b861 	b.w	5ff0 <_malloc_r>
    5f2e:	bf00      	nop
    5f30:	1fff051c 	.word	0x1fff051c

00005f34 <free>:
free():
    5f34:	4b02      	ldr	r3, [pc, #8]	; (5f40 <free+0xc>)
    5f36:	4601      	mov	r1, r0
    5f38:	6818      	ldr	r0, [r3, #0]
    5f3a:	f000 b815 	b.w	5f68 <_free_r>
    5f3e:	bf00      	nop
    5f40:	1fff051c 	.word	0x1fff051c

00005f44 <memcpy>:
memcpy():
    5f44:	b510      	push	{r4, lr}
    5f46:	2300      	movs	r3, #0
    5f48:	4293      	cmp	r3, r2
    5f4a:	d003      	beq.n	5f54 <memcpy+0x10>
    5f4c:	5ccc      	ldrb	r4, [r1, r3]
    5f4e:	54c4      	strb	r4, [r0, r3]
    5f50:	3301      	adds	r3, #1
    5f52:	e7f9      	b.n	5f48 <memcpy+0x4>
    5f54:	bd10      	pop	{r4, pc}

00005f56 <memset>:
memset():
    5f56:	4402      	add	r2, r0
    5f58:	4603      	mov	r3, r0
    5f5a:	4293      	cmp	r3, r2
    5f5c:	d002      	beq.n	5f64 <memset+0xe>
    5f5e:	f803 1b01 	strb.w	r1, [r3], #1
    5f62:	e7fa      	b.n	5f5a <memset+0x4>
    5f64:	4770      	bx	lr
	...

00005f68 <_free_r>:
_free_r():
    5f68:	b530      	push	{r4, r5, lr}
    5f6a:	2900      	cmp	r1, #0
    5f6c:	d03c      	beq.n	5fe8 <_free_r+0x80>
    5f6e:	f851 2c04 	ldr.w	r2, [r1, #-4]
    5f72:	1f0b      	subs	r3, r1, #4
    5f74:	491d      	ldr	r1, [pc, #116]	; (5fec <_free_r+0x84>)
    5f76:	2a00      	cmp	r2, #0
    5f78:	bfb8      	it	lt
    5f7a:	189b      	addlt	r3, r3, r2
    5f7c:	680a      	ldr	r2, [r1, #0]
    5f7e:	460c      	mov	r4, r1
    5f80:	b912      	cbnz	r2, 5f88 <_free_r+0x20>
    5f82:	605a      	str	r2, [r3, #4]
    5f84:	600b      	str	r3, [r1, #0]
    5f86:	bd30      	pop	{r4, r5, pc}
    5f88:	4293      	cmp	r3, r2
    5f8a:	d20d      	bcs.n	5fa8 <_free_r+0x40>
    5f8c:	6819      	ldr	r1, [r3, #0]
    5f8e:	1858      	adds	r0, r3, r1
    5f90:	4290      	cmp	r0, r2
    5f92:	d103      	bne.n	5f9c <_free_r+0x34>
    5f94:	585a      	ldr	r2, [r3, r1]
    5f96:	4411      	add	r1, r2
    5f98:	6842      	ldr	r2, [r0, #4]
    5f9a:	6019      	str	r1, [r3, #0]
    5f9c:	605a      	str	r2, [r3, #4]
    5f9e:	6023      	str	r3, [r4, #0]
    5fa0:	bd30      	pop	{r4, r5, pc}
    5fa2:	4299      	cmp	r1, r3
    5fa4:	d803      	bhi.n	5fae <_free_r+0x46>
    5fa6:	460a      	mov	r2, r1
    5fa8:	6851      	ldr	r1, [r2, #4]
    5faa:	2900      	cmp	r1, #0
    5fac:	d1f9      	bne.n	5fa2 <_free_r+0x3a>
    5fae:	6814      	ldr	r4, [r2, #0]
    5fb0:	1915      	adds	r5, r2, r4
    5fb2:	429d      	cmp	r5, r3
    5fb4:	d10a      	bne.n	5fcc <_free_r+0x64>
    5fb6:	681b      	ldr	r3, [r3, #0]
    5fb8:	4423      	add	r3, r4
    5fba:	18d0      	adds	r0, r2, r3
    5fbc:	4288      	cmp	r0, r1
    5fbe:	6013      	str	r3, [r2, #0]
    5fc0:	d112      	bne.n	5fe8 <_free_r+0x80>
    5fc2:	6808      	ldr	r0, [r1, #0]
    5fc4:	4403      	add	r3, r0
    5fc6:	6013      	str	r3, [r2, #0]
    5fc8:	684b      	ldr	r3, [r1, #4]
    5fca:	e00c      	b.n	5fe6 <_free_r+0x7e>
    5fcc:	d902      	bls.n	5fd4 <_free_r+0x6c>
    5fce:	230c      	movs	r3, #12
    5fd0:	6003      	str	r3, [r0, #0]
    5fd2:	bd30      	pop	{r4, r5, pc}
    5fd4:	6818      	ldr	r0, [r3, #0]
    5fd6:	181c      	adds	r4, r3, r0
    5fd8:	428c      	cmp	r4, r1
    5fda:	d103      	bne.n	5fe4 <_free_r+0x7c>
    5fdc:	680c      	ldr	r4, [r1, #0]
    5fde:	6849      	ldr	r1, [r1, #4]
    5fe0:	4420      	add	r0, r4
    5fe2:	6018      	str	r0, [r3, #0]
    5fe4:	6059      	str	r1, [r3, #4]
    5fe6:	6053      	str	r3, [r2, #4]
    5fe8:	bd30      	pop	{r4, r5, pc}
    5fea:	bf00      	nop
    5fec:	1fff9f50 	.word	0x1fff9f50

00005ff0 <_malloc_r>:
_malloc_r():
    5ff0:	b570      	push	{r4, r5, r6, lr}
    5ff2:	1ccd      	adds	r5, r1, #3
    5ff4:	f025 0503 	bic.w	r5, r5, #3
    5ff8:	3508      	adds	r5, #8
    5ffa:	2d0c      	cmp	r5, #12
    5ffc:	bf38      	it	cc
    5ffe:	250c      	movcc	r5, #12
    6000:	2d00      	cmp	r5, #0
    6002:	4606      	mov	r6, r0
    6004:	db3f      	blt.n	6086 <_malloc_r+0x96>
    6006:	428d      	cmp	r5, r1
    6008:	d33d      	bcc.n	6086 <_malloc_r+0x96>
    600a:	4b21      	ldr	r3, [pc, #132]	; (6090 <_malloc_r+0xa0>)
    600c:	681c      	ldr	r4, [r3, #0]
    600e:	4618      	mov	r0, r3
    6010:	4621      	mov	r1, r4
    6012:	b1a1      	cbz	r1, 603e <_malloc_r+0x4e>
    6014:	680b      	ldr	r3, [r1, #0]
    6016:	1b5b      	subs	r3, r3, r5
    6018:	d40e      	bmi.n	6038 <_malloc_r+0x48>
    601a:	2b0b      	cmp	r3, #11
    601c:	d903      	bls.n	6026 <_malloc_r+0x36>
    601e:	600b      	str	r3, [r1, #0]
    6020:	18cc      	adds	r4, r1, r3
    6022:	50cd      	str	r5, [r1, r3]
    6024:	e01f      	b.n	6066 <_malloc_r+0x76>
    6026:	428c      	cmp	r4, r1
    6028:	d102      	bne.n	6030 <_malloc_r+0x40>
    602a:	6862      	ldr	r2, [r4, #4]
    602c:	6002      	str	r2, [r0, #0]
    602e:	e01a      	b.n	6066 <_malloc_r+0x76>
    6030:	684b      	ldr	r3, [r1, #4]
    6032:	6063      	str	r3, [r4, #4]
    6034:	460c      	mov	r4, r1
    6036:	e016      	b.n	6066 <_malloc_r+0x76>
    6038:	460c      	mov	r4, r1
    603a:	6849      	ldr	r1, [r1, #4]
    603c:	e7e9      	b.n	6012 <_malloc_r+0x22>
    603e:	4c15      	ldr	r4, [pc, #84]	; (6094 <_malloc_r+0xa4>)
    6040:	6823      	ldr	r3, [r4, #0]
    6042:	b91b      	cbnz	r3, 604c <_malloc_r+0x5c>
    6044:	4630      	mov	r0, r6
    6046:	f000 f827 	bl	6098 <_sbrk_r>
    604a:	6020      	str	r0, [r4, #0]
    604c:	4629      	mov	r1, r5
    604e:	4630      	mov	r0, r6
    6050:	f000 f822 	bl	6098 <_sbrk_r>
    6054:	1c43      	adds	r3, r0, #1
    6056:	4601      	mov	r1, r0
    6058:	d015      	beq.n	6086 <_malloc_r+0x96>
    605a:	1cc4      	adds	r4, r0, #3
    605c:	f024 0403 	bic.w	r4, r4, #3
    6060:	4284      	cmp	r4, r0
    6062:	d10a      	bne.n	607a <_malloc_r+0x8a>
    6064:	6025      	str	r5, [r4, #0]
    6066:	f104 000b 	add.w	r0, r4, #11
    606a:	1d23      	adds	r3, r4, #4
    606c:	f020 0007 	bic.w	r0, r0, #7
    6070:	1ac3      	subs	r3, r0, r3
    6072:	d00b      	beq.n	608c <_malloc_r+0x9c>
    6074:	425a      	negs	r2, r3
    6076:	50e2      	str	r2, [r4, r3]
    6078:	bd70      	pop	{r4, r5, r6, pc}
    607a:	4630      	mov	r0, r6
    607c:	1a61      	subs	r1, r4, r1
    607e:	f000 f80b 	bl	6098 <_sbrk_r>
    6082:	3001      	adds	r0, #1
    6084:	d1ee      	bne.n	6064 <_malloc_r+0x74>
    6086:	230c      	movs	r3, #12
    6088:	6033      	str	r3, [r6, #0]
    608a:	2000      	movs	r0, #0
    608c:	bd70      	pop	{r4, r5, r6, pc}
    608e:	bf00      	nop
    6090:	1fff9f50 	.word	0x1fff9f50
    6094:	1fff9f4c 	.word	0x1fff9f4c

00006098 <_sbrk_r>:
_sbrk_r():
    6098:	b538      	push	{r3, r4, r5, lr}
    609a:	4c06      	ldr	r4, [pc, #24]	; (60b4 <_sbrk_r+0x1c>)
    609c:	2300      	movs	r3, #0
    609e:	4605      	mov	r5, r0
    60a0:	4608      	mov	r0, r1
    60a2:	6023      	str	r3, [r4, #0]
    60a4:	f7fb fef6 	bl	1e94 <_sbrk>
    60a8:	1c43      	adds	r3, r0, #1
    60aa:	d102      	bne.n	60b2 <_sbrk_r+0x1a>
    60ac:	6823      	ldr	r3, [r4, #0]
    60ae:	b103      	cbz	r3, 60b2 <_sbrk_r+0x1a>
    60b0:	602b      	str	r3, [r5, #0]
    60b2:	bd38      	pop	{r3, r4, r5, pc}
    60b4:	1fff9f54 	.word	0x1fff9f54

000060b8 <__sfputc_r>:
__sfputc_r():
    60b8:	6893      	ldr	r3, [r2, #8]
    60ba:	3b01      	subs	r3, #1
    60bc:	2b00      	cmp	r3, #0
    60be:	b510      	push	{r4, lr}
    60c0:	6093      	str	r3, [r2, #8]
    60c2:	da05      	bge.n	60d0 <__sfputc_r+0x18>
    60c4:	6994      	ldr	r4, [r2, #24]
    60c6:	42a3      	cmp	r3, r4
    60c8:	db08      	blt.n	60dc <__sfputc_r+0x24>
    60ca:	b2cb      	uxtb	r3, r1
    60cc:	2b0a      	cmp	r3, #10
    60ce:	d005      	beq.n	60dc <__sfputc_r+0x24>
    60d0:	6813      	ldr	r3, [r2, #0]
    60d2:	1c58      	adds	r0, r3, #1
    60d4:	6010      	str	r0, [r2, #0]
    60d6:	7019      	strb	r1, [r3, #0]
    60d8:	b2c8      	uxtb	r0, r1
    60da:	bd10      	pop	{r4, pc}
    60dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    60e0:	f000 ba9c 	b.w	661c <__swbuf_r>

000060e4 <__sfputs_r>:
__sfputs_r():
    60e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60e6:	4605      	mov	r5, r0
    60e8:	460e      	mov	r6, r1
    60ea:	4614      	mov	r4, r2
    60ec:	18d7      	adds	r7, r2, r3
    60ee:	42bc      	cmp	r4, r7
    60f0:	d008      	beq.n	6104 <__sfputs_r+0x20>
    60f2:	4628      	mov	r0, r5
    60f4:	f814 1b01 	ldrb.w	r1, [r4], #1
    60f8:	4632      	mov	r2, r6
    60fa:	f7ff ffdd 	bl	60b8 <__sfputc_r>
    60fe:	1c43      	adds	r3, r0, #1
    6100:	d1f5      	bne.n	60ee <__sfputs_r+0xa>
    6102:	e000      	b.n	6106 <__sfputs_r+0x22>
    6104:	2000      	movs	r0, #0
    6106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006108 <_vfiprintf_r>:
_vfiprintf_r():
    6108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    610c:	b09d      	sub	sp, #116	; 0x74
    610e:	460d      	mov	r5, r1
    6110:	4617      	mov	r7, r2
    6112:	9303      	str	r3, [sp, #12]
    6114:	4606      	mov	r6, r0
    6116:	b118      	cbz	r0, 6120 <_vfiprintf_r+0x18>
    6118:	6983      	ldr	r3, [r0, #24]
    611a:	b90b      	cbnz	r3, 6120 <_vfiprintf_r+0x18>
    611c:	f000 fc48 	bl	69b0 <__sinit>
    6120:	4b73      	ldr	r3, [pc, #460]	; (62f0 <_vfiprintf_r+0x1e8>)
    6122:	429d      	cmp	r5, r3
    6124:	d101      	bne.n	612a <_vfiprintf_r+0x22>
    6126:	6875      	ldr	r5, [r6, #4]
    6128:	e008      	b.n	613c <_vfiprintf_r+0x34>
    612a:	4b72      	ldr	r3, [pc, #456]	; (62f4 <_vfiprintf_r+0x1ec>)
    612c:	429d      	cmp	r5, r3
    612e:	d101      	bne.n	6134 <_vfiprintf_r+0x2c>
    6130:	68b5      	ldr	r5, [r6, #8]
    6132:	e003      	b.n	613c <_vfiprintf_r+0x34>
    6134:	4b70      	ldr	r3, [pc, #448]	; (62f8 <_vfiprintf_r+0x1f0>)
    6136:	429d      	cmp	r5, r3
    6138:	bf08      	it	eq
    613a:	68f5      	ldreq	r5, [r6, #12]
    613c:	89ab      	ldrh	r3, [r5, #12]
    613e:	0718      	lsls	r0, r3, #28
    6140:	d50a      	bpl.n	6158 <_vfiprintf_r+0x50>
    6142:	692b      	ldr	r3, [r5, #16]
    6144:	b143      	cbz	r3, 6158 <_vfiprintf_r+0x50>
    6146:	2300      	movs	r3, #0
    6148:	9309      	str	r3, [sp, #36]	; 0x24
    614a:	2320      	movs	r3, #32
    614c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6150:	2330      	movs	r3, #48	; 0x30
    6152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    6156:	e038      	b.n	61ca <_vfiprintf_r+0xc2>
    6158:	4630      	mov	r0, r6
    615a:	4629      	mov	r1, r5
    615c:	f000 fab2 	bl	66c4 <__swsetup_r>
    6160:	2800      	cmp	r0, #0
    6162:	d0f0      	beq.n	6146 <_vfiprintf_r+0x3e>
    6164:	f04f 30ff 	mov.w	r0, #4294967295
    6168:	e0bf      	b.n	62ea <_vfiprintf_r+0x1e2>
    616a:	9a03      	ldr	r2, [sp, #12]
    616c:	1d11      	adds	r1, r2, #4
    616e:	6812      	ldr	r2, [r2, #0]
    6170:	9103      	str	r1, [sp, #12]
    6172:	2a00      	cmp	r2, #0
    6174:	db70      	blt.n	6258 <_vfiprintf_r+0x150>
    6176:	9207      	str	r2, [sp, #28]
    6178:	3401      	adds	r4, #1
    617a:	7823      	ldrb	r3, [r4, #0]
    617c:	2b2e      	cmp	r3, #46	; 0x2e
    617e:	d07d      	beq.n	627c <_vfiprintf_r+0x174>
    6180:	4f5e      	ldr	r7, [pc, #376]	; (62fc <_vfiprintf_r+0x1f4>)
    6182:	7821      	ldrb	r1, [r4, #0]
    6184:	4638      	mov	r0, r7
    6186:	2203      	movs	r2, #3
    6188:	f000 fcca 	bl	6b20 <memchr>
    618c:	b130      	cbz	r0, 619c <_vfiprintf_r+0x94>
    618e:	1bc7      	subs	r7, r0, r7
    6190:	9b04      	ldr	r3, [sp, #16]
    6192:	2040      	movs	r0, #64	; 0x40
    6194:	40b8      	lsls	r0, r7
    6196:	4303      	orrs	r3, r0
    6198:	9304      	str	r3, [sp, #16]
    619a:	3401      	adds	r4, #1
    619c:	7821      	ldrb	r1, [r4, #0]
    619e:	4858      	ldr	r0, [pc, #352]	; (6300 <_vfiprintf_r+0x1f8>)
    61a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    61a4:	2206      	movs	r2, #6
    61a6:	1c67      	adds	r7, r4, #1
    61a8:	f000 fcba 	bl	6b20 <memchr>
    61ac:	2800      	cmp	r0, #0
    61ae:	f000 808a 	beq.w	62c6 <_vfiprintf_r+0x1be>
    61b2:	4b54      	ldr	r3, [pc, #336]	; (6304 <_vfiprintf_r+0x1fc>)
    61b4:	2b00      	cmp	r3, #0
    61b6:	d17d      	bne.n	62b4 <_vfiprintf_r+0x1ac>
    61b8:	9b03      	ldr	r3, [sp, #12]
    61ba:	3307      	adds	r3, #7
    61bc:	f023 0307 	bic.w	r3, r3, #7
    61c0:	3308      	adds	r3, #8
    61c2:	9303      	str	r3, [sp, #12]
    61c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61c6:	4443      	add	r3, r8
    61c8:	9309      	str	r3, [sp, #36]	; 0x24
    61ca:	463b      	mov	r3, r7
    61cc:	461c      	mov	r4, r3
    61ce:	f813 2b01 	ldrb.w	r2, [r3], #1
    61d2:	b91a      	cbnz	r2, 61dc <_vfiprintf_r+0xd4>
    61d4:	ebb4 0907 	subs.w	r9, r4, r7
    61d8:	d00e      	beq.n	61f8 <_vfiprintf_r+0xf0>
    61da:	e002      	b.n	61e2 <_vfiprintf_r+0xda>
    61dc:	2a25      	cmp	r2, #37	; 0x25
    61de:	d1f5      	bne.n	61cc <_vfiprintf_r+0xc4>
    61e0:	e7f8      	b.n	61d4 <_vfiprintf_r+0xcc>
    61e2:	4630      	mov	r0, r6
    61e4:	4629      	mov	r1, r5
    61e6:	463a      	mov	r2, r7
    61e8:	464b      	mov	r3, r9
    61ea:	f7ff ff7b 	bl	60e4 <__sfputs_r>
    61ee:	3001      	adds	r0, #1
    61f0:	d076      	beq.n	62e0 <_vfiprintf_r+0x1d8>
    61f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61f4:	444b      	add	r3, r9
    61f6:	9309      	str	r3, [sp, #36]	; 0x24
    61f8:	7823      	ldrb	r3, [r4, #0]
    61fa:	2b00      	cmp	r3, #0
    61fc:	d070      	beq.n	62e0 <_vfiprintf_r+0x1d8>
    61fe:	2300      	movs	r3, #0
    6200:	f04f 32ff 	mov.w	r2, #4294967295
    6204:	9304      	str	r3, [sp, #16]
    6206:	9307      	str	r3, [sp, #28]
    6208:	9205      	str	r2, [sp, #20]
    620a:	9306      	str	r3, [sp, #24]
    620c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6210:	931a      	str	r3, [sp, #104]	; 0x68
    6212:	f104 0901 	add.w	r9, r4, #1
    6216:	464c      	mov	r4, r9
    6218:	4f3b      	ldr	r7, [pc, #236]	; (6308 <_vfiprintf_r+0x200>)
    621a:	7821      	ldrb	r1, [r4, #0]
    621c:	4638      	mov	r0, r7
    621e:	2205      	movs	r2, #5
    6220:	f000 fc7e 	bl	6b20 <memchr>
    6224:	f109 0901 	add.w	r9, r9, #1
    6228:	9b04      	ldr	r3, [sp, #16]
    622a:	b128      	cbz	r0, 6238 <_vfiprintf_r+0x130>
    622c:	1bc7      	subs	r7, r0, r7
    622e:	2001      	movs	r0, #1
    6230:	40b8      	lsls	r0, r7
    6232:	4303      	orrs	r3, r0
    6234:	9304      	str	r3, [sp, #16]
    6236:	e7ee      	b.n	6216 <_vfiprintf_r+0x10e>
    6238:	06d9      	lsls	r1, r3, #27
    623a:	bf44      	itt	mi
    623c:	2220      	movmi	r2, #32
    623e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6242:	071a      	lsls	r2, r3, #28
    6244:	bf44      	itt	mi
    6246:	222b      	movmi	r2, #43	; 0x2b
    6248:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    624c:	7822      	ldrb	r2, [r4, #0]
    624e:	2a2a      	cmp	r2, #42	; 0x2a
    6250:	d08b      	beq.n	616a <_vfiprintf_r+0x62>
    6252:	9b07      	ldr	r3, [sp, #28]
    6254:	4621      	mov	r1, r4
    6256:	e005      	b.n	6264 <_vfiprintf_r+0x15c>
    6258:	4252      	negs	r2, r2
    625a:	f043 0302 	orr.w	r3, r3, #2
    625e:	9207      	str	r2, [sp, #28]
    6260:	9304      	str	r3, [sp, #16]
    6262:	e789      	b.n	6178 <_vfiprintf_r+0x70>
    6264:	460c      	mov	r4, r1
    6266:	3101      	adds	r1, #1
    6268:	7822      	ldrb	r2, [r4, #0]
    626a:	3a30      	subs	r2, #48	; 0x30
    626c:	2a09      	cmp	r2, #9
    626e:	d803      	bhi.n	6278 <_vfiprintf_r+0x170>
    6270:	200a      	movs	r0, #10
    6272:	fb00 2303 	mla	r3, r0, r3, r2
    6276:	e7f5      	b.n	6264 <_vfiprintf_r+0x15c>
    6278:	9307      	str	r3, [sp, #28]
    627a:	e77e      	b.n	617a <_vfiprintf_r+0x72>
    627c:	7863      	ldrb	r3, [r4, #1]
    627e:	2b2a      	cmp	r3, #42	; 0x2a
    6280:	d10a      	bne.n	6298 <_vfiprintf_r+0x190>
    6282:	9b03      	ldr	r3, [sp, #12]
    6284:	1d1a      	adds	r2, r3, #4
    6286:	681b      	ldr	r3, [r3, #0]
    6288:	9203      	str	r2, [sp, #12]
    628a:	2b00      	cmp	r3, #0
    628c:	f104 0402 	add.w	r4, r4, #2
    6290:	bfb8      	it	lt
    6292:	f04f 33ff 	movlt.w	r3, #4294967295
    6296:	e00b      	b.n	62b0 <_vfiprintf_r+0x1a8>
    6298:	1c61      	adds	r1, r4, #1
    629a:	2300      	movs	r3, #0
    629c:	460c      	mov	r4, r1
    629e:	3101      	adds	r1, #1
    62a0:	7822      	ldrb	r2, [r4, #0]
    62a2:	3a30      	subs	r2, #48	; 0x30
    62a4:	2a09      	cmp	r2, #9
    62a6:	d803      	bhi.n	62b0 <_vfiprintf_r+0x1a8>
    62a8:	200a      	movs	r0, #10
    62aa:	fb00 2303 	mla	r3, r0, r3, r2
    62ae:	e7f5      	b.n	629c <_vfiprintf_r+0x194>
    62b0:	9305      	str	r3, [sp, #20]
    62b2:	e765      	b.n	6180 <_vfiprintf_r+0x78>
    62b4:	ab03      	add	r3, sp, #12
    62b6:	9300      	str	r3, [sp, #0]
    62b8:	4630      	mov	r0, r6
    62ba:	a904      	add	r1, sp, #16
    62bc:	462a      	mov	r2, r5
    62be:	4b13      	ldr	r3, [pc, #76]	; (630c <_vfiprintf_r+0x204>)
    62c0:	f3af 8000 	nop.w
    62c4:	e007      	b.n	62d6 <_vfiprintf_r+0x1ce>
    62c6:	ab03      	add	r3, sp, #12
    62c8:	9300      	str	r3, [sp, #0]
    62ca:	4630      	mov	r0, r6
    62cc:	a904      	add	r1, sp, #16
    62ce:	462a      	mov	r2, r5
    62d0:	4b0e      	ldr	r3, [pc, #56]	; (630c <_vfiprintf_r+0x204>)
    62d2:	f000 f88f 	bl	63f4 <_printf_i>
    62d6:	f1b0 3fff 	cmp.w	r0, #4294967295
    62da:	4680      	mov	r8, r0
    62dc:	f47f af72 	bne.w	61c4 <_vfiprintf_r+0xbc>
    62e0:	89ab      	ldrh	r3, [r5, #12]
    62e2:	065b      	lsls	r3, r3, #25
    62e4:	f53f af3e 	bmi.w	6164 <_vfiprintf_r+0x5c>
    62e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    62ea:	b01d      	add	sp, #116	; 0x74
    62ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    62f0:	00008b60 	.word	0x00008b60
    62f4:	00008b80 	.word	0x00008b80
    62f8:	00008ba0 	.word	0x00008ba0
    62fc:	00008b32 	.word	0x00008b32
    6300:	00008b36 	.word	0x00008b36
    6304:	00000000 	.word	0x00000000
    6308:	00008b2c 	.word	0x00008b2c
    630c:	000060e5 	.word	0x000060e5

00006310 <_printf_common>:
_printf_common():
    6310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6314:	4615      	mov	r5, r2
    6316:	461f      	mov	r7, r3
    6318:	688a      	ldr	r2, [r1, #8]
    631a:	690b      	ldr	r3, [r1, #16]
    631c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    6320:	429a      	cmp	r2, r3
    6322:	bfa8      	it	ge
    6324:	4613      	movge	r3, r2
    6326:	602b      	str	r3, [r5, #0]
    6328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    632c:	4606      	mov	r6, r0
    632e:	460c      	mov	r4, r1
    6330:	b10a      	cbz	r2, 6336 <_printf_common+0x26>
    6332:	3301      	adds	r3, #1
    6334:	602b      	str	r3, [r5, #0]
    6336:	6823      	ldr	r3, [r4, #0]
    6338:	0699      	lsls	r1, r3, #26
    633a:	d502      	bpl.n	6342 <_printf_common+0x32>
    633c:	682b      	ldr	r3, [r5, #0]
    633e:	3302      	adds	r3, #2
    6340:	602b      	str	r3, [r5, #0]
    6342:	6823      	ldr	r3, [r4, #0]
    6344:	f013 0906 	ands.w	r9, r3, #6
    6348:	d01d      	beq.n	6386 <_printf_common+0x76>
    634a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    634e:	6822      	ldr	r2, [r4, #0]
    6350:	3300      	adds	r3, #0
    6352:	bf18      	it	ne
    6354:	2301      	movne	r3, #1
    6356:	0692      	lsls	r2, r2, #26
    6358:	d51f      	bpl.n	639a <_printf_common+0x8a>
    635a:	18e1      	adds	r1, r4, r3
    635c:	1c5a      	adds	r2, r3, #1
    635e:	2030      	movs	r0, #48	; 0x30
    6360:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    6364:	4422      	add	r2, r4
    6366:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    636a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    636e:	3302      	adds	r3, #2
    6370:	e013      	b.n	639a <_printf_common+0x8a>
    6372:	4630      	mov	r0, r6
    6374:	4639      	mov	r1, r7
    6376:	f104 0219 	add.w	r2, r4, #25
    637a:	2301      	movs	r3, #1
    637c:	47c0      	blx	r8
    637e:	3001      	adds	r0, #1
    6380:	d007      	beq.n	6392 <_printf_common+0x82>
    6382:	f109 0901 	add.w	r9, r9, #1
    6386:	68e2      	ldr	r2, [r4, #12]
    6388:	682b      	ldr	r3, [r5, #0]
    638a:	1ad3      	subs	r3, r2, r3
    638c:	4599      	cmp	r9, r3
    638e:	dbf0      	blt.n	6372 <_printf_common+0x62>
    6390:	e7db      	b.n	634a <_printf_common+0x3a>
    6392:	f04f 30ff 	mov.w	r0, #4294967295
    6396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    639a:	4630      	mov	r0, r6
    639c:	4639      	mov	r1, r7
    639e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    63a2:	47c0      	blx	r8
    63a4:	3001      	adds	r0, #1
    63a6:	d0f4      	beq.n	6392 <_printf_common+0x82>
    63a8:	6823      	ldr	r3, [r4, #0]
    63aa:	682a      	ldr	r2, [r5, #0]
    63ac:	68e1      	ldr	r1, [r4, #12]
    63ae:	f003 0306 	and.w	r3, r3, #6
    63b2:	2b04      	cmp	r3, #4
    63b4:	bf08      	it	eq
    63b6:	ebc2 0501 	rsbeq	r5, r2, r1
    63ba:	6923      	ldr	r3, [r4, #16]
    63bc:	68a2      	ldr	r2, [r4, #8]
    63be:	bf0c      	ite	eq
    63c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    63c4:	2500      	movne	r5, #0
    63c6:	429a      	cmp	r2, r3
    63c8:	bfc4      	itt	gt
    63ca:	ebc3 0302 	rsbgt	r3, r3, r2
    63ce:	18ed      	addgt	r5, r5, r3
    63d0:	f04f 0900 	mov.w	r9, #0
    63d4:	45a9      	cmp	r9, r5
    63d6:	da0a      	bge.n	63ee <_printf_common+0xde>
    63d8:	4630      	mov	r0, r6
    63da:	4639      	mov	r1, r7
    63dc:	f104 021a 	add.w	r2, r4, #26
    63e0:	2301      	movs	r3, #1
    63e2:	47c0      	blx	r8
    63e4:	3001      	adds	r0, #1
    63e6:	d0d4      	beq.n	6392 <_printf_common+0x82>
    63e8:	f109 0901 	add.w	r9, r9, #1
    63ec:	e7f2      	b.n	63d4 <_printf_common+0xc4>
    63ee:	2000      	movs	r0, #0
    63f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000063f4 <_printf_i>:
_printf_i():
    63f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    63f8:	7e0e      	ldrb	r6, [r1, #24]
    63fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    63fc:	2e6e      	cmp	r6, #110	; 0x6e
    63fe:	4680      	mov	r8, r0
    6400:	460c      	mov	r4, r1
    6402:	4691      	mov	r9, r2
    6404:	469a      	mov	sl, r3
    6406:	f101 0043 	add.w	r0, r1, #67	; 0x43
    640a:	f000 80a5 	beq.w	6558 <_printf_i+0x164>
    640e:	d811      	bhi.n	6434 <_printf_i+0x40>
    6410:	2e63      	cmp	r6, #99	; 0x63
    6412:	d022      	beq.n	645a <_printf_i+0x66>
    6414:	d809      	bhi.n	642a <_printf_i+0x36>
    6416:	2e00      	cmp	r6, #0
    6418:	f000 80af 	beq.w	657a <_printf_i+0x186>
    641c:	2e58      	cmp	r6, #88	; 0x58
    641e:	f040 80bf 	bne.w	65a0 <_printf_i+0x1ac>
    6422:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
    6426:	4a7b      	ldr	r2, [pc, #492]	; (6614 <_printf_i+0x220>)
    6428:	e04f      	b.n	64ca <_printf_i+0xd6>
    642a:	2e64      	cmp	r6, #100	; 0x64
    642c:	d01e      	beq.n	646c <_printf_i+0x78>
    642e:	2e69      	cmp	r6, #105	; 0x69
    6430:	d01c      	beq.n	646c <_printf_i+0x78>
    6432:	e0b5      	b.n	65a0 <_printf_i+0x1ac>
    6434:	2e73      	cmp	r6, #115	; 0x73
    6436:	f000 80a4 	beq.w	6582 <_printf_i+0x18e>
    643a:	d809      	bhi.n	6450 <_printf_i+0x5c>
    643c:	2e6f      	cmp	r6, #111	; 0x6f
    643e:	d02b      	beq.n	6498 <_printf_i+0xa4>
    6440:	2e70      	cmp	r6, #112	; 0x70
    6442:	f040 80ad 	bne.w	65a0 <_printf_i+0x1ac>
    6446:	680b      	ldr	r3, [r1, #0]
    6448:	f043 0320 	orr.w	r3, r3, #32
    644c:	600b      	str	r3, [r1, #0]
    644e:	e038      	b.n	64c2 <_printf_i+0xce>
    6450:	2e75      	cmp	r6, #117	; 0x75
    6452:	d021      	beq.n	6498 <_printf_i+0xa4>
    6454:	2e78      	cmp	r6, #120	; 0x78
    6456:	d034      	beq.n	64c2 <_printf_i+0xce>
    6458:	e0a2      	b.n	65a0 <_printf_i+0x1ac>
    645a:	682b      	ldr	r3, [r5, #0]
    645c:	1d1a      	adds	r2, r3, #4
    645e:	681b      	ldr	r3, [r3, #0]
    6460:	602a      	str	r2, [r5, #0]
    6462:	f101 0742 	add.w	r7, r1, #66	; 0x42
    6466:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
    646a:	e09d      	b.n	65a8 <_printf_i+0x1b4>
    646c:	6822      	ldr	r2, [r4, #0]
    646e:	682b      	ldr	r3, [r5, #0]
    6470:	f012 0f80 	tst.w	r2, #128	; 0x80
    6474:	d003      	beq.n	647e <_printf_i+0x8a>
    6476:	1d1a      	adds	r2, r3, #4
    6478:	602a      	str	r2, [r5, #0]
    647a:	681d      	ldr	r5, [r3, #0]
    647c:	e005      	b.n	648a <_printf_i+0x96>
    647e:	0651      	lsls	r1, r2, #25
    6480:	d5f9      	bpl.n	6476 <_printf_i+0x82>
    6482:	1d1a      	adds	r2, r3, #4
    6484:	602a      	str	r2, [r5, #0]
    6486:	f9b3 5000 	ldrsh.w	r5, [r3]
    648a:	2d00      	cmp	r5, #0
    648c:	da39      	bge.n	6502 <_printf_i+0x10e>
    648e:	232d      	movs	r3, #45	; 0x2d
    6490:	426d      	negs	r5, r5
    6492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    6496:	e034      	b.n	6502 <_printf_i+0x10e>
    6498:	6822      	ldr	r2, [r4, #0]
    649a:	682b      	ldr	r3, [r5, #0]
    649c:	f012 0f80 	tst.w	r2, #128	; 0x80
    64a0:	d003      	beq.n	64aa <_printf_i+0xb6>
    64a2:	1d1a      	adds	r2, r3, #4
    64a4:	602a      	str	r2, [r5, #0]
    64a6:	681d      	ldr	r5, [r3, #0]
    64a8:	e004      	b.n	64b4 <_printf_i+0xc0>
    64aa:	0652      	lsls	r2, r2, #25
    64ac:	d5f9      	bpl.n	64a2 <_printf_i+0xae>
    64ae:	1d1a      	adds	r2, r3, #4
    64b0:	602a      	str	r2, [r5, #0]
    64b2:	881d      	ldrh	r5, [r3, #0]
    64b4:	7e23      	ldrb	r3, [r4, #24]
    64b6:	4a57      	ldr	r2, [pc, #348]	; (6614 <_printf_i+0x220>)
    64b8:	2b6f      	cmp	r3, #111	; 0x6f
    64ba:	bf14      	ite	ne
    64bc:	230a      	movne	r3, #10
    64be:	2308      	moveq	r3, #8
    64c0:	e01b      	b.n	64fa <_printf_i+0x106>
    64c2:	2378      	movs	r3, #120	; 0x78
    64c4:	4a54      	ldr	r2, [pc, #336]	; (6618 <_printf_i+0x224>)
    64c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    64ca:	6823      	ldr	r3, [r4, #0]
    64cc:	6829      	ldr	r1, [r5, #0]
    64ce:	f013 0f80 	tst.w	r3, #128	; 0x80
    64d2:	f101 0604 	add.w	r6, r1, #4
    64d6:	602e      	str	r6, [r5, #0]
    64d8:	d001      	beq.n	64de <_printf_i+0xea>
    64da:	680d      	ldr	r5, [r1, #0]
    64dc:	e002      	b.n	64e4 <_printf_i+0xf0>
    64de:	065f      	lsls	r7, r3, #25
    64e0:	d5fb      	bpl.n	64da <_printf_i+0xe6>
    64e2:	880d      	ldrh	r5, [r1, #0]
    64e4:	07de      	lsls	r6, r3, #31
    64e6:	bf44      	itt	mi
    64e8:	f043 0320 	orrmi.w	r3, r3, #32
    64ec:	6023      	strmi	r3, [r4, #0]
    64ee:	b91d      	cbnz	r5, 64f8 <_printf_i+0x104>
    64f0:	6823      	ldr	r3, [r4, #0]
    64f2:	f023 0320 	bic.w	r3, r3, #32
    64f6:	6023      	str	r3, [r4, #0]
    64f8:	2310      	movs	r3, #16
    64fa:	2100      	movs	r1, #0
    64fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6500:	e001      	b.n	6506 <_printf_i+0x112>
    6502:	4a44      	ldr	r2, [pc, #272]	; (6614 <_printf_i+0x220>)
    6504:	230a      	movs	r3, #10
    6506:	6866      	ldr	r6, [r4, #4]
    6508:	60a6      	str	r6, [r4, #8]
    650a:	2e00      	cmp	r6, #0
    650c:	db03      	blt.n	6516 <_printf_i+0x122>
    650e:	6821      	ldr	r1, [r4, #0]
    6510:	f021 0104 	bic.w	r1, r1, #4
    6514:	6021      	str	r1, [r4, #0]
    6516:	b905      	cbnz	r5, 651a <_printf_i+0x126>
    6518:	b16e      	cbz	r6, 6536 <_printf_i+0x142>
    651a:	f104 0142 	add.w	r1, r4, #66	; 0x42
    651e:	fbb5 f6f3 	udiv	r6, r5, r3
    6522:	fb03 5516 	mls	r5, r3, r6, r5
    6526:	460f      	mov	r7, r1
    6528:	5d55      	ldrb	r5, [r2, r5]
    652a:	f801 5901 	strb.w	r5, [r1], #-1
    652e:	4635      	mov	r5, r6
    6530:	2e00      	cmp	r6, #0
    6532:	d1f4      	bne.n	651e <_printf_i+0x12a>
    6534:	e000      	b.n	6538 <_printf_i+0x144>
    6536:	4607      	mov	r7, r0
    6538:	2b08      	cmp	r3, #8
    653a:	d10a      	bne.n	6552 <_printf_i+0x15e>
    653c:	6823      	ldr	r3, [r4, #0]
    653e:	07dd      	lsls	r5, r3, #31
    6540:	d507      	bpl.n	6552 <_printf_i+0x15e>
    6542:	6862      	ldr	r2, [r4, #4]
    6544:	6923      	ldr	r3, [r4, #16]
    6546:	429a      	cmp	r2, r3
    6548:	dc03      	bgt.n	6552 <_printf_i+0x15e>
    654a:	2330      	movs	r3, #48	; 0x30
    654c:	f807 3c01 	strb.w	r3, [r7, #-1]
    6550:	3f01      	subs	r7, #1
    6552:	1bc0      	subs	r0, r0, r7
    6554:	6120      	str	r0, [r4, #16]
    6556:	e02c      	b.n	65b2 <_printf_i+0x1be>
    6558:	6809      	ldr	r1, [r1, #0]
    655a:	682b      	ldr	r3, [r5, #0]
    655c:	6962      	ldr	r2, [r4, #20]
    655e:	f011 0f80 	tst.w	r1, #128	; 0x80
    6562:	d004      	beq.n	656e <_printf_i+0x17a>
    6564:	1d19      	adds	r1, r3, #4
    6566:	6029      	str	r1, [r5, #0]
    6568:	681b      	ldr	r3, [r3, #0]
    656a:	601a      	str	r2, [r3, #0]
    656c:	e005      	b.n	657a <_printf_i+0x186>
    656e:	0649      	lsls	r1, r1, #25
    6570:	d5f8      	bpl.n	6564 <_printf_i+0x170>
    6572:	1d19      	adds	r1, r3, #4
    6574:	6029      	str	r1, [r5, #0]
    6576:	681b      	ldr	r3, [r3, #0]
    6578:	801a      	strh	r2, [r3, #0]
    657a:	2300      	movs	r3, #0
    657c:	6123      	str	r3, [r4, #16]
    657e:	4607      	mov	r7, r0
    6580:	e017      	b.n	65b2 <_printf_i+0x1be>
    6582:	682b      	ldr	r3, [r5, #0]
    6584:	1d1a      	adds	r2, r3, #4
    6586:	602a      	str	r2, [r5, #0]
    6588:	681f      	ldr	r7, [r3, #0]
    658a:	4638      	mov	r0, r7
    658c:	f000 fb5f 	bl	6c4e <strlen>
    6590:	6863      	ldr	r3, [r4, #4]
    6592:	6120      	str	r0, [r4, #16]
    6594:	4298      	cmp	r0, r3
    6596:	bf88      	it	hi
    6598:	6123      	strhi	r3, [r4, #16]
    659a:	6923      	ldr	r3, [r4, #16]
    659c:	6063      	str	r3, [r4, #4]
    659e:	e005      	b.n	65ac <_printf_i+0x1b8>
    65a0:	f104 0742 	add.w	r7, r4, #66	; 0x42
    65a4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    65a8:	2301      	movs	r3, #1
    65aa:	6123      	str	r3, [r4, #16]
    65ac:	2300      	movs	r3, #0
    65ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    65b2:	f8cd a000 	str.w	sl, [sp]
    65b6:	4640      	mov	r0, r8
    65b8:	4621      	mov	r1, r4
    65ba:	aa03      	add	r2, sp, #12
    65bc:	464b      	mov	r3, r9
    65be:	f7ff fea7 	bl	6310 <_printf_common>
    65c2:	3001      	adds	r0, #1
    65c4:	d102      	bne.n	65cc <_printf_i+0x1d8>
    65c6:	f04f 30ff 	mov.w	r0, #4294967295
    65ca:	e01f      	b.n	660c <_printf_i+0x218>
    65cc:	4640      	mov	r0, r8
    65ce:	4649      	mov	r1, r9
    65d0:	463a      	mov	r2, r7
    65d2:	6923      	ldr	r3, [r4, #16]
    65d4:	47d0      	blx	sl
    65d6:	3001      	adds	r0, #1
    65d8:	d0f5      	beq.n	65c6 <_printf_i+0x1d2>
    65da:	6823      	ldr	r3, [r4, #0]
    65dc:	079b      	lsls	r3, r3, #30
    65de:	d405      	bmi.n	65ec <_printf_i+0x1f8>
    65e0:	68e0      	ldr	r0, [r4, #12]
    65e2:	9b03      	ldr	r3, [sp, #12]
    65e4:	4298      	cmp	r0, r3
    65e6:	bfb8      	it	lt
    65e8:	4618      	movlt	r0, r3
    65ea:	e00f      	b.n	660c <_printf_i+0x218>
    65ec:	2500      	movs	r5, #0
    65ee:	68e2      	ldr	r2, [r4, #12]
    65f0:	9b03      	ldr	r3, [sp, #12]
    65f2:	1ad3      	subs	r3, r2, r3
    65f4:	429d      	cmp	r5, r3
    65f6:	daf3      	bge.n	65e0 <_printf_i+0x1ec>
    65f8:	4640      	mov	r0, r8
    65fa:	4649      	mov	r1, r9
    65fc:	f104 0219 	add.w	r2, r4, #25
    6600:	2301      	movs	r3, #1
    6602:	47d0      	blx	sl
    6604:	3001      	adds	r0, #1
    6606:	d0de      	beq.n	65c6 <_printf_i+0x1d2>
    6608:	3501      	adds	r5, #1
    660a:	e7f0      	b.n	65ee <_printf_i+0x1fa>
    660c:	b004      	add	sp, #16
    660e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6612:	bf00      	nop
    6614:	00008b3d 	.word	0x00008b3d
    6618:	00008b4e 	.word	0x00008b4e

0000661c <__swbuf_r>:
__swbuf_r():
    661c:	b570      	push	{r4, r5, r6, lr}
    661e:	460e      	mov	r6, r1
    6620:	4614      	mov	r4, r2
    6622:	4605      	mov	r5, r0
    6624:	b118      	cbz	r0, 662e <__swbuf_r+0x12>
    6626:	6983      	ldr	r3, [r0, #24]
    6628:	b90b      	cbnz	r3, 662e <__swbuf_r+0x12>
    662a:	f000 f9c1 	bl	69b0 <__sinit>
    662e:	4b22      	ldr	r3, [pc, #136]	; (66b8 <__swbuf_r+0x9c>)
    6630:	429c      	cmp	r4, r3
    6632:	d101      	bne.n	6638 <__swbuf_r+0x1c>
    6634:	686c      	ldr	r4, [r5, #4]
    6636:	e008      	b.n	664a <__swbuf_r+0x2e>
    6638:	4b20      	ldr	r3, [pc, #128]	; (66bc <__swbuf_r+0xa0>)
    663a:	429c      	cmp	r4, r3
    663c:	d101      	bne.n	6642 <__swbuf_r+0x26>
    663e:	68ac      	ldr	r4, [r5, #8]
    6640:	e003      	b.n	664a <__swbuf_r+0x2e>
    6642:	4b1f      	ldr	r3, [pc, #124]	; (66c0 <__swbuf_r+0xa4>)
    6644:	429c      	cmp	r4, r3
    6646:	bf08      	it	eq
    6648:	68ec      	ldreq	r4, [r5, #12]
    664a:	69a3      	ldr	r3, [r4, #24]
    664c:	60a3      	str	r3, [r4, #8]
    664e:	89a3      	ldrh	r3, [r4, #12]
    6650:	071a      	lsls	r2, r3, #28
    6652:	d509      	bpl.n	6668 <__swbuf_r+0x4c>
    6654:	6923      	ldr	r3, [r4, #16]
    6656:	b13b      	cbz	r3, 6668 <__swbuf_r+0x4c>
    6658:	6923      	ldr	r3, [r4, #16]
    665a:	6820      	ldr	r0, [r4, #0]
    665c:	1ac0      	subs	r0, r0, r3
    665e:	6963      	ldr	r3, [r4, #20]
    6660:	4298      	cmp	r0, r3
    6662:	b2f6      	uxtb	r6, r6
    6664:	db0f      	blt.n	6686 <__swbuf_r+0x6a>
    6666:	e008      	b.n	667a <__swbuf_r+0x5e>
    6668:	4628      	mov	r0, r5
    666a:	4621      	mov	r1, r4
    666c:	f000 f82a 	bl	66c4 <__swsetup_r>
    6670:	2800      	cmp	r0, #0
    6672:	d0f1      	beq.n	6658 <__swbuf_r+0x3c>
    6674:	f04f 30ff 	mov.w	r0, #4294967295
    6678:	bd70      	pop	{r4, r5, r6, pc}
    667a:	4628      	mov	r0, r5
    667c:	4621      	mov	r1, r4
    667e:	f000 f919 	bl	68b4 <_fflush_r>
    6682:	2800      	cmp	r0, #0
    6684:	d1f6      	bne.n	6674 <__swbuf_r+0x58>
    6686:	68a3      	ldr	r3, [r4, #8]
    6688:	3b01      	subs	r3, #1
    668a:	60a3      	str	r3, [r4, #8]
    668c:	6823      	ldr	r3, [r4, #0]
    668e:	1c5a      	adds	r2, r3, #1
    6690:	6022      	str	r2, [r4, #0]
    6692:	701e      	strb	r6, [r3, #0]
    6694:	6963      	ldr	r3, [r4, #20]
    6696:	3001      	adds	r0, #1
    6698:	4298      	cmp	r0, r3
    669a:	d004      	beq.n	66a6 <__swbuf_r+0x8a>
    669c:	89a3      	ldrh	r3, [r4, #12]
    669e:	07db      	lsls	r3, r3, #31
    66a0:	d507      	bpl.n	66b2 <__swbuf_r+0x96>
    66a2:	2e0a      	cmp	r6, #10
    66a4:	d105      	bne.n	66b2 <__swbuf_r+0x96>
    66a6:	4628      	mov	r0, r5
    66a8:	4621      	mov	r1, r4
    66aa:	f000 f903 	bl	68b4 <_fflush_r>
    66ae:	2800      	cmp	r0, #0
    66b0:	d1e0      	bne.n	6674 <__swbuf_r+0x58>
    66b2:	4630      	mov	r0, r6
    66b4:	bd70      	pop	{r4, r5, r6, pc}
    66b6:	bf00      	nop
    66b8:	00008b60 	.word	0x00008b60
    66bc:	00008b80 	.word	0x00008b80
    66c0:	00008ba0 	.word	0x00008ba0

000066c4 <__swsetup_r>:
__swsetup_r():
    66c4:	4b32      	ldr	r3, [pc, #200]	; (6790 <__swsetup_r+0xcc>)
    66c6:	b570      	push	{r4, r5, r6, lr}
    66c8:	681d      	ldr	r5, [r3, #0]
    66ca:	4606      	mov	r6, r0
    66cc:	460c      	mov	r4, r1
    66ce:	b125      	cbz	r5, 66da <__swsetup_r+0x16>
    66d0:	69ab      	ldr	r3, [r5, #24]
    66d2:	b913      	cbnz	r3, 66da <__swsetup_r+0x16>
    66d4:	4628      	mov	r0, r5
    66d6:	f000 f96b 	bl	69b0 <__sinit>
    66da:	4b2e      	ldr	r3, [pc, #184]	; (6794 <__swsetup_r+0xd0>)
    66dc:	429c      	cmp	r4, r3
    66de:	d101      	bne.n	66e4 <__swsetup_r+0x20>
    66e0:	686c      	ldr	r4, [r5, #4]
    66e2:	e008      	b.n	66f6 <__swsetup_r+0x32>
    66e4:	4b2c      	ldr	r3, [pc, #176]	; (6798 <__swsetup_r+0xd4>)
    66e6:	429c      	cmp	r4, r3
    66e8:	d101      	bne.n	66ee <__swsetup_r+0x2a>
    66ea:	68ac      	ldr	r4, [r5, #8]
    66ec:	e003      	b.n	66f6 <__swsetup_r+0x32>
    66ee:	4b2b      	ldr	r3, [pc, #172]	; (679c <__swsetup_r+0xd8>)
    66f0:	429c      	cmp	r4, r3
    66f2:	bf08      	it	eq
    66f4:	68ec      	ldreq	r4, [r5, #12]
    66f6:	89a2      	ldrh	r2, [r4, #12]
    66f8:	b293      	uxth	r3, r2
    66fa:	0719      	lsls	r1, r3, #28
    66fc:	d420      	bmi.n	6740 <__swsetup_r+0x7c>
    66fe:	06dd      	lsls	r5, r3, #27
    6700:	d405      	bmi.n	670e <__swsetup_r+0x4a>
    6702:	2309      	movs	r3, #9
    6704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    6708:	6033      	str	r3, [r6, #0]
    670a:	81a2      	strh	r2, [r4, #12]
    670c:	e03b      	b.n	6786 <__swsetup_r+0xc2>
    670e:	0758      	lsls	r0, r3, #29
    6710:	d512      	bpl.n	6738 <__swsetup_r+0x74>
    6712:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6714:	b141      	cbz	r1, 6728 <__swsetup_r+0x64>
    6716:	f104 0344 	add.w	r3, r4, #68	; 0x44
    671a:	4299      	cmp	r1, r3
    671c:	d002      	beq.n	6724 <__swsetup_r+0x60>
    671e:	4630      	mov	r0, r6
    6720:	f7ff fc22 	bl	5f68 <_free_r>
    6724:	2300      	movs	r3, #0
    6726:	6363      	str	r3, [r4, #52]	; 0x34
    6728:	89a3      	ldrh	r3, [r4, #12]
    672a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    672e:	81a3      	strh	r3, [r4, #12]
    6730:	2300      	movs	r3, #0
    6732:	6063      	str	r3, [r4, #4]
    6734:	6923      	ldr	r3, [r4, #16]
    6736:	6023      	str	r3, [r4, #0]
    6738:	89a3      	ldrh	r3, [r4, #12]
    673a:	f043 0308 	orr.w	r3, r3, #8
    673e:	81a3      	strh	r3, [r4, #12]
    6740:	6923      	ldr	r3, [r4, #16]
    6742:	b94b      	cbnz	r3, 6758 <__swsetup_r+0x94>
    6744:	89a3      	ldrh	r3, [r4, #12]
    6746:	f403 7320 	and.w	r3, r3, #640	; 0x280
    674a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    674e:	d003      	beq.n	6758 <__swsetup_r+0x94>
    6750:	4630      	mov	r0, r6
    6752:	4621      	mov	r1, r4
    6754:	f000 f996 	bl	6a84 <__smakebuf_r>
    6758:	89a3      	ldrh	r3, [r4, #12]
    675a:	f013 0201 	ands.w	r2, r3, #1
    675e:	d005      	beq.n	676c <__swsetup_r+0xa8>
    6760:	2200      	movs	r2, #0
    6762:	60a2      	str	r2, [r4, #8]
    6764:	6962      	ldr	r2, [r4, #20]
    6766:	4252      	negs	r2, r2
    6768:	61a2      	str	r2, [r4, #24]
    676a:	e003      	b.n	6774 <__swsetup_r+0xb0>
    676c:	0799      	lsls	r1, r3, #30
    676e:	bf58      	it	pl
    6770:	6962      	ldrpl	r2, [r4, #20]
    6772:	60a2      	str	r2, [r4, #8]
    6774:	6922      	ldr	r2, [r4, #16]
    6776:	b94a      	cbnz	r2, 678c <__swsetup_r+0xc8>
    6778:	f003 0080 	and.w	r0, r3, #128	; 0x80
    677c:	b280      	uxth	r0, r0
    677e:	b130      	cbz	r0, 678e <__swsetup_r+0xca>
    6780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6784:	81a3      	strh	r3, [r4, #12]
    6786:	f04f 30ff 	mov.w	r0, #4294967295
    678a:	bd70      	pop	{r4, r5, r6, pc}
    678c:	2000      	movs	r0, #0
    678e:	bd70      	pop	{r4, r5, r6, pc}
    6790:	1fff051c 	.word	0x1fff051c
    6794:	00008b60 	.word	0x00008b60
    6798:	00008b80 	.word	0x00008b80
    679c:	00008ba0 	.word	0x00008ba0

000067a0 <abort>:
abort():
    67a0:	b508      	push	{r3, lr}
    67a2:	2006      	movs	r0, #6
    67a4:	f000 f9f4 	bl	6b90 <raise>
    67a8:	2001      	movs	r0, #1
    67aa:	f000 fb01 	bl	6db0 <_exit>

000067ae <__sflush_r>:
__sflush_r():
    67ae:	898a      	ldrh	r2, [r1, #12]
    67b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67b4:	4605      	mov	r5, r0
    67b6:	0710      	lsls	r0, r2, #28
    67b8:	460c      	mov	r4, r1
    67ba:	d457      	bmi.n	686c <__sflush_r+0xbe>
    67bc:	684b      	ldr	r3, [r1, #4]
    67be:	2b00      	cmp	r3, #0
    67c0:	dc02      	bgt.n	67c8 <__sflush_r+0x1a>
    67c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    67c4:	2b00      	cmp	r3, #0
    67c6:	dd18      	ble.n	67fa <__sflush_r+0x4c>
    67c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    67ca:	b1b6      	cbz	r6, 67fa <__sflush_r+0x4c>
    67cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    67d0:	2300      	movs	r3, #0
    67d2:	b292      	uxth	r2, r2
    67d4:	682f      	ldr	r7, [r5, #0]
    67d6:	602b      	str	r3, [r5, #0]
    67d8:	b10a      	cbz	r2, 67de <__sflush_r+0x30>
    67da:	6d62      	ldr	r2, [r4, #84]	; 0x54
    67dc:	e010      	b.n	6800 <__sflush_r+0x52>
    67de:	6a21      	ldr	r1, [r4, #32]
    67e0:	4628      	mov	r0, r5
    67e2:	2301      	movs	r3, #1
    67e4:	47b0      	blx	r6
    67e6:	1c41      	adds	r1, r0, #1
    67e8:	4602      	mov	r2, r0
    67ea:	d109      	bne.n	6800 <__sflush_r+0x52>
    67ec:	682b      	ldr	r3, [r5, #0]
    67ee:	b13b      	cbz	r3, 6800 <__sflush_r+0x52>
    67f0:	2b1d      	cmp	r3, #29
    67f2:	d001      	beq.n	67f8 <__sflush_r+0x4a>
    67f4:	2b16      	cmp	r3, #22
    67f6:	d146      	bne.n	6886 <__sflush_r+0xd8>
    67f8:	602f      	str	r7, [r5, #0]
    67fa:	2000      	movs	r0, #0
    67fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6800:	89a3      	ldrh	r3, [r4, #12]
    6802:	075b      	lsls	r3, r3, #29
    6804:	d505      	bpl.n	6812 <__sflush_r+0x64>
    6806:	6863      	ldr	r3, [r4, #4]
    6808:	1ad2      	subs	r2, r2, r3
    680a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    680c:	b10b      	cbz	r3, 6812 <__sflush_r+0x64>
    680e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6810:	1ad2      	subs	r2, r2, r3
    6812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6814:	6a21      	ldr	r1, [r4, #32]
    6816:	4628      	mov	r0, r5
    6818:	2300      	movs	r3, #0
    681a:	47b0      	blx	r6
    681c:	1c46      	adds	r6, r0, #1
    681e:	89a2      	ldrh	r2, [r4, #12]
    6820:	d105      	bne.n	682e <__sflush_r+0x80>
    6822:	682b      	ldr	r3, [r5, #0]
    6824:	b11b      	cbz	r3, 682e <__sflush_r+0x80>
    6826:	2b1d      	cmp	r3, #29
    6828:	d001      	beq.n	682e <__sflush_r+0x80>
    682a:	2b16      	cmp	r3, #22
    682c:	d119      	bne.n	6862 <__sflush_r+0xb4>
    682e:	2300      	movs	r3, #0
    6830:	6063      	str	r3, [r4, #4]
    6832:	04d1      	lsls	r1, r2, #19
    6834:	6923      	ldr	r3, [r4, #16]
    6836:	6023      	str	r3, [r4, #0]
    6838:	d504      	bpl.n	6844 <__sflush_r+0x96>
    683a:	1c42      	adds	r2, r0, #1
    683c:	d101      	bne.n	6842 <__sflush_r+0x94>
    683e:	682b      	ldr	r3, [r5, #0]
    6840:	b903      	cbnz	r3, 6844 <__sflush_r+0x96>
    6842:	6560      	str	r0, [r4, #84]	; 0x54
    6844:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6846:	602f      	str	r7, [r5, #0]
    6848:	2900      	cmp	r1, #0
    684a:	d0d6      	beq.n	67fa <__sflush_r+0x4c>
    684c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6850:	4299      	cmp	r1, r3
    6852:	d002      	beq.n	685a <__sflush_r+0xac>
    6854:	4628      	mov	r0, r5
    6856:	f7ff fb87 	bl	5f68 <_free_r>
    685a:	2000      	movs	r0, #0
    685c:	6360      	str	r0, [r4, #52]	; 0x34
    685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    6866:	81a2      	strh	r2, [r4, #12]
    6868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    686c:	690e      	ldr	r6, [r1, #16]
    686e:	2e00      	cmp	r6, #0
    6870:	d0c3      	beq.n	67fa <__sflush_r+0x4c>
    6872:	680b      	ldr	r3, [r1, #0]
    6874:	600e      	str	r6, [r1, #0]
    6876:	ebc6 0803 	rsb	r8, r6, r3
    687a:	0793      	lsls	r3, r2, #30
    687c:	bf0c      	ite	eq
    687e:	694b      	ldreq	r3, [r1, #20]
    6880:	2300      	movne	r3, #0
    6882:	608b      	str	r3, [r1, #8]
    6884:	e012      	b.n	68ac <__sflush_r+0xfe>
    6886:	89a3      	ldrh	r3, [r4, #12]
    6888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    688c:	81a3      	strh	r3, [r4, #12]
    688e:	f04f 30ff 	mov.w	r0, #4294967295
    6892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6896:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    6898:	6a21      	ldr	r1, [r4, #32]
    689a:	4628      	mov	r0, r5
    689c:	4632      	mov	r2, r6
    689e:	4643      	mov	r3, r8
    68a0:	47b8      	blx	r7
    68a2:	2800      	cmp	r0, #0
    68a4:	ddef      	ble.n	6886 <__sflush_r+0xd8>
    68a6:	4406      	add	r6, r0
    68a8:	ebc0 0808 	rsb	r8, r0, r8
    68ac:	f1b8 0f00 	cmp.w	r8, #0
    68b0:	dcf1      	bgt.n	6896 <__sflush_r+0xe8>
    68b2:	e7a2      	b.n	67fa <__sflush_r+0x4c>

000068b4 <_fflush_r>:
_fflush_r():
    68b4:	b538      	push	{r3, r4, r5, lr}
    68b6:	690b      	ldr	r3, [r1, #16]
    68b8:	4605      	mov	r5, r0
    68ba:	460c      	mov	r4, r1
    68bc:	b1db      	cbz	r3, 68f6 <_fflush_r+0x42>
    68be:	b118      	cbz	r0, 68c8 <_fflush_r+0x14>
    68c0:	6983      	ldr	r3, [r0, #24]
    68c2:	b90b      	cbnz	r3, 68c8 <_fflush_r+0x14>
    68c4:	f000 f874 	bl	69b0 <__sinit>
    68c8:	4b0c      	ldr	r3, [pc, #48]	; (68fc <_fflush_r+0x48>)
    68ca:	429c      	cmp	r4, r3
    68cc:	d101      	bne.n	68d2 <_fflush_r+0x1e>
    68ce:	686c      	ldr	r4, [r5, #4]
    68d0:	e008      	b.n	68e4 <_fflush_r+0x30>
    68d2:	4b0b      	ldr	r3, [pc, #44]	; (6900 <_fflush_r+0x4c>)
    68d4:	429c      	cmp	r4, r3
    68d6:	d101      	bne.n	68dc <_fflush_r+0x28>
    68d8:	68ac      	ldr	r4, [r5, #8]
    68da:	e003      	b.n	68e4 <_fflush_r+0x30>
    68dc:	4b09      	ldr	r3, [pc, #36]	; (6904 <_fflush_r+0x50>)
    68de:	429c      	cmp	r4, r3
    68e0:	bf08      	it	eq
    68e2:	68ec      	ldreq	r4, [r5, #12]
    68e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    68e8:	b12b      	cbz	r3, 68f6 <_fflush_r+0x42>
    68ea:	4628      	mov	r0, r5
    68ec:	4621      	mov	r1, r4
    68ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    68f2:	f7ff bf5c 	b.w	67ae <__sflush_r>
    68f6:	2000      	movs	r0, #0
    68f8:	bd38      	pop	{r3, r4, r5, pc}
    68fa:	bf00      	nop
    68fc:	00008b60 	.word	0x00008b60
    6900:	00008b80 	.word	0x00008b80
    6904:	00008ba0 	.word	0x00008ba0

00006908 <_cleanup_r>:
_cleanup_r():
    6908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    690a:	4607      	mov	r7, r0
    690c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    6910:	b194      	cbz	r4, 6938 <_cleanup_r+0x30>
    6912:	68a5      	ldr	r5, [r4, #8]
    6914:	6866      	ldr	r6, [r4, #4]
    6916:	3e01      	subs	r6, #1
    6918:	d40c      	bmi.n	6934 <_cleanup_r+0x2c>
    691a:	89ab      	ldrh	r3, [r5, #12]
    691c:	2b01      	cmp	r3, #1
    691e:	d907      	bls.n	6930 <_cleanup_r+0x28>
    6920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    6924:	3301      	adds	r3, #1
    6926:	d003      	beq.n	6930 <_cleanup_r+0x28>
    6928:	4638      	mov	r0, r7
    692a:	4629      	mov	r1, r5
    692c:	f7ff ffc2 	bl	68b4 <_fflush_r>
    6930:	3568      	adds	r5, #104	; 0x68
    6932:	e7f0      	b.n	6916 <_cleanup_r+0xe>
    6934:	6824      	ldr	r4, [r4, #0]
    6936:	e7eb      	b.n	6910 <_cleanup_r+0x8>
    6938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000693c <std.isra.0>:
std.isra.0():
    693c:	2300      	movs	r3, #0
    693e:	b510      	push	{r4, lr}
    6940:	4604      	mov	r4, r0
    6942:	6003      	str	r3, [r0, #0]
    6944:	6043      	str	r3, [r0, #4]
    6946:	6083      	str	r3, [r0, #8]
    6948:	8181      	strh	r1, [r0, #12]
    694a:	6643      	str	r3, [r0, #100]	; 0x64
    694c:	81c2      	strh	r2, [r0, #14]
    694e:	6103      	str	r3, [r0, #16]
    6950:	6143      	str	r3, [r0, #20]
    6952:	6183      	str	r3, [r0, #24]
    6954:	4619      	mov	r1, r3
    6956:	305c      	adds	r0, #92	; 0x5c
    6958:	2208      	movs	r2, #8
    695a:	f7ff fafc 	bl	5f56 <memset>
    695e:	4b05      	ldr	r3, [pc, #20]	; (6974 <std.isra.0+0x38>)
    6960:	6263      	str	r3, [r4, #36]	; 0x24
    6962:	4b05      	ldr	r3, [pc, #20]	; (6978 <std.isra.0+0x3c>)
    6964:	62a3      	str	r3, [r4, #40]	; 0x28
    6966:	4b05      	ldr	r3, [pc, #20]	; (697c <std.isra.0+0x40>)
    6968:	62e3      	str	r3, [r4, #44]	; 0x2c
    696a:	4b05      	ldr	r3, [pc, #20]	; (6980 <std.isra.0+0x44>)
    696c:	6224      	str	r4, [r4, #32]
    696e:	6323      	str	r3, [r4, #48]	; 0x30
    6970:	bd10      	pop	{r4, pc}
    6972:	bf00      	nop
    6974:	00006bc9 	.word	0x00006bc9
    6978:	00006beb 	.word	0x00006beb
    697c:	00006c23 	.word	0x00006c23
    6980:	00006c47 	.word	0x00006c47

00006984 <__sfmoreglue>:
__sfmoreglue():
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	1e4b      	subs	r3, r1, #1
    6988:	2568      	movs	r5, #104	; 0x68
    698a:	435d      	muls	r5, r3
    698c:	460e      	mov	r6, r1
    698e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    6992:	f7ff fb2d 	bl	5ff0 <_malloc_r>
    6996:	4604      	mov	r4, r0
    6998:	b140      	cbz	r0, 69ac <__sfmoreglue+0x28>
    699a:	2100      	movs	r1, #0
    699c:	e880 0042 	stmia.w	r0, {r1, r6}
    69a0:	300c      	adds	r0, #12
    69a2:	60a0      	str	r0, [r4, #8]
    69a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    69a8:	f7ff fad5 	bl	5f56 <memset>
    69ac:	4620      	mov	r0, r4
    69ae:	bd70      	pop	{r4, r5, r6, pc}

000069b0 <__sinit>:
__sinit():
    69b0:	6983      	ldr	r3, [r0, #24]
    69b2:	b510      	push	{r4, lr}
    69b4:	4604      	mov	r4, r0
    69b6:	bb33      	cbnz	r3, 6a06 <__sinit+0x56>
    69b8:	6483      	str	r3, [r0, #72]	; 0x48
    69ba:	64c3      	str	r3, [r0, #76]	; 0x4c
    69bc:	6503      	str	r3, [r0, #80]	; 0x50
    69be:	4b12      	ldr	r3, [pc, #72]	; (6a08 <__sinit+0x58>)
    69c0:	4a12      	ldr	r2, [pc, #72]	; (6a0c <__sinit+0x5c>)
    69c2:	681b      	ldr	r3, [r3, #0]
    69c4:	6282      	str	r2, [r0, #40]	; 0x28
    69c6:	4298      	cmp	r0, r3
    69c8:	bf04      	itt	eq
    69ca:	2301      	moveq	r3, #1
    69cc:	6183      	streq	r3, [r0, #24]
    69ce:	f000 f81f 	bl	6a10 <__sfp>
    69d2:	6060      	str	r0, [r4, #4]
    69d4:	4620      	mov	r0, r4
    69d6:	f000 f81b 	bl	6a10 <__sfp>
    69da:	60a0      	str	r0, [r4, #8]
    69dc:	4620      	mov	r0, r4
    69de:	f000 f817 	bl	6a10 <__sfp>
    69e2:	2104      	movs	r1, #4
    69e4:	60e0      	str	r0, [r4, #12]
    69e6:	2200      	movs	r2, #0
    69e8:	6860      	ldr	r0, [r4, #4]
    69ea:	f7ff ffa7 	bl	693c <std.isra.0>
    69ee:	68a0      	ldr	r0, [r4, #8]
    69f0:	2109      	movs	r1, #9
    69f2:	2201      	movs	r2, #1
    69f4:	f7ff ffa2 	bl	693c <std.isra.0>
    69f8:	68e0      	ldr	r0, [r4, #12]
    69fa:	2112      	movs	r1, #18
    69fc:	2202      	movs	r2, #2
    69fe:	f7ff ff9d 	bl	693c <std.isra.0>
    6a02:	2301      	movs	r3, #1
    6a04:	61a3      	str	r3, [r4, #24]
    6a06:	bd10      	pop	{r4, pc}
    6a08:	00008b28 	.word	0x00008b28
    6a0c:	00006909 	.word	0x00006909

00006a10 <__sfp>:
__sfp():
    6a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a12:	4b1b      	ldr	r3, [pc, #108]	; (6a80 <__sfp+0x70>)
    6a14:	681e      	ldr	r6, [r3, #0]
    6a16:	69b3      	ldr	r3, [r6, #24]
    6a18:	4607      	mov	r7, r0
    6a1a:	b913      	cbnz	r3, 6a22 <__sfp+0x12>
    6a1c:	4630      	mov	r0, r6
    6a1e:	f7ff ffc7 	bl	69b0 <__sinit>
    6a22:	3648      	adds	r6, #72	; 0x48
    6a24:	68b4      	ldr	r4, [r6, #8]
    6a26:	6873      	ldr	r3, [r6, #4]
    6a28:	3b01      	subs	r3, #1
    6a2a:	d404      	bmi.n	6a36 <__sfp+0x26>
    6a2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    6a30:	b175      	cbz	r5, 6a50 <__sfp+0x40>
    6a32:	3468      	adds	r4, #104	; 0x68
    6a34:	e7f8      	b.n	6a28 <__sfp+0x18>
    6a36:	6833      	ldr	r3, [r6, #0]
    6a38:	b92b      	cbnz	r3, 6a46 <__sfp+0x36>
    6a3a:	4638      	mov	r0, r7
    6a3c:	2104      	movs	r1, #4
    6a3e:	f7ff ffa1 	bl	6984 <__sfmoreglue>
    6a42:	6030      	str	r0, [r6, #0]
    6a44:	b108      	cbz	r0, 6a4a <__sfp+0x3a>
    6a46:	6836      	ldr	r6, [r6, #0]
    6a48:	e7ec      	b.n	6a24 <__sfp+0x14>
    6a4a:	230c      	movs	r3, #12
    6a4c:	603b      	str	r3, [r7, #0]
    6a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6a54:	81e3      	strh	r3, [r4, #14]
    6a56:	2301      	movs	r3, #1
    6a58:	81a3      	strh	r3, [r4, #12]
    6a5a:	6665      	str	r5, [r4, #100]	; 0x64
    6a5c:	6025      	str	r5, [r4, #0]
    6a5e:	60a5      	str	r5, [r4, #8]
    6a60:	6065      	str	r5, [r4, #4]
    6a62:	6125      	str	r5, [r4, #16]
    6a64:	6165      	str	r5, [r4, #20]
    6a66:	61a5      	str	r5, [r4, #24]
    6a68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6a6c:	4629      	mov	r1, r5
    6a6e:	2208      	movs	r2, #8
    6a70:	f7ff fa71 	bl	5f56 <memset>
    6a74:	6365      	str	r5, [r4, #52]	; 0x34
    6a76:	63a5      	str	r5, [r4, #56]	; 0x38
    6a78:	64a5      	str	r5, [r4, #72]	; 0x48
    6a7a:	64e5      	str	r5, [r4, #76]	; 0x4c
    6a7c:	4620      	mov	r0, r4
    6a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a80:	00008b28 	.word	0x00008b28

00006a84 <__smakebuf_r>:
__smakebuf_r():
    6a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a86:	898b      	ldrh	r3, [r1, #12]
    6a88:	079e      	lsls	r6, r3, #30
    6a8a:	b091      	sub	sp, #68	; 0x44
    6a8c:	4605      	mov	r5, r0
    6a8e:	460c      	mov	r4, r1
    6a90:	d426      	bmi.n	6ae0 <__smakebuf_r+0x5c>
    6a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6a96:	2900      	cmp	r1, #0
    6a98:	da09      	bge.n	6aae <__smakebuf_r+0x2a>
    6a9a:	89a3      	ldrh	r3, [r4, #12]
    6a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
    6aa0:	f04f 0700 	mov.w	r7, #0
    6aa4:	bf14      	ite	ne
    6aa6:	2640      	movne	r6, #64	; 0x40
    6aa8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
    6aac:	e00d      	b.n	6aca <__smakebuf_r+0x46>
    6aae:	aa01      	add	r2, sp, #4
    6ab0:	f000 f8f8 	bl	6ca4 <_fstat_r>
    6ab4:	2800      	cmp	r0, #0
    6ab6:	dbf0      	blt.n	6a9a <__smakebuf_r+0x16>
    6ab8:	9f02      	ldr	r7, [sp, #8]
    6aba:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
    6abe:	f5b7 5100 	subs.w	r1, r7, #8192	; 0x2000
    6ac2:	424f      	negs	r7, r1
    6ac4:	414f      	adcs	r7, r1
    6ac6:	f44f 6680 	mov.w	r6, #1024	; 0x400
    6aca:	4628      	mov	r0, r5
    6acc:	4631      	mov	r1, r6
    6ace:	f7ff fa8f 	bl	5ff0 <_malloc_r>
    6ad2:	b960      	cbnz	r0, 6aee <__smakebuf_r+0x6a>
    6ad4:	89a3      	ldrh	r3, [r4, #12]
    6ad6:	059a      	lsls	r2, r3, #22
    6ad8:	d41d      	bmi.n	6b16 <__smakebuf_r+0x92>
    6ada:	f043 0302 	orr.w	r3, r3, #2
    6ade:	81a3      	strh	r3, [r4, #12]
    6ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
    6ae4:	6023      	str	r3, [r4, #0]
    6ae6:	6123      	str	r3, [r4, #16]
    6ae8:	2301      	movs	r3, #1
    6aea:	6163      	str	r3, [r4, #20]
    6aec:	e013      	b.n	6b16 <__smakebuf_r+0x92>
    6aee:	4b0b      	ldr	r3, [pc, #44]	; (6b1c <__smakebuf_r+0x98>)
    6af0:	62ab      	str	r3, [r5, #40]	; 0x28
    6af2:	89a3      	ldrh	r3, [r4, #12]
    6af4:	6020      	str	r0, [r4, #0]
    6af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6afa:	81a3      	strh	r3, [r4, #12]
    6afc:	6120      	str	r0, [r4, #16]
    6afe:	6166      	str	r6, [r4, #20]
    6b00:	b14f      	cbz	r7, 6b16 <__smakebuf_r+0x92>
    6b02:	4628      	mov	r0, r5
    6b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6b08:	f000 f8de 	bl	6cc8 <_isatty_r>
    6b0c:	b118      	cbz	r0, 6b16 <__smakebuf_r+0x92>
    6b0e:	89a3      	ldrh	r3, [r4, #12]
    6b10:	f043 0301 	orr.w	r3, r3, #1
    6b14:	81a3      	strh	r3, [r4, #12]
    6b16:	b011      	add	sp, #68	; 0x44
    6b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b1a:	bf00      	nop
    6b1c:	00006909 	.word	0x00006909

00006b20 <memchr>:
memchr():
    6b20:	b510      	push	{r4, lr}
    6b22:	b2c9      	uxtb	r1, r1
    6b24:	4402      	add	r2, r0
    6b26:	4290      	cmp	r0, r2
    6b28:	4603      	mov	r3, r0
    6b2a:	d006      	beq.n	6b3a <memchr+0x1a>
    6b2c:	781c      	ldrb	r4, [r3, #0]
    6b2e:	428c      	cmp	r4, r1
    6b30:	f100 0001 	add.w	r0, r0, #1
    6b34:	d1f7      	bne.n	6b26 <memchr+0x6>
    6b36:	4618      	mov	r0, r3
    6b38:	bd10      	pop	{r4, pc}
    6b3a:	2000      	movs	r0, #0
    6b3c:	bd10      	pop	{r4, pc}

00006b3e <_raise_r>:
_raise_r():
    6b3e:	291f      	cmp	r1, #31
    6b40:	b538      	push	{r3, r4, r5, lr}
    6b42:	4605      	mov	r5, r0
    6b44:	460c      	mov	r4, r1
    6b46:	d904      	bls.n	6b52 <_raise_r+0x14>
    6b48:	2316      	movs	r3, #22
    6b4a:	6003      	str	r3, [r0, #0]
    6b4c:	f04f 30ff 	mov.w	r0, #4294967295
    6b50:	bd38      	pop	{r3, r4, r5, pc}
    6b52:	6c42      	ldr	r2, [r0, #68]	; 0x44
    6b54:	b112      	cbz	r2, 6b5c <_raise_r+0x1e>
    6b56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6b5a:	b94b      	cbnz	r3, 6b70 <_raise_r+0x32>
    6b5c:	4628      	mov	r0, r5
    6b5e:	f000 f831 	bl	6bc4 <_getpid_r>
    6b62:	4622      	mov	r2, r4
    6b64:	4601      	mov	r1, r0
    6b66:	4628      	mov	r0, r5
    6b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b6c:	f000 b818 	b.w	6ba0 <_kill_r>
    6b70:	2b01      	cmp	r3, #1
    6b72:	d00a      	beq.n	6b8a <_raise_r+0x4c>
    6b74:	1c59      	adds	r1, r3, #1
    6b76:	d103      	bne.n	6b80 <_raise_r+0x42>
    6b78:	2316      	movs	r3, #22
    6b7a:	6003      	str	r3, [r0, #0]
    6b7c:	2001      	movs	r0, #1
    6b7e:	bd38      	pop	{r3, r4, r5, pc}
    6b80:	2500      	movs	r5, #0
    6b82:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    6b86:	4620      	mov	r0, r4
    6b88:	4798      	blx	r3
    6b8a:	2000      	movs	r0, #0
    6b8c:	bd38      	pop	{r3, r4, r5, pc}
	...

00006b90 <raise>:
raise():
    6b90:	4b02      	ldr	r3, [pc, #8]	; (6b9c <raise+0xc>)
    6b92:	4601      	mov	r1, r0
    6b94:	6818      	ldr	r0, [r3, #0]
    6b96:	f7ff bfd2 	b.w	6b3e <_raise_r>
    6b9a:	bf00      	nop
    6b9c:	1fff051c 	.word	0x1fff051c

00006ba0 <_kill_r>:
_kill_r():
    6ba0:	b538      	push	{r3, r4, r5, lr}
    6ba2:	4c07      	ldr	r4, [pc, #28]	; (6bc0 <_kill_r+0x20>)
    6ba4:	2300      	movs	r3, #0
    6ba6:	4605      	mov	r5, r0
    6ba8:	4608      	mov	r0, r1
    6baa:	4611      	mov	r1, r2
    6bac:	6023      	str	r3, [r4, #0]
    6bae:	f000 f8df 	bl	6d70 <_kill>
    6bb2:	1c43      	adds	r3, r0, #1
    6bb4:	d102      	bne.n	6bbc <_kill_r+0x1c>
    6bb6:	6823      	ldr	r3, [r4, #0]
    6bb8:	b103      	cbz	r3, 6bbc <_kill_r+0x1c>
    6bba:	602b      	str	r3, [r5, #0]
    6bbc:	bd38      	pop	{r3, r4, r5, pc}
    6bbe:	bf00      	nop
    6bc0:	1fff9f54 	.word	0x1fff9f54

00006bc4 <_getpid_r>:
_getpid_r():
    6bc4:	f000 b8c4 	b.w	6d50 <_getpid>

00006bc8 <__sread>:
__sread():
    6bc8:	b510      	push	{r4, lr}
    6bca:	460c      	mov	r4, r1
    6bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6bd0:	f000 f89c 	bl	6d0c <_read_r>
    6bd4:	2800      	cmp	r0, #0
    6bd6:	db03      	blt.n	6be0 <__sread+0x18>
    6bd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6bda:	4403      	add	r3, r0
    6bdc:	6563      	str	r3, [r4, #84]	; 0x54
    6bde:	bd10      	pop	{r4, pc}
    6be0:	89a3      	ldrh	r3, [r4, #12]
    6be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6be6:	81a3      	strh	r3, [r4, #12]
    6be8:	bd10      	pop	{r4, pc}

00006bea <__swrite>:
__swrite():
    6bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bee:	461d      	mov	r5, r3
    6bf0:	898b      	ldrh	r3, [r1, #12]
    6bf2:	05db      	lsls	r3, r3, #23
    6bf4:	4607      	mov	r7, r0
    6bf6:	460c      	mov	r4, r1
    6bf8:	4616      	mov	r6, r2
    6bfa:	d505      	bpl.n	6c08 <__swrite+0x1e>
    6bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6c00:	2200      	movs	r2, #0
    6c02:	2302      	movs	r3, #2
    6c04:	f000 f870 	bl	6ce8 <_lseek_r>
    6c08:	89a3      	ldrh	r3, [r4, #12]
    6c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6c12:	81a3      	strh	r3, [r4, #12]
    6c14:	4638      	mov	r0, r7
    6c16:	4632      	mov	r2, r6
    6c18:	462b      	mov	r3, r5
    6c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c1e:	f000 b81f 	b.w	6c60 <_write_r>

00006c22 <__sseek>:
__sseek():
    6c22:	b510      	push	{r4, lr}
    6c24:	460c      	mov	r4, r1
    6c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6c2a:	f000 f85d 	bl	6ce8 <_lseek_r>
    6c2e:	1c43      	adds	r3, r0, #1
    6c30:	89a3      	ldrh	r3, [r4, #12]
    6c32:	d103      	bne.n	6c3c <__sseek+0x1a>
    6c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6c38:	81a3      	strh	r3, [r4, #12]
    6c3a:	bd10      	pop	{r4, pc}
    6c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6c40:	81a3      	strh	r3, [r4, #12]
    6c42:	6560      	str	r0, [r4, #84]	; 0x54
    6c44:	bd10      	pop	{r4, pc}

00006c46 <__sclose>:
__sclose():
    6c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6c4a:	f000 b81b 	b.w	6c84 <_close_r>

00006c4e <strlen>:
strlen():
    6c4e:	4603      	mov	r3, r0
    6c50:	f813 2b01 	ldrb.w	r2, [r3], #1
    6c54:	2a00      	cmp	r2, #0
    6c56:	d1fb      	bne.n	6c50 <strlen+0x2>
    6c58:	1a18      	subs	r0, r3, r0
    6c5a:	3801      	subs	r0, #1
    6c5c:	4770      	bx	lr
	...

00006c60 <_write_r>:
_write_r():
    6c60:	b538      	push	{r3, r4, r5, lr}
    6c62:	4c07      	ldr	r4, [pc, #28]	; (6c80 <_write_r+0x20>)
    6c64:	4605      	mov	r5, r0
    6c66:	2000      	movs	r0, #0
    6c68:	6020      	str	r0, [r4, #0]
    6c6a:	4608      	mov	r0, r1
    6c6c:	4611      	mov	r1, r2
    6c6e:	461a      	mov	r2, r3
    6c70:	f000 f896 	bl	6da0 <_write>
    6c74:	1c43      	adds	r3, r0, #1
    6c76:	d102      	bne.n	6c7e <_write_r+0x1e>
    6c78:	6823      	ldr	r3, [r4, #0]
    6c7a:	b103      	cbz	r3, 6c7e <_write_r+0x1e>
    6c7c:	602b      	str	r3, [r5, #0]
    6c7e:	bd38      	pop	{r3, r4, r5, pc}
    6c80:	1fff9f54 	.word	0x1fff9f54

00006c84 <_close_r>:
_close_r():
    6c84:	b538      	push	{r3, r4, r5, lr}
    6c86:	4c06      	ldr	r4, [pc, #24]	; (6ca0 <_close_r+0x1c>)
    6c88:	2300      	movs	r3, #0
    6c8a:	4605      	mov	r5, r0
    6c8c:	4608      	mov	r0, r1
    6c8e:	6023      	str	r3, [r4, #0]
    6c90:	f000 f84e 	bl	6d30 <_close>
    6c94:	1c43      	adds	r3, r0, #1
    6c96:	d102      	bne.n	6c9e <_close_r+0x1a>
    6c98:	6823      	ldr	r3, [r4, #0]
    6c9a:	b103      	cbz	r3, 6c9e <_close_r+0x1a>
    6c9c:	602b      	str	r3, [r5, #0]
    6c9e:	bd38      	pop	{r3, r4, r5, pc}
    6ca0:	1fff9f54 	.word	0x1fff9f54

00006ca4 <_fstat_r>:
_fstat_r():
    6ca4:	b538      	push	{r3, r4, r5, lr}
    6ca6:	4c07      	ldr	r4, [pc, #28]	; (6cc4 <_fstat_r+0x20>)
    6ca8:	2300      	movs	r3, #0
    6caa:	4605      	mov	r5, r0
    6cac:	4608      	mov	r0, r1
    6cae:	4611      	mov	r1, r2
    6cb0:	6023      	str	r3, [r4, #0]
    6cb2:	f000 f845 	bl	6d40 <_fstat>
    6cb6:	1c43      	adds	r3, r0, #1
    6cb8:	d102      	bne.n	6cc0 <_fstat_r+0x1c>
    6cba:	6823      	ldr	r3, [r4, #0]
    6cbc:	b103      	cbz	r3, 6cc0 <_fstat_r+0x1c>
    6cbe:	602b      	str	r3, [r5, #0]
    6cc0:	bd38      	pop	{r3, r4, r5, pc}
    6cc2:	bf00      	nop
    6cc4:	1fff9f54 	.word	0x1fff9f54

00006cc8 <_isatty_r>:
_isatty_r():
    6cc8:	b538      	push	{r3, r4, r5, lr}
    6cca:	4c06      	ldr	r4, [pc, #24]	; (6ce4 <_isatty_r+0x1c>)
    6ccc:	2300      	movs	r3, #0
    6cce:	4605      	mov	r5, r0
    6cd0:	4608      	mov	r0, r1
    6cd2:	6023      	str	r3, [r4, #0]
    6cd4:	f000 f844 	bl	6d60 <_isatty>
    6cd8:	1c43      	adds	r3, r0, #1
    6cda:	d102      	bne.n	6ce2 <_isatty_r+0x1a>
    6cdc:	6823      	ldr	r3, [r4, #0]
    6cde:	b103      	cbz	r3, 6ce2 <_isatty_r+0x1a>
    6ce0:	602b      	str	r3, [r5, #0]
    6ce2:	bd38      	pop	{r3, r4, r5, pc}
    6ce4:	1fff9f54 	.word	0x1fff9f54

00006ce8 <_lseek_r>:
_lseek_r():
    6ce8:	b538      	push	{r3, r4, r5, lr}
    6cea:	4c07      	ldr	r4, [pc, #28]	; (6d08 <_lseek_r+0x20>)
    6cec:	4605      	mov	r5, r0
    6cee:	2000      	movs	r0, #0
    6cf0:	6020      	str	r0, [r4, #0]
    6cf2:	4608      	mov	r0, r1
    6cf4:	4611      	mov	r1, r2
    6cf6:	461a      	mov	r2, r3
    6cf8:	f000 f842 	bl	6d80 <_lseek>
    6cfc:	1c43      	adds	r3, r0, #1
    6cfe:	d102      	bne.n	6d06 <_lseek_r+0x1e>
    6d00:	6823      	ldr	r3, [r4, #0]
    6d02:	b103      	cbz	r3, 6d06 <_lseek_r+0x1e>
    6d04:	602b      	str	r3, [r5, #0]
    6d06:	bd38      	pop	{r3, r4, r5, pc}
    6d08:	1fff9f54 	.word	0x1fff9f54

00006d0c <_read_r>:
_read_r():
    6d0c:	b538      	push	{r3, r4, r5, lr}
    6d0e:	4c07      	ldr	r4, [pc, #28]	; (6d2c <_read_r+0x20>)
    6d10:	4605      	mov	r5, r0
    6d12:	2000      	movs	r0, #0
    6d14:	6020      	str	r0, [r4, #0]
    6d16:	4608      	mov	r0, r1
    6d18:	4611      	mov	r1, r2
    6d1a:	461a      	mov	r2, r3
    6d1c:	f000 f838 	bl	6d90 <_read>
    6d20:	1c43      	adds	r3, r0, #1
    6d22:	d102      	bne.n	6d2a <_read_r+0x1e>
    6d24:	6823      	ldr	r3, [r4, #0]
    6d26:	b103      	cbz	r3, 6d2a <_read_r+0x1e>
    6d28:	602b      	str	r3, [r5, #0]
    6d2a:	bd38      	pop	{r3, r4, r5, pc}
    6d2c:	1fff9f54 	.word	0x1fff9f54

00006d30 <_close>:
_close():
    6d30:	4b02      	ldr	r3, [pc, #8]	; (6d3c <_close+0xc>)
    6d32:	2258      	movs	r2, #88	; 0x58
    6d34:	601a      	str	r2, [r3, #0]
    6d36:	f04f 30ff 	mov.w	r0, #4294967295
    6d3a:	4770      	bx	lr
    6d3c:	1fff9f54 	.word	0x1fff9f54

00006d40 <_fstat>:
_fstat():
    6d40:	4b02      	ldr	r3, [pc, #8]	; (6d4c <_fstat+0xc>)
    6d42:	2258      	movs	r2, #88	; 0x58
    6d44:	601a      	str	r2, [r3, #0]
    6d46:	f04f 30ff 	mov.w	r0, #4294967295
    6d4a:	4770      	bx	lr
    6d4c:	1fff9f54 	.word	0x1fff9f54

00006d50 <_getpid>:
_getpid():
    6d50:	4b02      	ldr	r3, [pc, #8]	; (6d5c <_getpid+0xc>)
    6d52:	2258      	movs	r2, #88	; 0x58
    6d54:	601a      	str	r2, [r3, #0]
    6d56:	f04f 30ff 	mov.w	r0, #4294967295
    6d5a:	4770      	bx	lr
    6d5c:	1fff9f54 	.word	0x1fff9f54

00006d60 <_isatty>:
_isatty():
    6d60:	4b02      	ldr	r3, [pc, #8]	; (6d6c <_isatty+0xc>)
    6d62:	2258      	movs	r2, #88	; 0x58
    6d64:	601a      	str	r2, [r3, #0]
    6d66:	2000      	movs	r0, #0
    6d68:	4770      	bx	lr
    6d6a:	bf00      	nop
    6d6c:	1fff9f54 	.word	0x1fff9f54

00006d70 <_kill>:
_kill():
    6d70:	4b02      	ldr	r3, [pc, #8]	; (6d7c <_kill+0xc>)
    6d72:	2258      	movs	r2, #88	; 0x58
    6d74:	601a      	str	r2, [r3, #0]
    6d76:	f04f 30ff 	mov.w	r0, #4294967295
    6d7a:	4770      	bx	lr
    6d7c:	1fff9f54 	.word	0x1fff9f54

00006d80 <_lseek>:
_lseek():
    6d80:	4b02      	ldr	r3, [pc, #8]	; (6d8c <_lseek+0xc>)
    6d82:	2258      	movs	r2, #88	; 0x58
    6d84:	601a      	str	r2, [r3, #0]
    6d86:	f04f 30ff 	mov.w	r0, #4294967295
    6d8a:	4770      	bx	lr
    6d8c:	1fff9f54 	.word	0x1fff9f54

00006d90 <_read>:
_read():
    6d90:	4b02      	ldr	r3, [pc, #8]	; (6d9c <_read+0xc>)
    6d92:	2258      	movs	r2, #88	; 0x58
    6d94:	601a      	str	r2, [r3, #0]
    6d96:	f04f 30ff 	mov.w	r0, #4294967295
    6d9a:	4770      	bx	lr
    6d9c:	1fff9f54 	.word	0x1fff9f54

00006da0 <_write>:
_write():
    6da0:	4b02      	ldr	r3, [pc, #8]	; (6dac <_write+0xc>)
    6da2:	2258      	movs	r2, #88	; 0x58
    6da4:	601a      	str	r2, [r3, #0]
    6da6:	f04f 30ff 	mov.w	r0, #4294967295
    6daa:	4770      	bx	lr
    6dac:	1fff9f54 	.word	0x1fff9f54

00006db0 <_exit>:
_exit():
    6db0:	e7fe      	b.n	6db0 <_exit>
    6db2:	bf00      	nop
$d():
    6db4:	74736f48 	.word	0x74736f48
    6db8:	65746e49 	.word	0x65746e49
    6dbc:	63616672 	.word	0x63616672
    6dc0:	78525f65 	.word	0x78525f65
    6dc4:	6b736154 	.word	0x6b736154
    6dc8:	00          	.byte	0x00
    6dc9:	48          	.byte	0x48
    6dca:	736f      	.short	0x736f
    6dcc:	746e4974 	.word	0x746e4974
    6dd0:	61667265 	.word	0x61667265
    6dd4:	4f5f6563 	.word	0x4f5f6563
    6dd8:	7361546b 	.word	0x7361546b
    6ddc:	006b      	.short	0x006b
    6dde:	4449      	.short	0x4449
    6de0:	454c      	.short	0x454c
    6de2:	00          	.byte	0x00
    6de3:	54          	.byte	0x54
    6de4:	0051726d 	.word	0x0051726d
    6de8:	20726d54 	.word	0x20726d54
    6dec:	00637653 	.word	0x00637653

00006df0 <__func__.7818>:
    6df0:	434f4c43 59535f4b 6e455f53 656c6261     CLOCK_SYS_Enable
    6e00:	43633249 6b636f6c 6c6b6a00                       I2cClock.

00006e09 <uartGateTable>:
    6e09:	6d6c6b6a 8a890b0a                                jklm..

00006e0f <portGateTable>:
    6e0f:	8c8b8a89 0667668d                                .....

00006e14 <i2cGateTable>:
    6e14:	43066766                                         fg.

00006e17 <__func__.7753>:
    6e17:	434f4c43 59535f4b 6e455f53 656c6261     CLOCK_SYS_Enable
    6e27:	74726f50 636f6c43 4c43006b                       PortClock.

00006e31 <__func__.7831>:
    6e31:	434f4c43 59535f4b 6e455f53 656c6261     CLOCK_SYS_Enable
    6e41:	74726155 636f6c43 3a43006b 7865682f     UartClock.C:/hex
    6e51:	61657769 45482f72 45574958 6d2d5241     iwear/HEXIWEAR-m
    6e61:	65747361 57532f72 364b4d2f 53444b34     aster/SW/MK64KDS
    6e71:	5845482f 41455749 54525f52 632f534f     /HEXIWEAR_RTOS/c
    6e81:	2f65646f 2f4b4453 74616c70 6d726f66     ode/SDK/platform
    6e91:	7379732f 2f6d6574 2f637273 636f6c63     /system/src/cloc
    6ea1:	4b4d2f6b 31463436 73662f32 6c635f6c     k/MK64F12/fsl_cl
    6eb1:	5f6b636f 34364b4d 2e323146 554e0063     ock_MK64F12.c.NU
    6ec1:	21204c4c 6f63203d 6769666e 736e6900     LL != config.ins
    6ed1:	636e6174 203c2065 657a6973 7028666f     tance < sizeof(p
    6ee1:	4774726f 54657461 656c6261 69732f29     ortGateTable)/si
    6ef1:	666f657a 726f7028 74614774 62615465     zeof(portGateTab
    6f01:	305b656c 6900295d 6174736e 2065636e     le[0]).instance 
    6f11:	6973203c 666f657a 63646128 65746147     < sizeof(adcGate
    6f21:	6c626154 732f2965 6f657a69 64612866     Table)/sizeof(ad
    6f31:	74614763 62615465 305b656c 6900295d     cGateTable[0]).i
    6f41:	6174736e 2065636e 6973203c 666f657a     nstance < sizeof
    6f51:	63616428 65746147 6c626154 732f2965     (dacGateTable)/s
    6f61:	6f657a69 61642866 74614763 62615465     izeof(dacGateTab
    6f71:	305b656c 6900295d 6174736e 2065636e     le[0]).instance 
    6f81:	6973203c 666f657a 6d746628 65746147     < sizeof(ftmGate
    6f91:	6c626154 732f2965 6f657a69 74662866     Table)/sizeof(ft
    6fa1:	7461476d 62615465 305b656c 6900295d     mGateTable[0]).i
    6fb1:	6174736e 2065636e 6973203c 666f657a     nstance < sizeof
    6fc1:	69707328 65746147 6c626154 732f2965     (spiGateTable)/s
    6fd1:	6f657a69 70732866 74614769 62615465     izeof(spiGateTab
    6fe1:	305b656c 6900295d 6174736e 2065636e     le[0]).instance 
    6ff1:	6973203c 666f657a 63326928 65746147     < sizeof(i2cGate
    7001:	6c626154 732f2965 6f657a69 32692866     Table)/sizeof(i2
    7011:	74614763 62615465 305b656c 6900295d     cGateTable[0]).i
    7021:	6174736e 2065636e 6973203c 666f657a     nstance < sizeof
    7031:	72617528 74614774 62615465 2f29656c     (uartGateTable)/
    7041:	657a6973 7528666f 47747261 54657461     sizeof(uartGateT
    7051:	656c6261 295d305b 4f4c4300                       able[0]).

0000705a <__func__.7805>:
    705a:	434f4c43 59535f4b 6e455f53 656c6261     CLOCK_SYS_Enable
    706a:	43697053 6b636f6c 4f4c4300                       SpiClock.

00007073 <__func__.7766>:
    7073:	434f4c43 59535f4b 6e455f53 656c6261     CLOCK_SYS_Enable
    7083:	43636441 6b636f6c 4cadac00                       AdcClock.

0000708c <spiGateTable>:
    708c:	bb4cadac                                         ..L

0000708f <adcGateTable>:
    708f:	00005bbb 06500000                                .[...

00007094 <g_oscBase>:
    7094:	40065000                                .P.@

00007098 <__func__.6819>:
    7098:	5f41534f 6e657645 65724374 00657461     OSA_EventCreate.

000070a8 <__func__.6775>:
    70a8:	5f41534f 616d6553 61657243 4f006574              OSA_SemaCreate.

000070b7 <__func__.6781>:
    70b7:	5f41534f 616d6553 74696157 41534f00              OSA_SemaWait.

000070c4 <__func__.6827>:
    70c4:	5f41534f 6e657645 69615774 534f0074              OSA_EventWait.

000070d2 <__func__.6835>:
    70d2:	5f41534f 6e657645 74655374 41534f00              OSA_EventSet.

000070df <__func__.6792>:
    70df:	5f41534f 616d6553 74736f50 2f3a4300     OSA_SemaPost.C:/
    70ef:	69786568 72616577 5845482f 41455749     hexiwear/HEXIWEA
    70ff:	616d2d52 72657473 2f57532f 34364b4d     R-master/SW/MK64
    710f:	2f53444b 49584548 52414557 4f54525f     KDS/HEXIWEAR_RTO
    711f:	6f632f53 532f6564 702f4b44 6674616c     S/code/SDK/platf
    712f:	2f6d726f 2f61736f 2f637273 5f6c7366     orm/osa/src/fsl_
    713f:	615f736f 72747362 69746361 665f6e6f     os_abstraction_f
    714f:	5f656572 736f7472 2a00632e 6d655370     ree_rtos.c.*pSem
    715f:	4d702a00 78657475 76457000 00746e65     .*pMutex.pEvent.

0000716f <__func__.6800>:
    716f:	5f41534f 6574754d 65724378 00657461     OSA_MutexCreate.

0000717f <__func__.6810>:
    717f:	5f41534f 6574754d 6c6e5578 006b636f     OSA_MutexUnlock.

0000718f <__func__.6806>:
    718f:	5f41534f 6574754d 636f4c78 8000006b              OSA_MutexLock..

0000719e <fllFactorTable.6323>:
    719e:	02dc0280 05b80500 08950780 0b710a00     ..............q.

000071ae <kI2CDividerTable>:
    71ae:	00140000 00160001 00180002 001a0003     ................
    71be:	001c0004 001e0005 00200009 00220006     .......... ...".
    71ce:	0024000a 00280007 002c000c 00300010     ..$...(...,...0.
    71de:	00380011 00400012 0044000f 00480013     ..8...@...D...H.
    71ee:	00500014 00580015 00600019 00680016     ..P...X...`...h.
    71fe:	0070001a 00800017 0090001c 00a0001d     ..p.............
    720e:	00c0001e 00e00022 00f0001f 01000023     ....".......#...
    721e:	01200024 01400025 01800026 01c0002a     $. .%.@.&...*...
    722e:	01e00027 0200002b 0240002c 0280002d     '...+...,.@.-...
    723e:	0300002e 03800032 03c0002f 04000033     ....2.../...3...
    724e:	04800034 05000035 06000036 0700003a     4...5...6...:...
    725e:	07800037 0800003b 0900003c 0a00003d     7...;...<...=...
    726e:	0c00003e 0f00003f 682f3a43 77697865     >...?...C:/hexiw
    727e:	2f726165 49584548 52414557 73616d2d     ear/HEXIWEAR-mas
    728e:	2f726574 4d2f5753 4b34364b 482f5344     ter/SW/MK64KDS/H
    729e:	57495845 5f524145 534f5452 646f632f     EXIWEAR_RTOS/cod
    72ae:	44532f65 6c702f4b 6f667461 682f6d72     e/SDK/platform/h
    72be:	732f6c61 692f6372 662f6332 695f6c73     al/src/i2c/fsl_i
    72ce:	685f6332 632e6c61 43324900 4452425f     2c_hal.c.I2C_BRD
    72de:	5f31435f 2854534d 65736162 3d3d2029     _C1_MST(base) ==
    72ee:	49003120                                          1.

000072f1 <__func__.6260>:
    72f1:	5f433249 5f4c4148 646e6553 706f7453     I2C_HAL_SendStop
	...

00007302 <__func__.6102>:
    7302:	4f495047 4c41485f 7465535f 446e6950     GPIO_HAL_SetPinD
    7312:	47007269                                         ir.

00007315 <__func__.6108>:
    7315:	4f495047 4c41485f 6972575f 69506574     GPIO_HAL_WritePi
    7325:	74754f6e 00747570 682f3a43 77697865     nOutput.C:/hexiw
    7335:	2f726165 49584548 52414557 73616d2d     ear/HEXIWEAR-mas
    7345:	2f726574 4d2f5753 4b34364b 482f5344     ter/SW/MK64KDS/H
    7355:	57495845 5f524145 534f5452 646f632f     EXIWEAR_RTOS/cod
    7365:	44532f65 6c702f4b 6f667461 682f6d72     e/SDK/platform/h
    7375:	732f6c61 672f6372 2f6f6970 5f6c7366     al/src/gpio/fsl_
    7385:	6f697067 6c61685f 7000632e 3c206e69     gpio_hal.c.pin <
    7395:	00323320                                 32.

00007399 <__func__.6548>:
    7399:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    73a9:	6e616843 4d6c656e 726f6e69 6b6e694c     ChannelMinorLink
	...

000073ba <__func__.6554>:
    73ba:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    73ca:	6f6a614d 756f4372 4500746e                       MajorCount.

000073d5 <__func__.6620>:
    73d5:	414d4445 4c41485f 7375505f 43545368     EDMA_HAL_PushSTC
    73e5:	486f5444 00444354 682f3a43 77697865     DToHTCD.C:/hexiw
    73f5:	2f726165 49584548 52414557 73616d2d     ear/HEXIWEAR-mas
    7405:	2f726574 4d2f5753 4b34364b 482f5344     ter/SW/MK64KDS/H
    7415:	57495845 5f524145 534f5452 646f632f     EXIWEAR_RTOS/cod
    7425:	44532f65 6c702f4b 6f667461 682f6d72     e/SDK/platform/h
    7435:	732f6c61 652f6372 2f616d64 5f6c7366     al/src/edma/fsl_
    7445:	616d6465 6c61685f 6300632e 6e6e6168     edma_hal.c.chann
    7455:	3c206c65 4c534620 4145465f 45525554     el < FSL_FEATURE
    7465:	4d44455f 4f4d5f41 454c5544 4148435f     _EDMA_MODULE_CHA
    7475:	4c454e4e 63747300 656e0064 74537478     NNEL.stcd.nextSt
    7485:	45006463                                         cd.

00007488 <__func__.6628>:
    7488:	414d4445 4c41485f 4354535f 74655344     EDMA_HAL_STCDSet
    7498:	69736142 61725463 6566736e 44450072              BasicTransfer.

000074a6 <__func__.6614>:
    74a6:	414d4445 4c41485f 4354535f 74655344     EDMA_HAL_STCDSet
    74b6:	6f6a614d 756f4372 4500746e                       MajorCount.

000074c1 <__func__.6518>:
    74c1:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    74d1:	72747441 74756269 44450065                       Attribute.

000074db <__func__.6524>:
    74db:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    74eb:	7479624e 45007365                                Nbytes.

000074f2 <__func__.6586>:
    74f2:	414d4445 4c41485f 4354535f 74655344     EDMA_HAL_STCDSet
    7502:	72747441 74756269 44450065                       Attribute.

0000750c <__func__.6592>:
    750c:	414d4445 4c41485f 4354535f 74655344     EDMA_HAL_STCDSet
    751c:	7479624e 45007365                                Nbytes.

00007523 <__func__.6541>:
    7523:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    7533:	74616353 47726574 65687461 6e694c72     ScatterGatherLin
    7543:	0000006b 00000200                                k....

00007548 <s_baudrateScaler>:
    7548:	00000002 00000004 00000006 00000008     ................
    7558:	00000010 00000020 00000040 00000080     .... ...@.......
    7568:	00000100 00000200 00000400 00000800     ................
    7578:	00001000 00002000 00004000 00008000     ..... ...@......

00007588 <s_baudratePrescaler>:
    7588:	00000002 00000003 00000005 00000007     ................

00007598 <__func__.6231>:
    7598:	31434441 41485f36 6f435f4c 6769666e     ADC16_HAL_Config
    75a8:	006e6843 682f3a43 77697865 2f726165     Chn.C:/hexiwear/
    75b8:	49584548 52414557 73616d2d 2f726574     HEXIWEAR-master/
    75c8:	4d2f5753 4b34364b 482f5344 57495845     SW/MK64KDS/HEXIW
    75d8:	5f524145 534f5452 646f632f 44532f65     EAR_RTOS/code/SD
    75e8:	6c702f4b 6f667461 682f6d72 732f6c61     K/platform/hal/s
    75f8:	612f6372 36316364 6c73662f 6364615f     rc/adc16/fsl_adc
    7608:	685f3631 632e6c61 6e686300 756f7247     16_hal.c.chnGrou
    7618:	203c2070 5f4c5346 54414546 5f455255     p < FSL_FEATURE_
    7628:	31434441 4f435f36 5245564e 4e4f4953     ADC16_CONVERSION
    7638:	4e4f435f 4c4f5254 554f435f 0000544e     _CONTROL_COUNT..

00007648 <g_uartBase>:
    7648:	4006a000 4006b000 4006c000 4006d000     ...@...@...@...@
    7658:	400ea000 400eb000                       ...@...@

00007660 <__func__.8919>:
    7660:	54524155 5652445f 736e495f 6c6c6174     UART_DRV_Install
    7670:	61437852 61626c6c 55006b63                       RxCallback.

0000767b <__func__.8938>:
    767b:	54524155 5652445f 6e65535f 74614464     UART_DRV_SendDat
    768b:	6f6c4261 6e696b63 41550067                       aBlocking.

00007695 <__func__.8896>:
    7695:	54524155 5652445f 696e495f 3a430074     UART_DRV_Init.C:
    76a5:	7865682f 61657769 45482f72 45574958     /hexiwear/HEXIWE
    76b5:	6d2d5241 65747361 57532f72 364b4d2f     AR-master/SW/MK6
    76c5:	53444b34 5845482f 41455749 54525f52     4KDS/HEXIWEAR_RT
    76d5:	632f534f 2f65646f 2f4b4453 74616c70     OS/code/SDK/plat
    76e5:	6d726f66 6972642f 73726576 6372732f     form/drivers/src
    76f5:	7261752f 73662f74 61755f6c 645f7472     /uart/fsl_uart_d
    7705:	65766972 00632e72 74736e69 65636e61     river.c.instance
    7715:	55203c20 5f545241 54534e49 45434e41      < UART_INSTANCE
    7725:	554f435f 7500544e 53747261 65746174     _COUNT.uartState
    7735:	20727450 75202626 55747261 43726573     Ptr && uartUserC
    7745:	69666e6f 5f670067 74726175 65736142     onfig.g_uartBase
    7755:	736e695b 636e6174 63005d65 65685c3a     [instance].c:\he
    7765:	65776978 685c7261 77697865 2d726165     xiwear\hexiwear-
    7775:	7473616d 735c7265 6b6d5c77 646b3436     master\sw\mk64kd
    7785:	65685c73 65776978 725f7261 5c736f74     s\hexiwear_rtos\
    7795:	65646f63 6b64735c 616c705c 726f6674     code\sdk\platfor
    77a5:	79735c6d 6d657473 636e695c 6c73665c     m\system\inc\fsl
    77b5:	746e695f 75727265 6d5f7470 67616e61     _interrupt_manag
    77c5:	682e7265 3c203000 7269203d 6d754e71     er.h.0 <= irqNum
    77d5:	00726562 4e717269 65626d75 3d3c2072     ber.irqNumber <=
    77e5:	4c534620 4145465f 45525554 544e495f      FSL_FEATURE_INT
    77f5:	55525245 495f5450 4d5f5152 74005841     ERRUPT_IRQ_MAX.t
    7805:	66754278 78720066 66667542 52415500              xBuff.rxBuff.

00007812 <__func__.9019>:
    7812:	54524155 5652445f 6d6f435f 74656c70     UART_DRV_Complet
    7822:	6e655365 74614464 4e490061                       eSendData.

0000782c <__func__.8869>:
    782c:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    783c:	41550051                                         Q.

0000783e <__func__.9027>:
    783e:	54524155 5652445f 6174535f 65537472     UART_DRV_StartSe
    784e:	6144646e 55006174                                ndData.

00007855 <__func__.9033>:
    7855:	54524155 5652445f 6d6f435f 74656c70     UART_DRV_Complet
    7865:	63655265 65766965 61746144 00002f00              eReceiveData.

00007872 <g_rtcSecondsIrqId>:
    7872:	d000002f                                         /.

00007874 <g_rtcBase>:
    7874:	4003d000                                ...@

00007878 <g_rtcIrqId>:
    7878:	2f3a432e 69786568 72616577 5845482f     .C:/hexiwear/HEX
    7888:	41455749 616d2d52 72657473 2f57532f     IWEAR-master/SW/
    7898:	34364b4d 2f53444b 49584548 52414557     MK64KDS/HEXIWEAR
    78a8:	4f54525f 6f632f53 532f6564 702f4b44     _RTOS/code/SDK/p
    78b8:	6674616c 2f6d726f 76697264 2f737265     latform/drivers/
    78c8:	2f637273 2f637472 5f6c7366 5f637472     src/rtc/fsl_rtc_
    78d8:	76697264 632e7265 74616400 6d697465     driver.c.datetim
    78e8:	6c610065 546d7261 00656d69 65746164     e.alarmTime.date
    78f8:	70657200 41746165 6d72616c 74617453     .repeatAlarmStat
    7908:	5f730065 52637472 61657065 616c4174     e.s_rtcRepeatAla
    7918:	74536d72 00657461 72616c61 7065526d     rmState.alarmRep
    7928:	65746e49 6c617672 544e4900                       Interval.

00007931 <__func__.6402>:
    7931:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    7941:	00000051                                         Q..

00007944 <g_lptmrBase>:
    7944:	40040000                                ...@

00007948 <g_lptmrIrqId>:
    7948:	54504c3a                                         :

00007949 <__func__.7948>:
    7949:	4d54504c 52445f52 6e495f56 4c007469              LPTMR_DRV_Init.

00007958 <__func__.8000>:
    7958:	4d54504c 52445f52 52495f56 6e614851     LPTMR_DRV_IRQHan
    7968:	72656c64 2f3a4300 69786568 72616577     dler.C:/hexiwear
    7978:	5845482f 41455749 616d2d52 72657473     /HEXIWEAR-master
    7988:	2f57532f 34364b4d 2f53444b 49584548     /SW/MK64KDS/HEXI
    7998:	52414557 4f54525f 6f632f53 532f6564     WEAR_RTOS/code/S
    79a8:	702f4b44 6674616c 2f6d726f 76697264     DK/platform/driv
    79b8:	2f737265 2f637273 6d74706c 73662f72     ers/src/lptmr/fs
    79c8:	706c5f6c 5f726d74 76697264 632e7265     l_lptmr_driver.c
    79d8:	736e6900 636e6174 203c2065 4d54504c     .instance < LPTM
    79e8:	4e495f52 4e415453 435f4543 544e554f     R_INSTANCE_COUNT
    79f8:	4f4c4300 535f4b43 475f5359 704c7465     .CLOCK_SYS_GetLp
    7a08:	47726d74 43657461 6928646d 6174736e     tmrGateCmd(insta
    7a18:	2965636e 20737500 0030203e 736c7570     nce).us > 0.puls
    7a28:	72655065 43646f69 746e756f 30203e20     ePeriodCount > 0
	...

00007a39 <__func__.6911>:
    7a39:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    7a49:	4e490051                                         Q.

00007a4b <__func__.6915>:
    7a4b:	5f544e49 5f535953 61736944 49656c62     INT_SYS_DisableI
    7a5b:	18005152                                         RQ.

00007a5e <g_i2cIrqId>:
    7a5e:	004a1918 60000000                                ..J...

00007a64 <g_i2cBase>:
    7a64:	40066000 40067000 400e6000              .`.@.p.@.`.@

00007a70 <__func__.8648>:
    7a70:	5f433249 5f565244 7473614d 6e497265     I2C_DRV_MasterIn
    7a80:	49007469                                         it.

00007a83 <__func__.8660>:
    7a83:	5f433249 5f565244 7473614d 65537265     I2C_DRV_MasterSe
    7a93:	75614274 74615264 4e490065                       tBaudRate.

00007a9d <__func__.8605>:
    7a9d:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    7aad:	32490051                                         Q.

00007aaf <__func__.8719>:
    7aaf:	5f433249 5f565244 7473614d 52497265     I2C_DRV_MasterIR
    7abf:	6e614851 72656c64 2f3a4300 69786568     QHandler.C:/hexi
    7acf:	72616577 5845482f 41455749 616d2d52     wear/HEXIWEAR-ma
    7adf:	72657473 2f57532f 34364b4d 2f53444b     ster/SW/MK64KDS/
    7aef:	49584548 52414557 4f54525f 6f632f53     HEXIWEAR_RTOS/co
    7aff:	532f6564 702f4b44 6674616c 2f6d726f     de/SDK/platform/
    7b0f:	76697264 2f737265 2f637273 2f633269     drivers/src/i2c/
    7b1f:	5f6c7366 5f633269 7473616d 645f7265     fsl_i2c_master_d
    7b2f:	65766972 00632e72 74736e69 65636e61     river.c.instance
    7b3f:	49203c20 495f4332 4154534e 5f45434e      < I2C_INSTANCE_
    7b4f:	4e554f43 616d0054 72657473 76656400     COUNT.master.dev
    7b5f:	00656369                                ice.

00007b63 <__func__.8739>:
    7b63:	5f433249 5f565244 706d6f43 6574656c     I2C_DRV_Complete
    7b73:	6e617254 72656673 2f3a4300 69786568     Transfer.C:/hexi
    7b83:	72616577 5845482f 41455749 616d2d52     wear/HEXIWEAR-ma
    7b93:	72657473 2f57532f 34364b4d 2f53444b     ster/SW/MK64KDS/
    7ba3:	49584548 52414557 4f54525f 6f632f53     HEXIWEAR_RTOS/co
    7bb3:	532f6564 702f4b44 6674616c 2f6d726f     de/SDK/platform/
    7bc3:	76697264 2f737265 2f637273 2f633269     drivers/src/i2c/
    7bd3:	5f6c7366 5f633269 72616873 665f6465     fsl_i2c_shared_f
    7be3:	74636e75 2e6e6f69 32490063                       unction.c.

00007bed <__func__.6241>:
    7bed:	5f433249 5f565244 48515249 6c646e61     I2C_DRV_IRQHandl
    7bfd:	49007265                                         er.

00007c00 <__func__.8709>:
    7c00:	5f433249 5f565244 76616c53 51524965     I2C_DRV_SlaveIRQ
    7c10:	646e6148 0072656c 682f3a43 77697865     Handler.C:/hexiw
    7c20:	2f726165 49584548 52414557 73616d2d     ear/HEXIWEAR-mas
    7c30:	2f726574 4d2f5753 4b34364b 482f5344     ter/SW/MK64KDS/H
    7c40:	57495845 5f524145 534f5452 646f632f     EXIWEAR_RTOS/cod
    7c50:	44532f65 6c702f4b 6f667461 642f6d72     e/SDK/platform/d
    7c60:	65766972 732f7372 692f6372 662f6332     rivers/src/i2c/f
    7c70:	695f6c73 735f6332 6576616c 6972645f     sl_i2c_slave_dri
    7c80:	2e726576 6c730063 00657661              ver.c.slave.

00007c8c <g_gpioBase>:
    7c8c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    7c9c:	400ff100                                ...@

00007ca0 <g_portBase>:
    7ca0:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    7cb0:	4004d000                                ...@

00007cb4 <g_portIrqId>:
    7cb4:	3e3d3c3b 544e493f                                ;<=>?

00007cb9 <__func__.7869>:
    7cb9:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    7cc9:	50470051                                         Q.

00007ccb <__func__.6207>:
    7ccb:	4f495047 4c41485f 656c435f 69507261     GPIO_HAL_ClearPi
    7cdb:	74754f6e 00747570                       nOutput.

00007ce3 <__func__.6104>:
    7ce3:	54524f50 4c41485f 7465535f 4d78754d     PORT_HAL_SetMuxM
    7cf3:	0065646f 685c3a63 77697865 5c726165     ode.c:\hexiwear\
    7d03:	69786568 72616577 73616d2d 5c726574     hexiwear-master\
    7d13:	6d5c7773 6b34366b 685c7364 77697865     sw\mk64kds\hexiw
    7d23:	5f726165 736f7472 646f635c 64735c65     ear_rtos\code\sd
    7d33:	6c705c6b 6f667461 685c6d72 695c6c61     k\platform\hal\i
    7d43:	665c636e 705f6c73 5f74726f 2e6c6168     nc\fsl_port_hal.
    7d53:	69700068 203c206e 00553233 685c3a63     h.pin < 32U.c:\h
    7d63:	77697865 5c726165 69786568 72616577     exiwear\hexiwear
    7d73:	73616d2d 5c726574 6d5c7773 6b34366b     -master\sw\mk64k
    7d83:	685c7364 77697865 5f726165 736f7472     ds\hexiwear_rtos
    7d93:	646f635c 64735c65 6c705c6b 6f667461     \code\sdk\platfo
    7da3:	685c6d72 695c6c61 665c636e 675f6c73     rm\hal\inc\fsl_g
    7db3:	5f6f6970 2e6c6168 50470068                       pio_hal.h.

00007dbd <__func__.6202>:
    7dbd:	4f495047 4c41485f 7465535f 4f6e6950     GPIO_HAL_SetPinO
    7dcd:	75707475 00000074                                utput..

00007dd4 <g_dmamuxBase>:
    7dd4:	40021000                                ...@

00007dd8 <g_edmaBase>:
    7dd8:	40008000                                ...@

00007ddc <g_edmaErrIrqId>:
    7ddc:	02010010                                         .

00007ddd <g_edmaIrqId>:
    7ddd:	03020100 07060504 0b0a0908 0f0e0d0c     ................
    7ded:	685c3a63 77697865 5c726165 69786568     c:\hexiwear\hexi
    7dfd:	72616577 73616d2d 5c726574 6d5c7773     wear-master\sw\m
    7e0d:	6b34366b 685c7364 77697865 5f726165     k64kds\hexiwear_
    7e1d:	736f7472 646f635c 64735c65 6c705c6b     rtos\code\sdk\pl
    7e2d:	6f667461 685c6d72 695c6c61 665c636e     atform\hal\inc\f
    7e3d:	645f6c73 756d616d 61685f78 00682e6c     sl_dmamux_hal.h.
    7e4d:	6e616863 206c656e 5346203c 45465f4c     channel < FSL_FE
    7e5d:	52555441 4d445f45 58554d41 444f4d5f     ATURE_DMAMUX_MOD
    7e6d:	5f454c55 4e414843 004c454e 682f3a43     ULE_CHANNEL.C:/h
    7e7d:	77697865 2f726165 49584548 52414557     exiwear/HEXIWEAR
    7e8d:	73616d2d 2f726574 4d2f5753 4b34364b     -master/SW/MK64K
    7e9d:	482f5344 57495845 5f524145 534f5452     DS/HEXIWEAR_RTOS
    7ead:	646f632f 44532f65 6c702f4b 6f667461     /code/SDK/platfo
    7ebd:	642f6d72 65766972 732f7372 652f6372     rm/drivers/src/e
    7ecd:	2f616d64 5f6c7366 616d6465 6972645f     dma/fsl_edma_dri
    7edd:	2e726576 4e490063                                ver.c.

00007ee3 <__func__.8971>:
    7ee3:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    7ef3:	1b1a0051                                         Q.

00007ef5 <g_dspiIrqId>:
    7ef5:	00411b1a                                         ..A

00007ef8 <g_dspiBase>:
    7ef8:	4002c000 4002d000 400ac000              ...@...@...@

00007f04 <__func__.9322>:
    7f04:	49505344 5652445f 6d64455f 73614d61     DSPI_DRV_EdmaMas
    7f14:	43726574 69666e6f 65727567 00737542     terConfigureBus.

00007f24 <__func__.9273>:
    7f24:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    7f34:	44450051                                         Q.

00007f36 <__func__.7337>:
    7f36:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    7f46:	6e616843 4d6c656e 726f6a61 6b6e694c     ChannelMajorLink
    7f56:	5c3a6300 69786568 72616577 7865685c     .c:\hexiwear\hex
    7f66:	61657769 616d2d72 72657473 5c77735c     iwear-master\sw\
    7f76:	34366b6d 5c73646b 69786568 72616577     mk64kds\hexiwear
    7f86:	6f74725f 6f635c73 735c6564 705c6b64     _rtos\code\sdk\p
    7f96:	6674616c 5c6d726f 5c6c6168 5c636e69     latform\hal\inc\
    7fa6:	5f6c7366 616d6465 6c61685f 4300682e     fsl_edma_hal.h.C
    7fb6:	65682f3a 65776978 482f7261 57495845     :/hexiwear/HEXIW
    7fc6:	2d524145 7473616d 532f7265 4b4d2f57     EAR-master/SW/MK
    7fd6:	444b3436 45482f53 45574958 525f5241     64KDS/HEXIWEAR_R
    7fe6:	2f534f54 65646f63 4b44532f 616c702f     TOS/code/SDK/pla
    7ff6:	726f6674 72642f6d 72657669 72732f73     tform/drivers/sr
    8006:	73642f63 662f6970 645f6c73 5f697073     c/dspi/fsl_dspi_
    8016:	616d6465 73616d5f 5f726574 76697264     edma_master_driv
    8026:	632e7265 50534400                                er.c.

0000802b <__func__.6273>:
    802b:	49505344 5652445f 6d64455f 51524961     DSPI_DRV_EdmaIRQ
    803b:	646e6148 0072656c 682f3a43 77697865     Handler.C:/hexiw
    804b:	2f726165 49584548 52414557 73616d2d     ear/HEXIWEAR-mas
    805b:	2f726574 4d2f5753 4b34364b 482f5344     ter/SW/MK64KDS/H
    806b:	57495845 5f524145 534f5452 646f632f     EXIWEAR_RTOS/cod
    807b:	44532f65 6c702f4b 6f667461 642f6d72     e/SDK/platform/d
    808b:	65766972 732f7372 642f6372 2f697073     rivers/src/dspi/
    809b:	5f6c7366 69707364 6d64655f 68735f61     fsl_dspi_edma_sh
    80ab:	64657261 6e75665f 6f697463 00632e6e     ared_function.c.
    80bb:	74736e69 65636e61 53203c20 495f4950     instance < SPI_I
    80cb:	4154534e 5f45434e 4e554f43 44450054              NSTANCE_COUNT.

000080d9 <__func__.6832>:
    80d9:	414d4445 4c41485f 4354485f 74655344     EDMA_HAL_HTCDSet
    80e9:	43746e49 4300646d 65682f3a 65776978     IntCmd.C:/hexiwe
    80f9:	482f7261 57495845 2d524145 7473616d     ar/HEXIWEAR-mast
    8109:	532f7265 4b4d2f57 444b3436 45482f53     er/SW/MK64KDS/HE
    8119:	45574958 525f5241 2f534f54 65646f63     XIWEAR_RTOS/code
    8129:	4b44532f 616c702f 726f6674 72642f6d     /SDK/platform/dr
    8139:	72657669 72732f73 73642f63 662f6970     ivers/src/dspi/f
    8149:	645f6c73 5f697073 616d6465 616c735f     sl_dspi_edma_sla
    8159:	645f6576 65766972 00632e72              ve_driver.c.

00008165 <g_adcIrqId>:
    8165:	00004927                                         'I.

00008168 <g_adcBase>:
    8168:	4003b000 400bb000                       ...@...@

00008170 <__func__.7919>:
    8170:	31434441 52445f36 6f435f56 6769666e     ADC16_DRV_Config
    8180:	766e6f43 006e6843                       ConvChn.

00008188 <__func__.7889>:
    8188:	31434441 52445f36 6e495f56 63007469     ADC16_DRV_Init.c
    8198:	65685c3a 65776978 685c7261 77697865     :\hexiwear\hexiw
    81a8:	2d726165 7473616d 735c7265 6b6d5c77     ear-master\sw\mk
    81b8:	646b3436 65685c73 65776978 725f7261     64kds\hexiwear_r
    81c8:	5c736f74 65646f63 6b64735c 616c705c     tos\code\sdk\pla
    81d8:	726f6674 61685c6d 6e695c6c 73665c63     tform\hal\inc\fs
    81e8:	64615f6c 5f363163 2e6c6168 3a430068     l_adc16_hal.h.C:
    81f8:	7865682f 61657769 45482f72 45574958     /hexiwear/HEXIWE
    8208:	6d2d5241 65747361 57532f72 364b4d2f     AR-master/SW/MK6
    8218:	53444b34 5845482f 41455749 54525f52     4KDS/HEXIWEAR_RT
    8228:	632f534f 2f65646f 2f4b4453 74616c70     OS/code/SDK/plat
    8238:	6d726f66 6972642f 73726576 6372732f     form/drivers/src
    8248:	6364612f 662f3631 615f6c73 36316364     /adc16/fsl_adc16
    8258:	6972645f 2e726576 6e690063 6e617473     _driver.c.instan
    8268:	3c206563 43444120 534e495f 434e4154     ce < ADC_INSTANC
    8278:	4f435f45 00544e55                       E_COUNT.

00008280 <__func__.7857>:
    8280:	5f544e49 5f535953 62616e45 5249656c     INT_SYS_EnableIR
    8290:	00000051                                         Q.

00008292 <BATTERY_ADC_InitConfig>:
    8292:	03000000 03010000 00000000              ............

0000829e <BATTERY_ADC_ChnConfig>:
    829e:	00000010 84000000                                ......

000082a4 <DEBUG_UART_InitConfig0>:
    82a4:	00038400 00000100                       ........

000082ac <DMA_controller_InitConfig0>:
	...

000082ae <FLASH_SPI_MasterConfig>:
    82ae:	01000000 12000001                                ......

000082b4 <FLASH_SPI_BusConfig>:
    82b4:	007a1200 00000008 00000000              ..z.........

000082c0 <FS_I2C_MasterConfig>:
    82c0:	0000001e 00000064                       ....d...

000082c8 <BAT_CHG_cfg>:
    82c8:	0000020c 01010000 00000000 ffffffff     ................
	...

000082e0 <FLASH_cfg>:
    82e0:	00000304 00000001 00000001 ffffffff     ................
	...

000082f8 <KW40_GPIO_cfg>:
    82f8:	0000041a 00000001 00000001 0000030e     ................
    8308:	00000000 00000001 ffffffff 00000000     ................
    8318:	00000000                                ....

0000831c <OLED_cfg>:
    831c:	00000114 00000001 00000001 00000406     ................
    832c:	00000000 00000001 0000030f 00000000     ................
    833c:	00000001 ffffffff 00000000 00000000     ................

0000834c <TAP_cfg>:
    834c:	00000201 00000000 00000000 0000030d     ................
	...
    8364:	ffffffff 00000000 00000000              ............

00008370 <RGB_cfg>:
    8370:	00000208 00000001 00000001 00000300     ................
    8380:	00000001 00000001 00000209 00000001     ................
    8390:	00000001 ffffffff 00000000 00000000     ................

000083a0 <VIBRO_cfg>:
    83a0:	00000109 00000000 00000001 ffffffff     ................
	...

000083b8 <PWR_cfg>:
    83b8:	0000001d 00000000 00000001 0000010c     ................
    83c8:	00000001 00000001 0000020d 00000001     ................
    83d8:	00000001 0000020e 00000000 00010001     ................
    83e8:	00000117 00000001 00010001 ffffffff     ................
	...

00008400 <KW40_UART_InitConfig0>:
    8400:	00038400 00000100                       ........

00008408 <NFS_I2C_MasterConfig>:
    8408:	00000000 00000064                       ....d...

00008410 <OLED_SPI_BusConfig>:
    8410:	007a1200 00000008 00000101              ..z.........

0000841c <OLED_SPI_MasterConfig>:
    841c:	01000000 00000001                                .....

00008421 <sensor_timer_cfg>:
    8421:	00000000 01010100                       ........

00008429 <guiFont_Tahoma_8_Regular>:
    8429:	00200000 100d007f 00018803 00019502     .. .............
    8439:	0001a203 0001af07 0001bc05 0001c90a     ................
    8449:	0001e307 0001f001 0001fd03 00020a03     ................
    8459:	00021705 00022407 00023102 00023e03     .....$...1...>..
    8469:	00024b02 00025803 00026505 00027204     .K...X...e...r..
    8479:	00027f05 00028c05 00029905 0002a605     ................
    8489:	0002b305 0002c005 0002cd05 0002da05     ................
    8499:	0002e702 0002f402 00030107 00030e07     ................
    84a9:	00031b07 00032804 00033509 00034f06     .....(...5...O..
    84b9:	00035c05 00036906 00037606 00038305     .\...i...v......
    84c9:	00039005 00039d06 0003aa06 0003b703     ................
    84d9:	0003c404 0003d105 0003de04 0003eb07     ................
    84e9:	0003f806 00040507 00041205 00041f07     ................
    84f9:	00042c06 00043905 00044605 00045306     .,...9...F...S..
    8509:	00046005 00046d09 00048705 00049405     .`...m..........
    8519:	0004a105 0004ae03 0004bb03 0004c803     ................
    8529:	0004d507 0004e206 0004ef03 0004fc05     ................
    8539:	00050905 00051604 00052305 00053005     .........#...0..
    8549:	00053d03 00054a05 00055705 00056401     .=...J...W...d..
    8559:	00057102 00057e05 00058b01 00059807     .q...~..........
    8569:	0005a505 0005b205 0005bf05 0005cc05     ................
    8579:	0005d903 0005e604 0005f303 00060005     ................
    8589:	00060d05 00061a07 00062705 00063405     .........'...4..
    8599:	00064104 00064e04 00065b02 00066804     .A...N...[...h..
    85a9:	00067507 00068203 00000000 00000000     .u..............
	...
    85c1:	02020202 02000202 00000000 00050505     ................
	...
    85d9:	28280000 3f14147e 00000a0a 04040000     ..((~..?........
    85e9:	0e05051e 040f1414 00000004 46000000     ...............F
    85f9:	29004900 90002600 48025001 00018802     .I.).&...P.H....
    8609:	00000000 09060000 11292609 00004e31     .........&).1N..
    8619:	01010000 00000001 00000000 04000000     ................
    8629:	01010202 02010101 00000402 04020201     ................
    8639:	04040404 00010202 0e150400 00000415     ................
	...
    8651:	7f080808 00080808 00000000 00000000     ................
    8661:	02020000 00000102 00000000 00000700     ................
	...
    867d:	00000202 04040000 02020204 01010202     ................
    868d:	00000001 1111110e 0e111111 00000000     ................
    869d:	04060400 04040404 0000000e 110e0000     ................
    86ad:	02040810 00001f01 0e000000 100c1011     ................
    86bd:	000e1110 00000000 090a0c08 0808081f     ................
    86cd:	00000000 01011f00 1110100f 0000000e     ................
    86dd:	020c0000 11110f01 00000e11 1f000000     ................
    86ed:	04080810 00020204 00000000 0e11110e     ................
    86fd:	0e111111 00000000 11110e00 08101e11     ................
    870d:	00000006 00000000 00000202 00000202     ................
    871d:	00000000 00020200 02020200 00000001     ................
    872d:	0c304000 40300c02 00000000 00000000     .@0...0@........
    873d:	007f007f 00000000 02000000 3040300c     .............0@0
    874d:	0000020c 07000000 02040808 00020002     ................
    875d:	00000000 7c000000 39008200 25012501     .......|...9.%.%
    876d:	f9012501 3c000200 00000000 0c0c0000     .%.....<........
    877d:	3f121212 00002121 0f000000 110f1111     ...?!!..........
    878d:	000f1111 00000000 0101023c 3c020101     ........<......<
    879d:	00000000 21110f00 11212121 0000000f     .......!!!!.....
    87ad:	011f0000 01010f01 00001f01 1f000000     ................
    87bd:	011f0101 00010101 00000000 0101023c     ............<...
    87cd:	3c222139 00000000 21212100 2121213f     9!"<.....!!!?!!!
    87dd:	00000021 02070000 02020202 00000702     !...............
    87ed:	0e000000 08080808 00070808 00000000     ................
    87fd:	03050911 11090503 00000000 01010100     ................
    880d:	01010101 0000000f 63630000 49495555     ..........ccUUII
    881d:	00004141 23000000 29252523 00313129     AA.....##%%))11.
    882d:	00000000 4141221c 1c224141 00000000     ....."AAAA".....
    883d:	11110f00 01010f11 00000001 221c0000     ..............."
    884d:	41414141 60101c22 0f000000 0f111111     AAAA"..`........
    885d:	00211109 00000000 0e01011e 0f101010     ..!.............
    886d:	00000000 04041f00 04040404 00000004     ................
    887d:	21210000 21212121 00001e21 11000000     ..!!!!!!!.......
    888d:	0a0a1111 0004040a 00000000 11000000     ................
    889d:	11011101 aa00aa01 4400aa00 00004400     ...........D.D..
    88ad:	00000000 11110000 0a04040a 00001111     ................
    88bd:	11000000 040a0a11 00040404 00000000     ................
    88cd:	0408101f 1f010204 00000000 01010107     ................
    88dd:	01010101 00070101 01010100 02020202     ................
    88ed:	04040402 04070000 04040404 04040404     ................
    88fd:	00000007 41221408 00000000 00000000     ......"A........
	...
    8915:	003f0000 00040200 00000000 00000000     ..?.............
    8925:	00000000 1e100e00 001e1111 01000000     ................
    8935:	110f0101 0f111111 00000000 0e000000     ................
    8945:	01010101 0000000e 10101000 1111111e     ................
    8955:	00001e11 00000000 1f110e00 000e1101     ................
    8965:	06000000 01070101 01010101 00000000     ................
    8975:	1e000000 11111111 000e101e 01010100     ................
    8985:	1111110f 00001111 01000000 01010100     ................
    8995:	00010101 00000000 02030002 02020202     ................
    89a5:	00000102 09010101 09050305 00000011     ................
    89b5:	01010100 01010101 00000101 00000000     ................
    89c5:	49493700 00494949 00000000 110f0000     .7IIIII.........
    89d5:	11111111 00000000 0e000000 11111111     ................
    89e5:	0000000e 00000000 1111110f 01010f11     ................
    89f5:	00000000 11111e00 101e1111 00000010     ................
    8a05:	03050000 01010101 00000000 0e000000     ................
    8a15:	080c0301 00000007 01010000 01010107     ................
    8a25:	00000601 00000000 11111100 001e1111     ................
    8a35:	00000000 11110000 04040a0a 00000000     ................
    8a45:	49000000 22555549 00000022 00000000     ...IIUU"".......
    8a55:	04040a11 0000110a 00000000 0a111100     ................
    8a65:	0204040a 00000002 080f0000 0f010204     ................
    8a75:	00000000 04040408 04040304 00080404     ................
    8a85:	02020200 02020202 02020202 02010000     ................
    8a95:	0c020202 02020202 00000001 46000000     ...............F
    8aa5:	00003149 00000000 05050700 05050505     I1..............
    8ab5:	48000007 57495845 20524145 72617473     ...HEXIWEAR star
    8ac5:	00707574 636c6557 00656d6f 44007055     tup.Welcome.Up.D
    8ad5:	006e776f 7466654c 67695200 54007468     own.Left.Right.T
    8ae5:	316b7361 66202c00 74636e75 3a6e6f69     ask1., function:
    8af5:	73610020 74726573 206e6f69 22732522      .assertion "%s"
    8b05:	69616620 3a64656c 6c696620 25222065      failed: file "%
    8b15:	202c2273 656e696c 25642520 0a732573     s", line %d%s%s.
    8b25:	bc004300                                         .C.

00008b28 <_global_impure_ptr>:
    8b28:	1fff04bc 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
    8b38:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    8b48:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    8b58:	64636261 00006665                       abcdef..

00008b60 <__sf_fake_stdin>:
	...

00008b80 <__sf_fake_stdout>:
	...

00008ba0 <__sf_fake_stderr>:
	...

00008bc0 <_init>:
$t():
    8bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bc2:	bf00      	nop
    8bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8bc6:	bc08      	pop	{r3}
    8bc8:	469e      	mov	lr, r3
    8bca:	4770      	bx	lr

00008bcc <_fini>:
    8bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bce:	bf00      	nop
    8bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8bd2:	bc08      	pop	{r3}
    8bd4:	469e      	mov	lr, r3
    8bd6:	4770      	bx	lr
